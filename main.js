(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{UI:()=>ji,Ji:()=>Bi,mL:()=>Ei,Eh:()=>Di,jO:()=>Ii,Lz:()=>Li,sZ:()=>Ai,PM:()=>zi,gw:()=>Oi});const t=(e,t)=>{const r=new Uint32Array(t);Ii.queue.writeBuffer(e,0,r.buffer,0,t.length*Uint32Array.BYTES_PER_ELEMENT)},r=(e,r)=>{const n=new Uint32Array(e),i=Ii.createBuffer({size:n.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:r});return t(i,e),i},n=(e,t)=>{if(t instanceof Float32Array)Ii.queue.writeBuffer(e,0,t.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT);else{const r=new Float32Array(t);Ii.queue.writeBuffer(e,0,r.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT)}},i=(e,t,r)=>{const i=new Float32Array(t),s=e.createBuffer({size:i.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:r});return n(s,t),s};let s=1e-6,a=Float32Array;function o(e=0,t=0){const r=new a(2);return void 0!==e&&(r[0]=e,void 0!==t&&(r[1]=t)),r}let c=Float32Array;function u(e,t,r){const n=new c(3);return void 0!==e&&(n[0]=e,void 0!==t&&(n[1]=t,void 0!==r&&(n[2]=r))),n}const l=o;function h(e,t,r){return(r=r||new a(2))[0]=e[0]-t[0],r[1]=e[1]-t[1],r}const d=h;function f(e,t,r){return(r=r||new a(2))[0]=e[0]*t,r[1]=e[1]*t,r}const m=f;function p(e,t){return(t=t||new a(2))[0]=1/e[0],t[1]=1/e[1],t}const g=p;function y(e,t){return e[0]*t[0]+e[1]*t[1]}function _(e){const t=e[0],r=e[1];return Math.sqrt(t*t+r*r)}const x=_;function v(e){const t=e[0],r=e[1];return t*t+r*r}const b=v;function w(e,t){const r=e[0]-t[0],n=e[1]-t[1];return Math.sqrt(r*r+n*n)}const k=w;function T(e,t){const r=e[0]-t[0],n=e[1]-t[1];return r*r+n*n}const M=T;function S(e,t){return(t=t||new a(2))[0]=e[0],t[1]=e[1],t}const P=S;function E(e,t,r){return(r=r||new a(2))[0]=e[0]*t[0],r[1]=e[1]*t[1],r}const I=E;function A(e,t,r){return(r=r||new a(2))[0]=e[0]/t[0],r[1]=e[1]/t[1],r}const B=A;var O=Object.freeze({__proto__:null,create:o,setDefaultType:function(e){const t=a;return a=e,t},fromValues:l,set:function(e,t,r){return(r=r||new a(2))[0]=e,r[1]=t,r},ceil:function(e,t){return(t=t||new a(2))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(e,t){return(t=t||new a(2))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},round:function(e,t){return(t=t||new a(2))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},clamp:function(e,t=0,r=1,n){return(n=n||new a(2))[0]=Math.min(r,Math.max(t,e[0])),n[1]=Math.min(r,Math.max(t,e[1])),n},add:function(e,t,r){return(r=r||new a(2))[0]=e[0]+t[0],r[1]=e[1]+t[1],r},addScaled:function(e,t,r,n){return(n=n||new a(2))[0]=e[0]+t[0]*r,n[1]=e[1]+t[1]*r,n},angle:function(e,t){const r=e[0],n=e[1],i=e[0],s=e[1],a=Math.sqrt(r*r+n*n)*Math.sqrt(i*i+s*s),o=a&&y(e,t)/a;return Math.acos(o)},subtract:h,sub:d,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<s&&Math.abs(e[1]-t[1])<s},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]},lerp:function(e,t,r,n){return(n=n||new a(2))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n},lerpV:function(e,t,r,n){return(n=n||new a(2))[0]=e[0]+r[0]*(t[0]-e[0]),n[1]=e[1]+r[1]*(t[1]-e[1]),n},max:function(e,t,r){return(r=r||new a(2))[0]=Math.max(e[0],t[0]),r[1]=Math.max(e[1],t[1]),r},min:function(e,t,r){return(r=r||new a(2))[0]=Math.min(e[0],t[0]),r[1]=Math.min(e[1],t[1]),r},mulScalar:f,scale:m,divScalar:function(e,t,r){return(r=r||new a(2))[0]=e[0]/t,r[1]=e[1]/t,r},inverse:p,invert:g,cross:function(e,t,r){r=r||new c(3);const n=e[0]*t[1]-e[1]*t[0];return r[0]=0,r[1]=0,r[2]=n,r},dot:y,length:_,len:x,lengthSq:v,lenSq:b,distance:w,dist:k,distanceSq:T,distSq:M,normalize:function(e,t){t=t||new a(2);const r=e[0],n=e[1],i=Math.sqrt(r*r+n*n);return i>1e-5?(t[0]=r/i,t[1]=n/i):(t[0]=0,t[1]=0),t},negate:function(e,t){return(t=t||new a(2))[0]=-e[0],t[1]=-e[1],t},copy:S,clone:P,multiply:E,mul:I,divide:A,div:B,random:function(e=1,t){t=t||new a(2);const r=2*Math.random()*Math.PI;return t[0]=Math.cos(r)*e,t[1]=Math.sin(r)*e,t},zero:function(e){return(e=e||new a(2))[0]=0,e[1]=0,e},transformMat4:function(e,t,r){r=r||new a(2);const n=e[0],i=e[1];return r[0]=n*t[0]+i*t[4]+t[12],r[1]=n*t[1]+i*t[5]+t[13],r},transformMat3:function(e,t,r){r=r||new a(2);const n=e[0],i=e[1];return r[0]=t[0]*n+t[4]*i+t[8],r[1]=t[1]*n+t[5]*i+t[9],r}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);const z=u;function U(e,t,r){return(r=r||new c(3))[0]=e[0]-t[0],r[1]=e[1]-t[1],r[2]=e[2]-t[2],r}const R=U;function D(e,t,r){return(r=r||new c(3))[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r}const C=D;function N(e,t){return(t=t||new c(3))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}const j=N;function V(e,t,r){r=r||new c(3);const n=e[2]*t[0]-e[0]*t[2],i=e[0]*t[1]-e[1]*t[0];return r[0]=e[1]*t[2]-e[2]*t[1],r[1]=n,r[2]=i,r}function L(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function G(e){const t=e[0],r=e[1],n=e[2];return Math.sqrt(t*t+r*r+n*n)}const q=G;function F(e){const t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n}const Y=F;function $(e,t){const r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(r*r+n*n+i*i)}const W=$;function X(e,t){const r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return r*r+n*n+i*i}const Z=X;function H(e,t){t=t||new c(3);const r=e[0],n=e[1],i=e[2],s=Math.sqrt(r*r+n*n+i*i);return s>1e-5?(t[0]=r/s,t[1]=n/s,t[2]=i/s):(t[0]=0,t[1]=0,t[2]=0),t}function K(e,t){return(t=t||new c(3))[0]=e[0],t[1]=e[1],t[2]=e[2],t}const Q=K;function J(e,t,r){return(r=r||new c(3))[0]=e[0]*t[0],r[1]=e[1]*t[1],r[2]=e[2]*t[2],r}const ee=J;function te(e,t,r){return(r=r||new c(3))[0]=e[0]/t[0],r[1]=e[1]/t[1],r[2]=e[2]/t[2],r}const re=te;var ne=Object.freeze({__proto__:null,create:u,setDefaultType:function(e){const t=c;return c=e,t},fromValues:z,set:function(e,t,r,n){return(n=n||new c(3))[0]=e,n[1]=t,n[2]=r,n},ceil:function(e,t){return(t=t||new c(3))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(e,t){return(t=t||new c(3))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},round:function(e,t){return(t=t||new c(3))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},clamp:function(e,t=0,r=1,n){return(n=n||new c(3))[0]=Math.min(r,Math.max(t,e[0])),n[1]=Math.min(r,Math.max(t,e[1])),n[2]=Math.min(r,Math.max(t,e[2])),n},add:function(e,t,r){return(r=r||new c(3))[0]=e[0]+t[0],r[1]=e[1]+t[1],r[2]=e[2]+t[2],r},addScaled:function(e,t,r,n){return(n=n||new c(3))[0]=e[0]+t[0]*r,n[1]=e[1]+t[1]*r,n[2]=e[2]+t[2]*r,n},angle:function(e,t){const r=e[0],n=e[1],i=e[2],s=e[0],a=e[1],o=e[2],c=Math.sqrt(r*r+n*n+i*i)*Math.sqrt(s*s+a*a+o*o),u=c&&L(e,t)/c;return Math.acos(u)},subtract:U,sub:R,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<s&&Math.abs(e[1]-t[1])<s&&Math.abs(e[2]-t[2])<s},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},lerp:function(e,t,r,n){return(n=n||new c(3))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n[2]=e[2]+r*(t[2]-e[2]),n},lerpV:function(e,t,r,n){return(n=n||new c(3))[0]=e[0]+r[0]*(t[0]-e[0]),n[1]=e[1]+r[1]*(t[1]-e[1]),n[2]=e[2]+r[2]*(t[2]-e[2]),n},max:function(e,t,r){return(r=r||new c(3))[0]=Math.max(e[0],t[0]),r[1]=Math.max(e[1],t[1]),r[2]=Math.max(e[2],t[2]),r},min:function(e,t,r){return(r=r||new c(3))[0]=Math.min(e[0],t[0]),r[1]=Math.min(e[1],t[1]),r[2]=Math.min(e[2],t[2]),r},mulScalar:D,scale:C,divScalar:function(e,t,r){return(r=r||new c(3))[0]=e[0]/t,r[1]=e[1]/t,r[2]=e[2]/t,r},inverse:N,invert:j,cross:V,dot:L,length:G,len:q,lengthSq:F,lenSq:Y,distance:$,dist:W,distanceSq:X,distSq:Z,normalize:H,negate:function(e,t){return(t=t||new c(3))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},copy:K,clone:Q,multiply:J,mul:ee,divide:te,div:re,random:function(e=1,t){t=t||new c(3);const r=2*Math.random()*Math.PI,n=2*Math.random()-1,i=Math.sqrt(1-n*n)*e;return t[0]=Math.cos(r)*i,t[1]=Math.sin(r)*i,t[2]=n*e,t},zero:function(e){return(e=e||new c(3))[0]=0,e[1]=0,e[2]=0,e},transformMat4:function(e,t,r){r=r||new c(3);const n=e[0],i=e[1],s=e[2],a=t[3]*n+t[7]*i+t[11]*s+t[15]||1;return r[0]=(t[0]*n+t[4]*i+t[8]*s+t[12])/a,r[1]=(t[1]*n+t[5]*i+t[9]*s+t[13])/a,r[2]=(t[2]*n+t[6]*i+t[10]*s+t[14])/a,r},transformMat4Upper3x3:function(e,t,r){r=r||new c(3);const n=e[0],i=e[1],s=e[2];return r[0]=n*t[0]+i*t[4]+s*t[8],r[1]=n*t[1]+i*t[5]+s*t[9],r[2]=n*t[2]+i*t[6]+s*t[10],r},transformMat3:function(e,t,r){r=r||new c(3);const n=e[0],i=e[1],s=e[2];return r[0]=n*t[0]+i*t[4]+s*t[8],r[1]=n*t[1]+i*t[5]+s*t[9],r[2]=n*t[2]+i*t[6]+s*t[10],r},transformQuat:function(e,t,r){r=r||new c(3);const n=t[0],i=t[1],s=t[2],a=2*t[3],o=e[0],u=e[1],l=e[2],h=i*l-s*u,d=s*o-n*l,f=n*u-i*o;return r[0]=o+h*a+2*(i*f-s*d),r[1]=u+d*a+2*(s*h-n*f),r[2]=l+f*a+2*(n*d-i*h),r},getTranslation:function(e,t){return(t=t||new c(3))[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,r){const n=4*t;return(r=r||new c(3))[0]=e[n+0],r[1]=e[n+1],r[2]=e[n+2],r},getScaling:function(e,t){t=t||new c(3);const r=e[0],n=e[1],i=e[2],s=e[4],a=e[5],o=e[6],u=e[8],l=e[9],h=e[10];return t[0]=Math.sqrt(r*r+n*n+i*i),t[1]=Math.sqrt(s*s+a*a+o*o),t[2]=Math.sqrt(u*u+l*l+h*h),t}});let ie=Float32Array;function se(e,t){return(t=t||new ie(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}const ae=se;function oe(e){return(e=e||new ie(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function ce(e,t){t=t||new ie(16);const r=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5],c=e[6],u=e[7],l=e[8],h=e[9],d=e[10],f=e[11],m=e[12],p=e[13],g=e[14],y=e[15],_=d*y,x=g*f,v=c*y,b=g*u,w=c*f,k=d*u,T=i*y,M=g*s,S=i*f,P=d*s,E=i*u,I=c*s,A=l*p,B=m*h,O=a*p,z=m*o,U=a*h,R=l*o,D=r*p,C=m*n,N=r*h,j=l*n,V=r*o,L=a*n,G=_*o+b*h+w*p-(x*o+v*h+k*p),q=x*n+T*h+P*p-(_*n+M*h+S*p),F=v*n+M*o+E*p-(b*n+T*o+I*p),Y=k*n+S*o+I*h-(w*n+P*o+E*h),$=1/(r*G+a*q+l*F+m*Y);return t[0]=$*G,t[1]=$*q,t[2]=$*F,t[3]=$*Y,t[4]=$*(x*a+v*l+k*m-(_*a+b*l+w*m)),t[5]=$*(_*r+M*l+S*m-(x*r+T*l+P*m)),t[6]=$*(b*r+T*a+I*m-(v*r+M*a+E*m)),t[7]=$*(w*r+P*a+E*l-(k*r+S*a+I*l)),t[8]=$*(A*u+z*f+U*y-(B*u+O*f+R*y)),t[9]=$*(B*s+D*f+j*y-(A*s+C*f+N*y)),t[10]=$*(O*s+C*u+V*y-(z*s+D*u+L*y)),t[11]=$*(R*s+N*u+L*f-(U*s+j*u+V*f)),t[12]=$*(O*d+R*g+B*c-(U*g+A*c+z*d)),t[13]=$*(N*g+A*i+C*d-(D*d+j*g+B*i)),t[14]=$*(D*c+L*g+z*i-(V*g+O*i+C*c)),t[15]=$*(V*d+U*i+j*c-(N*c+L*d+R*i)),t}const ue=ce;function le(e,t,r){r=r||new ie(16);const n=e[0],i=e[1],s=e[2],a=e[3],o=e[4],c=e[5],u=e[6],l=e[7],h=e[8],d=e[9],f=e[10],m=e[11],p=e[12],g=e[13],y=e[14],_=e[15],x=t[0],v=t[1],b=t[2],w=t[3],k=t[4],T=t[5],M=t[6],S=t[7],P=t[8],E=t[9],I=t[10],A=t[11],B=t[12],O=t[13],z=t[14],U=t[15];return r[0]=n*x+o*v+h*b+p*w,r[1]=i*x+c*v+d*b+g*w,r[2]=s*x+u*v+f*b+y*w,r[3]=a*x+l*v+m*b+_*w,r[4]=n*k+o*T+h*M+p*S,r[5]=i*k+c*T+d*M+g*S,r[6]=s*k+u*T+f*M+y*S,r[7]=a*k+l*T+m*M+_*S,r[8]=n*P+o*E+h*I+p*A,r[9]=i*P+c*E+d*I+g*A,r[10]=s*P+u*E+f*I+y*A,r[11]=a*P+l*E+m*I+_*A,r[12]=n*B+o*O+h*z+p*U,r[13]=i*B+c*O+d*z+g*U,r[14]=s*B+u*O+f*z+y*U,r[15]=a*B+l*O+m*z+_*U,r}const he=le;let de,fe,me;function pe(e,t,r){r=r||new ie(16);let n=e[0],i=e[1],s=e[2];const a=Math.sqrt(n*n+i*i+s*s);n/=a,i/=a,s/=a;const o=n*n,c=i*i,u=s*s,l=Math.cos(t),h=Math.sin(t),d=1-l;return r[0]=o+(1-o)*l,r[1]=n*i*d+s*h,r[2]=n*s*d-i*h,r[3]=0,r[4]=n*i*d-s*h,r[5]=c+(1-c)*l,r[6]=i*s*d+n*h,r[7]=0,r[8]=n*s*d+i*h,r[9]=i*s*d-n*h,r[10]=u+(1-u)*l,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}const ge=pe;function ye(e,t,r,n){n=n||new ie(16);let i=t[0],s=t[1],a=t[2];const o=Math.sqrt(i*i+s*s+a*a);i/=o,s/=o,a/=o;const c=i*i,u=s*s,l=a*a,h=Math.cos(r),d=Math.sin(r),f=1-h,m=c+(1-c)*h,p=i*s*f+a*d,g=i*a*f-s*d,y=i*s*f-a*d,_=u+(1-u)*h,x=s*a*f+i*d,v=i*a*f+s*d,b=s*a*f-i*d,w=l+(1-l)*h,k=e[0],T=e[1],M=e[2],S=e[3],P=e[4],E=e[5],I=e[6],A=e[7],B=e[8],O=e[9],z=e[10],U=e[11];return n[0]=m*k+p*P+g*B,n[1]=m*T+p*E+g*O,n[2]=m*M+p*I+g*z,n[3]=m*S+p*A+g*U,n[4]=y*k+_*P+x*B,n[5]=y*T+_*E+x*O,n[6]=y*M+_*I+x*z,n[7]=y*S+_*A+x*U,n[8]=v*k+b*P+w*B,n[9]=v*T+b*E+w*O,n[10]=v*M+b*I+w*z,n[11]=v*S+b*A+w*U,e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n}const _e=ye;var xe=Object.freeze({__proto__:null,setDefaultType:function(e){const t=ie;return ie=e,t},create:function(e,t,r,n,i,s,a,o,c,u,l,h,d,f,m,p){const g=new ie(16);return void 0!==e&&(g[0]=e,void 0!==t&&(g[1]=t,void 0!==r&&(g[2]=r,void 0!==n&&(g[3]=n,void 0!==i&&(g[4]=i,void 0!==s&&(g[5]=s,void 0!==a&&(g[6]=a,void 0!==o&&(g[7]=o,void 0!==c&&(g[8]=c,void 0!==u&&(g[9]=u,void 0!==l&&(g[10]=l,void 0!==h&&(g[11]=h,void 0!==d&&(g[12]=d,void 0!==f&&(g[13]=f,void 0!==m&&(g[14]=m,void 0!==p&&(g[15]=p)))))))))))))))),g},set:function(e,t,r,n,i,s,a,o,c,u,l,h,d,f,m,p,g){return(g=g||new ie(16))[0]=e,g[1]=t,g[2]=r,g[3]=n,g[4]=i,g[5]=s,g[6]=a,g[7]=o,g[8]=c,g[9]=u,g[10]=l,g[11]=h,g[12]=d,g[13]=f,g[14]=m,g[15]=p,g},fromMat3:function(e,t){return(t=t||new ie(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=0,t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=0,t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromQuat:function(e,t){t=t||new ie(16);const r=e[0],n=e[1],i=e[2],s=e[3],a=r+r,o=n+n,c=i+i,u=r*a,l=n*a,h=n*o,d=i*a,f=i*o,m=i*c,p=s*a,g=s*o,y=s*c;return t[0]=1-h-m,t[1]=l+y,t[2]=d-g,t[3]=0,t[4]=l-y,t[5]=1-u-m,t[6]=f+p,t[7]=0,t[8]=d+g,t[9]=f-p,t[10]=1-u-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},negate:function(e,t){return(t=t||new ie(16))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=-e[7],t[8]=-e[8],t[9]=-e[9],t[10]=-e[10],t[11]=-e[11],t[12]=-e[12],t[13]=-e[13],t[14]=-e[14],t[15]=-e[15],t},copy:se,clone:ae,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<s&&Math.abs(e[1]-t[1])<s&&Math.abs(e[2]-t[2])<s&&Math.abs(e[3]-t[3])<s&&Math.abs(e[4]-t[4])<s&&Math.abs(e[5]-t[5])<s&&Math.abs(e[6]-t[6])<s&&Math.abs(e[7]-t[7])<s&&Math.abs(e[8]-t[8])<s&&Math.abs(e[9]-t[9])<s&&Math.abs(e[10]-t[10])<s&&Math.abs(e[11]-t[11])<s&&Math.abs(e[12]-t[12])<s&&Math.abs(e[13]-t[13])<s&&Math.abs(e[14]-t[14])<s&&Math.abs(e[15]-t[15])<s},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},identity:oe,transpose:function(e,t){if((t=t||new ie(16))===e){let r;return r=e[1],e[1]=e[4],e[4]=r,r=e[2],e[2]=e[8],e[8]=r,r=e[3],e[3]=e[12],e[12]=r,r=e[6],e[6]=e[9],e[9]=r,r=e[7],e[7]=e[13],e[13]=r,r=e[11],e[11]=e[14],e[14]=r,t}const r=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5],c=e[6],u=e[7],l=e[8],h=e[9],d=e[10],f=e[11],m=e[12],p=e[13],g=e[14],y=e[15];return t[0]=r,t[1]=a,t[2]=l,t[3]=m,t[4]=n,t[5]=o,t[6]=h,t[7]=p,t[8]=i,t[9]=c,t[10]=d,t[11]=g,t[12]=s,t[13]=u,t[14]=f,t[15]=y,t},inverse:ce,determinant:function(e){const t=e[0],r=e[1],n=e[2],i=e[3],s=e[4],a=e[5],o=e[6],c=e[7],u=e[8],l=e[9],h=e[10],d=e[11],f=e[12],m=e[13],p=e[14],g=e[15],y=h*g,_=p*d,x=o*g,v=p*c,b=o*d,w=h*c,k=n*g,T=p*i,M=n*d,S=h*i,P=n*c,E=o*i;return t*(y*a+v*l+b*m-(_*a+x*l+w*m))+s*(_*r+k*l+S*m-(y*r+T*l+M*m))+u*(x*r+T*a+P*m-(v*r+k*a+E*m))+f*(w*r+M*a+E*l-(b*r+S*a+P*l))},invert:ue,multiply:le,mul:he,setTranslation:function(e,t,r){return e!==(r=r||oe())&&(r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[8]=e[8],r[9]=e[9],r[10]=e[10],r[11]=e[11]),r[12]=t[0],r[13]=t[1],r[14]=t[2],r[15]=1,r},getTranslation:function(e,t){return(t=t||u())[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,r){const n=4*t;return(r=r||u())[0]=e[n+0],r[1]=e[n+1],r[2]=e[n+2],r},setAxis:function(e,t,r,n){n!==e&&(n=se(e,n));const i=4*r;return n[i+0]=t[0],n[i+1]=t[1],n[i+2]=t[2],n},getScaling:function(e,t){t=t||u();const r=e[0],n=e[1],i=e[2],s=e[4],a=e[5],o=e[6],c=e[8],l=e[9],h=e[10];return t[0]=Math.sqrt(r*r+n*n+i*i),t[1]=Math.sqrt(s*s+a*a+o*o),t[2]=Math.sqrt(c*c+l*l+h*h),t},perspective:function(e,t,r,n,i){i=i||new ie(16);const s=Math.tan(.5*Math.PI-.5*e);if(i[0]=s/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=s,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,n===1/0)i[10]=-1,i[14]=-r;else{const e=1/(r-n);i[10]=n*e,i[14]=n*r*e}return i},ortho:function(e,t,r,n,i,s,a){return(a=a||new ie(16))[0]=2/(t-e),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(n-r),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(i-s),a[11]=0,a[12]=(t+e)/(e-t),a[13]=(n+r)/(r-n),a[14]=i/(i-s),a[15]=1,a},frustum:function(e,t,r,n,i,s,a){const o=t-e,c=n-r,u=i-s;return(a=a||new ie(16))[0]=2*i/o,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2*i/c,a[6]=0,a[7]=0,a[8]=(e+t)/o,a[9]=(n+r)/c,a[10]=s/u,a[11]=-1,a[12]=0,a[13]=0,a[14]=i*s/u,a[15]=0,a},aim:function(e,t,r,n){return n=n||new ie(16),de=de||u(),fe=fe||u(),me=me||u(),H(U(t,e,me),me),H(V(r,me,de),de),H(V(me,de,fe),fe),n[0]=de[0],n[1]=de[1],n[2]=de[2],n[3]=0,n[4]=fe[0],n[5]=fe[1],n[6]=fe[2],n[7]=0,n[8]=me[0],n[9]=me[1],n[10]=me[2],n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n},cameraAim:function(e,t,r,n){return n=n||new ie(16),de=de||u(),fe=fe||u(),me=me||u(),H(U(e,t,me),me),H(V(r,me,de),de),H(V(me,de,fe),fe),n[0]=de[0],n[1]=de[1],n[2]=de[2],n[3]=0,n[4]=fe[0],n[5]=fe[1],n[6]=fe[2],n[7]=0,n[8]=me[0],n[9]=me[1],n[10]=me[2],n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n},lookAt:function(e,t,r,n){return n=n||new ie(16),de=de||u(),fe=fe||u(),me=me||u(),H(U(e,t,me),me),H(V(r,me,de),de),H(V(me,de,fe),fe),n[0]=de[0],n[1]=fe[0],n[2]=me[0],n[3]=0,n[4]=de[1],n[5]=fe[1],n[6]=me[1],n[7]=0,n[8]=de[2],n[9]=fe[2],n[10]=me[2],n[11]=0,n[12]=-(de[0]*e[0]+de[1]*e[1]+de[2]*e[2]),n[13]=-(fe[0]*e[0]+fe[1]*e[1]+fe[2]*e[2]),n[14]=-(me[0]*e[0]+me[1]*e[1]+me[2]*e[2]),n[15]=1,n},translation:function(e,t){return(t=t||new ie(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},translate:function(e,t,r){r=r||new ie(16);const n=t[0],i=t[1],s=t[2],a=e[0],o=e[1],c=e[2],u=e[3],l=e[4],h=e[5],d=e[6],f=e[7],m=e[8],p=e[9],g=e[10],y=e[11],_=e[12],x=e[13],v=e[14],b=e[15];return e!==r&&(r[0]=a,r[1]=o,r[2]=c,r[3]=u,r[4]=l,r[5]=h,r[6]=d,r[7]=f,r[8]=m,r[9]=p,r[10]=g,r[11]=y),r[12]=a*n+l*i+m*s+_,r[13]=o*n+h*i+p*s+x,r[14]=c*n+d*i+g*s+v,r[15]=u*n+f*i+y*s+b,r},rotationX:function(e,t){t=t||new ie(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateX:function(e,t,r){r=r||new ie(16);const n=e[4],i=e[5],s=e[6],a=e[7],o=e[8],c=e[9],u=e[10],l=e[11],h=Math.cos(t),d=Math.sin(t);return r[4]=h*n+d*o,r[5]=h*i+d*c,r[6]=h*s+d*u,r[7]=h*a+d*l,r[8]=h*o-d*n,r[9]=h*c-d*i,r[10]=h*u-d*s,r[11]=h*l-d*a,e!==r&&(r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},rotationY:function(e,t){t=t||new ie(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateY:function(e,t,r){r=r||new ie(16);const n=e[0],i=e[1],s=e[2],a=e[3],o=e[8],c=e[9],u=e[10],l=e[11],h=Math.cos(t),d=Math.sin(t);return r[0]=h*n-d*o,r[1]=h*i-d*c,r[2]=h*s-d*u,r[3]=h*a-d*l,r[8]=h*o+d*n,r[9]=h*c+d*i,r[10]=h*u+d*s,r[11]=h*l+d*a,e!==r&&(r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},rotationZ:function(e,t){t=t||new ie(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateZ:function(e,t,r){r=r||new ie(16);const n=e[0],i=e[1],s=e[2],a=e[3],o=e[4],c=e[5],u=e[6],l=e[7],h=Math.cos(t),d=Math.sin(t);return r[0]=h*n+d*o,r[1]=h*i+d*c,r[2]=h*s+d*u,r[3]=h*a+d*l,r[4]=h*o-d*n,r[5]=h*c-d*i,r[6]=h*u-d*s,r[7]=h*l-d*a,e!==r&&(r[8]=e[8],r[9]=e[9],r[10]=e[10],r[11]=e[11],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},axisRotation:pe,rotation:ge,axisRotate:ye,rotate:_e,scaling:function(e,t){return(t=t||new ie(16))[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},scale:function(e,t,r){r=r||new ie(16);const n=t[0],i=t[1],s=t[2];return r[0]=n*e[0],r[1]=n*e[1],r[2]=n*e[2],r[3]=n*e[3],r[4]=i*e[4],r[5]=i*e[5],r[6]=i*e[6],r[7]=i*e[7],r[8]=s*e[8],r[9]=s*e[9],r[10]=s*e[10],r[11]=s*e[11],e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},uniformScaling:function(e,t){return(t=t||new ie(16))[0]=e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},uniformScale:function(e,t,r){return(r=r||new ie(16))[0]=t*e[0],r[1]=t*e[1],r[2]=t*e[2],r[3]=t*e[3],r[4]=t*e[4],r[5]=t*e[5],r[6]=t*e[6],r[7]=t*e[7],r[8]=t*e[8],r[9]=t*e[9],r[10]=t*e[10],r[11]=t*e[11],e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r}});let ve=Float32Array;function be(e,t,r,n){const i=new ve(4);return void 0!==e&&(i[0]=e,void 0!==t&&(i[1]=t,void 0!==r&&(i[2]=r,void 0!==n&&(i[3]=n)))),i}const we=be;function ke(e,t,r){r=r||new ve(4);const n=.5*t,i=Math.sin(n);return r[0]=i*e[0],r[1]=i*e[1],r[2]=i*e[2],r[3]=Math.cos(n),r}function Te(e,t,r){r=r||new ve(4);const n=e[0],i=e[1],s=e[2],a=e[3],o=t[0],c=t[1],u=t[2],l=t[3];return r[0]=n*l+a*o+i*u-s*c,r[1]=i*l+a*c+s*o-n*u,r[2]=s*l+a*u+n*c-i*o,r[3]=a*l-n*o-i*c-s*u,r}const Me=Te;function Se(e,t,r,n){n=n||new ve(4);const i=e[0],a=e[1],o=e[2],c=e[3];let u,l,h=t[0],d=t[1],f=t[2],m=t[3],p=i*h+a*d+o*f+c*m;if(p<0&&(p=-p,h=-h,d=-d,f=-f,m=-m),1-p>s){const e=Math.acos(p),t=Math.sin(e);u=Math.sin((1-r)*e)/t,l=Math.sin(r*e)/t}else u=1-r,l=r;return n[0]=u*i+l*h,n[1]=u*a+l*d,n[2]=u*o+l*f,n[3]=u*c+l*m,n}function Pe(e,t){return(t=t||new ve(4))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}const Ee=Pe;function Ie(e,t,r){return(r=r||new ve(4))[0]=e[0]-t[0],r[1]=e[1]-t[1],r[2]=e[2]-t[2],r[3]=e[3]-t[3],r}const Ae=Ie;function Be(e,t,r){return(r=r||new ve(4))[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r[3]=e[3]*t,r}const Oe=Be;function ze(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function Ue(e){const t=e[0],r=e[1],n=e[2],i=e[3];return Math.sqrt(t*t+r*r+n*n+i*i)}const Re=Ue;function De(e){const t=e[0],r=e[1],n=e[2],i=e[3];return t*t+r*r+n*n+i*i}const Ce=De;function Ne(e,t){t=t||new ve(4);const r=e[0],n=e[1],i=e[2],s=e[3],a=Math.sqrt(r*r+n*n+i*i+s*s);return a>1e-5?(t[0]=r/a,t[1]=n/a,t[2]=i/a,t[3]=s/a):(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}let je,Ve,Le,Ge,qe;var Fe=Object.freeze({__proto__:null,create:be,setDefaultType:function(e){const t=ve;return ve=e,t},fromValues:we,set:function(e,t,r,n,i){return(i=i||new ve(4))[0]=e,i[1]=t,i[2]=r,i[3]=n,i},fromAxisAngle:ke,toAxisAngle:function(e,t){t=t||u(4);const r=2*Math.acos(e[3]),n=Math.sin(.5*r);return n>s?(t[0]=e[0]/n,t[1]=e[1]/n,t[2]=e[2]/n):(t[0]=1,t[1]=0,t[2]=0),{angle:r,axis:t}},angle:function(e,t){const r=ze(e,t);return Math.acos(2*r*r-1)},multiply:Te,mul:Me,rotateX:function(e,t,r){r=r||new ve(4);const n=.5*t,i=e[0],s=e[1],a=e[2],o=e[3],c=Math.sin(n),u=Math.cos(n);return r[0]=i*u+o*c,r[1]=s*u+a*c,r[2]=a*u-s*c,r[3]=o*u-i*c,r},rotateY:function(e,t,r){r=r||new ve(4);const n=.5*t,i=e[0],s=e[1],a=e[2],o=e[3],c=Math.sin(n),u=Math.cos(n);return r[0]=i*u-a*c,r[1]=s*u+o*c,r[2]=a*u+i*c,r[3]=o*u-s*c,r},rotateZ:function(e,t,r){r=r||new ve(4);const n=.5*t,i=e[0],s=e[1],a=e[2],o=e[3],c=Math.sin(n),u=Math.cos(n);return r[0]=i*u+s*c,r[1]=s*u-i*c,r[2]=a*u+o*c,r[3]=o*u-a*c,r},slerp:Se,inverse:function(e,t){t=t||new ve(4);const r=e[0],n=e[1],i=e[2],s=e[3],a=r*r+n*n+i*i+s*s,o=a?1/a:0;return t[0]=-r*o,t[1]=-n*o,t[2]=-i*o,t[3]=s*o,t},conjugate:function(e,t){return(t=t||new ve(4))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t},fromMat:function(e,t){t=t||new ve(4);const r=e[0]+e[5]+e[10];if(r>0){const n=Math.sqrt(r+1);t[3]=.5*n;const i=.5/n;t[0]=(e[6]-e[9])*i,t[1]=(e[8]-e[2])*i,t[2]=(e[1]-e[4])*i}else{let r=0;e[5]>e[0]&&(r=1),e[10]>e[4*r+r]&&(r=2);const n=(r+1)%3,i=(r+2)%3,s=Math.sqrt(e[4*r+r]-e[4*n+n]-e[4*i+i]+1);t[r]=.5*s;const a=.5/s;t[3]=(e[4*n+i]-e[4*i+n])*a,t[n]=(e[4*n+r]+e[4*r+n])*a,t[i]=(e[4*i+r]+e[4*r+i])*a}return t},fromEuler:function(e,t,r,n,i){i=i||new ve(4);const s=.5*e,a=.5*t,o=.5*r,c=Math.sin(s),u=Math.cos(s),l=Math.sin(a),h=Math.cos(a),d=Math.sin(o),f=Math.cos(o);switch(n){case"xyz":i[0]=c*h*f+u*l*d,i[1]=u*l*f-c*h*d,i[2]=u*h*d+c*l*f,i[3]=u*h*f-c*l*d;break;case"xzy":i[0]=c*h*f-u*l*d,i[1]=u*l*f-c*h*d,i[2]=u*h*d+c*l*f,i[3]=u*h*f+c*l*d;break;case"yxz":i[0]=c*h*f+u*l*d,i[1]=u*l*f-c*h*d,i[2]=u*h*d-c*l*f,i[3]=u*h*f+c*l*d;break;case"yzx":i[0]=c*h*f+u*l*d,i[1]=u*l*f+c*h*d,i[2]=u*h*d-c*l*f,i[3]=u*h*f-c*l*d;break;case"zxy":i[0]=c*h*f-u*l*d,i[1]=u*l*f+c*h*d,i[2]=u*h*d+c*l*f,i[3]=u*h*f-c*l*d;break;case"zyx":i[0]=c*h*f-u*l*d,i[1]=u*l*f+c*h*d,i[2]=u*h*d-c*l*f,i[3]=u*h*f+c*l*d;break;default:throw new Error(`Unknown rotation order: ${n}`)}return i},copy:Pe,clone:Ee,add:function(e,t,r){return(r=r||new ve(4))[0]=e[0]+t[0],r[1]=e[1]+t[1],r[2]=e[2]+t[2],r[3]=e[3]+t[3],r},subtract:Ie,sub:Ae,mulScalar:Be,scale:Oe,divScalar:function(e,t,r){return(r=r||new ve(4))[0]=e[0]/t,r[1]=e[1]/t,r[2]=e[2]/t,r[3]=e[3]/t,r},dot:ze,lerp:function(e,t,r,n){return(n=n||new ve(4))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n[2]=e[2]+r*(t[2]-e[2]),n[3]=e[3]+r*(t[3]-e[3]),n},length:Ue,len:Re,lengthSq:De,lenSq:Ce,normalize:Ne,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<s&&Math.abs(e[1]-t[1])<s&&Math.abs(e[2]-t[2])<s&&Math.abs(e[3]-t[3])<s},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},identity:function(e){return(e=e||new ve(4))[0]=0,e[1]=0,e[2]=0,e[3]=1,e},rotationTo:function(e,t,r){r=r||new ve(4),je=je||u(),Ve=Ve||u(1,0,0),Le=Le||u(0,1,0);const n=L(e,t);return n<-.999999?(V(Ve,e,je),q(je)<1e-6&&V(Le,e,je),H(je,je),ke(je,Math.PI,r),r):n>.999999?(r[0]=0,r[1]=0,r[2]=0,r[3]=1,r):(V(e,t,je),r[0]=je[0],r[1]=je[1],r[2]=je[2],r[3]=1+n,Ne(r,r))},sqlerp:function(e,t,r,n,i,s){return s=s||new ve(4),Ge=Ge||new ve(4),qe=qe||new ve(4),Se(e,n,i,Ge),Se(t,r,i,qe),Se(Ge,qe,2*i*(1-i),s),s}});Float32Array;const Ye={duration:.3,delay:0,endDelay:0,repeat:0,easing:"ease"},$e=e=>1e3*e,We=e=>e/1e3,Xe=()=>{},Ze=e=>e;function He(e,t=!0){if(e&&"finished"!==e.playState)try{e.stop?e.stop():(t&&e.commitStyles(),e.cancel())}catch(e){}}const Ke=e=>e(),Qe=(e,t,r=Ye.duration)=>new Proxy({animations:e.map(Ke).filter(Boolean),duration:r,options:t},Je),Je={get:(e,t)=>{const r=e.animations[0];switch(t){case"duration":return e.duration;case"currentTime":return We((null==r?void 0:r[t])||0);case"playbackRate":case"playState":return null==r?void 0:r[t];case"finished":return e.finished||(e.finished=Promise.all(e.animations.map(et)).catch(Xe)),e.finished;case"stop":return()=>{e.animations.forEach((e=>He(e)))};case"forEachNative":return t=>{e.animations.forEach((r=>t(r,e)))};default:return void 0===(null==r?void 0:r[t])?void 0:()=>e.animations.forEach((e=>e[t]()))}},set:(e,t,r)=>{switch(t){case"currentTime":r=$e(r);case"playbackRate":for(let n=0;n<e.animations.length;n++)e.animations[n][t]=r;return!0}return!1}},et=e=>e.finished,tt=e=>"object"==typeof e&&Boolean(e.createAnimation),rt=e=>"number"==typeof e,nt=e=>Array.isArray(e)&&!rt(e[0]),it=(e,t,r)=>-r*e+r*t+e,st=(e,t,r)=>t-e==0?1:(r-e)/(t-e);function at(e,t){const r=e[e.length-1];for(let n=1;n<=t;n++){const i=st(0,t,n);e.push(it(r,1,i))}}const ot=(e,t,r)=>Math.min(Math.max(r,e),t);const ct=(e,t,r)=>(((1-3*r+3*t)*e+(3*r-6*t))*e+3*t)*e,ut=1e-7,lt=12;function ht(e,t,r,n){if(e===t&&r===n)return Ze;return i=>0===i||1===i?i:ct(function(e,t,r,n,i){let s,a,o=0;do{a=t+(r-t)/2,s=ct(a,n,i)-e,s>0?r=a:t=a}while(Math.abs(s)>ut&&++o<lt);return a}(i,0,1,e,r),t,n)}const dt=e=>"function"==typeof e,ft=e=>Array.isArray(e)&&rt(e[0]),mt={ease:ht(.25,.1,.25,1),"ease-in":ht(.42,0,1,1),"ease-in-out":ht(.42,0,.58,1),"ease-out":ht(0,0,.58,1)},pt=/\((.*?)\)/;function gt(e){if(dt(e))return e;if(ft(e))return ht(...e);if(mt[e])return mt[e];if(e.startsWith("steps")){const t=pt.exec(e);if(t){const e=t[1].split(",");return((e,t="end")=>r=>{const n=(r="end"===t?Math.min(r,.999):Math.max(r,.001))*e,i="end"===t?Math.floor(n):Math.ceil(n);return ot(0,1,i/e)})(parseFloat(e[0]),e[1].trim())}}return Ze}class yt{constructor(e,t=[0,1],{easing:r,duration:n=Ye.duration,delay:i=Ye.delay,endDelay:s=Ye.endDelay,repeat:a=Ye.repeat,offset:o,direction:c="normal",autoplay:u=!0}={}){if(this.startTime=null,this.rate=1,this.t=0,this.cancelTimestamp=null,this.easing=Ze,this.duration=0,this.totalDuration=0,this.repeat=0,this.playState="idle",this.finished=new Promise(((e,t)=>{this.resolve=e,this.reject=t})),r=r||Ye.easing,tt(r)){const e=r.createAnimation(t);r=e.easing,t=e.keyframes||t,n=e.duration||n}this.repeat=a,this.easing=nt(r)?Ze:gt(r),this.updateDuration(n);const l=function(e,t=function(e){const t=[0];return at(t,e-1),t}(e.length),r=Ze){const n=e.length,i=n-t.length;return i>0&&at(t,i),i=>{let s=0;for(;s<n-2&&!(i<t[s+1]);s++);let a=ot(0,1,st(t[s],t[s+1],i));const o=function(e,t){return nt(e)?e[((e,t,r)=>{const n=t-e;return((r-e)%n+n)%n+e})(0,e.length,t)]:e}(r,s);return a=o(a),it(e[s],e[s+1],a)}}(t,o,nt(r)?r.map(gt):Ze);this.tick=t=>{var r;let n=0;n=void 0!==this.pauseTime?this.pauseTime:(t-this.startTime)*this.rate,this.t=n,n/=1e3,n=Math.max(n-i,0),"finished"===this.playState&&void 0===this.pauseTime&&(n=this.totalDuration);const a=n/this.duration;let o=Math.floor(a),u=a%1;!u&&a>=1&&(u=1),1===u&&o--;const h=o%2;("reverse"===c||"alternate"===c&&h||"alternate-reverse"===c&&!h)&&(u=1-u);const d=n>=this.totalDuration?1:Math.min(u,1),f=l(this.easing(d));e(f),void 0===this.pauseTime&&("finished"===this.playState||n>=this.totalDuration+s)?(this.playState="finished",null===(r=this.resolve)||void 0===r||r.call(this,f)):"idle"!==this.playState&&(this.frameRequestId=requestAnimationFrame(this.tick))},u&&this.play()}play(){const e=performance.now();this.playState="running",void 0!==this.pauseTime?this.startTime=e-this.pauseTime:this.startTime||(this.startTime=e),this.cancelTimestamp=this.startTime,this.pauseTime=void 0,this.frameRequestId=requestAnimationFrame(this.tick)}pause(){this.playState="paused",this.pauseTime=this.t}finish(){this.playState="finished",this.tick(0)}stop(){var e;this.playState="idle",void 0!==this.frameRequestId&&cancelAnimationFrame(this.frameRequestId),null===(e=this.reject)||void 0===e||e.call(this,!1)}cancel(){this.stop(),this.tick(this.cancelTimestamp)}reverse(){this.rate*=-1}commitStyles(){}updateDuration(e){this.duration=e,this.totalDuration=e*(this.repeat+1)}get currentTime(){return this.t}set currentTime(e){void 0!==this.pauseTime||0===this.rate?this.pauseTime=e:this.startTime=performance.now()-e/this.rate}get playbackRate(){return this.rate}set playbackRate(e){this.rate=e}}class _t{setAnimation(e){this.animation=e,null==e||e.finished.then((()=>this.clearAnimation())).catch((()=>{}))}clearAnimation(){this.animation=this.generator=void 0}}const xt=new WeakMap;function vt(e){return xt.has(e)||xt.set(e,{transforms:[],values:new Map}),xt.get(e)}const bt=["","X","Y","Z"],wt={x:"translateX",y:"translateY",z:"translateZ"},kt={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:e=>e+"deg"},Tt={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:e=>e+"px"},rotate:kt,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:Ze},skew:kt},Mt=new Map,St=e=>`--motion-${e}`,Pt=["x","y","z"];["translate","scale","rotate","skew"].forEach((e=>{bt.forEach((t=>{Pt.push(e+t),Mt.set(St(e+t),Tt[e])}))}));const Et=(e,t)=>Pt.indexOf(e)-Pt.indexOf(t),It=new Set(Pt),At=e=>It.has(e),Bt=e=>e.sort(Et).reduce(Ot,"").trim(),Ot=(e,t)=>`${e} ${t}(var(${St(t)}))`,zt=e=>e.startsWith("--"),Ut=new Set,Rt=(e,t)=>document.createElement("div").animate(e,t),Dt={cssRegisterProperty:()=>"undefined"!=typeof CSS&&Object.hasOwnProperty.call(CSS,"registerProperty"),waapi:()=>Object.hasOwnProperty.call(Element.prototype,"animate"),partialKeyframes:()=>{try{Rt({opacity:[1]})}catch(e){return!1}return!0},finished:()=>Boolean(Rt({opacity:[0,1]},{duration:.001}).finished),linearEasing:()=>{try{Rt({opacity:0},{easing:"linear(0, 1)"})}catch(e){return!1}return!0}},Ct={},Nt={};for(const e in Dt)Nt[e]=()=>(void 0===Ct[e]&&(Ct[e]=Dt[e]()),Ct[e]);const jt=(e,t)=>dt(e)?Nt.linearEasing()?`linear(${((e,t)=>{let r="";const n=Math.round(t/.015);for(let t=0;t<n;t++)r+=e(st(0,n-1,t))+", ";return r.substring(0,r.length-2)})(e,t)})`:Ye.easing:ft(e)?Vt(e):e,Vt=([e,t,r,n])=>`cubic-bezier(${e}, ${t}, ${r}, ${n})`;function Lt(e){return wt[e]&&(e=wt[e]),At(e)?St(e):e}const Gt=(e,t)=>{t=Lt(t);let r=zt(t)?e.style.getPropertyValue(t):getComputedStyle(e)[t];if(!r&&0!==r){const e=Mt.get(t);e&&(r=e.initialValue)}return r},qt=(e,t,r)=>{t=Lt(t),zt(t)?e.style.setProperty(t,r):e.style[t]=r},Ft=e=>"string"==typeof e;function Yt(e,t){var r;let n=(null==t?void 0:t.toDefaultUnit)||Ze;const i=e[e.length-1];if(Ft(i)){const e=(null===(r=i.match(/(-?[\d.]+)([a-z%]*)/))||void 0===r?void 0:r[2])||"";e&&(n=t=>t+e)}return n}function $t(e,t,r,n={},i){const s=window.__MOTION_DEV_TOOLS_RECORD,a=!1!==n.record&&s;let o,{duration:c=Ye.duration,delay:u=Ye.delay,endDelay:l=Ye.endDelay,repeat:h=Ye.repeat,easing:d=Ye.easing,persist:f=!1,direction:m,offset:p,allowWebkitAcceleration:g=!1,autoplay:y=!0}=n;const _=vt(e),x=At(t);let v=Nt.waapi();x&&((e,t)=>{wt[t]&&(t=wt[t]);const{transforms:r}=vt(e);var n,i;i=t,-1===(n=r).indexOf(i)&&n.push(i),e.style.transform=Bt(r)})(e,t);const b=Lt(t),w=function(e,t){return e.has(t)||e.set(t,new _t),e.get(t)}(_.values,b),k=Mt.get(b);return He(w.animation,!(tt(d)&&w.generator)&&!1!==n.record),()=>{const _=()=>{var t,r;return null!==(r=null!==(t=Gt(e,b))&&void 0!==t?t:null==k?void 0:k.initialValue)&&void 0!==r?r:0};let T=function(e,t){for(let r=0;r<e.length;r++)null===e[r]&&(e[r]=r?e[r-1]:t());return e}((e=>Array.isArray(e)?e:[e])(r),_);const M=Yt(T,k);if(tt(d)){const e=d.createAnimation(T,"opacity"!==t,_,b,w);d=e.easing,T=e.keyframes||T,c=e.duration||c}if(zt(b)&&(Nt.cssRegisterProperty()?function(e){if(!Ut.has(e)){Ut.add(e);try{const{syntax:t,initialValue:r}=Mt.has(e)?Mt.get(e):{};CSS.registerProperty({name:e,inherits:!1,syntax:t,initialValue:r})}catch(e){}}}(b):v=!1),x&&!Nt.linearEasing()&&(dt(d)||nt(d)&&d.some(dt))&&(v=!1),v){k&&(T=T.map((e=>rt(e)?k.toDefaultUnit(e):e))),1!==T.length||Nt.partialKeyframes()&&!a||T.unshift(_());const t={delay:$e(u),duration:$e(c),endDelay:$e(l),easing:nt(d)?void 0:jt(d,c),direction:m,iterations:h+1,fill:"both"};o=e.animate({[b]:T,offset:p,easing:nt(d)?d.map((e=>jt(e,c))):void 0},t),o.finished||(o.finished=new Promise(((e,t)=>{o.onfinish=e,o.oncancel=t})));const r=T[T.length-1];o.finished.then((()=>{f||(qt(e,b,r),o.cancel())})).catch(Xe),g||(o.playbackRate=1.000001)}else if(i&&x)T=T.map((e=>"string"==typeof e?parseFloat(e):e)),1===T.length&&T.unshift(parseFloat(_())),o=new i((t=>{qt(e,b,M?M(t):t)}),T,Object.assign(Object.assign({},n),{duration:c,easing:d}));else{const t=T[T.length-1];qt(e,b,k&&rt(t)?k.toDefaultUnit(t):t)}return a&&s(e,t,T,{duration:c,delay:u,easing:d,repeat:h,offset:p},"motion-one"),w.setAnimation(o),o&&!y&&o.pause(),o}}const Wt=(e,t)=>e[t]?Object.assign(Object.assign({},e),e[t]):Object.assign({},e);function Xt(e,t,r){return dt(e)?e(t,r):e}const Zt=(Ht=yt,function(e,t,r={}){const n=(e=function(e,t){return"string"==typeof e?e=document.querySelectorAll(e):e instanceof Element&&(e=[e]),Array.from(e||[])}(e)).length;Boolean(n),Boolean(t);const i=[];for(let s=0;s<n;s++){const a=e[s];for(const e in t){const o=Wt(r,e);o.delay=Xt(o.delay,s,n);const c=$t(a,e,t[e],o,Ht);i.push(c)}}return Qe(i,r,r.duration)});var Ht;function Kt(e,t={}){return Qe([()=>{const r=new yt(e,[0,1],t);return r.finished.catch((()=>{})),r}],t,t.duration)}function Qt(e,t,r){return(dt(e)?Kt:Zt)(e,t,r)}function Jt(e,t,r){const n=Math.max(t-5,0);return i=r-e(n),(s=t-n)?i*(1e3/s):0;var i,s}function er(e){return rt(e)&&!isNaN(e)}function tr(e){return Ft(e)?parseFloat(e):e}const rr=function(e){const t=new WeakMap;return(e={})=>{const r=new Map,n=(t=0,n=100,i=0,s=!1)=>{const a=`${t}-${n}-${i}-${s}`;return r.has(a)||r.set(a,(({from:e=0,velocity:t=0,power:r=.8,decay:n=.325,bounceDamping:i,bounceStiffness:s,changeTarget:a,min:o,max:c,restDistance:u=.5,restSpeed:l})=>{n=$e(n);const h={hasReachedTarget:!1,done:!1,current:e,target:e},d=e=>void 0===o?c:void 0===c||Math.abs(o-e)<Math.abs(c-e)?o:c;let f=r*t;const m=e+f,p=void 0===a?m:a(m);h.target=p,p!==m&&(f=p-e);const g=e=>-f*Math.exp(-e/n),y=e=>p+g(e),_=e=>{const t=g(e),r=y(e);h.done=Math.abs(t)<=u,h.current=h.done?p:r};let x,v;const b=e=>{var t;t=h.current,(void 0!==o&&t<o||void 0!==c&&t>c)&&(x=e,v=(({stiffness:e=100,damping:t=10,mass:r=1,from:n=0,to:i=1,velocity:s=0,restSpeed:a,restDistance:o}={})=>{s=s?We(s):0;const c={done:!1,hasReachedTarget:!1,current:n,target:i},u=i-n,l=Math.sqrt(e/r)/1e3,h=((e=100,t=10,r=1)=>t/(2*Math.sqrt(e*r)))(e,t,r),d=Math.abs(u)<5;let f;if(a||(a=d?.01:2),o||(o=d?.005:.5),h<1){const e=l*Math.sqrt(1-h*h);f=t=>i-Math.exp(-h*l*t)*((h*l*u-s)/e*Math.sin(e*t)+u*Math.cos(e*t))}else f=e=>i-Math.exp(-l*e)*(u+(l*u-s)*e);return e=>{c.current=f(e);const t=0===e?s:Jt(f,e,c.current),r=Math.abs(t)<=a,u=Math.abs(i-c.current)<=o;var l,h,d;return c.done=r&&u,c.hasReachedTarget=(l=n,h=i,d=c.current,l<h&&d>=h||l>h&&d<=h),c}})({from:h.current,to:d(h.current),velocity:Jt(y,e,h.current),damping:i,stiffness:s,restDistance:u,restSpeed:l}))};return b(0),e=>{let t=!1;return v||void 0!==x||(t=!0,_(e),b(e)),void 0!==x&&e>x?(h.hasReachedTarget=!0,v(e-x)):(h.hasReachedTarget=!1,!t&&_(e),h)}})(Object.assign({from:t,to:n,velocity:i},e))),r.get(a)},i=(e,r)=>(t.has(e)||t.set(e,function(e,t=Ze){let r,n=10,i=e(0);const s=[t(i.current)];for(;!i.done&&n<1e4;)i=e(n),s.push(t(i.done?i.target:i.current)),void 0===r&&i.hasReachedTarget&&(r=n),n+=10;const a=n-10;return 1===s.length&&s.push(i.current),{keyframes:s,duration:a/1e3,overshootDuration:(null!=r?r:a)/1e3}}(e,r)),t.get(e));return{createAnimation:(e,t=!0,r,s,a)=>{let o,c,u,l=0,h=Ze;const d=e.length;if(t)if(h=Yt(e,s?Mt.get(Lt(s)):void 0),u=tr(e[d-1]),d>1&&null!==e[0])c=tr(e[0]);else{const e=null==a?void 0:a.generator;if(e){const{animation:t,generatorStartTime:r}=a,n=(null==t?void 0:t.startTime)||r||0,i=(null==t?void 0:t.currentTime)||performance.now()-n,s=e(i).current;c=s,l=Jt((t=>e(t).current),i,s)}else r&&(c=tr(r()))}if(er(c)&&er(u)){const e=n(c,u,l,null==s?void 0:s.includes("scale"));o=Object.assign(Object.assign({},i(e,h)),{easing:"linear"}),a&&(a.generator=e,a.generatorStartTime=performance.now())}return o||(o={easing:"ease",duration:i(n(0,100)).overshootDuration}),o}}}}();class nr{position;targetPosition;rotation;targetRotation;scale;targetScale;constructor(e){this.position=e.position,this.rotation=e.rotation,this.targetPosition=this.position,this.targetRotation=this.rotation,this.scale=ne.create(1,1,1),this.targetScale=this.scale}update(){Qt((e=>{this.position=ne.lerp(this.position,this.targetPosition,e)}),{easing:rr({velocity:2e-4*Di})}),Qt((e=>{this.rotation=Fe.slerp(this.rotation,this.targetRotation,e)}),{easing:rr({velocity:2e-4*Di})}),Qt((e=>{this.scale=ne.lerp(this.scale,this.targetScale,e)}),{easing:rr({velocity:2e-4*Di})})}}const ir=new class{pressed={w:!1,a:!1,s:!1,d:!1,q:!1,e:!1," ":!1,shift:!1};constructor(){window.addEventListener("keydown",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!0})),window.addEventListener("keyup",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!1})),window.addEventListener("blur",(()=>{Object.keys(this.pressed).forEach((e=>{this.pressed[e]=!1}))}))}},sr=async e=>{const t=e.createShaderModule({code:"@group(0) @binding(0) var mySampler : sampler;\r\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\r\n//@group(0) @binding(2) var debugTexture : texture_2d<f32>;\r\n\r\nstruct VertexOutput {\r\n  @builtin(position) Position : vec4<f32>,\r\n  @location(0) fragUV : vec2<f32>,\r\n}\r\n\r\n@vertex\r\nfn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\r\n  const pos = array(\r\n    vec2( 1.0,  1.0),\r\n    vec2( 1.0, -1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2( 1.0,  1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2(-1.0,  1.0),\r\n  );\r\n\r\n  const uv = array(\r\n    vec2(1.0, 0.0),\r\n    vec2(1.0, 1.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(1.0, 0.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(0.0, 0.0),\r\n  );\r\n\r\n  var output : VertexOutput;\r\n  output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\r\n  output.fragUV = uv[VertexIndex];\r\n  return output;\r\n}\r\n\r\nfn get_debug_colour(index : i32) -> vec4<f32> {\r\n  let colours = array(\r\n    vec4<f32>(1.0, 0.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(1.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(0.0, 0.0, 0.0, 1.0),\r\n  );\r\n  return colours[index % 8];\r\n}\r\n\r\n@fragment\r\nfn fragment_main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\r\n    let pixel = fragUV * vec2<f32>(textureDimensions(myTexture));\r\n    var colour = textureLoad(myTexture, vec2<u32>(pixel),0);\r\n    return abs(colour);\r\n}\r\n"}),r=e.createRenderPipeline({layout:"auto",vertex:{module:t,entryPoint:"vertex_main"},fragment:{module:t,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]}});return{render:t=>{const n=t.commandEncoder.beginRenderPass({timestampWrites:t.timestampWrites,colorAttachments:[{view:Ai.getCurrentTexture().createView(),loadOp:"clear",clearValue:[.3,.3,.3,1],storeOp:"store"}]}),i=e.createBindGroup({layout:r.getBindGroupLayout(0),entries:[{binding:1,resource:t.outputTextures.finalTexture.createView()}]});return n.setPipeline(r),n.setBindGroup(0,i),n.draw(6),n.end(),[t.commandEncoder.finish()]},label:"fullscreen quad"}},ar=e=>e&&"number"==typeof e.length&&e.buffer instanceof ArrayBuffer&&"number"==typeof e.byteLength,or={i32:{numElements:1,align:4,size:4,type:"i32",View:Int32Array},u32:{numElements:1,align:4,size:4,type:"u32",View:Uint32Array},f32:{numElements:1,align:4,size:4,type:"f32",View:Float32Array},f16:{numElements:1,align:2,size:2,type:"u16",View:Uint16Array},vec2f:{numElements:2,align:8,size:8,type:"f32",View:Float32Array},vec2i:{numElements:2,align:8,size:8,type:"i32",View:Int32Array},vec2u:{numElements:2,align:8,size:8,type:"u32",View:Uint32Array},vec2h:{numElements:2,align:4,size:4,type:"u16",View:Uint16Array},vec3i:{numElements:3,align:16,size:12,type:"i32",View:Int32Array},vec3u:{numElements:3,align:16,size:12,type:"u32",View:Uint32Array},vec3f:{numElements:3,align:16,size:12,type:"f32",View:Float32Array},vec3h:{numElements:3,align:8,size:6,type:"u16",View:Uint16Array},vec4i:{numElements:4,align:16,size:16,type:"i32",View:Int32Array},vec4u:{numElements:4,align:16,size:16,type:"u32",View:Uint32Array},vec4f:{numElements:4,align:16,size:16,type:"f32",View:Float32Array},vec4h:{numElements:4,align:8,size:8,type:"u16",View:Uint16Array},mat2x2f:{numElements:4,align:8,size:16,type:"f32",View:Float32Array},mat2x2h:{numElements:4,align:4,size:8,type:"u16",View:Uint16Array},mat3x2f:{numElements:6,align:8,size:24,type:"f32",View:Float32Array},mat3x2h:{numElements:6,align:4,size:12,type:"u16",View:Uint16Array},mat4x2f:{numElements:8,align:8,size:32,type:"f32",View:Float32Array},mat4x2h:{numElements:8,align:4,size:16,type:"u16",View:Uint16Array},mat2x3f:{numElements:8,align:16,size:32,pad:[3,1],type:"f32",View:Float32Array},mat2x3h:{numElements:8,align:8,size:16,pad:[3,1],type:"u16",View:Uint16Array},mat3x3f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x3h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x3f:{numElements:16,align:16,size:64,pad:[3,1],type:"f32",View:Float32Array},mat4x3h:{numElements:16,align:8,size:32,pad:[3,1],type:"u16",View:Uint16Array},mat2x4f:{numElements:8,align:16,size:32,type:"f32",View:Float32Array},mat2x4h:{numElements:8,align:8,size:16,type:"u16",View:Uint16Array},mat3x4f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x4h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x4f:{numElements:16,align:16,size:64,type:"f32",View:Float32Array},mat4x4h:{numElements:16,align:8,size:32,type:"u16",View:Uint16Array},bool:{numElements:0,align:1,size:0,type:"bool",View:Uint32Array}},cr={...or,"atomic<i32>":or.i32,"atomic<u32>":or.u32,"vec2<i32>":or.vec2i,"vec2<u32>":or.vec2u,"vec2<f32>":or.vec2f,"vec2<f16>":or.vec2h,"vec3<i32>":or.vec3i,"vec3<u32>":or.vec3u,"vec3<f32>":or.vec3f,"vec3<f16>":or.vec3h,"vec4<i32>":or.vec4i,"vec4<u32>":or.vec4u,"vec4<f32>":or.vec4f,"vec4<f16>":or.vec4h,"mat2x2<f32>":or.mat2x2f,"mat2x2<f16>":or.mat2x2h,"mat3x2<f32>":or.mat3x2f,"mat3x2<f16>":or.mat3x2h,"mat4x2<f32>":or.mat4x2f,"mat4x2<f16>":or.mat4x2h,"mat2x3<f32>":or.mat2x3f,"mat2x3<f16>":or.mat2x3h,"mat3x3<f32>":or.mat3x3f,"mat3x3<f16>":or.mat3x3h,"mat4x3<f32>":or.mat4x3f,"mat4x3<f16>":or.mat4x3h,"mat2x4<f32>":or.mat2x4f,"mat2x4<f16>":or.mat2x4h,"mat3x4<f32>":or.mat3x4f,"mat3x4<f16>":or.mat3x4h,"mat4x4<f32>":or.mat4x4f,"mat4x4<f16>":or.mat4x4h},ur=(lr=cr,Object.keys(lr));var lr,hr,dr,fr,mr,pr;!function(e=[],t){const r=new Set;for(const n of ur){const i=cr[n];r.has(i)||(r.add(i),i.flatten=e.includes(n)?t:!t)}}(),new WeakMap;class gr{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class yr{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(e){throw new Error("Cannot evaluate node")}evaluateString(e){return this.evaluate(e).toString()}search(e){}searchBlock(e,t){if(e){t(_r.instance);for(const r of e)r instanceof Array?this.searchBlock(r,t):r.search(t);t(xr.instance)}}}class _r extends yr{}_r.instance=new _r;class xr extends yr{}xr.instance=new xr;class vr extends yr{constructor(){super()}}class br extends vr{constructor(e,t,r,n){super(),this.name=e,this.args=t,this.returnType=r,this.body=n}get astNodeType(){return"function"}search(e){this.searchBlock(this.body,e)}}class wr extends vr{constructor(e){super(),this.expression=e}get astNodeType(){return"staticAssert"}search(e){this.expression.search(e)}}class kr extends vr{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"while"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class Tr extends vr{constructor(e){super(),this.body=e}get astNodeType(){return"continuing"}search(e){this.searchBlock(this.body,e)}}class Mr extends vr{constructor(e,t,r,n){super(),this.init=e,this.condition=t,this.increment=r,this.body=n}get astNodeType(){return"for"}search(e){var t,r,n;null===(t=this.init)||void 0===t||t.search(e),null===(r=this.condition)||void 0===r||r.search(e),null===(n=this.increment)||void 0===n||n.search(e),this.searchBlock(this.body,e)}}class Sr extends vr{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"var"}search(e){var t;e(this),null===(t=this.value)||void 0===t||t.search(e)}}class Pr extends vr{constructor(e,t,r){super(),this.name=e,this.type=t,this.value=r}get astNodeType(){return"override"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class Er extends vr{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"let"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class Ir extends vr{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"const"}evaluate(e){return this.value.evaluate(e)}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}!function(e){e.increment="++",e.decrement="--"}(hr||(hr={})),function(e){e.parse=function(t){const r=t;if("parse"==r)throw new Error("Invalid value for IncrementOperator");return e[r]}}(hr||(hr={}));class Ar extends vr{constructor(e,t){super(),this.operator=e,this.variable=t}get astNodeType(){return"increment"}search(e){this.variable.search(e)}}!function(e){e.assign="=",e.addAssign="+=",e.subtractAssin="-=",e.multiplyAssign="*=",e.divideAssign="/=",e.moduloAssign="%=",e.andAssign="&=",e.orAssign="|=",e.xorAssign="^=",e.shiftLeftAssign="<<=",e.shiftRightAssign=">>="}(dr||(dr={})),function(e){e.parse=function(e){const t=e;if("parse"==t)throw new Error("Invalid value for AssignOperator");return t}}(dr||(dr={}));class Br extends vr{constructor(e,t,r){super(),this.operator=e,this.variable=t,this.value=r}get astNodeType(){return"assign"}search(e){this.value.search(e)}}class Or extends vr{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"call"}}class zr extends vr{constructor(e,t){super(),this.body=e,this.continuing=t}get astNodeType(){return"loop"}}class Ur extends vr{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"body"}}class Rr extends vr{constructor(e,t,r,n){super(),this.condition=e,this.body=t,this.elseif=r,this.else=n}get astNodeType(){return"if"}search(e){this.condition.search(e),this.searchBlock(this.body,e),this.searchBlock(this.elseif,e),this.searchBlock(this.else,e)}}class Dr extends vr{constructor(e){super(),this.value=e}get astNodeType(){return"return"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class Cr extends vr{constructor(e){super(),this.name=e}get astNodeType(){return"enable"}}class Nr extends vr{constructor(e,t){super(),this.name=e,this.type=t}get astNodeType(){return"alias"}}class jr extends vr{constructor(){super()}get astNodeType(){return"discard"}}class Vr extends vr{constructor(){super()}get astNodeType(){return"break"}}class Lr extends vr{constructor(){super()}get astNodeType(){return"continue"}}class Gr extends vr{constructor(e){super(),this.name=e}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class qr extends Gr{constructor(e,t){super(e),this.members=t}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(e){for(let t=0;t<this.members.length;t++)if(this.members[t].name==e)return t;return-1}}class Fr extends Gr{constructor(e,t,r){super(e),this.format=t,this.access=r}get astNodeType(){return"template"}}class Yr extends Gr{constructor(e,t,r,n){super(e),this.storage=t,this.type=r,this.access=n}get astNodeType(){return"pointer"}}class $r extends Gr{constructor(e,t,r,n){super(e),this.attributes=t,this.format=r,this.count=n}get astNodeType(){return"array"}get isArray(){return!0}}class Wr extends Gr{constructor(e,t,r){super(e),this.format=t,this.access=r}get astNodeType(){return"sampler"}}class Xr extends yr{constructor(){super()}}class Zr extends Xr{constructor(e){super(),this.value=e}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class Hr extends Xr{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"createExpr"}}class Kr extends Xr{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"callExpr"}evaluate(e){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(e));case"acos":return Math.acos(this.args[0].evaluate(e));case"acosh":return Math.acosh(this.args[0].evaluate(e));case"asin":return Math.asin(this.args[0].evaluate(e));case"asinh":return Math.asinh(this.args[0].evaluate(e));case"atan":return Math.atan(this.args[0].evaluate(e));case"atan2":return Math.atan2(this.args[0].evaluate(e),this.args[1].evaluate(e));case"atanh":return Math.atanh(this.args[0].evaluate(e));case"ceil":return Math.ceil(this.args[0].evaluate(e));case"clamp":return Math.min(Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e)),this.args[2].evaluate(e));case"cos":return Math.cos(this.args[0].evaluate(e));case"degrees":return 180*this.args[0].evaluate(e)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(e)-this.args[1].evaluate(e),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(e));case"exp2":return Math.pow(2,this.args[0].evaluate(e));case"floor":return Math.floor(this.args[0].evaluate(e));case"fma":return this.args[0].evaluate(e)*this.args[1].evaluate(e)+this.args[2].evaluate(e);case"fract":case"modf":return this.args[0].evaluate(e)-Math.floor(this.args[0].evaluate(e));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(e));case"log":return Math.log(this.args[0].evaluate(e));case"log2":return Math.log2(this.args[0].evaluate(e));case"max":return Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e));case"min":return Math.min(this.args[0].evaluate(e),this.args[1].evaluate(e));case"mix":return this.args[0].evaluate(e)*(1-this.args[2].evaluate(e))+this.args[1].evaluate(e)*this.args[2].evaluate(e);case"pow":return Math.pow(this.args[0].evaluate(e),this.args[1].evaluate(e));case"radians":return this.args[0].evaluate(e)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(e));case"sign":return Math.sign(this.args[0].evaluate(e));case"sin":return Math.sin(this.args[0].evaluate(e));case"sinh":return Math.sinh(this.args[0].evaluate(e));case"saturate":return Math.min(Math.max(this.args[0].evaluate(e),0),1);case"smoothstep":return this.args[0].evaluate(e)*this.args[0].evaluate(e)*(3-2*this.args[0].evaluate(e));case"sqrt":return Math.sqrt(this.args[0].evaluate(e));case"step":return this.args[0].evaluate(e)<this.args[1].evaluate(e)?0:1;case"tan":return Math.tan(this.args[0].evaluate(e));case"tanh":return Math.tanh(this.args[0].evaluate(e));case"trunc":return Math.trunc(this.args[0].evaluate(e));default:throw new Error("Non const function: "+this.name)}}search(e){for(const t of this.args)t.search(e);e(this)}}class Qr extends Xr{constructor(e){super(),this.name=e}get astNodeType(){return"varExpr"}search(e){e(this)}}class Jr extends Xr{constructor(e,t){super(),this.name=e,this.initializer=t}get astNodeType(){return"constExpr"}evaluate(e){var t,r;if(this.initializer instanceof Hr){const n=null===(t=this.postfix)||void 0===t?void 0:t.evaluateString(e),i=null===(r=this.initializer.type)||void 0===r?void 0:r.name,s=e.structs.get(i),a=null==s?void 0:s.getMemberIndex(n);if(-1!=a)return this.initializer.args[a].evaluate(e);console.log(a)}return this.initializer.evaluate(e)}search(e){this.initializer.search(e)}}class en extends Xr{constructor(e){super(),this.value=e}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class tn extends Xr{constructor(e,t){super(),this.type=e,this.value=t}get astNodeType(){return"bitcastExpr"}search(e){this.value.search(e)}}class rn extends Xr{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"typecastExpr"}evaluate(e){return this.args[0].evaluate(e)}search(e){this.searchBlock(this.args,e)}}class nn extends Xr{constructor(e){super(),this.contents=e}get astNodeType(){return"groupExpr"}evaluate(e){return this.contents[0].evaluate(e)}search(e){this.searchBlock(this.contents,e)}}class sn extends Xr{constructor(){super()}}class an extends sn{constructor(e,t){super(),this.operator=e,this.right=t}get astNodeType(){return"unaryOp"}evaluate(e){switch(this.operator){case"+":return this.right.evaluate(e);case"-":return-this.right.evaluate(e);case"!":return this.right.evaluate(e)?0:1;case"~":return~this.right.evaluate(e);default:throw new Error("Unknown unary operator: "+this.operator)}}search(e){this.right.search(e)}}class on extends sn{constructor(e,t,r){super(),this.operator=e,this.left=t,this.right=r}get astNodeType(){return"binaryOp"}evaluate(e){switch(this.operator){case"+":return this.left.evaluate(e)+this.right.evaluate(e);case"-":return this.left.evaluate(e)-this.right.evaluate(e);case"*":return this.left.evaluate(e)*this.right.evaluate(e);case"/":return this.left.evaluate(e)/this.right.evaluate(e);case"%":return this.left.evaluate(e)%this.right.evaluate(e);case"==":return this.left.evaluate(e)==this.right.evaluate(e)?1:0;case"!=":return this.left.evaluate(e)!=this.right.evaluate(e)?1:0;case"<":return this.left.evaluate(e)<this.right.evaluate(e)?1:0;case">":return this.left.evaluate(e)>this.right.evaluate(e)?1:0;case"<=":return this.left.evaluate(e)<=this.right.evaluate(e)?1:0;case">=":return this.left.evaluate(e)>=this.right.evaluate(e)?1:0;case"&&":return this.left.evaluate(e)&&this.right.evaluate(e)?1:0;case"||":return this.left.evaluate(e)||this.right.evaluate(e)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}search(e){this.left.search(e),this.right.search(e)}}class cn extends yr{constructor(){super()}}class un extends cn{constructor(e,t){super(),this.selector=e,this.body=t}get astNodeType(){return"case"}search(e){this.searchBlock(this.body,e)}}class ln extends cn{constructor(e){super(),this.body=e}get astNodeType(){return"default"}search(e){this.searchBlock(this.body,e)}}class hn extends yr{constructor(e,t,r){super(),this.name=e,this.type=t,this.attributes=r}get astNodeType(){return"argument"}}class dn extends yr{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"elseif"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class fn extends yr{constructor(e,t,r){super(),this.name=e,this.type=t,this.attributes=r}get astNodeType(){return"member"}}class mn extends yr{constructor(e,t){super(),this.name=e,this.value=t}get astNodeType(){return"attribute"}}!function(e){e[e.token=0]="token",e[e.keyword=1]="keyword",e[e.reserved=2]="reserved"}(mr||(mr={}));class pn{constructor(e,t,r){this.name=e,this.type=t,this.rule=r}toString(){return this.name}}class gn{}fr=gn,gn.none=new pn("",mr.reserved,""),gn.eof=new pn("EOF",mr.token,""),gn.reserved={asm:new pn("asm",mr.reserved,"asm"),bf16:new pn("bf16",mr.reserved,"bf16"),do:new pn("do",mr.reserved,"do"),enum:new pn("enum",mr.reserved,"enum"),f16:new pn("f16",mr.reserved,"f16"),f64:new pn("f64",mr.reserved,"f64"),handle:new pn("handle",mr.reserved,"handle"),i8:new pn("i8",mr.reserved,"i8"),i16:new pn("i16",mr.reserved,"i16"),i64:new pn("i64",mr.reserved,"i64"),mat:new pn("mat",mr.reserved,"mat"),premerge:new pn("premerge",mr.reserved,"premerge"),regardless:new pn("regardless",mr.reserved,"regardless"),typedef:new pn("typedef",mr.reserved,"typedef"),u8:new pn("u8",mr.reserved,"u8"),u16:new pn("u16",mr.reserved,"u16"),u64:new pn("u64",mr.reserved,"u64"),unless:new pn("unless",mr.reserved,"unless"),using:new pn("using",mr.reserved,"using"),vec:new pn("vec",mr.reserved,"vec"),void:new pn("void",mr.reserved,"void")},gn.keywords={array:new pn("array",mr.keyword,"array"),atomic:new pn("atomic",mr.keyword,"atomic"),bool:new pn("bool",mr.keyword,"bool"),f32:new pn("f32",mr.keyword,"f32"),i32:new pn("i32",mr.keyword,"i32"),mat2x2:new pn("mat2x2",mr.keyword,"mat2x2"),mat2x3:new pn("mat2x3",mr.keyword,"mat2x3"),mat2x4:new pn("mat2x4",mr.keyword,"mat2x4"),mat3x2:new pn("mat3x2",mr.keyword,"mat3x2"),mat3x3:new pn("mat3x3",mr.keyword,"mat3x3"),mat3x4:new pn("mat3x4",mr.keyword,"mat3x4"),mat4x2:new pn("mat4x2",mr.keyword,"mat4x2"),mat4x3:new pn("mat4x3",mr.keyword,"mat4x3"),mat4x4:new pn("mat4x4",mr.keyword,"mat4x4"),ptr:new pn("ptr",mr.keyword,"ptr"),sampler:new pn("sampler",mr.keyword,"sampler"),sampler_comparison:new pn("sampler_comparison",mr.keyword,"sampler_comparison"),struct:new pn("struct",mr.keyword,"struct"),texture_1d:new pn("texture_1d",mr.keyword,"texture_1d"),texture_2d:new pn("texture_2d",mr.keyword,"texture_2d"),texture_2d_array:new pn("texture_2d_array",mr.keyword,"texture_2d_array"),texture_3d:new pn("texture_3d",mr.keyword,"texture_3d"),texture_cube:new pn("texture_cube",mr.keyword,"texture_cube"),texture_cube_array:new pn("texture_cube_array",mr.keyword,"texture_cube_array"),texture_multisampled_2d:new pn("texture_multisampled_2d",mr.keyword,"texture_multisampled_2d"),texture_storage_1d:new pn("texture_storage_1d",mr.keyword,"texture_storage_1d"),texture_storage_2d:new pn("texture_storage_2d",mr.keyword,"texture_storage_2d"),texture_storage_2d_array:new pn("texture_storage_2d_array",mr.keyword,"texture_storage_2d_array"),texture_storage_3d:new pn("texture_storage_3d",mr.keyword,"texture_storage_3d"),texture_depth_2d:new pn("texture_depth_2d",mr.keyword,"texture_depth_2d"),texture_depth_2d_array:new pn("texture_depth_2d_array",mr.keyword,"texture_depth_2d_array"),texture_depth_cube:new pn("texture_depth_cube",mr.keyword,"texture_depth_cube"),texture_depth_cube_array:new pn("texture_depth_cube_array",mr.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new pn("texture_depth_multisampled_2d",mr.keyword,"texture_depth_multisampled_2d"),texture_external:new pn("texture_external",mr.keyword,"texture_external"),u32:new pn("u32",mr.keyword,"u32"),vec2:new pn("vec2",mr.keyword,"vec2"),vec3:new pn("vec3",mr.keyword,"vec3"),vec4:new pn("vec4",mr.keyword,"vec4"),bitcast:new pn("bitcast",mr.keyword,"bitcast"),block:new pn("block",mr.keyword,"block"),break:new pn("break",mr.keyword,"break"),case:new pn("case",mr.keyword,"case"),continue:new pn("continue",mr.keyword,"continue"),continuing:new pn("continuing",mr.keyword,"continuing"),default:new pn("default",mr.keyword,"default"),discard:new pn("discard",mr.keyword,"discard"),else:new pn("else",mr.keyword,"else"),enable:new pn("enable",mr.keyword,"enable"),fallthrough:new pn("fallthrough",mr.keyword,"fallthrough"),false:new pn("false",mr.keyword,"false"),fn:new pn("fn",mr.keyword,"fn"),for:new pn("for",mr.keyword,"for"),function:new pn("function",mr.keyword,"function"),if:new pn("if",mr.keyword,"if"),let:new pn("let",mr.keyword,"let"),const:new pn("const",mr.keyword,"const"),loop:new pn("loop",mr.keyword,"loop"),while:new pn("while",mr.keyword,"while"),private:new pn("private",mr.keyword,"private"),read:new pn("read",mr.keyword,"read"),read_write:new pn("read_write",mr.keyword,"read_write"),return:new pn("return",mr.keyword,"return"),storage:new pn("storage",mr.keyword,"storage"),switch:new pn("switch",mr.keyword,"switch"),true:new pn("true",mr.keyword,"true"),alias:new pn("alias",mr.keyword,"alias"),type:new pn("type",mr.keyword,"type"),uniform:new pn("uniform",mr.keyword,"uniform"),var:new pn("var",mr.keyword,"var"),override:new pn("override",mr.keyword,"override"),workgroup:new pn("workgroup",mr.keyword,"workgroup"),write:new pn("write",mr.keyword,"write"),r8unorm:new pn("r8unorm",mr.keyword,"r8unorm"),r8snorm:new pn("r8snorm",mr.keyword,"r8snorm"),r8uint:new pn("r8uint",mr.keyword,"r8uint"),r8sint:new pn("r8sint",mr.keyword,"r8sint"),r16uint:new pn("r16uint",mr.keyword,"r16uint"),r16sint:new pn("r16sint",mr.keyword,"r16sint"),r16float:new pn("r16float",mr.keyword,"r16float"),rg8unorm:new pn("rg8unorm",mr.keyword,"rg8unorm"),rg8snorm:new pn("rg8snorm",mr.keyword,"rg8snorm"),rg8uint:new pn("rg8uint",mr.keyword,"rg8uint"),rg8sint:new pn("rg8sint",mr.keyword,"rg8sint"),r32uint:new pn("r32uint",mr.keyword,"r32uint"),r32sint:new pn("r32sint",mr.keyword,"r32sint"),r32float:new pn("r32float",mr.keyword,"r32float"),rg16uint:new pn("rg16uint",mr.keyword,"rg16uint"),rg16sint:new pn("rg16sint",mr.keyword,"rg16sint"),rg16float:new pn("rg16float",mr.keyword,"rg16float"),rgba8unorm:new pn("rgba8unorm",mr.keyword,"rgba8unorm"),rgba8unorm_srgb:new pn("rgba8unorm_srgb",mr.keyword,"rgba8unorm_srgb"),rgba8snorm:new pn("rgba8snorm",mr.keyword,"rgba8snorm"),rgba8uint:new pn("rgba8uint",mr.keyword,"rgba8uint"),rgba8sint:new pn("rgba8sint",mr.keyword,"rgba8sint"),bgra8unorm:new pn("bgra8unorm",mr.keyword,"bgra8unorm"),bgra8unorm_srgb:new pn("bgra8unorm_srgb",mr.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new pn("rgb10a2unorm",mr.keyword,"rgb10a2unorm"),rg11b10float:new pn("rg11b10float",mr.keyword,"rg11b10float"),rg32uint:new pn("rg32uint",mr.keyword,"rg32uint"),rg32sint:new pn("rg32sint",mr.keyword,"rg32sint"),rg32float:new pn("rg32float",mr.keyword,"rg32float"),rgba16uint:new pn("rgba16uint",mr.keyword,"rgba16uint"),rgba16sint:new pn("rgba16sint",mr.keyword,"rgba16sint"),rgba16float:new pn("rgba16float",mr.keyword,"rgba16float"),rgba32uint:new pn("rgba32uint",mr.keyword,"rgba32uint"),rgba32sint:new pn("rgba32sint",mr.keyword,"rgba32sint"),rgba32float:new pn("rgba32float",mr.keyword,"rgba32float"),static_assert:new pn("static_assert",mr.keyword,"static_assert")},gn.tokens={decimal_float_literal:new pn("decimal_float_literal",mr.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new pn("hex_float_literal",mr.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new pn("int_literal",mr.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new pn("uint_literal",mr.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new pn("ident",mr.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new pn("and",mr.token,"&"),and_and:new pn("and_and",mr.token,"&&"),arrow:new pn("arrow ",mr.token,"->"),attr:new pn("attr",mr.token,"@"),attr_left:new pn("attr_left",mr.token,"[["),attr_right:new pn("attr_right",mr.token,"]]"),forward_slash:new pn("forward_slash",mr.token,"/"),bang:new pn("bang",mr.token,"!"),bracket_left:new pn("bracket_left",mr.token,"["),bracket_right:new pn("bracket_right",mr.token,"]"),brace_left:new pn("brace_left",mr.token,"{"),brace_right:new pn("brace_right",mr.token,"}"),colon:new pn("colon",mr.token,":"),comma:new pn("comma",mr.token,","),equal:new pn("equal",mr.token,"="),equal_equal:new pn("equal_equal",mr.token,"=="),not_equal:new pn("not_equal",mr.token,"!="),greater_than:new pn("greater_than",mr.token,">"),greater_than_equal:new pn("greater_than_equal",mr.token,">="),shift_right:new pn("shift_right",mr.token,">>"),less_than:new pn("less_than",mr.token,"<"),less_than_equal:new pn("less_than_equal",mr.token,"<="),shift_left:new pn("shift_left",mr.token,"<<"),modulo:new pn("modulo",mr.token,"%"),minus:new pn("minus",mr.token,"-"),minus_minus:new pn("minus_minus",mr.token,"--"),period:new pn("period",mr.token,"."),plus:new pn("plus",mr.token,"+"),plus_plus:new pn("plus_plus",mr.token,"++"),or:new pn("or",mr.token,"|"),or_or:new pn("or_or",mr.token,"||"),paren_left:new pn("paren_left",mr.token,"("),paren_right:new pn("paren_right",mr.token,")"),semicolon:new pn("semicolon",mr.token,";"),star:new pn("star",mr.token,"*"),tilde:new pn("tilde",mr.token,"~"),underscore:new pn("underscore",mr.token,"_"),xor:new pn("xor",mr.token,"^"),plus_equal:new pn("plus_equal",mr.token,"+="),minus_equal:new pn("minus_equal",mr.token,"-="),times_equal:new pn("times_equal",mr.token,"*="),division_equal:new pn("division_equal",mr.token,"/="),modulo_equal:new pn("modulo_equal",mr.token,"%="),and_equal:new pn("and_equal",mr.token,"&="),or_equal:new pn("or_equal",mr.token,"|="),xor_equal:new pn("xor_equal",mr.token,"^="),shift_right_equal:new pn("shift_right_equal",mr.token,">>="),shift_left_equal:new pn("shift_left_equal",mr.token,"<<=")},gn.storage_class=[fr.keywords.function,fr.keywords.private,fr.keywords.workgroup,fr.keywords.uniform,fr.keywords.storage],gn.access_mode=[fr.keywords.read,fr.keywords.write,fr.keywords.read_write],gn.sampler_type=[fr.keywords.sampler,fr.keywords.sampler_comparison],gn.sampled_texture_type=[fr.keywords.texture_1d,fr.keywords.texture_2d,fr.keywords.texture_2d_array,fr.keywords.texture_3d,fr.keywords.texture_cube,fr.keywords.texture_cube_array],gn.multisampled_texture_type=[fr.keywords.texture_multisampled_2d],gn.storage_texture_type=[fr.keywords.texture_storage_1d,fr.keywords.texture_storage_2d,fr.keywords.texture_storage_2d_array,fr.keywords.texture_storage_3d],gn.depth_texture_type=[fr.keywords.texture_depth_2d,fr.keywords.texture_depth_2d_array,fr.keywords.texture_depth_cube,fr.keywords.texture_depth_cube_array,fr.keywords.texture_depth_multisampled_2d],gn.texture_external_type=[fr.keywords.texture_external],gn.any_texture_type=[...fr.sampled_texture_type,...fr.multisampled_texture_type,...fr.storage_texture_type,...fr.depth_texture_type,...fr.texture_external_type],gn.texel_format=[fr.keywords.r8unorm,fr.keywords.r8snorm,fr.keywords.r8uint,fr.keywords.r8sint,fr.keywords.r16uint,fr.keywords.r16sint,fr.keywords.r16float,fr.keywords.rg8unorm,fr.keywords.rg8snorm,fr.keywords.rg8uint,fr.keywords.rg8sint,fr.keywords.r32uint,fr.keywords.r32sint,fr.keywords.r32float,fr.keywords.rg16uint,fr.keywords.rg16sint,fr.keywords.rg16float,fr.keywords.rgba8unorm,fr.keywords.rgba8unorm_srgb,fr.keywords.rgba8snorm,fr.keywords.rgba8uint,fr.keywords.rgba8sint,fr.keywords.bgra8unorm,fr.keywords.bgra8unorm_srgb,fr.keywords.rgb10a2unorm,fr.keywords.rg11b10float,fr.keywords.rg32uint,fr.keywords.rg32sint,fr.keywords.rg32float,fr.keywords.rgba16uint,fr.keywords.rgba16sint,fr.keywords.rgba16float,fr.keywords.rgba32uint,fr.keywords.rgba32sint,fr.keywords.rgba32float],gn.const_literal=[fr.tokens.int_literal,fr.tokens.uint_literal,fr.tokens.decimal_float_literal,fr.tokens.hex_float_literal,fr.keywords.true,fr.keywords.false],gn.literal_or_ident=[fr.tokens.ident,fr.tokens.int_literal,fr.tokens.uint_literal,fr.tokens.decimal_float_literal,fr.tokens.hex_float_literal],gn.element_count_expression=[fr.tokens.int_literal,fr.tokens.uint_literal,fr.tokens.ident],gn.template_types=[fr.keywords.vec2,fr.keywords.vec3,fr.keywords.vec4,fr.keywords.mat2x2,fr.keywords.mat2x3,fr.keywords.mat2x4,fr.keywords.mat3x2,fr.keywords.mat3x3,fr.keywords.mat3x4,fr.keywords.mat4x2,fr.keywords.mat4x3,fr.keywords.mat4x4,fr.keywords.atomic,fr.keywords.bitcast,...fr.any_texture_type],gn.attribute_name=[fr.tokens.ident,fr.keywords.block],gn.assignment_operators=[fr.tokens.equal,fr.tokens.plus_equal,fr.tokens.minus_equal,fr.tokens.times_equal,fr.tokens.division_equal,fr.tokens.modulo_equal,fr.tokens.and_equal,fr.tokens.or_equal,fr.tokens.xor_equal,fr.tokens.shift_right_equal,fr.tokens.shift_left_equal],gn.increment_operators=[fr.tokens.plus_plus,fr.tokens.minus_minus];class yn{constructor(e,t,r){this.type=e,this.lexeme=t,this.line=r}toString(){return this.lexeme}isTemplateType(){return-1!=gn.template_types.indexOf(this.type)}isArrayType(){return this.type==gn.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class _n{constructor(e){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=e?e:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new yn(gn.eof,"",this._line)),this._tokens}scanToken(){let e=this._advance();if("\n"==e)return this._line++,!0;if(this._isWhitespace(e))return!0;if("/"==e){if("/"==this._peekAhead()){for(;"\n"!=e;){if(this._isAtEnd())return!0;e=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let t=1;for(;t>0;){if(this._isAtEnd())return!0;if(e=this._advance(),"\n"==e)this._line++;else if("*"==e){if("/"==this._peekAhead()&&(this._advance(),t--,0==t))return!0}else"/"==e&&"*"==this._peekAhead()&&(this._advance(),t++)}return!0}}let t=gn.none;for(;;){let r=this._findType(e);const n=this._peekAhead();if(">"==e&&(">"==n||"="==n)){let e=!1,t=this._tokens.length-1;for(let r=0;r<5&&t>=0;++r,--t)if(this._tokens[t].type===gn.tokens.less_than){t>0&&this._tokens[t-1].isArrayOrTemplateType()&&(e=!0);break}if(e)return this._addToken(r),!0}if(r===gn.none){let n=e,i=0;const s=2;for(let e=0;e<s;++e)if(n+=this._peekAhead(e),r=this._findType(n),r!==gn.none){i=e;break}if(r===gn.none)return t!==gn.none&&(this._current--,this._addToken(t),!0);e=n,this._current+=i+1}if(t=r,this._isAtEnd())break;e+=this._advance()}return t!==gn.none&&(this._addToken(t),!0)}_findType(e){for(const t in gn.keywords){const r=gn.keywords[t];if(this._match(e,r.rule))return r}for(const t in gn.tokens){const r=gn.tokens[t];if(this._match(e,r.rule))return r}return gn.none}_match(e,t){if("string"==typeof t){if(t==e)return!0}else{const r=t.exec(e);if(r&&0==r.index&&r[0]==e)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(e){return" "==e||"\t"==e||"\r"==e}_advance(e=0){let t=this._source[this._current];return e=e||0,e++,this._current+=e,t}_peekAhead(e=0){return e=e||0,this._current+e>=this._source.length?"\0":this._source[this._current+e]}_addToken(e){const t=this._source.substring(this._start,this._current);this._tokens.push(new yn(e,t,this._line))}}class xn{constructor(){this._tokens=[],this._current=0,this._context=new gr}parse(e){this._initialize(e);let t=[];for(;!this._isAtEnd();){const e=this._global_decl_or_directive();if(!e)break;t.push(e)}return t}_initialize(e){if(e)if("string"==typeof e){const t=new _n(e);this._tokens=t.scanTokens()}else this._tokens=e;else this._tokens=[];this._current=0}_error(e,t){return console.error(e,t),{token:e,message:t,toString:function(){return`${t}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==gn.eof}_match(e){if(e instanceof pn)return!!this._check(e)&&(this._advance(),!0);for(let t=0,r=e.length;t<r;++t){const r=e[t];if(this._check(r))return this._advance(),!0}return!1}_consume(e,t){if(this._check(e))return this._advance();throw this._error(this._peek(),t)}_check(e){if(this._isAtEnd())return!1;const t=this._peek();if(e instanceof Array){let r=t.type;return-1!=e.indexOf(r)}return t.type==e}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(gn.tokens.semicolon)&&!this._isAtEnd(););if(this._match(gn.keywords.alias)){const e=this._type_alias();return this._consume(gn.tokens.semicolon,"Expected ';'"),e}if(this._match(gn.keywords.enable)){const e=this._enable_directive();return this._consume(gn.tokens.semicolon,"Expected ';'"),e}const e=this._attribute();if(this._check(gn.keywords.var)){const t=this._global_variable_decl();return null!=t&&(t.attributes=e),this._consume(gn.tokens.semicolon,"Expected ';'."),t}if(this._check(gn.keywords.override)){const t=this._override_variable_decl();return null!=t&&(t.attributes=e),this._consume(gn.tokens.semicolon,"Expected ';'."),t}if(this._check(gn.keywords.let)){const t=this._global_let_decl();return null!=t&&(t.attributes=e),this._consume(gn.tokens.semicolon,"Expected ';'."),t}if(this._check(gn.keywords.const)){const t=this._global_const_decl();return null!=t&&(t.attributes=e),this._consume(gn.tokens.semicolon,"Expected ';'."),t}if(this._check(gn.keywords.struct)){const t=this._struct_decl();return null!=t&&(t.attributes=e),t}if(this._check(gn.keywords.fn)){const t=this._function_decl();return null!=t&&(t.attributes=e),t}return null}_function_decl(){if(!this._match(gn.keywords.fn))return null;const e=this._consume(gn.tokens.ident,"Expected function name.").toString();this._consume(gn.tokens.paren_left,"Expected '(' for function arguments.");const t=[];if(!this._check(gn.tokens.paren_right))do{if(this._check(gn.tokens.paren_right))break;const e=this._attribute(),r=this._consume(gn.tokens.ident,"Expected argument name.").toString();this._consume(gn.tokens.colon,"Expected ':' for argument type.");const n=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=n,t.push(new hn(r,i,e)))}while(this._match(gn.tokens.comma));this._consume(gn.tokens.paren_right,"Expected ')' after function arguments.");let r=null;if(this._match(gn.tokens.arrow)){const e=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=e)}const n=this._compound_statement();return new br(e,t,r,n)}_compound_statement(){const e=[];for(this._consume(gn.tokens.brace_left,"Expected '{' for block.");!this._check(gn.tokens.brace_right);){const t=this._statement();null!==t&&e.push(t)}return this._consume(gn.tokens.brace_right,"Expected '}' for block."),e}_statement(){for(;this._match(gn.tokens.semicolon)&&!this._isAtEnd(););if(this._check(gn.keywords.if))return this._if_statement();if(this._check(gn.keywords.switch))return this._switch_statement();if(this._check(gn.keywords.loop))return this._loop_statement();if(this._check(gn.keywords.for))return this._for_statement();if(this._check(gn.keywords.while))return this._while_statement();if(this._check(gn.keywords.continuing))return this._continuing_statement();if(this._check(gn.keywords.static_assert))return this._static_assert_statement();if(this._check(gn.tokens.brace_left))return this._compound_statement();let e=null;return e=this._check(gn.keywords.return)?this._return_statement():this._check([gn.keywords.var,gn.keywords.let,gn.keywords.const])?this._variable_statement():this._match(gn.keywords.discard)?new jr:this._match(gn.keywords.break)?new Vr:this._match(gn.keywords.continue)?new Lr:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=e&&this._consume(gn.tokens.semicolon,"Expected ';' after statement."),e}_static_assert_statement(){if(!this._match(gn.keywords.static_assert))return null;let e=this._optional_paren_expression();return new wr(e)}_while_statement(){if(!this._match(gn.keywords.while))return null;let e=this._optional_paren_expression();const t=this._compound_statement();return new kr(e,t)}_continuing_statement(){if(!this._match(gn.keywords.continuing))return null;const e=this._compound_statement();return new Tr(e)}_for_statement(){if(!this._match(gn.keywords.for))return null;this._consume(gn.tokens.paren_left,"Expected '('.");const e=this._check(gn.tokens.semicolon)?null:this._for_init();this._consume(gn.tokens.semicolon,"Expected ';'.");const t=this._check(gn.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(gn.tokens.semicolon,"Expected ';'.");const r=this._check(gn.tokens.paren_right)?null:this._for_increment();this._consume(gn.tokens.paren_right,"Expected ')'.");const n=this._compound_statement();return new Mr(e,t,r,n)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(gn.keywords.var)){const e=this._variable_decl();if(null===e)throw this._error(this._peek(),"Variable declaration expected.");let t=null;return this._match(gn.tokens.equal)&&(t=this._short_circuit_or_expression()),new Sr(e.name,e.type,e.storage,e.access,t)}if(this._match(gn.keywords.let)){const e=this._consume(gn.tokens.ident,"Expected name for let.").toString();let t=null;if(this._match(gn.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(gn.tokens.equal,"Expected '=' for let.");const r=this._short_circuit_or_expression();return new Er(e,t,null,null,r)}if(this._match(gn.keywords.const)){const e=this._consume(gn.tokens.ident,"Expected name for const.").toString();let t=null;if(this._match(gn.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(gn.tokens.equal,"Expected '=' for const.");const r=this._short_circuit_or_expression();return new Ir(e,t,null,null,r)}return null}_increment_decrement_statement(){const e=this._current,t=this._unary_expression();if(null==t)return null;if(!this._check(gn.increment_operators))return this._current=e,null;const r=this._consume(gn.increment_operators,"Expected increment operator");return new Ar(r.type===gn.tokens.plus_plus?hr.increment:hr.decrement,t)}_assignment_statement(){let e=null;if(this._check(gn.tokens.brace_right))return null;let t=this._match(gn.tokens.underscore);if(t||(e=this._unary_expression()),!t&&null==e)return null;const r=this._consume(gn.assignment_operators,"Expected assignment operator."),n=this._short_circuit_or_expression();return new Br(dr.parse(r.lexeme),e,n)}_func_call_statement(){if(!this._check(gn.tokens.ident))return null;const e=this._current,t=this._consume(gn.tokens.ident,"Expected function name."),r=this._argument_expression_list();return null===r?(this._current=e,null):new Or(t.lexeme,r)}_loop_statement(){if(!this._match(gn.keywords.loop))return null;this._consume(gn.tokens.brace_left,"Expected '{' for loop.");const e=[];let t=this._statement();for(;null!==t;){if(Array.isArray(t))for(let r of t)e.push(r);else e.push(t);t=this._statement()}let r=null;return this._match(gn.keywords.continuing)&&(r=this._compound_statement()),this._consume(gn.tokens.brace_right,"Expected '}' for loop."),new zr(e,r)}_switch_statement(){if(!this._match(gn.keywords.switch))return null;const e=this._optional_paren_expression();this._consume(gn.tokens.brace_left,"Expected '{' for switch.");const t=this._switch_body();if(null==t||0==t.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(gn.tokens.brace_right,"Expected '}' for switch."),new Ur(e,t)}_switch_body(){const e=[];if(this._match(gn.keywords.case)){const t=this._case_selectors();this._match(gn.tokens.colon),this._consume(gn.tokens.brace_left,"Exected '{' for switch case.");const r=this._case_body();this._consume(gn.tokens.brace_right,"Exected '}' for switch case."),e.push(new un(t,r))}if(this._match(gn.keywords.default)){this._match(gn.tokens.colon),this._consume(gn.tokens.brace_left,"Exected '{' for switch default.");const t=this._case_body();this._consume(gn.tokens.brace_right,"Exected '}' for switch default."),e.push(new ln(t))}if(this._check([gn.keywords.default,gn.keywords.case])){const t=this._switch_body();e.push(t[0])}return e}_case_selectors(){var e,t,r,n;const i=[null!==(t=null===(e=this._shift_expression())||void 0===e?void 0:e.evaluate(this._context).toString())&&void 0!==t?t:""];for(;this._match(gn.tokens.comma);)i.push(null!==(n=null===(r=this._shift_expression())||void 0===r?void 0:r.evaluate(this._context).toString())&&void 0!==n?n:"");return i}_case_body(){if(this._match(gn.keywords.fallthrough))return this._consume(gn.tokens.semicolon,"Expected ';'"),[];let e=this._statement();if(null==e)return[];e instanceof Array||(e=[e]);const t=this._case_body();return 0==t.length?e:[...e,t[0]]}_if_statement(){if(!this._match(gn.keywords.if))return null;const e=this._optional_paren_expression(),t=this._compound_statement();let r=[];this._match_elseif()&&(r=this._elseif_statement(r));let n=null;return this._match(gn.keywords.else)&&(n=this._compound_statement()),new Rr(e,t,r,n)}_match_elseif(){return this._tokens[this._current].type===gn.keywords.else&&this._tokens[this._current+1].type===gn.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(e=[]){const t=this._optional_paren_expression(),r=this._compound_statement();return e.push(new dn(t,r)),this._match_elseif()&&this._elseif_statement(e),e}_return_statement(){if(!this._match(gn.keywords.return))return null;const e=this._short_circuit_or_expression();return new Dr(e)}_short_circuit_or_expression(){let e=this._short_circuit_and_expr();for(;this._match(gn.tokens.or_or);)e=new on(this._previous().toString(),e,this._short_circuit_and_expr());return e}_short_circuit_and_expr(){let e=this._inclusive_or_expression();for(;this._match(gn.tokens.and_and);)e=new on(this._previous().toString(),e,this._inclusive_or_expression());return e}_inclusive_or_expression(){let e=this._exclusive_or_expression();for(;this._match(gn.tokens.or);)e=new on(this._previous().toString(),e,this._exclusive_or_expression());return e}_exclusive_or_expression(){let e=this._and_expression();for(;this._match(gn.tokens.xor);)e=new on(this._previous().toString(),e,this._and_expression());return e}_and_expression(){let e=this._equality_expression();for(;this._match(gn.tokens.and);)e=new on(this._previous().toString(),e,this._equality_expression());return e}_equality_expression(){const e=this._relational_expression();return this._match([gn.tokens.equal_equal,gn.tokens.not_equal])?new on(this._previous().toString(),e,this._relational_expression()):e}_relational_expression(){let e=this._shift_expression();for(;this._match([gn.tokens.less_than,gn.tokens.greater_than,gn.tokens.less_than_equal,gn.tokens.greater_than_equal]);)e=new on(this._previous().toString(),e,this._shift_expression());return e}_shift_expression(){let e=this._additive_expression();for(;this._match([gn.tokens.shift_left,gn.tokens.shift_right]);)e=new on(this._previous().toString(),e,this._additive_expression());return e}_additive_expression(){let e=this._multiplicative_expression();for(;this._match([gn.tokens.plus,gn.tokens.minus]);)e=new on(this._previous().toString(),e,this._multiplicative_expression());return e}_multiplicative_expression(){let e=this._unary_expression();for(;this._match([gn.tokens.star,gn.tokens.forward_slash,gn.tokens.modulo]);)e=new on(this._previous().toString(),e,this._unary_expression());return e}_unary_expression(){return this._match([gn.tokens.minus,gn.tokens.bang,gn.tokens.tilde,gn.tokens.star,gn.tokens.and])?new an(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const e=this._primary_expression(),t=this._postfix_expression();return t&&(e.postfix=t),e}_postfix_expression(){if(this._match(gn.tokens.bracket_left)){const e=this._short_circuit_or_expression();this._consume(gn.tokens.bracket_right,"Expected ']'.");const t=this._postfix_expression();return t&&(e.postfix=t),e}if(this._match(gn.tokens.period)){const e=this._consume(gn.tokens.ident,"Expected member name."),t=this._postfix_expression(),r=new Zr(e.lexeme);return t&&(r.postfix=t),r}return null}_getStruct(e){return this._context.aliases.has(e)?this._context.aliases.get(e).type:this._context.structs.has(e)?this._context.structs.get(e):null}_primary_expression(){if(this._match(gn.tokens.ident)){const e=this._previous().toString();if(this._check(gn.tokens.paren_left)){const t=this._argument_expression_list(),r=this._getStruct(e);return null!=r?new Hr(r,t):new Kr(e,t)}if(this._context.constants.has(e)){const t=this._context.constants.get(e);return new Jr(e,t.value)}return new Qr(e)}if(this._match(gn.const_literal))return new en(parseFloat(this._previous().toString()));if(this._check(gn.tokens.paren_left))return this._paren_expression();if(this._match(gn.keywords.bitcast)){this._consume(gn.tokens.less_than,"Expected '<'.");const e=this._type_decl();this._consume(gn.tokens.greater_than,"Expected '>'.");const t=this._paren_expression();return new tn(e,t)}const e=this._type_decl(),t=this._argument_expression_list();return new rn(e,t)}_argument_expression_list(){if(!this._match(gn.tokens.paren_left))return null;const e=[];do{if(this._check(gn.tokens.paren_right))break;const t=this._short_circuit_or_expression();e.push(t)}while(this._match(gn.tokens.comma));return this._consume(gn.tokens.paren_right,"Expected ')' for agument list"),e}_optional_paren_expression(){this._match(gn.tokens.paren_left);const e=this._short_circuit_or_expression();return this._match(gn.tokens.paren_right),new nn([e])}_paren_expression(){this._consume(gn.tokens.paren_left,"Expected '('.");const e=this._short_circuit_or_expression();return this._consume(gn.tokens.paren_right,"Expected ')'."),new nn([e])}_struct_decl(){if(!this._match(gn.keywords.struct))return null;const e=this._consume(gn.tokens.ident,"Expected name for struct.").toString();this._consume(gn.tokens.brace_left,"Expected '{' for struct body.");const t=[];for(;!this._check(gn.tokens.brace_right);){const e=this._attribute(),r=this._consume(gn.tokens.ident,"Expected variable name.").toString();this._consume(gn.tokens.colon,"Expected ':' for struct member type.");const n=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=n),this._check(gn.tokens.brace_right)?this._match(gn.tokens.comma):this._consume(gn.tokens.comma,"Expected ',' for struct member."),t.push(new fn(r,i,e))}this._consume(gn.tokens.brace_right,"Expected '}' after struct body.");const r=new qr(e,t);return this._context.structs.set(e,r),r}_global_variable_decl(){const e=this._variable_decl();return e&&this._match(gn.tokens.equal)&&(e.value=this._const_expression()),e}_override_variable_decl(){const e=this._override_decl();return e&&this._match(gn.tokens.equal)&&(e.value=this._const_expression()),e}_global_const_decl(){if(!this._match(gn.keywords.const))return null;const e=this._consume(gn.tokens.ident,"Expected variable name");let t=null;if(this._match(gn.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let r=null;if(this._match(gn.tokens.equal)){const e=this._short_circuit_or_expression();if(e instanceof Hr)r=e;else if(e instanceof Jr&&e.initializer instanceof Hr)r=e.initializer;else try{const t=e.evaluate(this._context);r=new en(t)}catch(t){r=e}}const n=new Ir(e.toString(),t,"","",r);return this._context.constants.set(n.name,n),n}_global_let_decl(){if(!this._match(gn.keywords.let))return null;const e=this._consume(gn.tokens.ident,"Expected variable name");let t=null;if(this._match(gn.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let r=null;return this._match(gn.tokens.equal)&&(r=this._const_expression()),new Er(e.toString(),t,"","",r)}_const_expression(){if(this._match(gn.const_literal))return new Zr(this._previous().toString());const e=this._type_decl();this._consume(gn.tokens.paren_left,"Expected '('.");let t=[];for(;!this._check(gn.tokens.paren_right)&&(t.push(this._const_expression()),this._check(gn.tokens.comma));)this._advance();return this._consume(gn.tokens.paren_right,"Expected ')'."),new Hr(e,t)}_variable_decl(){if(!this._match(gn.keywords.var))return null;let e="",t="";this._match(gn.tokens.less_than)&&(e=this._consume(gn.storage_class,"Expected storage_class.").toString(),this._match(gn.tokens.comma)&&(t=this._consume(gn.access_mode,"Expected access_mode.").toString()),this._consume(gn.tokens.greater_than,"Expected '>'."));const r=this._consume(gn.tokens.ident,"Expected variable name");let n=null;if(this._match(gn.tokens.colon)){const e=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=e)}return new Sr(r.toString(),n,e,t,null)}_override_decl(){if(!this._match(gn.keywords.override))return null;const e=this._consume(gn.tokens.ident,"Expected variable name");let t=null;if(this._match(gn.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}return new Pr(e.toString(),t,null)}_enable_directive(){const e=this._consume(gn.tokens.ident,"identity expected.");return new Cr(e.toString())}_type_alias(){const e=this._consume(gn.tokens.ident,"identity expected.");this._consume(gn.tokens.equal,"Expected '=' for type alias.");let t=this._type_decl();if(null===t)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);const r=new Nr(e.toString(),t);return this._context.aliases.set(r.name,r),r}_type_decl(){if(this._check([gn.tokens.ident,...gn.texel_format,gn.keywords.bool,gn.keywords.f32,gn.keywords.i32,gn.keywords.u32])){const e=this._advance(),t=e.toString();return this._context.structs.has(t)?this._context.structs.get(t):this._context.aliases.has(t)?this._context.aliases.get(t).type:new Gr(e.toString())}let e=this._texture_sampler_types();if(e)return e;if(this._check(gn.template_types)){let e=this._advance().toString(),t=null,r=null;return this._match(gn.tokens.less_than)&&(t=this._type_decl(),r=null,this._match(gn.tokens.comma)&&(r=this._consume(gn.access_mode,"Expected access_mode for pointer").toString()),this._consume(gn.tokens.greater_than,"Expected '>' for type.")),new Fr(e,t,r)}if(this._match(gn.keywords.ptr)){let e=this._previous().toString();this._consume(gn.tokens.less_than,"Expected '<' for pointer.");const t=this._consume(gn.storage_class,"Expected storage_class for pointer");this._consume(gn.tokens.comma,"Expected ',' for pointer.");const r=this._type_decl();let n=null;return this._match(gn.tokens.comma)&&(n=this._consume(gn.access_mode,"Expected access_mode for pointer").toString()),this._consume(gn.tokens.greater_than,"Expected '>' for pointer."),new Yr(e,t.toString(),r,n)}const t=this._attribute();if(this._match(gn.keywords.array)){let e=null,r=-1;const n=this._previous();if(this._match(gn.tokens.less_than)){e=this._type_decl(),this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);let t="";this._match(gn.tokens.comma)&&(t=this._shift_expression().evaluate(this._context).toString()),this._consume(gn.tokens.greater_than,"Expected '>' for array."),r=t?parseInt(t):0}return new $r(n.toString(),t,e,r)}return null}_texture_sampler_types(){if(this._match(gn.sampler_type))return new Wr(this._previous().toString(),null,null);if(this._match(gn.depth_texture_type))return new Wr(this._previous().toString(),null,null);if(this._match(gn.sampled_texture_type)||this._match(gn.multisampled_texture_type)){const e=this._previous();this._consume(gn.tokens.less_than,"Expected '<' for sampler type.");const t=this._type_decl();return this._consume(gn.tokens.greater_than,"Expected '>' for sampler type."),new Wr(e.toString(),t,null)}if(this._match(gn.storage_texture_type)){const e=this._previous();this._consume(gn.tokens.less_than,"Expected '<' for sampler type.");const t=this._consume(gn.texel_format,"Invalid texel format.").toString();this._consume(gn.tokens.comma,"Expected ',' after texel format.");const r=this._consume(gn.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(gn.tokens.greater_than,"Expected '>' for sampler type."),new Wr(e.toString(),t,r)}return null}_attribute(){let e=[];for(;this._match(gn.tokens.attr);){const t=this._consume(gn.attribute_name,"Expected attribute name"),r=new mn(t.toString(),null);if(this._match(gn.tokens.paren_left)){if(r.value=this._consume(gn.literal_or_ident,"Expected attribute value").toString(),this._check(gn.tokens.comma)){this._advance();do{const e=this._consume(gn.literal_or_ident,"Expected attribute value").toString();r.value instanceof Array||(r.value=[r.value]),r.value.push(e)}while(this._match(gn.tokens.comma))}this._consume(gn.tokens.paren_right,"Expected ')'")}e.push(r)}for(;this._match(gn.tokens.attr_left);){if(!this._check(gn.tokens.attr_right))do{const t=this._consume(gn.attribute_name,"Expected attribute name"),r=new mn(t.toString(),null);if(this._match(gn.tokens.paren_left)){if(r.value=[this._consume(gn.literal_or_ident,"Expected attribute value").toString()],this._check(gn.tokens.comma)){this._advance();do{const e=this._consume(gn.literal_or_ident,"Expected attribute value").toString();r.value.push(e)}while(this._match(gn.tokens.comma))}this._consume(gn.tokens.paren_right,"Expected ')'")}e.push(r)}while(this._match(gn.tokens.comma));this._consume(gn.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==e.length?null:e}}class vn{constructor(e,t){this.name=e,this.attributes=t,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class bn{constructor(e,t,r){this.name=e,this.type=t,this.attributes=r,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class wn extends vn{constructor(e,t){super(e,t),this.members=[],this.align=0}get isStruct(){return!0}}class kn extends vn{constructor(e,t){super(e,t),this.count=0,this.stride=0}get isArray(){return!0}}class Tn extends vn{constructor(e,t,r,n){super(e,r),this.format=t,this.access=n}get isTemplate(){return!0}}!function(e){e[e.Uniform=0]="Uniform",e[e.Storage=1]="Storage",e[e.Texture=2]="Texture",e[e.Sampler=3]="Sampler",e[e.StorageTexture=4]="StorageTexture"}(pr||(pr={}));class Mn{constructor(e,t,r,n,i,s,a){this.name=e,this.type=t,this.group=r,this.binding=n,this.attributes=i,this.resourceType=s,this.access=a}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class Sn{constructor(e,t){this.name=e,this.type=t}}class Pn{constructor(e,t){this.align=e,this.size=t}}class En{constructor(e,t,r,n){this.name=e,this.type=t,this.locationType=r,this.location=n,this.interpolation=null}}class In{constructor(e,t,r,n){this.name=e,this.type=t,this.locationType=r,this.location=n}}class An{constructor(e,t=null){this.stage=null,this.inputs=[],this.outputs=[],this.resources=[],this.name=e,this.stage=t}}class Bn{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class On{constructor(e,t,r,n){this.name=e,this.type=t,this.attributes=r,this.id=n}}class zn{constructor(e){this.resources=null,this.node=e}}class Un{constructor(e){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new Bn,this._types=new Map,this._functions=new Map,e&&this.update(e)}_isStorageTexture(e){return"texture_storage_1d"==e.name||"texture_storage_2d"==e.name||"texture_storage_2d_array"==e.name||"texture_storage_3d"==e.name}update(e){const t=(new xn).parse(e);for(const e of t)e instanceof br&&this._functions.set(e.name,new zn(e));for(const e of t)if(e instanceof qr){const t=this._getTypeInfo(e,null);t instanceof wn&&this.structs.push(t)}else if(e instanceof Nr)this.aliases.push(this._getAliasInfo(e));else if(e instanceof Pr){const t=e,r=this._getAttributeNum(t.attributes,"id",0),n=null!=t.type?this._getTypeInfo(t.type,t.attributes):null;this.overrides.push(new On(t.name,n,t.attributes,r))}else if(this._isUniformVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new Mn(t.name,i,r,n,t.attributes,pr.Uniform,t.access);this.uniforms.push(s)}else if(this._isStorageVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=this._isStorageTexture(i),a=new Mn(t.name,i,r,n,t.attributes,s?pr.StorageTexture:pr.Storage,t.access);this.storage.push(a)}else if(this._isTextureVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=this._isStorageTexture(i),a=new Mn(t.name,i,r,n,t.attributes,s?pr.StorageTexture:pr.Texture,t.access);s?this.storage.push(a):this.textures.push(a)}else if(this._isSamplerVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new Mn(t.name,i,r,n,t.attributes,pr.Sampler,t.access);this.samplers.push(s)}else if(e instanceof br){const t=this._getAttribute(e,"vertex"),r=this._getAttribute(e,"fragment"),n=this._getAttribute(e,"compute"),i=t||r||n;if(i){const t=new An(e.name,null==i?void 0:i.name);t.inputs=this._getInputs(e.args),t.outputs=this._getOutputs(e.returnType),t.resources=this._findResources(e),this.entry[i.name].push(t)}}}_findResource(e){for(const t of this.uniforms)if(t.name==e)return t;for(const t of this.storage)if(t.name==e)return t;for(const t of this.textures)if(t.name==e)return t;for(const t of this.samplers)if(t.name==e)return t;return null}_findResources(e){const t=[],r=this,n=[];return e.search((e=>{if(e instanceof _r)n.push({});else if(e instanceof xr)n.pop();else if(e instanceof Sr){if(n.length>0){const t=e;n[n.length-1][t.name]=t}}else if(e instanceof Er){if(n.length>0){const t=e;n[n.length-1][t.name]=t}}else if(e instanceof Qr){const i=e;if(n.length>0&&n[n.length-1][i.name])return;const s=r._findResource(i.name);s&&t.push(s)}else if(e instanceof Kr){const n=e,i=r._functions.get(n.name);i&&(null===i.resources&&(i.resources=r._findResources(i.node)),t.push(...i.resources))}})),[...new Map(t.map((e=>[e.name,e]))).values()]}getBindGroups(){const e=[];function t(t,r){t>=e.length&&(e.length=t+1),void 0===e[t]&&(e[t]=[]),r>=e[t].length&&(e[t].length=r+1)}for(const r of this.uniforms)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.storage)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.textures)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.samplers)t(r.group,r.binding),e[r.group][r.binding]=r;return e}_getOutputs(e,t=void 0){if(void 0===t&&(t=[]),e instanceof qr)this._getStructOutputs(e,t);else{const r=this._getOutputInfo(e);null!==r&&t.push(r)}return t}_getStructOutputs(e,t){for(const r of e.members)if(r.type instanceof qr)this._getStructOutputs(r.type,t);else{const e=this._getAttribute(r,"location")||this._getAttribute(r,"builtin");if(null!==e){const n=this._getTypeInfo(r.type,r.type.attributes),i=this._parseInt(e.value),s=new In(r.name,n,e.name,i);t.push(s)}}}_getOutputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const r=this._getTypeInfo(e,e.attributes),n=this._parseInt(t.value);return new In("",r,t.name,n)}return null}_getInputs(e,t=void 0){void 0===t&&(t=[]);for(const r of e)if(r.type instanceof qr)this._getStructInputs(r.type,t);else{const e=this._getInputInfo(r);null!==e&&t.push(e)}return t}_getStructInputs(e,t){for(const r of e.members)if(r.type instanceof qr)this._getStructInputs(r.type,t);else{const e=this._getInputInfo(r);null!==e&&t.push(e)}}_getInputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const r=this._getAttribute(e,"interpolation"),n=this._getTypeInfo(e.type,e.attributes),i=this._parseInt(t.value),s=new En(e.name,n,t.name,i);return null!==r&&(s.interpolation=this._parseString(r.value)),s}return null}_parseString(e){return e instanceof Array&&(e=e[0]),e}_parseInt(e){e instanceof Array&&(e=e[0]);const t=parseInt(e);return isNaN(t)?e:t}_getAlias(e){for(const t of this.aliases)if(t.name==e)return t.type;return null}_getAliasInfo(e){return new Sn(e.name,this._getTypeInfo(e.type,null))}_getTypeInfo(e,t){if(this._types.has(e))return this._types.get(e);if(e instanceof $r){const r=e,n=this._getTypeInfo(r.format,r.attributes),i=new kn(r.name,t);return i.format=n,i.count=r.count,this._types.set(e,i),this._updateTypeInfo(i),i}if(e instanceof qr){const r=e,n=new wn(r.name,t);for(const e of r.members){const t=this._getTypeInfo(e.type,e.attributes);n.members.push(new bn(e.name,t,e.attributes))}return this._types.set(e,n),this._updateTypeInfo(n),n}if(e instanceof Wr){const r=e,n=r.format instanceof Gr,i=r.format?n?this._getTypeInfo(r.format,null):new vn(r.format,null):null,s=new Tn(r.name,i,t,r.access);return this._types.set(e,s),this._updateTypeInfo(s),s}if(e instanceof Fr){const r=e,n=r.format?this._getTypeInfo(r.format,null):null,i=new Tn(r.name,n,t,r.access);return this._types.set(e,i),this._updateTypeInfo(i),i}const r=new vn(e.name,t);return this._types.set(e,r),this._updateTypeInfo(r),r}_updateTypeInfo(e){var t,r;const n=this._getTypeSize(e);if(e.size=null!==(t=null==n?void 0:n.size)&&void 0!==t?t:0,e instanceof kn){const t=this._getTypeSize(e.format);e.stride=null!==(r=null==t?void 0:t.size)&&void 0!==r?r:0,this._updateTypeInfo(e.format)}e instanceof wn&&this._updateStructInfo(e)}_updateStructInfo(e){var t;let r=0,n=0,i=0,s=0;for(let a=0,o=e.members.length;a<o;++a){const o=e.members[a],c=this._getTypeSize(o);if(!c)continue;null!==(t=this._getAlias(o.type.name))&&void 0!==t||o.type;const u=c.align,l=c.size;r=this._roundUp(u,r+n),n=l,i=r,s=Math.max(s,u),o.offset=r,o.size=l,this._updateTypeInfo(o.type)}e.size=this._roundUp(s,i+n),e.align=s}_getTypeSize(e){var t;if(null==e)return null;const r=this._getAttributeNum(e.attributes,"size",0),n=this._getAttributeNum(e.attributes,"align",0);if(e instanceof bn&&(e=e.type),e instanceof vn){const t=this._getAlias(e.name);null!==t&&(e=t)}{const t=Un._typeInfo[e.name];if(void 0!==t){const i="f16"===e.format?2:1;return new Pn(Math.max(n,t.align/i),Math.max(r,t.size/i))}}{const t=Un._typeInfo[e.name.substring(0,e.name.length-1)];if(t){const i="h"===e.name[e.name.length-1]?2:1;return new Pn(Math.max(n,t.align/i),Math.max(r,t.size/i))}}if(e instanceof kn){let i=e,s=8,a=8;const o=this._getTypeSize(i.format);return null!==o&&(a=o.size,s=o.align),a=i.count*this._getAttributeNum(null!==(t=null==e?void 0:e.attributes)&&void 0!==t?t:null,"stride",this._roundUp(s,a)),r&&(a=r),new Pn(Math.max(n,s),Math.max(r,a))}if(e instanceof wn){let t=0,i=0,s=0,a=0,o=0;for(const r of e.members){const e=this._getTypeSize(r.type);null!==e&&(t=Math.max(e.align,t),s=this._roundUp(e.align,s+a),a=e.size,o=s)}return i=this._roundUp(t,o+a),new Pn(Math.max(n,t),Math.max(r,i))}return null}_isUniformVar(e){return e instanceof Sr&&"uniform"==e.storage}_isStorageVar(e){return e instanceof Sr&&"storage"==e.storage}_isTextureVar(e){return e instanceof Sr&&null!==e.type&&-1!=Un._textureTypes.indexOf(e.type.name)}_isSamplerVar(e){return e instanceof Sr&&null!==e.type&&-1!=Un._samplerTypes.indexOf(e.type.name)}_getAttribute(e,t){const r=e;if(!r||!r.attributes)return null;const n=r.attributes;for(let e of n)if(e.name==t)return e;return null}_getAttributeNum(e,t,r){if(null===e)return r;for(let n of e)if(n.name==t){let e=null!==n&&null!==n.value?n.value:r;return e instanceof Array&&(e=e[0]),"number"==typeof e?e:"string"==typeof e?parseInt(e):r}return r}_roundUp(e,t){return Math.ceil(t/e)*e}}function Rn(e,t){const r=function(e){return Array.isArray(e)||ar(e)?[...e,1,1].slice(0,3):function(e){return[e.width,e.height||1,e.depthOrArrayLayers||1]}(e)}(e),n=Math.max(...r.slice(0,"3d"===t?3:2));return 1+Math.log2(n)|0}Un._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},Un._textureTypes=gn.any_texture_type.map((e=>e.name)),Un._samplerTypes=gn.sampler_type.map((e=>e.name));const Dn=new WeakMap;const Cn=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function Nn(e){return ar(e)||Array.isArray(e)||function(e){const t=e;return ar(t.data)||Array.isArray(t.data)}(e)}function jn(e){switch(e){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Cn.entries()].map((([e,{formats:[t,r]}])=>[[t,e],[r,e]])).flat());const Vn={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},Ln=/([a-z]+)(\d+)([a-z]+)/;function Gn(e){const[,t,r,n]=Ln.exec(e),i=t.length,s=parseInt(r)/8;return{channels:t,numChannels:i,bytesPerChannel:s,bytesPerElement:i*s,Type:Vn[`${r}${n}`]}}function qn(e,t,r,n={}){r.forEach(((r,i)=>{const s=[0,0,i+(n.baseArrayLayer||0)];if(Nn(r))!function(e,t,r,n){const i=function(e,t){if(ar(e))return e;const{Type:r}=Gn(t);return new r(e)}(r.data||r,t.format),s=function(e,t){return[e.width,e.height,e.depthOrArrayLayers].map((e=>Math.max(1,Math.floor(e/1))))}(t),{bytesPerElement:a}=Gn(t.format),o=n.origin||[0,0,0];e.queue.writeTexture({texture:t,origin:o},i,{bytesPerRow:a*s[0],rowsPerImage:s[1]},s)}(e,t,r,{origin:s});else{const i=r,{flipY:a,premultipliedAlpha:o,colorSpace:c}=n;e.queue.copyExternalImageToTexture({source:i,flipY:a},{texture:t,premultipliedAlpha:o,colorSpace:c,origin:s},Fn(i,n))}})),t.mipLevelCount>1&&function(e,t,r){let n=Dn.get(e);n||(n={pipelineByFormatAndView:{},moduleByViewType:{}},Dn.set(e,n));let{sampler:i,uniformBuffer:s,uniformValues:a}=n;const{pipelineByFormatAndView:o,moduleByViewType:c}=n;r=r||function(e){switch(e.dimension){case"1d":return"1d";case"3d":return"3d";default:return e.depthOrArrayLayers>1?"2d-array":"2d"}}(t);let u=c[r];if(!u){const t=function(e){let t,r;switch(e){case"2d":t="texture_2d<f32>",r="textureSample(ourTexture, ourSampler, fsInput.texcoord)";break;case"2d-array":t="texture_2d_array<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              fsInput.texcoord,\n              uni.layer)";break;case"cube":t="texture_cube<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1))";break;case"cube-array":t="texture_cube_array<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1), uni.layer)";break;default:throw new Error(`unsupported view: ${e}`)}return`\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        struct Uniforms {\n          layer: u32,\n        };\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: ${t};\n        @group(0) @binding(2) var<uniform> uni: Uniforms;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          _ = uni.layer; // make sure this is used so all pipelines have the same bindings\n          return ${r};\n        }\n      `}(r);u=e.createShaderModule({label:`mip level generation for ${r}`,code:t}),c[r]=u}i||(i=e.createSampler({minFilter:"linear",magFilter:"linear"}),s=e.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),a=new Uint32Array(1),Object.assign(n,{sampler:i,uniformBuffer:s,uniformValues:a}));const l=`${t.format}.${r}`;o[l]||(o[l]=e.createRenderPipeline({label:`mip level generator pipeline for ${r}`,layout:"auto",vertex:{module:u,entryPoint:"vs"},fragment:{module:u,entryPoint:"fs",targets:[{format:t.format}]}}));const h=o[l];for(let n=1;n<t.mipLevelCount;++n)for(let o=0;o<t.depthOrArrayLayers;++o){a[0]=o,e.queue.writeBuffer(s,0,a);const c=e.createBindGroup({layout:h.getBindGroupLayout(0),entries:[{binding:0,resource:i},{binding:1,resource:t.createView({dimension:r,baseMipLevel:n-1,mipLevelCount:1})},{binding:2,resource:{buffer:s}}]}),u={label:"mip gen renderPass",colorAttachments:[{view:t.createView({dimension:"2d",baseMipLevel:n,mipLevelCount:1,baseArrayLayer:o,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},l=e.createCommandEncoder({label:"mip gen encoder"}),d=l.beginRenderPass(u);d.setPipeline(h),d.setBindGroup(0,c),d.draw(3),d.end();const f=l.finish();e.queue.submit([f])}}(e,t)}function Fn(e,t){if(e instanceof HTMLVideoElement)return[e.videoWidth,e.videoHeight,1];{const r=e,{width:n,height:i}=r;if(n>0&&i>0&&!Nn(e))return[n,i,1];const s=t.format||"rgba8unorm",{bytesPerElement:a,bytesPerChannel:o}=Gn(s),c=ar(e)||Array.isArray(e)?e:e.data;return function(e,t,r,n="2d"){if(r%1!=0)throw new Error("can't guess dimensions");if(e||t){if(t){if(!e&&(e=r/t)%1)throw new Error("can't guess dimensions")}else if((t=r/e)%1)throw new Error("can't guess dimensions")}else{const i=Math.sqrt(r/("cube"===n?6:1));i%1==0?(e=i,t=i):(e=r,t=1)}const i=r/e/t;if(i%1)throw new Error("can't guess dimensions");return[e,t,i]}(n,i,(ar(c)?c.byteLength:c.length*o)/a)}}async function Yn(e,t,r={}){const n=await Promise.all(t.map((e=>async function(e,t={}){const r=await fetch(e),n=await r.blob(),i={...t,...void 0!==t.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(n,i)}(e))));return function(e,t,r={}){const n=Fn(t[0],r);n[2]=n[2]>1?n[2]:t.length;const i=e.createTexture({dimension:jn(r.dimension),format:r.format||"rgba8unorm",mipLevelCount:r.mipLevelCount?r.mipLevelCount:r.mips?Rn(n):1,size:n,usage:(r.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return qn(e,i,t,r),i}(e,n,r)}const $n={format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,dimension:"3d"},Wn=(e,t)=>Math.ceil(e/t)*t,Xn="struct BoxIntersectionResult {\r\n    tNear: f32,\r\n    tFar: f32,\r\n    normal: vec3<f32>,\r\n    isHit: bool,\r\n}\r\n\r\nfn simpleBoxIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n) -> f32 {\r\n  let m = 1.0/rd; // can precompute if traversing a set of aligned boxes\r\n  let n = m*ro;   // can precompute if traversing a set of aligned boxes\r\n  let k = abs(m)*boxSize;\r\n  let t1 = -n - k;\r\n  let t2 = -n + k;\r\n  let tN = max( max( t1.x, t1.y ), t1.z );\r\n  let tF = min( min( t2.x, t2.y ), t2.z );\r\n  if( tN>tF || tF<0.0) {\r\n    return -1.0; // no intersection\r\n  }\r\n  return tN;\r\n}\r\n\r\nfn boxIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    result.isHit = false;\r\n    result.tNear = -1.0;\r\n    result.tFar = -1.0;\r\n\r\n    let offsetRayOrigin = ro - boxSize;\r\n    let m: vec3<f32> = 1.0 / rd;\r\n    let n: vec3<f32> = m * offsetRayOrigin;\r\n    let k: vec3<f32> = abs(m) * boxSize;\r\n    let t1: vec3<f32> = -n - k;\r\n    let t2: vec3<f32> = -n + k;\r\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\r\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\r\n    if (tN > tF || tF < 0.0) {\r\n        return result;\r\n    }\r\n    // Check if the ray starts inside the volume\r\n    let insideVolume = tN < 0.0;\r\n    var normal = select(\r\n        step(vec3<f32>(tN), t1),\r\n        step(t2, vec3<f32>(tF)),\r\n        tN < 0.0,\r\n    );\r\n    normal *= -sign(rd);\r\n    // Check if the intersection is in the correct direction, only if inside the volume\r\n    if (insideVolume && dot(normal, rd) < 0.0) {\r\n        return result;\r\n    }\r\n    result.tNear = tN;\r\n    result.tFar = tF;\r\n    result.normal = normal;\r\n    result.isHit = true;\r\n    return result;\r\n}\r\n\r\nfn planeIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    planeNormal: vec3<f32>,\r\n    planeDistance: f32,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    let denom = dot(planeNormal, rd);\r\n    if (abs(denom) > 0.0001) {\r\n        let t = -(dot(planeNormal, ro) + planeDistance) / denom;\r\n        if (t > 0.0) {\r\n            result.isHit = true;\r\n            result.tNear = t;\r\n            result.tFar = t;\r\n            result.normal = planeNormal;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfn get3x3From4x4(m: mat4x4<f32>) -> mat3x3<f32> {\r\n    return mat3x3<f32>(\r\n        m[0].xyz,\r\n        m[1].xyz,\r\n        m[2].xyz,\r\n    );\r\n}\r\n\r\n\r\nfn intersectOBB(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n    boxOrientation: mat3x3<f32>,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    result.isHit = false;\r\n    result.tNear = -1.0;\r\n    result.tFar = -1.0;\r\n\r\n    let offsetRayOrigin = ro - boxSize;\r\n    let m: vec3<f32> = 1.0 / rd;\r\n    let n: vec3<f32> = m * offsetRayOrigin;\r\n    let k: vec3<f32> = abs(m) * boxSize;\r\n    let t1: vec3<f32> = -n - k;\r\n    let t2: vec3<f32> = -n + k;\r\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\r\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\r\n    if (tN > tF || tF < 0.0) {\r\n        return result;\r\n    }\r\n    // Check if the ray starts inside the volume\r\n    let insideVolume = tN < 0.0;\r\n    var normal = select(\r\n        step(vec3<f32>(tN), t1),\r\n        step(t2, vec3<f32>(tF)),\r\n        tN < 0.0,\r\n    );\r\n    normal *= -sign(rd);\r\n    // Check if the intersection is in the correct direction, only if inside the volume\r\n    if (insideVolume && dot(normal, rd) < 0.0) {\r\n        return result;\r\n    }\r\n    result.tNear = tN;\r\n    result.tFar = tF;\r\n    result.normal = normal;\r\n    result.isHit = true;\r\n    return result;\r\n}",Zn="const EPSILON = 0.0001;\r\nconst MAX_RAY_STEPS = 256;\r\nconst FAR_PLANE = 10000.0;\r\nconst NEAR_PLANE = 0.5;\r\n\r\n\r\n// Function to transform a normal vector from object to world space\r\nfn transformNormal(inverseTransform: mat4x4<f32>, normal: vec3<f32>) -> vec3<f32> {\r\n    let worldNormal = normalize((vec4<f32>(normal, 0.0) * inverseTransform).xyz);\r\n    return worldNormal;\r\n}\r\n\r\n// Function to transform an object space position to world space\r\nfn transformPosition(transform: mat4x4<f32>, position: vec3<f32>) -> vec3<f32> {\r\n    let worldPosition = (transform * vec4<f32>(position, 1.0)).xyz;\r\n    return worldPosition;\r\n}\r\n\r\nfn getMaxMipLevel(size: vec3<f32>) -> u32 {\r\n  return u32(log2(max(size.x, max(size.y, size.z))));\r\n}\r\n\r\nstruct BVHNode {\r\n  leftIndex: i32,\r\n  rightIndex: i32,\r\n  objectCount: u32,\r\n  AABBMin: vec3<f32>,\r\n  AABBMax: vec3<f32>\r\n}\r\n\r\nstruct Brick {\r\n  voxels: array<u32, 16>\r\n}\r\nstruct VoxelObject {\r\n  transform: mat4x4<f32>,\r\n  inverseTransform: mat4x4<f32>,\r\n  previousTransform: mat4x4<f32>,\r\n  previousInverseTransform: mat4x4<f32>,\r\n  size : vec3<f32>,\r\n  atlasLocation : vec3<f32>,\r\n  brickOffset : u32,\r\n}\r\n\r\nstruct RayMarchResult {\r\n  colour: vec3<f32>,\r\n  normal: vec3<f32>,\r\n  objectPos: vec3<f32>,\r\n  worldPos: vec3<f32>,\r\n  hit: bool,\r\n  modelMatrix: mat4x4<f32>,\r\n  previousModelMatrix: mat4x4<f32>,\r\n  inverseModelMatrix: mat4x4<f32>,\r\n  previousInverseModelMatrix: mat4x4<f32>,\r\n  stepsTaken: i32,\r\n  isWater: bool,\r\n  t: f32\r\n}\r\n\r\nfn isInBounds(position: vec3<i32>, size: vec3<i32>) -> bool {\r\n  return all(position >= vec3(0)) && all(position <= size - vec3(1));\r\n}\r\n\r\nfn getMipLevelFromVoxelSize(voxelSize: vec3<f32>) -> u32 {\r\n  return u32(log2(max(voxelSize.x, max(voxelSize.y, voxelSize.z))));\r\n}\r\n\r\nfn convert1DTo3D(size: vec3<u32>, index: u32) -> vec3<u32> {\r\n  return vec3(\r\n    index % size.x,\r\n    index / size.y,\r\n    index / (size.x * size.y)\r\n  );\r\n}\r\n\r\nfn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\r\n  return position.x + position.y * size.x + position.z * (size.x * size.y);\r\n}\r\n\r\n\r\nfn doesBrickContainVoxels(brick: Brick) -> bool {\r\n  for(var i = 0; i < 16; i++){\r\n    if(brick.voxels[i] > 0){\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfn getBit(value: u32, bitIndex: u32) -> bool {\r\n  return (value & (1u << bitIndex)) != 0;\r\n}\r\n\r\n// gets bit in 512bit bitmask in a brick\r\n// bitIndex is the index of the bit in the bitmask, 0-511\r\nfn getBitInBrick(brick: Brick, bitIndex: u32) -> bool {\r\n  let maskIndex = bitIndex / 32;\r\n  let bitIndexInMask = bitIndex % 32;\r\n  return getBit(brick.voxels[maskIndex], bitIndexInMask);\r\n}\r\n\r\nstruct BrickMarchResult {\r\n  hit: bool,\r\n  normal: vec3<f32>,\r\n  t: f32,\r\n  stepsTaken: i32\r\n}\r\n\r\n\r\n// ray march one brick, offseting the ray origin by the brick position\r\nfn rayMarchBrick(brick: Brick, rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> BrickMarchResult {\r\n   var output = BrickMarchResult(false, vec3(0), 0.0, 0);\r\n//\r\n//   var t = 0.0;\r\n//   for(var i = 0; i < 24; i++)\r\n//   {\r\n//      let objectPos = rayOrigin + rayDirection * t;\r\n//      let currentIndex = vec3<i32>(floor(objectPos));\r\n//      let bitIndex = convert3DTo1D(vec3(8), vec3<u32>(currentIndex));\r\n////      if(getBitInBrick(brick, bitIndex)){\r\n//      if(textureLoad(voxels, currentIndex, 0).a > 0.0){\r\n//         output.hit = true;\r\n//         output.normal = vec3<f32>(currentIndex) / 8.0;\r\n//         output.t = t;\r\n//         return output;\r\n//      }\r\n//      t += 1.0 / 24.0;\r\n//   }\r\n\r\n   let rayDirSign = sign(rayDirection);\r\n   var voxelSize = vec3<f32>(1.0);\r\n   var objectPos = rayOrigin;\r\n   var currentIndex = vec3<i32>(max(vec3(1.0),ceil(rayOrigin)));\r\n   var originDifference = floor(objectPos) - rayOrigin;\r\n   var tMax = voxelSize * (rayDirSign * originDifference + (rayDirSign * 0.5) + 0.5) / abs(rayDirection);\r\n   let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\r\n   var objectNormal = mask * -rayDirSign;\r\n   var tCurrent = min(tMax.x, min(tMax.y, tMax.z));\r\n\r\n   // RAYMARCH\r\n   for(var i = 0; i < 24; i++)\r\n   {\r\n//      let bitIndex = convert3DTo1D(vec3(8), vec3<u32>(currentIndex));\r\n//      if(getBitInBrick(brick, bitIndex)){\r\n//          output.hit = true;\r\n//          output.normal = vec3<f32>(currentIndex) / 8.0;\r\n//          return output;\r\n//      }\r\n//      if(currentIndex.y < 5){\r\n//         output.hit = true;\r\n//         output.normal = vec3<f32>(currentIndex) / 8.0;\r\n//         return output;\r\n//     }\r\n    if(textureLoad(voxels, currentIndex, 0).a > 0.0){\r\n       output.hit = true;\r\n//       output.normal = vec3<f32>(currentIndex) / 8.0;\r\n      output.normal = abs(objectNormal);\r\n//      output.normal = rayDirection * abs(objectNormal);\r\n       output.t = tCurrent;\r\n       return output;\r\n    }\r\n\r\n     var originDifference = floor(objectPos) - rayOrigin;\r\n     var tMax = (rayDirSign * originDifference + (rayDirSign * 0.5) + 0.5) / abs(rayDirection);\r\n     let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\r\n     tCurrent = min(tMax.x, min(tMax.y, tMax.z));\r\n     objectPos = rayOrigin + rayDirection * tCurrent;\r\n     currentIndex = vec3<i32>(floor(objectPos / voxelSize) * voxelSize);\r\n     objectNormal = mask * -rayDirSign;\r\n   }\r\n   return output;\r\n}\r\n\r\nfn rayMarchAtMip(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\r\n  var output = RayMarchResult();\r\n  let rayDirSign = sign(objectRayDirection);\r\n  let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\r\n  var voxelSize = vec3(f32(1 << mipLevel));\r\n  var shiftedRayOrigin = objectRayOrigin - objectRayDirection * EPSILON;\r\n  var objectPos = shiftedRayOrigin;\r\n  var currentIndex = vec3<i32>(floor(objectPos));\r\n  var scaledRayOrigin =  objectRayOrigin / voxelSize;\r\n  var scaledObjectPos = floor(objectPos / voxelSize);\r\n  var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\r\n  var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\r\n  let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\r\n  var objectNormal = mask * -rayDirSign;\r\n  var tCurrent = min(tMax.x, min(tMax.y, tMax.z));\r\n\r\n  // RAYMARCH\r\n  for(var i = 0; i < MAX_RAY_STEPS; i++)\r\n  {\r\n    output.stepsTaken = i;\r\n\r\n    let samplePosition = vec3<u32>(currentIndex) + atlasLocation;\r\n    let mipSample0 = textureLoad(voxels, samplePosition / vec3((1u << mipLevel)), mipLevel);\r\n    output.colour = objectPos / vec3<f32>(voxelObject.size);\r\n\r\n    if(mipSample0.a > 0.0 && isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n        output.objectPos = objectPos;\r\n        output.worldPos = (voxelObject.transform *  vec4(output.objectPos, 1.0)).xyz;\r\n        output.normal = transformNormal(voxelObject.inverseTransform,vec3<f32>(objectNormal));\r\n        output.colour = mipSample0.rgb;\r\n        output.hit = true;\r\n        output.modelMatrix = voxelObject.transform;\r\n        output.previousModelMatrix = voxelObject.previousTransform;\r\n        output.inverseModelMatrix = voxelObject.inverseTransform;\r\n        output.previousInverseModelMatrix = voxelObject.previousInverseTransform;\r\n        output.t = tCurrent;\r\n        return output;\r\n    }\r\n\r\n    var scaledRayOrigin = shiftedRayOrigin / voxelSize;\r\n    var scaledObjectPos = floor(objectPos / voxelSize);\r\n    var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\r\n    var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\r\n    let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\r\n\r\n    tCurrent = min(tMax.x, min(tMax.y, tMax.z));\r\n    objectPos = objectRayOrigin + objectRayDirection * tCurrent;\r\n    currentIndex = vec3<i32>(floor(objectPos / voxelSize) * voxelSize);\r\n    objectNormal = mask * -rayDirSign;\r\n\r\n\r\n    if(!isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n        break;\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\nfn rayMarchTransformed(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\r\n      var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n      let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n      return  rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\r\n}\r\n\r\nconst STACK_LEN: u32 = 32u;\r\nstruct Stack {\r\n  arr: array<i32, STACK_LEN>,\r\n\thead: u32,\r\n}\r\n\r\nfn stack_new() -> Stack {\r\n    var arr: array<i32, STACK_LEN>;\r\n    return Stack(arr, 0u);\r\n}\r\n\r\nfn stack_push(stack: ptr<function, Stack>, val: i32) {\r\n    (*stack).arr[(*stack).head] = val;\r\n    (*stack).head += 1u;\r\n}\r\n\r\nfn stack_pop(stack: ptr<function, Stack>) -> i32 {\r\n    (*stack).head -= 1u;\r\n    return (*stack).arr[(*stack).head];\r\n}\r\n\r\nconst colours = array<vec3<f32>, 6>(\r\n  vec3<f32>(1.0, 0.0, 0.0),\r\n  vec3<f32>(0.0, 1.0, 0.0),\r\n  vec3<f32>(0.0, 0.0, 1.0),\r\n  vec3<f32>(1.0, 1.0, 0.0),\r\n  vec3<f32>(1.0, 0.0, 1.0),\r\n  vec3<f32>(0.0, 1.0, 1.0)\r\n);\r\n\r\nfn debugColourFromIndex(index: i32) -> vec3<f32> {\r\n  return colours[index % 6];\r\n}\r\n\r\nfn getDistanceToNode(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, node: BVHNode) -> f32 {\r\n  if(all(rayOrigin >= node.AABBMin) && all(rayOrigin <= node.AABBMax)){\r\n    return 0.0;\r\n  }\r\n  let boxSize = (node.AABBMax - node.AABBMin) / 2;\r\n  let intersection = boxIntersection(rayOrigin - node.AABBMin, rayDirection, boxSize);\r\n  if(intersection.isHit){\r\n    return intersection.tNear;\r\n  }\r\n  return -1.0;\r\n\r\n}\r\n",Hn="fn calculateRayDirection(uv: vec2<f32>, inverseProjection: mat4x4<f32>) -> vec3<f32> {\r\n  let clipSpace = vec2(1.0 - uv.x, 1.0 - uv.y) * 2.0 - 1.0;\r\n  let viewRay = vec3<f32>(clipSpace, 1.0);\r\n  let viewRayView = inverseProjection * vec4(viewRay, 1.0);\r\n  return normalize(viewRayView.xyz);\r\n}\r\n",Kn={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},Qn={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},Jn={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}},ei={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},ti={binding:4,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},ri={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},ni={binding:6,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},ii={binding:7,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},si={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},ai={binding:9,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},oi=[Kn,Qn,Jn,ei,ti,ri,ni,ii,si,{binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:11,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:12,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:13,visibility:GPUShaderStage.COMPUTE,sampler:{}},{binding:14,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},{binding:15,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:16,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},{binding:17,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:18,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:19,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}}],ci=async()=>(async({shaderCode:e,effectEntryPoint:t,compositeEntryPoint:r,downscale:n,label:i})=>{if(!Number.isInteger(n))throw new Error("Downscale must be an integer");const s=Ii.createBindGroupLayout({entries:oi}),a=Ii.createBindGroupLayout({entries:[...oi,ai]}),o=`\nstruct Time {\n  frame: u32,\n  deltaTime: f32\n};\n\n@group(0) @binding(0) var depthTex : texture_2d<f32>;\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\n@group(0) @binding(2) var outputTex : texture_storage_2d<rgba8unorm, write>;\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(4) var voxels : texture_3d<f32>;\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(6) var<storage> voxelObjects : array<VoxelObject>;\n@group(0) @binding(7) var<uniform> sunDirection : vec3<f32>;\n@group(0) @binding(8) var linearSampler : sampler;\n@group(0) @binding(9) var intermediaryTexture : texture_2d<f32>;\n@group(0) @binding(10) var normalTex : texture_2d<f32>;\n@group(0) @binding(11) var blueNoiseTex : texture_2d<f32>;\n@group(0) @binding(12) var<uniform> time : Time;\n@group(0) @binding(13) var nearestSampler : sampler;\n@group(0) @binding(14) var velocityAndWaterTex : texture_2d<f32>;\n@group(0) @binding(15) var<storage> bvhNodes: array<BVHNode>;\n@group(0) @binding(16) var worldPosTex : texture_2d<f32>;\n@group(0) @binding(17) var albedoTex : texture_2d<f32>;\n@group(0) @binding(18) var<storage> brickBuffer: array<Brick>;\n@group(0) @binding(19) var skyCube : texture_cube<f32>;\n\nconst DOWNSCALE = ${n};\nstruct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  previousInverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\n// Constants\r\nconst infinity : f32 = 99999999.0;\r\n\r\n// Utility functions\r\nfn degreesToRadians(degrees : f32) -> f32 {\r\n    return degrees * (3.1415926535897932385 / 180.0);\r\n}\r\n\r\nfn unitVector(v : vec3<f32>) -> vec3<f32> {\r\n    return v / length(v);\r\n}\r\n\r\nfn lengthSquared(v : vec3<f32>) -> f32 {\r\n    return v.x * v.x + v.y * v.y + v.z * v.z;\r\n}\r\n\r\nfn random(co : vec2<f32>) -> f32 {\r\n    return fract(sin(dot(co, vec2<f32>(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nfn randomMinMax(co : vec2<f32>, min : f32, max : f32) -> f32 {\r\n    return min + (max - min) * random(co);\r\n}\r\n\r\nfn randomFloat3(co : vec2<f32>) -> vec3<f32> {\r\n    return vec3<f32>(random(co), random(co * 2.0), random(co * 3.0));\r\n}\r\n\r\nfn randomFloat3MinMax(co : vec2<f32>, min : f32, max : f32) -> vec3<f32> {\r\n    return vec3<f32>(randomMinMax(co, min, max), randomMinMax(co * 2.0, min, max), randomMinMax(co * 3.0, min, max));\r\n}\r\n\r\nfn randomInUnitSphere(co : vec2<f32>) -> vec3<f32> {\r\n    var p : vec3<f32> = randomFloat3MinMax(co, -1.0, 1.0);\r\n    while (lengthSquared(p) < 1.0) {\r\n        p = randomFloat3MinMax(co, -1.0, 1.0);\r\n    }\r\n    return p;\r\n}\r\n\r\nfn randomInUnitDisk(seed : vec2<f32>) -> vec2<f32> {\r\n    let r = sqrt(random(seed));\r\n    let theta = 2.0 * 3.14159265359 * random(vec2<f32>(seed.y, seed.x));\r\n    return vec2<f32>(cos(theta), sin(theta)) * r;\r\n}\r\n\r\nfn randomInPlanarUnitDisk(seed : vec2<f32>, normal: vec3<f32>) -> vec3<f32> {\r\n    let disk = randomInUnitDisk(seed);\r\n    var diskNormal = cross(normal, vec3<f32>(0.0, 1.0, 0.0));\r\n    if (length(diskNormal) < 0.01) {\r\n        diskNormal = cross(normal, vec3<f32>(1.0, 0.0, 0.0));\r\n    }\r\n    diskNormal = normalize(diskNormal);\r\n    let diskTangent = cross(diskNormal, normal);\r\n    return disk.x * diskTangent + disk.y * diskNormal;\r\n}\r\n\r\nfn reflect(v : vec3<f32>, n : vec3<f32>) -> vec3<f32> {\r\n    return v - 2.0 * dot(v, n) * n;\r\n}\r\n\r\nfn randomUnitVector(co : vec2<f32>) -> vec3<f32> {\r\n    return unitVector(randomInUnitSphere(co));\r\n}\r\n\r\nfn nearZero(e : vec3<f32>) -> bool {\r\n    const s : f32 = 1e-8;\r\n    return (abs(e.x) < s) && (abs(e.y) < s) && (abs(e.z) < s);\r\n}\r\n\r\nfn randomInHemisphere(co : vec2<f32>, normal : vec3<f32>) -> vec3<f32> {\r\n    let inUnitSphere = randomUnitVector(co);\r\n    if (dot(inUnitSphere, normal) > 0.0) {\r\n        return inUnitSphere;\r\n    }\r\n    return -inUnitSphere;\r\n}\r\n\r\n// Function to perturb the normal vector within the hemisphere\r\nfn perturbDirection(normal: vec3<f32>, scatterAmount: f32, co: vec2<f32>) -> vec3<f32> {\r\n    // Generate a random vector in a hemisphere\r\n    let hemisphereVector : vec3<f32> = randomInHemisphere(co, normal);\r\n\r\n    // Combine the perturbation with the original normal\r\n    let perturbedDir : vec3<f32> = normalize(normal + scatterAmount * hemisphereVector);\r\n\r\n    return perturbedDir;\r\n}\r\n\r\nfn permute4(x: vec4<f32>) -> vec4<f32> { return ((x * 34. + 1.) * x) % vec4<f32>(289.); }\r\nfn taylorInvSqrt4(r: vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r; }\r\nfn fade3(t: vec3<f32>) -> vec3<f32> { return t * t * t * (t * (t * 6. - 15.) + 10.); }\r\n\r\nfn perlinNoise3(P: vec3<f32>) -> f32 {\r\n    var Pi0 : vec3<f32> = floor(P); // Integer part for indexing\r\n    var Pi1 : vec3<f32> = Pi0 + vec3<f32>(1.); // Integer part + 1\r\n    Pi0 = Pi0 % vec3<f32>(289.);\r\n    Pi1 = Pi1 % vec3<f32>(289.);\r\n    let Pf0 = fract(P); // Fractional part for interpolation\r\n    let Pf1 = Pf0 - vec3<f32>(1.); // Fractional part - 1.\r\n    let ix = vec4<f32>(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n    let iy = vec4<f32>(Pi0.yy, Pi1.yy);\r\n    let iz0 = Pi0.zzzz;\r\n    let iz1 = Pi1.zzzz;\r\n\r\n    let ixy = permute4(permute4(ix) + iy);\r\n    let ixy0 = permute4(ixy + iz0);\r\n    let ixy1 = permute4(ixy + iz1);\r\n\r\n    var gx0: vec4<f32> = ixy0 / 7.;\r\n    var gy0: vec4<f32> = fract(floor(gx0) / 7.) - 0.5;\r\n    gx0 = fract(gx0);\r\n    var gz0: vec4<f32> = vec4<f32>(0.5) - abs(gx0) - abs(gy0);\r\n    var sz0: vec4<f32> = step(gz0, vec4<f32>(0.));\r\n    gx0 = gx0 + sz0 * (step(vec4<f32>(0.), gx0) - 0.5);\r\n    gy0 = gy0 + sz0 * (step(vec4<f32>(0.), gy0) - 0.5);\r\n\r\n    var gx1: vec4<f32> = ixy1 / 7.;\r\n    var gy1: vec4<f32> = fract(floor(gx1) / 7.) - 0.5;\r\n    gx1 = fract(gx1);\r\n    var gz1: vec4<f32> = vec4<f32>(0.5) - abs(gx1) - abs(gy1);\r\n    var sz1: vec4<f32> = step(gz1, vec4<f32>(0.));\r\n    gx1 = gx1 - sz1 * (step(vec4<f32>(0.), gx1) - 0.5);\r\n    gy1 = gy1 - sz1 * (step(vec4<f32>(0.), gy1) - 0.5);\r\n\r\n    var g000: vec3<f32> = vec3<f32>(gx0.x, gy0.x, gz0.x);\r\n    var g100: vec3<f32> = vec3<f32>(gx0.y, gy0.y, gz0.y);\r\n    var g010: vec3<f32> = vec3<f32>(gx0.z, gy0.z, gz0.z);\r\n    var g110: vec3<f32> = vec3<f32>(gx0.w, gy0.w, gz0.w);\r\n    var g001: vec3<f32> = vec3<f32>(gx1.x, gy1.x, gz1.x);\r\n    var g101: vec3<f32> = vec3<f32>(gx1.y, gy1.y, gz1.y);\r\n    var g011: vec3<f32> = vec3<f32>(gx1.z, gy1.z, gz1.z);\r\n    var g111: vec3<f32> = vec3<f32>(gx1.w, gy1.w, gz1.w);\r\n\r\n    let norm0 = taylorInvSqrt4(\r\n        vec4<f32>(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n    g000 = g000 * norm0.x;\r\n    g010 = g010 * norm0.y;\r\n    g100 = g100 * norm0.z;\r\n    g110 = g110 * norm0.w;\r\n    let norm1 = taylorInvSqrt4(\r\n        vec4<f32>(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n    g001 = g001 * norm1.x;\r\n    g011 = g011 * norm1.y;\r\n    g101 = g101 * norm1.z;\r\n    g111 = g111 * norm1.w;\r\n\r\n    let n000 = dot(g000, Pf0);\r\n    let n100 = dot(g100, vec3<f32>(Pf1.x, Pf0.yz));\r\n    let n010 = dot(g010, vec3<f32>(Pf0.x, Pf1.y, Pf0.z));\r\n    let n110 = dot(g110, vec3<f32>(Pf1.xy, Pf0.z));\r\n    let n001 = dot(g001, vec3<f32>(Pf0.xy, Pf1.z));\r\n    let n101 = dot(g101, vec3<f32>(Pf1.x, Pf0.y, Pf1.z));\r\n    let n011 = dot(g011, vec3<f32>(Pf0.x, Pf1.yz));\r\n    let n111 = dot(g111, Pf1);\r\n\r\n    var fade_xyz: vec3<f32> = fade3(Pf0);\r\n    let temp = vec4<f32>(f32(fade_xyz.z)); // simplify after chrome bug fix\r\n    let n_z = mix(vec4<f32>(n000, n100, n010, n110), vec4<f32>(n001, n101, n011, n111), temp);\r\n    let n_yz = mix(n_z.xy, n_z.zw, vec2f(f32(fade_xyz.y))); // simplify after chrome bug fix\r\n    let n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r\n    return 2.2 * n_xyz;\r\n}\n${Hn}\n${Xn}\n${Zn}\nconst BRICK_SIZE = 8;\r\nconst MAX_STEPS = 256;\r\n\r\n\r\nstruct BVHLeafNode {\r\n  voxelObjectIndex: i32, // this is the index of the voxelObject for leaf nodes\r\n  brickIndex: i32,\r\n  objectCount: u32,\r\n  OBBMin: vec3<f32>,\r\n  OBBMax: vec3<f32>\r\n}\r\n\r\nfn castNodeToLeafNode(node: BVHNode) -> BVHLeafNode {\r\n  return BVHLeafNode(node.leftIndex, node.rightIndex, node.objectCount, node.AABBMin, node.AABBMax);\r\n}\r\n\r\nfn getBrickMapIndex(objectPos: vec3<f32>) -> i32{\r\n  return i32(objectPos.x / BRICK_SIZE) + i32(objectPos.y / BRICK_SIZE) * BRICK_SIZE + i32(objectPos.z / BRICK_SIZE) * BRICK_SIZE * BRICK_SIZE;\r\n}\r\n\r\nfn getBrickDebugColour(brickMapIndex: i32) -> vec3<f32>{\r\n  let x = f32(brickMapIndex % BRICK_SIZE) / f32(BRICK_SIZE);\r\n  let y = f32(brickMapIndex / BRICK_SIZE % BRICK_SIZE) / f32(BRICK_SIZE);\r\n  let z = f32(brickMapIndex / (BRICK_SIZE * BRICK_SIZE)) / f32(BRICK_SIZE);\r\n  return vec3<f32>(x, y, z);\r\n}\r\n\r\nstruct LeafIntersectionResult {\r\n  isHit: bool,\r\n  tNear: f32,\r\n  normal: vec3<f32>\r\n}\r\n\r\n// Leaf nodes use OBBs for intersection tests\r\nfn leafBoundsIntersection(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, leafNode: BVHLeafNode) -> LeafIntersectionResult {\r\n  let voxelObject = voxelObjects[leafNode.voxelObjectIndex];\r\n  let objectRayOrigin = (voxelObject.inverseTransform * vec4(rayOrigin, 1.0)).xyz;\r\n  let isInBounds = all(objectRayOrigin >= vec3(0.0)) && all(objectRayOrigin <= voxelObject.size - vec3(1));\r\n  if(isInBounds){\r\n    return LeafIntersectionResult(true, 0.0, vec3<f32>(0.0));\r\n  }\r\n  let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n  let intersection = boxIntersection(objectRayOrigin, objectRayDirection, voxelObject.size / 2);\r\n  return LeafIntersectionResult(intersection.isHit, intersection.tNear, intersection.normal);\r\n}\r\n\r\n// Stack-based BVH traversal\r\nfn rayMarchBVH(rayOrigin: vec3<f32>, rayDirection: vec3<f32>) -> RayMarchResult {\r\n  var closestIntersection = RayMarchResult();\r\n  closestIntersection.worldPos = rayOrigin + rayDirection * FAR_PLANE;\r\n\r\n  // Create a stack to store the nodes to visit\r\n  var stack = stack_new();\r\n  stack_push(&stack, 0);\r\n\r\n  // Track closest raymarch distance will let us skip nodes that are further than the closest raymarched object\r\n  var closestRaymarchDist = 1e30f;\r\n  var iterations = 0;\r\n  var nodeIndex = 0;\r\n\r\n  while (stack.head > 0u && iterations < MAX_STEPS) {\r\n    let node = bvhNodes[nodeIndex];\r\n    if(node.objectCount == 0){\r\n      nodeIndex = stack_pop(&stack);\r\n    }\r\n    // valid leaf, raymarch it\r\n    else if(node.objectCount == 1){\r\n        let leafNode = castNodeToLeafNode(node);\r\n        let intersection = leafBoundsIntersection(rayOrigin, rayDirection, leafNode);\r\n        if(intersection.isHit && intersection.tNear < closestRaymarchDist){\r\n          let voxelObject = voxelObjects[leafNode.voxelObjectIndex];\r\n          let shiftedRayOrigin = rayOrigin + rayDirection * (intersection.tNear + EPSILON);\r\n          let rayMarchResult = rayMarchTransformed(voxelObject, rayDirection, shiftedRayOrigin, 0);\r\n          let rayMarchDist = intersection.tNear + rayMarchResult.t;\r\n          if(rayMarchResult.hit && rayMarchDist < closestRaymarchDist){\r\n            closestIntersection = rayMarchResult;\r\n            closestRaymarchDist = intersection.tNear + rayMarchResult.t;\r\n          }\r\n        }\r\n        nodeIndex = stack_pop(&stack);\r\n    }\r\n    else{\r\n      var leftDist = 0.0;\r\n      var rightDist = 0.0;\r\n      let isLeftNodeLeaf = bvhNodes[node.leftIndex].objectCount == 1;\r\n      let isRightNodeLeaf = bvhNodes[node.rightIndex].objectCount == 1;\r\n      if(isLeftNodeLeaf){\r\n        leftDist = leafBoundsIntersection(rayOrigin, rayDirection, castNodeToLeafNode(bvhNodes[node.leftIndex])).tNear;\r\n      }\r\n      else{\r\n        leftDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.leftIndex]);\r\n      }\r\n      if(isRightNodeLeaf){\r\n        rightDist = leafBoundsIntersection(rayOrigin, rayDirection, castNodeToLeafNode(bvhNodes[node.rightIndex])).tNear;\r\n      }\r\n      else{\r\n        rightDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.rightIndex]);\r\n      }\r\n      let hitLeft = leftDist >= 0.0 && leftDist < closestRaymarchDist;\r\n      let hitRight = rightDist >= 0.0 && rightDist < closestRaymarchDist;\r\n      if(hitLeft){\r\n        var nearIndex = node.leftIndex;\r\n        // We hit both left and right, choose the closest one\r\n        if(hitRight){\r\n          if(leftDist < rightDist){\r\n            // left is closer, push right to stack\r\n            stack_push(&stack, node.rightIndex);\r\n          } else {\r\n            // right is closer, push left to stack\r\n            stack_push(&stack, node.leftIndex);\r\n            nearIndex = node.rightIndex;\r\n          }\r\n        }\r\n        nodeIndex = nearIndex;\r\n      }\r\n      // We only hit the right Node\r\n      else if(hitRight){\r\n        nodeIndex = node.rightIndex;\r\n      }\r\n      // We didn't hit any node, pop the stack\r\n      else{\r\n        nodeIndex = stack_pop(&stack);\r\n      }\r\n    }\r\n\r\n    iterations += 1;\r\n    closestIntersection.colour += vec3<f32>(0.0075);\r\n  }\r\n\r\n  return closestIntersection;\r\n}\r\n\r\nfn rayMarchBVHFirstHit(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, distance: f32) -> bool {\r\n  return rayMarchBVH(rayOrigin, rayDirection).hit;\r\n}\nconst MAX_COARSE_RAY_STEPS = 64;\r\n\r\nfn rayMarchCoarse(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>) -> bool {\r\n    let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\r\n    var voxelSize = vec3<f32>(1.0);\r\n    var objectPos = objectRayOrigin;\r\n    var currentIndex = vec3<i32>(round(objectPos));\r\n    var tDelta = voxelSize / abs(objectRayDirection);\r\n    var tIncrement = min(tDelta.x, min(tDelta.y, tDelta.z));\r\n\r\n    for(var i = 0; i < MAX_COARSE_RAY_STEPS; i++)\r\n    {\r\n      let samplePosition = objectPos + voxelObject.atlasLocation;\r\n      let uv = samplePosition / vec3<f32>(textureDimensions(voxels));\r\n      let mipSample0 = textureSampleLevel(voxels, nearestSampler, uv, 0.0);\r\n\r\n      if(mipSample0.a > 0.0){\r\n          return true;\r\n      }\r\n\r\n      objectPos += objectRayDirection * tIncrement;\r\n      currentIndex = vec3<i32>(round(objectPos));\r\n//      if(!isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n//          break;\r\n//      }\r\n    }\r\n    return false;\r\n}\r\n\r\nfn rayMarchTransformedCoarse(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> bool {\r\n    var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n    let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n    return rayMarchCoarse(voxelObject, objectRayDirection, objectRayOrigin);\r\n}\r\n\r\n// Used for shadows, return first hit\r\nfn rayMarchBVHCoarse(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, maxDistance: f32) -> bool {\r\n  // Create a stack to store the nodes to visit\r\n      var stack = stack_new();\r\n      stack_push(&stack, 0);\r\n\r\n      var iterations = 0;\r\n      var nodeIndex = 0;\r\n\r\n      while (stack.head > 0u && iterations < 32) {\r\n        let node = bvhNodes[nodeIndex];\r\n        if(node.objectCount == 0){\r\n          nodeIndex = stack_pop(&stack);\r\n        }\r\n        // valid leaf, raymarch it\r\n        else if(node.objectCount == 1){\r\n            // Raymarch the voxel object if it's a leaf node\r\n            let voxelObject = voxelObjects[node.leftIndex]; // left index represents the voxel object index for leaf nodes\r\n            let AABBDist = getDistanceToNode(rayOrigin, rayDirection, node);\r\n            if(rayMarchTransformedCoarse(voxelObject, rayDirection, rayOrigin + rayDirection * AABBDist)){\r\n              return true;\r\n            }\r\n            // Pop the stack and continue\r\n            nodeIndex = stack_pop(&stack);\r\n        }\r\n        else{\r\n          let leftDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.leftIndex]);\r\n          let rightDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.rightIndex]);\r\n          let hitLeft = leftDist >= 0.0 && leftDist < maxDistance;\r\n          let hitRight = rightDist >= 0.0 && rightDist < maxDistance;\r\n          if(hitLeft){\r\n            var nearIndex = node.leftIndex;\r\n            // We hit both left and right, choose the closest one\r\n            if(hitRight){\r\n              if(leftDist < rightDist){\r\n                // left is closer, push right to stack\r\n                stack_push(&stack, node.rightIndex);\r\n              } else {\r\n                // right is closer, push left to stack\r\n                stack_push(&stack, node.leftIndex);\r\n                nearIndex = node.rightIndex;\r\n              }\r\n            }\r\n            nodeIndex = nearIndex;\r\n          }\r\n          // We only hit the right Node\r\n          else if(hitRight){\r\n            nodeIndex = node.rightIndex;\r\n          }\r\n          // We didn't hit any node, pop the stack\r\n          else{\r\n            nodeIndex = stack_pop(&stack);\r\n          }\r\n        }\r\n\r\n        iterations += 1;\r\n      }\r\n\r\n      return false;\r\n}\n${e}`,c=Ii.createComputePipeline({layout:Ii.createPipelineLayout({bindGroupLayouts:[s]}),compute:{module:Ii.createShaderModule({code:o}),entryPoint:t}}),u=Ii.createComputePipeline({layout:Ii.createPipelineLayout({bindGroupLayouts:[a]}),compute:{module:Ii.createShaderModule({code:o}),entryPoint:r}});let l,h,d=Ii.createSampler({magFilter:"nearest",minFilter:"nearest"}),f=Ii.createSampler({magFilter:"linear",minFilter:"linear"});return{render:({outputTextures:e,timestampWrites:t,viewProjectionMatricesBuffer:r,volumeAtlas:i,cameraPositionBuffer:o,transformationMatrixBuffer:m,sunDirectionBuffer:p,blueNoiseTexture:g,timeBuffer:y,bvhBuffer:_})=>{l||(l=Ii.createTexture({size:[e.finalTexture.width,e.finalTexture.height,e.finalTexture.depthOrArrayLayers],format:e.finalTexture.format,usage:e.finalTexture.usage})),h||(h=Ii.createTexture({size:[e.finalTexture.width/n,e.finalTexture.height/n,e.finalTexture.depthOrArrayLayers],format:e.finalTexture.format,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING}));const x=Ii.createCommandEncoder();x.copyTextureToTexture({texture:e.finalTexture},{texture:l},{width:e.finalTexture.width,height:e.finalTexture.height,depthOrArrayLayers:1});const v=[{binding:0,resource:e.depthTexture.createView()},{binding:1,resource:l.createView()},{binding:3,resource:{buffer:r}},{binding:4,resource:i.getAtlasTextureView()},{binding:5,resource:{buffer:o}},{binding:6,resource:{buffer:m}},{binding:7,resource:{buffer:p}},{binding:8,resource:f},{binding:10,resource:e.normalTexture.createView()},{binding:11,resource:g.createView()},{binding:12,resource:{buffer:y}},{binding:13,resource:d},{binding:14,resource:e.velocityTexture.createView()},{binding:15,resource:{buffer:_}},{binding:16,resource:e.worldPositionTexture.createView()},{binding:17,resource:e.albedoTexture.createView()},{binding:18,resource:{buffer:i.getBrickMapBuffer()}},{binding:19,resource:e.skyTexture.createView({dimension:"cube"})}],b={layout:s,entries:[...v,{binding:2,resource:h.createView()}]},w={layout:a,entries:[...v,{binding:2,resource:e.finalTexture.createView()},{binding:9,resource:h.createView()}]},k=Ii.createBindGroup(b),T=Ii.createBindGroup(w),M=x.beginComputePass({timestampWrites:t});return M.setPipeline(c),M.setBindGroup(0,k),M.dispatchWorkgroups(Math.ceil(h.width/8),Math.ceil(h.height/8)),M.setPipeline(u),M.setBindGroup(0,T),M.dispatchWorkgroups(Math.ceil(e.finalTexture.width/8),Math.ceil(e.finalTexture.height/8)),M.end(),[x.finish()]},label:i}})({shaderCode:"\r\n\r\nfn shadowRay(worldPos: vec3<f32>, shadowRayDirection: vec3<f32>) -> bool {\r\n  return rayMarchBVH(worldPos, shadowRayDirection).hit;\r\n//    return rayMarchTransformed(voxelObjects[0], shadowRayDirection, worldPos, 0).hit;\r\n}\r\n\r\n\r\nconst SUN_COLOR = vec3<f32>(0.9);\r\nconst MOON_COLOR = vec3<f32>(0.5, 0.5, 1.0);\r\nconst SKY_AMBIENT_INTENSITY = 0.15;\r\nconst SUBPIXEL_SAMPLE_POSITIONS: array<vec2<f32>, 8> = array<vec2<f32>, 8>(\r\n  vec2<f32>(0.25, 0.25),\r\n  vec2<f32>(0.75, 0.25),\r\n  vec2<f32>(0.25, 0.75),\r\n  vec2<f32>(0.75, 0.75),\r\n  vec2<f32>(0.125, 0.125),\r\n  vec2<f32>(0.375, 0.125),\r\n  vec2<f32>(0.625, 0.125),\r\n  vec2<f32>(0.875, 0.125)\r\n);\r\nconst BLUE_NOISE_SIZE = 512;\r\nconst SUN_DIRECTION: vec3<f32> = vec3<f32>(1.0,-1.0,-1.0);\r\nconst SKY_COLOUR: vec3<f32> = vec3<f32>(0.6, 0.8, 0.9);\r\nconst SHADOW_ACNE_OFFSET: f32 = 0.005;\r\nconst SCATTER_AMOUNT: f32 = 0.05;\r\nconst POSITION_SCATTER_AMOUNT: f32 = 0.01;\r\n\r\nfn blinnPhong(normal: vec3<f32>, lightDirection: vec3<f32>, viewDirection: vec3<f32>, specularStrength: f32, shininess: f32, lightColour: vec3<f32>) -> vec3<f32> {\r\n  let halfDirection = normalize(lightDirection + viewDirection);\r\n  let diffuse = max(dot(normal, lightDirection), 0.0);\r\n  let specular = pow(max(dot(normal, halfDirection), 0.0), shininess);\r\n  return (diffuse + specular * specularStrength) * lightColour;\r\n}\r\n\r\nstruct Light {\r\n  direction: vec3<f32>,\r\n  colour: vec3<f32>,\r\n};\r\n\r\n// Function to remap the blue noise value to a sample index\r\nfn remapToSampleIndex(blueNoiseValue: f32, numSamples: u32) -> u32 {\r\n    // Map blue noise value to the index range [0, numSamples)\r\n    return u32(blueNoiseValue * f32(numSamples));\r\n}\r\n\r\n\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let samplePixel = GlobalInvocationID.xy * DOWNSCALE;\r\n  let outputPixel = GlobalInvocationID.xy;\r\n  var blueNoisePixel = outputPixel % BLUE_NOISE_SIZE;\r\n  if(time.frame % 2 == 0){\r\n    blueNoisePixel.x = BLUE_NOISE_SIZE - blueNoisePixel.x;\r\n  }\r\n  let blueNoiseUv = vec2<f32>(blueNoisePixel) / vec2<f32>(BLUE_NOISE_SIZE);\r\n  let resolution = vec2<f32>(textureDimensions(depthTex));\r\n  let uv = vec2<f32>(outputPixel) / resolution;\r\n  var normalSample = textureLoad(normalTex, samplePixel, 0).rgb;\r\n  var r = textureSampleLevel(blueNoiseTex, nearestSampler, blueNoiseUv, 0).xy;\r\n  let selectedLight = Light(sunDirection,SUN_COLOR);\r\n  var shadowRayDirection = selectedLight.direction;\r\n  var worldPos = textureLoad(worldPosTex, samplePixel, 0).rgb + normalSample * SHADOW_ACNE_OFFSET;\r\n  if(all(worldPos <= vec3(0.0))){\r\n    textureStore(outputTex, outputPixel, vec4(1.0));\r\n    return;\r\n  }\r\n\r\n  worldPos += randomInPlanarUnitDisk(r, normalSample) * POSITION_SCATTER_AMOUNT;\r\n  shadowRayDirection += randomInHemisphere(r, selectedLight.direction) * SCATTER_AMOUNT;\r\n  if(shadowRay(worldPos, shadowRayDirection)){\r\n      textureStore(outputTex, outputPixel, vec4(0.0));\r\n  } else{\r\n      textureStore(outputTex, outputPixel, vec4(1.0));\r\n  }\r\n}\r\n\r\nconst PI = 3.1415926535897932384626433832795;\r\n\r\nfn polarToCartesian(angle: f32, radius: f32) -> vec2<f32> {\r\n  let radians = angle * PI / 180.0;\r\n  let x = radius * cos(radians);\r\n  let y = radius * sin(radians);\r\n  return vec2<f32>(x, y);\r\n}\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn composite(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let texSize = textureDimensions(outputTex);\r\n  let pixel = GlobalInvocationID.xy;\r\n  let uv = (vec2<f32>(pixel) - vec2(0.5)) / vec2<f32>(texSize);\r\n  let inputSample = textureLoad(albedoTex, pixel, 0);\r\n  let shadowRef = textureLoad(intermediaryTexture, pixel, 0);\r\n  let normalRef = textureLoad(normalTex, pixel, 0).rgb;\r\n  let worldPosRef = textureLoad(worldPosTex, pixel, 0).rgb;\r\n  let distanceRef = distance(worldPosRef, cameraPosition);\r\n\r\n  var output = vec3(0.0);\r\n  var totalWeight = 0.0;\r\n  var radius = 2;\r\n  // Max distance the sample can be from the reference point\r\n  var distanceThreshold = 0.2;\r\n  for(var i = 0; i <= 12; i++){\r\n    let angle = (i % 6) * 60; // 0, 90, 180, 270\r\n    let radius = i;\r\n    let offsetPixel = vec2<i32>(pixel) + vec2<i32>(polarToCartesian(f32(angle), f32(radius)));\r\n    let shadowSample =  textureLoad(intermediaryTexture, offsetPixel, 0);\r\n    let normalSample = textureLoad(normalTex, offsetPixel, 0).rgb;\r\n    let worldPosSample = textureLoad(worldPosTex, offsetPixel, 0).rgb;\r\n    let normalWeight = dot(normalSample, normalRef);\r\n    let distanceSample = distance(worldPosSample, worldPosRef);\r\n    let distanceWeight = (1.0 - clamp(distanceSample / distanceThreshold, 0.0, 1.0));\r\n    let sampleWeight =  distanceWeight * normalWeight;\r\n    output += shadowSample.rgb * sampleWeight;\r\n    totalWeight+= sampleWeight;\r\n  }\r\n  output/= totalWeight;\r\n\r\n  textureStore(outputTex, pixel,vec4(output, 1));\r\n\r\n  let selectedLight = Light(sunDirection,SUN_COLOR);\r\n  let viewDirection = normalize(cameraPosition - worldPosRef);\r\n  let reflectance = blinnPhong(normalRef, selectedLight.direction, viewDirection, 0.5, 32.0, selectedLight.colour);\r\n//  textureStore(outputTex, pixel, vec4(output * reflectance * inputSample.rgb, 1));\r\n}",effectEntryPoint:"main",compositeEntryPoint:"composite",downscale:1,label:"shadows"}),ui={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let li;const hi=new Uint8Array(16);function di(){if(!li&&(li="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!li))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return li(hi)}const fi=[];for(let e=0;e<256;++e)fi.push((e+256).toString(16).slice(1));const mi=function(e,t,r){if(ui.randomUUID&&!t&&!e)return ui.randomUUID();const n=(e=e||{}).random||(e.rng||di)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){r=r||0;for(let e=0;e<16;++e)t[r+e]=n[e];return t}return function(e,t=0){return fi[e[t+0]]+fi[e[t+1]]+fi[e[t+2]]+fi[e[t+3]]+"-"+fi[e[t+4]]+fi[e[t+5]]+"-"+fi[e[t+6]]+fi[e[t+7]]+"-"+fi[e[t+8]]+fi[e[t+9]]+"-"+fi[e[t+10]]+fi[e[t+11]]+fi[e[t+12]]+fi[e[t+13]]+fi[e[t+14]]+fi[e[t+15]]}(n)},pi=e=>{const[t,r,n]=e.split(",").map(Number);return ne.create(t,r,n)},gi=(e,t,r)=>{const n=Math.floor(t/32),i=t%32;return e[n]=((e,t,r)=>{let n=1<<t;return r?e|n:e&~n})(e[n],i,r),e},yi=e=>{let t=ne.create(1/0,1/0,1/0),r=ne.create(-1/0,-1/0,-1/0);for(const n of e)t=ne.min(t,n),r=ne.max(r,n);return{min:t,max:r}};class _i{id;name;transform;inverseTransform;previousTransform;previousInverseTransform;size;atlasLocation;atlasBrickMapOffset;worldSpaceCenter;constructor(e,t,r,n,i="unnamed"){this.id=mi(),this.name=i,this.transform=e,this.size=t,this.inverseTransform=xe.invert(this.transform),this.previousTransform=xe.clone(this.transform),this.previousInverseTransform=xe.clone(this.inverseTransform),this.atlasLocation=r,this.atlasBrickMapOffset=n;const s=ne.transformMat4(ne.create(),this.transform),a=ne.transformMat4(this.size,this.transform);this.worldSpaceCenter=ne.lerp(s,a,.5)}get objectSpaceCorners(){return[ne.create(0,0,0),ne.create(0,0,this.size[2]),ne.create(0,this.size[1],0),ne.create(0,this.size[1],this.size[2]),ne.create(this.size[0],0,0),ne.create(this.size[0],0,this.size[2]),ne.create(this.size[0],this.size[1],0),ne.create(this.size[0],this.size[1],this.size[2])]}getObjectSpaceBrickCorners(e){const t=ne.create(8,8,8),r=ne.multiply(e,t);return[ne.add(r,ne.create(0,0,0)),ne.add(r,ne.create(0,0,t[2])),ne.add(r,ne.create(0,t[1],0)),ne.add(r,ne.create(0,t[1],t[2])),ne.add(r,ne.create(t[0],0,0)),ne.add(r,ne.create(t[0],0,t[2])),ne.add(r,ne.create(t[0],t[1],0)),ne.add(r,t)]}get OBB(){return yi(this.objectSpaceCorners)}get worldSpaceCorners(){return this.objectSpaceCorners.map((e=>ne.transformMat4(e,this.transform)))}getBrickWorldSpaceCorners(e){return this.getObjectSpaceBrickCorners(e).map((e=>ne.transformMat4(e,this.transform)))}get AABB(){return yi(this.worldSpaceCorners)}getBrickOBB(e){const t=ne.create(8,8,8),r=ne.multiply(e,t);return{min:ne.add(r,ne.create(0,0,0)),max:ne.add(r,t)}}getBrickAABB(e){return yi(this.getBrickWorldSpaceCorners(e))}get brickOBBs(){const e=Oi.getVolumes()[this.name].brickMap;let t=[];return Object.entries(e).forEach((([e,r],n)=>{const i=pi(e);t.push(this.getBrickOBB(i))})),console.log({brickOBBs:t}),t}get brickAABBs(){const e=Oi.getVolumes()[this.name].brickMap;let t=[];return Object.entries(e).forEach((([e,r])=>{const n=pi(e);t.push(this.getBrickAABB(n))})),t}toArray(){return[...this.transform,...this.inverseTransform,...this.previousTransform,...this.previousInverseTransform,...this.size,0,...this.atlasLocation,0]}toDataView(){const e=this.toArray(),t=new ArrayBuffer(4*e.length+4),r=new DataView(t);for(let t=0;t<e.length;t++)r.setFloat32(4*t,e[t],!0);return r.setUint32(4*e.length,this.atlasBrickMapOffset,!0),r}}class xi{index;dataView;constructor(e){this.dataView=new DataView(e),this.index=0}readUint8(){const e=this.dataView.getUint8(this.index);return this.index++,e}readUint32(){const e=this.dataView.getUint32(this.index,!0);return this.index+=4,e}readFloat32(){const e=this.dataView.getFloat32(this.index,!0);return this.index+=4,e}skip(e){this.index+=e}}const vi=e=>0===e;let bi=[];const wi=["Dragon"],ki=e=>{const[t,r,n]=e,i=[0,0,0,1],s=[t,0,0,1],a=[0,r,0,1],o=[t,r,0,1],c=[0,0,n,1],u=[t,0,n,1],l=[0,r,n,1],h=[t,r,n,1];let d=[i,s,a,a,s,o].flat(),f=[c,l,u,u,l,h].flat(),m=[a,o,l,l,o,h].flat(),p=[i,c,s,s,c,u].flat(),g=[s,u,o,o,u,h].flat(),y=[i,a,c,c,a,l].flat();return new Float32Array([...d,...f,...m,...p,...g,...y])},Ti=async()=>{const e=Ii.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),t=Ii.createPipelineLayout({bindGroupLayouts:[e]}),r=ki([1,1,1]).length,n=Ii.createRenderPipeline({layout:t,vertex:{module:Ii.createShaderModule({code:"\n        @binding(0) @group(0) var<uniform> modelViewProjectionMatrix : mat4x4f;\n        \n        struct VertexOutput {\n          @builtin(position) position : vec4f,\n        }\n        \n        @vertex\n        fn main(\n          @location(0) objectPos : vec4f,\n        ) -> VertexOutput {\n          var output : VertexOutput;\n          output.position =modelViewProjectionMatrix * objectPos;\n          return output;\n        }\n\n       "}),entryPoint:"main",buffers:[{arrayStride:16,attributes:[{shaderLocation:0,offset:0,format:"float32x4"}]}]},fragment:{module:Ii.createShaderModule({code:"\n        @fragment\n        fn main() -> @location(0) vec4f {\n          return vec4(1.0);\n        }\n        "}),entryPoint:"main",targets:[{format:"rgba8unorm"}]},primitive:{topology:"line-list",cullMode:"back"}});return{render:({commandEncoder:t,outputTextures:i,transformationMatrixBuffer:s,volumeAtlas:a,viewProjectionMatricesBuffer:o,timestampWrites:c,bvhBuffer:u,lights:l})=>{let h=[];const d=Ii.createBuffer({size:16*r*bi.length,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),f=Ii.createBuffer({size:256*bi.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});for(let t=0;t<bi.length;t++){const n=ki(bi[t].size),i=256*t;Ii.queue.writeBuffer(d,16*t*r,n.buffer,n.byteOffset);const s=Ii.createBindGroup({layout:e,entries:[{binding:0,resource:{buffer:f,offset:i}}]});h.push(s);const a=bi[t].transform,o=xe.mul(xe.scale(ji.projectionMatrix,[-1,1,1]),ji.viewMatrix),c=new Float32Array(xe.mul(o,a));Ii.queue.writeBuffer(f,i,c.buffer,c.byteOffset,c.byteLength)}const m=t.beginRenderPass({colorAttachments:[{view:i.finalTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"load",storeOp:"store"}],timestampWrites:c});m.setPipeline(n);for(let e=0;e<bi.length;e++){const t=h[e];m.setBindGroup(0,t),m.setVertexBuffer(0,d,16*r*e,16*r),m.draw(r)}return m.end(),[t.finish()]},label:"outlines"}},Mi=e=>{let t=ne.create(1/0,1/0,1/0),r=ne.create(-1/0,-1/0,-1/0);for(const{AABB:n}of e)t=ne.min(n.min,t),r=ne.max(n.max,r);return{min:t,max:r}},Si=e=>{const t=Mi(e),r=(t.max[0]-t.min[0])*(t.max[1]-t.min[1])*(t.max[2]-t.min[2]);return e.length*r},Pi=async()=>{const e=Ii.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float",viewDimension:"3d"}},{binding:4,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}},{binding:5,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:6,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}}]}),t=Ii.createPipelineLayout({bindGroupLayouts:[e]}),r=Ii.createRenderPipeline({layout:t,vertex:{module:Ii.createShaderModule({code:`\n        ${Hn}\n        @binding(0) @group(0) var<uniform> modelViewProjectionMatrix : mat4x4f;\r\n@binding(1) @group(0) var<uniform> modelMatrix : mat4x4f;\r\n\r\nstruct VertexOutput {\r\n  @builtin(position) position : vec4f,\r\n  @location(0) objectPos : vec3f,\r\n  @location(1) worldPos : vec3f,\r\n  @location(2) @interpolate(linear) ndc : vec3f,\r\n}\r\n\r\n@vertex\r\nfn main(\r\n  @location(0) objectPos : vec4f,\r\n) -> VertexOutput {\r\n  var output : VertexOutput;\r\n  var clipPosition = modelViewProjectionMatrix * objectPos;\r\n//  clipPosition.z = -clipPosition.z;\r\n  output.position = clipPosition;\r\n  output.worldPos = (modelMatrix * objectPos).xyz;\r\n  output.objectPos = objectPos.xyz;\r\n  output.ndc = clipPosition.xyz / clipPosition.w;\r\n  output.ndc.y = -output.ndc.y;\r\n  return output;\r\n}\r\n`}),entryPoint:"main",buffers:[{arrayStride:16,attributes:[{shaderLocation:0,offset:0,format:"float32x4"}]}]},fragment:{module:Ii.createShaderModule({code:`\n        @group(0) @binding(6) var<storage> brickBuffer: array<Brick>;\n        ${Hn}\n        ${Xn}\n        ${Zn}\n        struct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\r\n\r\n@group(0) @binding(2) var<uniform> viewProjections : ViewProjectionMatrices;\r\n@group(0) @binding(3) var voxels : texture_3d<f32>;\r\n@group(0) @binding(4) var<storage> voxelObject : VoxelObject;\r\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\r\n@group(0) @binding(6) var depthStore : texture_storage_2d<r32float, write>;\r\n\r\n\r\nconst IDENTITY_MATRIX = mat4x4<f32>(\r\n  vec4<f32>(1.0, 0.0, 0.0, 0.0),\r\n  vec4<f32>(0.0, 1.0, 0.0, 0.0),\r\n  vec4<f32>(0.0, 0.0, 1.0, 0.0),\r\n  vec4<f32>(0.0, 0.0, 0.0, 1.0)\r\n);\r\n\r\nstruct GBufferOutput {\r\n  @location(0) albedo : vec4f,\r\n  @location(1) normal : vec4f,\r\n  @location(2) worldPosition : vec4f,\r\n  @location(3) velocity : vec4f,\r\n//  @location(4) depth : f32,\r\n  @builtin(frag_depth) depth : f32,\r\n}\r\n\r\nfn getVelocity(rayMarchResult: RayMarchResult, viewProjections: ViewProjectionMatrices) -> vec3<f32> {\r\n  let vp = viewProjections.viewProjection;\r\n    let previousVp = viewProjections.previousViewProjection;\r\n    let modelMatrix = rayMarchResult.modelMatrix;\r\n    let previousModelMatrix = rayMarchResult.previousModelMatrix;\r\n\r\n    // Get current object space position of the current pixel\r\n    let objectPos = rayMarchResult.objectPos.xyz;\r\n    let objectClipSpace = vp * modelMatrix * vec4(objectPos.xyz, 1.0);\r\n    let objectNDC = objectClipSpace.xyz / objectClipSpace.w;\r\n\r\n    // Get previous position of the current object space position\r\n    let previousObjectClipSpace = previousVp * previousModelMatrix * vec4(objectPos.xyz, 1.0);\r\n    let previousObjectNDC = previousObjectClipSpace.xyz / previousObjectClipSpace.w;\r\n\r\n    // Get velocity based on the difference between the current and previous positions\r\n    var velocity = objectNDC - previousObjectNDC;\r\n    velocity.y = -velocity.y;\r\n  return velocity;\r\n}\r\n\r\nfn normaliseValue(min: f32, max: f32, value: f32) -> f32 {\r\n  return (value - min) / (max - min);\r\n}\r\n\r\n\r\n@fragment\r\nfn main(\r\n\r\n  @location(0) objectPos : vec3f,\r\n//   @location(1) worldPos : vec3f,\r\n    @location(2) @interpolate(linear) ndc : vec3f\r\n) -> GBufferOutput\r\n {\r\n    var output : GBufferOutput;\r\n    var screenUV = ndc.xy * 0.5 + 0.5;\r\n    var inverseViewProjection = viewProjections.inverseViewProjection;\r\n    let rayDirection = calculateRayDirection(screenUV,inverseViewProjection);\r\n\r\n    var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(cameraPosition, 1.0)).xyz;\r\n\r\n    let isInBounds = all(objectRayOrigin >= vec3(0.0)) && all(objectRayOrigin <= voxelObject.size - vec3(1));\r\n\r\n    let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n    var tNear = 0.0;\r\n    if(!isInBounds){\r\n      tNear = boxIntersection(objectRayOrigin, objectRayDirection, voxelObject.size * 0.5).tNear - 0.00001;\r\n    }\r\n    var worldPos = transformPosition(voxelObject.transform, objectRayOrigin + objectRayDirection * tNear);\r\n    var result = rayMarchTransformed(voxelObject, rayDirection, worldPos, 0);\r\n    if(!result.hit){\r\n      discard;\r\n       return output;\r\n    }\r\n\r\n\r\n//    output.albedo = vec4(abs(result.worldPos) % 1.0, 1);\r\n    output.albedo = vec4(result.colour, 1);\r\n    output.normal = vec4(result.normal, 1);\r\n    output.worldPosition = vec4(result.worldPos, 1);\r\n    output.velocity = vec4(getVelocity(result, viewProjections), 1);\r\n\r\n    let raymarchedDistance = length(result.worldPos - cameraPosition);\r\n\r\n    let near = 0.1;\r\n    let far = 10000.0;\r\n    let linearDepth = normaliseValue(near, far, raymarchedDistance);\r\n    output.depth = linearDepth;\r\n//    output.albedo = vec4(output.normal);\r\n    return output;\r\n}\n        `}),entryPoint:"main",targets:[{format:"rgba8unorm"},{format:"rgba16float"},{format:"rgba32float"},{format:"rgba16float"}]},primitive:{topology:"triangle-list",cullMode:"front"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth32float"}});return{render:({commandEncoder:t,outputTextures:n,transformationMatrixBuffer:i,volumeAtlas:s,viewProjectionMatricesBuffer:a,timestampWrites:o,cameraPositionBuffer:c})=>{const u=bi,l=[{view:n.albedoTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:n.normalTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:n.worldPositionTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:n.velocityTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],h={view:n.depthTexture.createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"},d=Ii.createBuffer({size:576*u.length,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),f=Ii.createBuffer({size:256*u.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),m=Ii.createBuffer({size:256*u.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),p=Ii.createBuffer({size:512*u.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});let g=[];for(let t=0;t<u.length;t++){const r=Ii.createBindGroup({layout:e,entries:[{binding:0,resource:{buffer:f,offset:256*t}},{binding:1,resource:{buffer:m,offset:256*t}},{binding:2,resource:{buffer:a}},{binding:3,resource:s.getAtlasTextureView()},{binding:4,resource:{buffer:p,offset:512*t}},{binding:5,resource:{buffer:c}},{binding:6,resource:{buffer:s.getBrickMapBuffer()}}]});g.push(r);const n=u[t],i=xe.mul(xe.scale(ji.projectionMatrix,[-1,1,1]),ji.viewMatrix),o=new Float32Array(xe.mul(i,n.transform));Ii.queue.writeBuffer(f,256*t,o.buffer,o.byteOffset,o.byteLength);const l=new Float32Array(n.transform);Ii.queue.writeBuffer(m,256*t,l.buffer,l.byteOffset,l.byteLength);const h=new Float32Array(n.toArray());Ii.queue.writeBuffer(p,512*t,h.buffer,h.byteOffset,h.byteLength);const y=new Float32Array(ki(n.size));Ii.queue.writeBuffer(d,576*t,y.buffer,y.byteOffset,y.byteLength)}const y=t.beginRenderPass({colorAttachments:l,depthStencilAttachment:h,timestampWrites:o});y.setPipeline(r);for(let e=0;e<u.length;e++){const t=g[e];y.setVertexBuffer(0,d,576*e,576),y.setBindGroup(0,t),y.draw(36)}return y.end(),t.copyTextureToTexture({texture:n.albedoTexture},{texture:n.finalTexture},{width:n.finalTexture.width,height:n.finalTexture.height,depthOrArrayLayers:1}),[t.finish()]},label:"hello triangle"}},Ei=new class{maxObjectCount;objectCount;scale;targetScale;translateX;targetTranslateX;rotateY;targetRotateY;sunRotateY;targetSunRotateY;constructor(){this.maxObjectCount=222,this.objectCount=222,this.scale=1,this.translateX=0,this.targetScale=1,this.targetTranslateX=0,this.rotateY=0,this.targetRotateY=0,this.sunRotateY=2.6,this.targetSunRotateY=2.6}update(){Qt((e=>{const t=this.targetScale-this.scale;this.scale=this.scale+t*e}),{easing:rr({velocity:2e-4*Di})}),Qt((e=>{const t=this.targetTranslateX-this.translateX;this.translateX=this.translateX+t*e}),{easing:rr({velocity:2e-4*Di})}),Qt((e=>{const t=this.targetRotateY-this.rotateY;this.rotateY=this.rotateY+t*e}),{easing:rr({velocity:2e-4*Di})}),Qt((e=>{const t=this.targetSunRotateY-this.sunRotateY;this.sunRotateY=this.sunRotateY+t*e}),{easing:rr({velocity:2e-4*Di})})}};let Ii,Ai,Bi,Oi,zi=O.create(4,4),Ui=0,Ri=Ui,Di=0,Ci=0;const Ni=Math.PI/180*90;let ji=new class extends nr{fieldOfView;near=.5;far=1e4;constructor(e){super({position:e.position,rotation:Fe.fromMat(xe.lookAt(ne.create(),e.direction,ne.create(0,1,0)))}),this.fieldOfView=e.fieldOfView}get direction(){return ne.transformQuat(ne.create(0,0,1),this.rotation)}get right(){return ne.transformQuat(ne.create(1,0,0),this.rotation)}get left(){return ne.transformQuat(ne.create(-1,0,0),this.rotation)}get up(){return ne.transformQuat(ne.create(0,1,0),this.rotation)}get down(){return ne.transformQuat(ne.create(0,-1,0),this.rotation)}get viewMatrix(){const e=this.position;return xe.lookAt(e,ne.add(e,this.direction),this.up)}get inverseViewMatrix(){return xe.invert(this.viewMatrix)}get projectionMatrix(){return xe.perspective(this.fieldOfView,zi[0]/zi[1],this.near,this.far)}get inverseProjectionMatrix(){return xe.invert(this.projectionMatrix)}get viewProjectionMatrix(){return xe.mul(this.projectionMatrix,this.viewMatrix)}get inverseViewProjectionMatrix(){return xe.invert(this.viewProjectionMatrix)}}({fieldOfView:Ni,position:ne.create(-31,6,-50),direction:ne.create(0,0,-.5)});const Vi=new class{logElement;isMouseDown=!1;constructor(){document.getElementById("reset").addEventListener("click",(e=>{window.dispatchEvent(new CustomEvent("resetcamera")),document.getElementById("captures").innerHTML=""})),document.getElementById("capture").addEventListener("click",(e=>{const t=new Image;t.id=performance.now().toString(),t.src=Bi.toDataURL(),document.getElementById("captures").appendChild(t).addEventListener("click",(e=>{e.target,console.log(e.target)}))})),document.addEventListener("wheel",(e=>{ji.fieldOfView+=.001*e.deltaY,ji.fieldOfView=Math.max(Math.min(ji.fieldOfView,2),.1)})),["fov","scale","translate","sun"].forEach((e=>{document.getElementById(e).addEventListener("input",(t=>{const r=t.target;window.dispatchEvent(new CustomEvent(`change${e}`,{detail:r.value}))}))})),this.logElement=document.getElementById("log"),window.addEventListener("changefov",(e=>{ji.fieldOfView=parseFloat(e.detail)})),window.addEventListener("changetranslate",(e=>{Ei.targetTranslateX=.01*parseFloat(e.detail)})),window.addEventListener("changesun",(e=>{Ei.targetSunRotateY=parseFloat(e.detail)})),window.addEventListener("changescale",(e=>{Ei.targetScale=parseFloat(e.detail)})),window.addEventListener("resetcamera",(()=>{Ei.targetTranslateX=0,Ei.targetScale=1,Ei.targetRotateY=0})),document.getElementById("webgpu-canvas").addEventListener("mousedown",(()=>{this.isMouseDown=!0})),document.getElementById("webgpu-canvas").addEventListener("mouseup",(()=>{this.isMouseDown=!1})),document.getElementById("webgpu-canvas").addEventListener("mouseleave",(()=>{this.isMouseDown=!1})),window.addEventListener("mousemove",(e=>{this.isMouseDown&&(Ei.targetRotateY-=.005*e.movementX)}))}log(e){this.logElement.innerHTML=e}},Li=(()=>{let e={};const t=t=>{const r=e[t];return r?r.reduce(((e,t)=>e+t))/r.length:0};return{addSample:(t,r)=>{e[t]||(e[t]=[]),e[t].push(r)>50&&e[t].shift()},clearEntry:t=>{e[t]&&(e[t]=[0])},toString:()=>Object.keys(e).map((e=>`${e}: ${t(e).toFixed(2)}ms`)).join("\n"),toHTML:()=>Object.keys(e).map((e=>`<div class="debug-row">\n                    <div>\n                        ${e}\n                    </div>\n                   <div>${t(e).toFixed(2)}ms</div>\n                </div>`)).join("\n")}})();let Gi,qi,Fi;Li.addSample("frame time",0);let Yi=Array.from({length:200}).map((()=>({position:[-80*Math.random(),50*Math.random(),-200*Math.random()],size:4,color:ne.normalize(ne.create(Math.random(),Math.random(),Math.random()))})));const $i=(e,s)=>{let a,o,c,u,l,h,d,f,m,p,g,y,_,x,v=xe.create(),b=xe.create();Bi=document.getElementById("webgpu-canvas"),Bi.style.imageRendering="pixelated",Ai=Bi.getContext("webgpu"),Ai.configure({device:e,format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT}),e.features.has("timestamp-query")&&(_=e.createQuerySet({type:"timestamp",count:2*s.length}),x=e.createBuffer({size:8*_.count,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}));let w=((e,t)=>{let r=[];const n=t.map(((e,t)=>({AABB:e.AABB,objectIndex:t,OBB:e.OBB})));console.log({voxelObjects:t,allLeafNodes:n});let i=0;const s=(e,n)=>{if(0===t.length)return;if(1===e.length)return void(r[n]={leftChildIndex:e[0].objectIndex,rightChildIndex:-1,objectCount:1,AABBMax:e[0].OBB.max,AABBMin:e[0].OBB.min});const a=Mi(e);let o=-1,c=-1;const{left:u,right:l}=(e=>{let t=1/0,r=-1;const n=Math.floor(e.length/2);for(let i=1;i<e.length;i++){const s=e.slice(0,i),a=e.slice(i),o=Si(s)+Si(a),c=1e3*Math.abs(i-n)+1*o;c<t&&(t=c,r=i)}return{left:e.slice(0,r),right:e.slice(r)}})(e);u.length>0&&(o=++i,s(u,o)),l.length>0&&(c=++i,s(l,c)),r[n]={leftChildIndex:o,rightChildIndex:c,objectCount:e.length,AABBMax:a.max,AABBMin:a.min}},a=performance.now();s(n,0);const o=performance.now();return Li.addSample("create bvh",o-a),console.log({nodes:r}),((e,t)=>{const n=16*Math.ceil(2.75),i=e.createBuffer({size:t*n,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1});return r.forEach(((t,r)=>{const s=r*n,a=new ArrayBuffer(n),o=new DataView(a);o.setInt32(0,t.leftChildIndex,!0),o.setInt32(4,t.rightChildIndex,!0),o.setUint32(8,t.objectCount,!0),o.setFloat32(16,t.AABBMin[0],!0),o.setFloat32(20,t.AABBMin[1],!0),o.setFloat32(24,t.AABBMin[2],!0),o.setFloat32(32,t.AABBMax[0],!0),o.setFloat32(36,t.AABBMax[1],!0),o.setFloat32(40,t.AABBMax[2],!0),e.queue.writeBuffer(i,s,a,0,n)})),i})(e,r.length)})(e,bi);const k=()=>{u&&(u=null),a&&(a=null),o&&(o=null),l&&(l=null),c&&(c=null),d&&(d=null);const{clientWidth:e,clientHeight:t}=Bi.parentElement,r=O.create(1*e,1*t);zi=O.mulScalar(r,1),Bi.width=r[0],Bi.height=r[1],Bi.style.transform="scale(1)"};(async()=>{h||(h=await async function(e,t,r={}){return Yn(e,[t],r)}(e,"blue-noise-rg.png",{usage:GPUTextureUsage.COPY_SRC}))})(),setInterval((()=>{Vi.log(Li.toHTML())}),500);const T=k=>{0===Ui&&(Ui=k);const M=k-Ui;if(Di=M-Ri,Li.addSample("frame time",Di),Ri=M,Ci++,(()=>{const t=[...ji.viewProjectionMatrix,...b,...ji.inverseViewProjectionMatrix,...v,...ji.projectionMatrix,...ji.inverseProjectionMatrix];g?n(g,t):g=i(e,t)})(),(()=>{const t=bi;document.getElementById("objectcount").innerHTML=`Objects: ${t.length} / ${bi.length} in view`;const r=t.map((e=>e.toDataView())),n=r.reduce(((e,t)=>e+t.byteLength),0);p||(p=e.createBuffer({size:n,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1})),r.forEach(((t,r)=>{e.queue.writeBuffer(p,0,t.buffer,0,t.byteLength)}))})(),!p||!h)return void(Fi=requestAnimationFrame(T));(()=>{const e=.005*Di,t=.04*Di;let r=ne.zero();ir.pressed.a&&(r=ne.add(r,ji.left)),ir.pressed.d&&(r=ne.add(r,ji.right)),ir.pressed.w&&(r=ne.add(r,ji.direction)),ir.pressed.s&&(r=ne.subtract(r,ji.direction)),ir.pressed.e&&(ji.targetRotation=Fe.rotateY(ji.targetRotation,e)),ir.pressed.q&&(ji.targetRotation=Fe.rotateY(ji.targetRotation,-e)),ir.pressed[" "]&&(r=ne.add(r,ji.up)),ir.pressed.shift&&(r=ne.add(r,ji.down)),r=ne.normalize(r),ji.targetPosition=ne.add(ji.targetPosition,ne.mulScalar(r,t))})(),ji.update(),Ei.update();const S=xe.getTranslation(ji.inverseViewMatrix);document.getElementById("resolution").innerHTML=zi.join(" x "),f||(f=r([Ci,0,0])),e.queue.writeBuffer(f,4,new Float32Array([Di])),e.queue.writeBuffer(f,0,new Uint32Array([Ci])),e.queue.writeBuffer(f,8,new Float32Array([Ri/1e3])),m?t(m,[zi[0],zi[1]]):m=r([zi[0],zi[1]]),(()=>{const e=xe.identity();xe.rotateY(e,Ei.sunRotateY,e);const t=ne.normalize(ne.transformMat4(ne.create(0,.5,-1),e));y?n(y,[t[0],t[1],t[2]]):y=r([t[0],t[1],t[2]])})();const P=i(e,S,"camera position");o||(o=e.createTexture({size:[zi[0],zi[1],1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC})),a||(a=e.createTexture({size:[zi[0],zi[1],1],format:"rgba16float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT})),u||(u=e.createTexture({size:[zi[0],zi[1],1],format:"depth32float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC})),l||(l=e.createTexture({size:[zi[0],zi[1],1],format:"rgba16float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT})),c||(c=e.createTexture({size:[zi[0],zi[1],1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT})),d||(d=e.createTexture({size:[zi[0],zi[1],1],format:"rgba32float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT}));let E=[];Gi=Oi.getAtlasTextureView(),Gi?(s.forEach(((t,r)=>{const{render:n,label:i}=t;if(!1===document.getElementById(`flag-${i}`)?.checked)return;const s=e.createCommandEncoder();let v;e.features.has("timestamp-query")&&s.clearBuffer(x),e.features.has("timestamp-query")&&(v={querySet:_,beginningOfPassWriteIndex:2*r,endOfPassWriteIndex:2*r+1}),n({commandEncoder:s,resolutionBuffer:m,timeBuffer:f,outputTextures:{finalTexture:c,albedoTexture:o,normalTexture:a,depthTexture:u,skyTexture:qi,velocityTexture:l,worldPositionTexture:d},cameraPositionBuffer:P,volumeAtlas:Oi,transformationMatrixBuffer:p,viewProjectionMatricesBuffer:g,timestampWrites:v,sunDirectionBuffer:y,blueNoiseTexture:h,bvhBuffer:w,lights:Yi}).forEach((e=>{E.push(e)}))})),e.features.has("timestamp-query")&&(t=>{const r=e.createCommandEncoder();r.resolveQuerySet(_,0,_.count,x,0),t.push(r.finish());const n=x.size,i=e.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),a=e.createCommandEncoder();a.copyBufferToBuffer(x,0,i,0,n);const o=a.finish();e.queue.submit([o]),i.mapAsync(GPUMapMode.READ).then((()=>i.getMappedRange())).then((e=>{const t=new BigInt64Array(e),r=[];t.forEach((e=>{r.push(Number(e)/1e6)})),r.reduce(((e,t,n)=>(n%2==0&&e.push(r[n+1]-t),e)),[]).forEach(((e,t)=>{const r=s[t].label,n=`flag-${r}`,i=document.getElementById(n)?.checked;r&&i?Li.addSample(r,e):Li.clearEntry(r)}))}))})(E),e.queue.submit(E),Fi=requestAnimationFrame(T),v=ji.inverseViewProjectionMatrix,b=ji.viewProjectionMatrix):Fi=requestAnimationFrame(T)};k(),window.onresize=k,Fi=requestAnimationFrame(T)};(async()=>{if(!navigator.gpu)return void console.error("WebGPU not supported");const e=await navigator.gpu.requestAdapter();if(!Ii)try{Ii=await e.requestDevice({requiredFeatures:["timestamp-query"],requiredLimits:{maxColorAttachmentBytesPerSample:64}})}catch(t){Ii=await e.requestDevice()}console.debug(Ii.limits),qi=Ii.createTexture({dimension:"2d",size:[512,512,6],format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING}),Oi=await(async e=>{let t={};const r=e.createCommandEncoder();let n=e.createTexture({size:{width:8,height:8,depthOrArrayLayers:8},...$n,label:"Volume atlas containing ",mipLevelCount:1});e.queue.submit([r.finish()]),await e.queue.onSubmittedWorkDone();let i=await(async(e,t)=>{const r=Math.ceil(t.width/8)*Math.ceil(t.height/8)*Math.ceil(t.depthOrArrayLayers/8),n=e.createBuffer({size:64*r,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE});console.log({SIZE:64*r});const i=e.createBindGroupLayout({entries:[{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:2,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}}]}),s=e.createComputePipeline({layout:e.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:e.createShaderModule({code:"/* 8x8x8 bits\r\n  vec4 for packing, 64 bytes in total\r\n*/\r\nstruct Brick {\r\n  voxels: array<u32, 16>\r\n}\r\n\r\n@group(0) @binding(0) var<storage, read_write> voxelBuffer: array<vec4<u32>>;\r\n@group(0) @binding(1) var<storage, read_write> brickMapBuffer: array<Brick>;\r\n@group(0) @binding(2) var voxels : texture_3d<f32>;\r\n\r\n\r\n// Size in each dimension, 8x8x8\r\nconst BRICK_SIZE = 8;\r\n\r\nfn convert1DTo3D(size: vec3<u32>, index: u32) -> vec3<u32> {\r\n  return vec3(\r\n    index % size.x,\r\n    index / size.y,\r\n    index / (size.x * size.y)\r\n  );\r\n}\r\n\r\nfn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\r\n  return position.x + position.y * size.x + position.z * (size.x * size.y);\r\n}\r\n\r\n// sets bit in a 32-bit integer\r\nfn setBit(value: ptr<function, u32>, bitIndex: u32, bit: bool){\r\n  let mask = 1u << bitIndex;\r\n  if(bit) {\r\n    *value = *value | mask;\r\n  } else {\r\n    *value = *value & ~mask;\r\n  }\r\n}\r\n\r\n\r\n\r\n// sets bit in 512bit bitmask in a brick\r\n// bitIndex is the index of the bit in the bitmask, 0-511\r\nfn setBitInBrick(brick: ptr<function, Brick>, bitIndex: u32, bit: bool) {\r\n  let maskIndex = bitIndex / 32;\r\n  let bitIndexInMask = bitIndex % 32;\r\n  setBit(&brick.voxels[maskIndex], bitIndexInMask, bit);\r\n}\r\n\r\nfn getBit(value: u32, bitIndex: u32) -> bool {\r\n  return (value & (1u << bitIndex)) != 0;\r\n}\r\n\r\n// gets bit in 512bit bitmask in a brick\r\n// bitIndex is the index of the bit in the bitmask, 0-511\r\nfn getBitInBrick(brick: Brick, bitIndex: u32) -> bool {\r\n  let maskIndex = bitIndex / 32;\r\n  let bitIndexInMask = bitIndex % 32;\r\n  return getBit(brick.voxels[maskIndex], bitIndexInMask);\r\n}\r\n\r\n@compute @workgroup_size(64, 1, 1)\r\n fn main(\r\n   @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n ) {\r\n    let index = GlobalInvocationID.x;\r\n    let voxel = voxelBuffer[index];\r\n    let position = voxel.xyz;\r\n    let brickIndex = convert3DTo1D(textureDimensions(voxels).xyz / BRICK_SIZE, position / BRICK_SIZE);\r\n    let brick = brickMapBuffer[brickIndex];\r\n\r\n    // TODO: set bits in brick\r\n    var newBrick = Brick();\r\n    var filled4Bytes = pack4xU8(vec4<u32>(255));\r\n    var fullBrickBitMask = array<u32, 16>(\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n      filled4Bytes,\r\n    );\r\n    newBrick.voxels = fullBrickBitMask;\r\n    brickMapBuffer[brickIndex] = newBrick;\r\n }\r\n\r\n@compute @workgroup_size(64,1,1)\r\nfn texture(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let brickIndex = GlobalInvocationID.x;\r\n  let brickPosition = convert1DTo3D(textureDimensions(voxels) / BRICK_SIZE, brickIndex);\r\n  var newBrick = Brick();\r\n\r\n  for(var x = 0u; x < BRICK_SIZE; x++) {\r\n    for(var y = 0u; y < BRICK_SIZE; y++) {\r\n      for(var z = 0u; z < BRICK_SIZE; z++) {\r\n        let positionInBrick = vec3<u32>(x, y, z);\r\n        let position = brickPosition * BRICK_SIZE + positionInBrick;\r\n        let isVoxelFilled = textureLoad(voxels, position, 0).a > 0.0;\r\n        if(isVoxelFilled) {\r\n          let bitIndex = convert3DTo1D(vec3<u32>(BRICK_SIZE), positionInBrick);\r\n          setBitInBrick(&newBrick, bitIndex, true);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if(brickPosition.x == 0) {\r\n    newBrick.voxels[0] = pack4xU8(vec4<u32>(255));\r\n  }\r\n  brickMapBuffer[brickIndex] = newBrick;\r\n}\r\n"}),entryPoint:"texture"}}),a=e.createBindGroup({layout:i,entries:[{binding:1,resource:{buffer:n}},{binding:2,resource:t.createView()}]}),o=e.createCommandEncoder(),c=o.beginComputePass();return c.setPipeline(s),c.setBindGroup(0,a),c.dispatchWorkgroups(Math.ceil(r/64)),c.end(),e.queue.submit([o.finish()]),await e.queue.onSubmittedWorkDone(),n})(e,n);return{getVolumes:()=>t,addVolume:async(r,s,a,o)=>{if(t[o])throw new Error(`Error adding volume to atlas: volume with label ${o} already exists`);const{width:c,height:u,depthOrArrayLayers:l}=s,h=Wn(c,8),d=Wn(u,8),f=Wn(l,8);console.debug(`Adding ${o} to atlas`,{width:c,height:u,depthOrArrayLayers:l});const m=n.width+h;if(m>e.limits.maxTextureDimension3D)throw new Error(`Error adding volume to atlas: adding volume would exceed device max texture dimension of ${e.limits.maxTextureDimension3D}`);const p=Math.max(n.height,d),g=Math.max(n.depthOrArrayLayers,f),y=Math.max(s.mipLevelCount,n.mipLevelCount);console.debug(`Expanding atlas texture to [${m}, ${p}, ${g}], mip levels: ${y}`);const _=e.createTexture({size:{width:m,height:p,depthOrArrayLayers:g},mipLevelCount:y,...$n,label:`${n.label}, ${s.label||"unnamed volume"}`});console.log({newMipLevelCount:y,atlasTexture:n});const x=n.width;r.copyTextureToTexture({texture:n},{texture:_},{width:n.width,height:n.height,depthOrArrayLayers:n.depthOrArrayLayers});for(let e=0;e<Math.min(s.mipLevelCount,_.mipLevelCount);e++){const t=Math.max(1,s.width>>e),n=Math.max(1,s.height>>e),i=Math.max(1,s.depthOrArrayLayers>>e);r.copyTextureToTexture({texture:s,mipLevel:e,origin:{x:0,y:0,z:0}},{texture:_,mipLevel:e,origin:{x:x>>e,y:0,z:0}},{width:t,height:n,depthOrArrayLayers:i})}const v=i.size/64;n=_,t[o]={location:[x,0,0],size:[c,u,l],brickMapOffset:v,brickMap:a};const b=Object.values(a),w=b.reduce(((e,t)=>e+t.length),0),k=e.createBuffer({size:i.size+w*Uint32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.STORAGE});r.copyBufferToBuffer(i,0,k,0,i.size),e.queue.submit([r.finish()]),await e.queue.onSubmittedWorkDone(),b.forEach(((t,r)=>{e.queue.writeBuffer(k,r*t.byteLength,t)})),await e.queue.onSubmittedWorkDone(),i=k},getVolume:e=>t[e],removeVolume:async r=>{if(!t[r])throw new Error(`Error removing volume from atlas: volume with label ${r} does not exist`);if(!n)throw new Error("Error removing from atlas: No atlas texture to remove volume from");const{location:i,size:s}=t[r],a=ne.add(i,s),o=ne.subtract(a,i);if(o[0]>n.width||o[1]>n.height||o[2]>n.depthOrArrayLayers)throw new Error(`Error removing from atlas: volume to remove (${o}) is larger than atlas texture (${n.width}, ${n.height}, ${n.depthOrArrayLayers})`);const c=e.createCommandEncoder(),u=c.beginComputePass(),l=e.createComputePipeline({layout:"auto",compute:{module:e.createShaderModule({code:"\n                @group(0) @binding(0) var texture : texture_storage_3d<rgba8unorm, write>;\n                override startX: u32 = 0;\n                override startY: u32 = 0;\n                override startZ: u32 = 0;\n                @compute @workgroup_size(1, 1, 1)\n                fn main(\n                  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n                ) {\n                  textureStore(texture, GlobalInvocationID + vec3(startX, startY, startZ), vec4(0.0));\n                }\n            "}),entryPoint:"main",constants:{startX:i[0],startY:i[1],startZ:i[2]}}});u.setPipeline(l),u.setBindGroup(0,e.createBindGroup({layout:l.getBindGroupLayout(0),entries:[{binding:0,resource:n.createView()}]})),u.dispatchWorkgroups(o[0],o[1],o[2]),u.end(),e.queue.submit([c.finish()]),await e.queue.onSubmittedWorkDone()},getAtlasTextureView:()=>{if(!n)return null;const e=n.createView();return e.label=n.label,e},getBrickMapBuffer:()=>i,dimensions:ne.create(n.width,n.height,n.depthOrArrayLayers)}})(Ii),await(async(e,r)=>{const i=await fetch("./Tavern.json"),s=(await i.json()).children.filter((e=>wi.includes(e.name))),a=new Set(s.map((e=>e.name))),o=Array.from(a);let c=e.createCommandEncoder();console.time("Load all volumes");{let i=await Promise.all(o.map((r=>(async(e,r,i)=>{console.time(`Fetch ${r}`);const s=await fetch(`./Tavern/${r}.vxm`);console.timeEnd(`Fetch ${r}`);const a=(e=>{console.time("convert vxm");const t=new xi(e);let r,n=[],i="",s=[];if(i=String.fromCodePoint(t.readUint8(),t.readUint8(),t.readUint8(),t.readUint8()),"VXMC"!==i&&"VXMA"!==i)throw new Error(`Incorrect magic: ${i}`);if(i[3].charCodeAt(0)>="0".charCodeAt(0)&&i[3].charCodeAt(0)<="9".charCodeAt(0))r=i[3].charCodeAt(0)-"0".charCodeAt(0);else{if(!(i[3].charCodeAt(0)>="A".charCodeAt(0)&&i[3].charCodeAt(0)<="C".charCodeAt(0)))throw new Error("Unsupported version found");r=10+i[3].charCodeAt(0)-"A".charCodeAt(0)}if(r<11||r>12)throw new Error(`Could not load vxm file: Unsupported version found (${r})`);let a=[0,0,0];a[0]=t.readUint32(),a[1]=t.readUint32(),a[2]=t.readUint32();let o=[.5,0,.5];if(o[0]=t.readFloat32(),o[1]=t.readFloat32(),o[2]=t.readFloat32(),t.readUint8()>0){let e=0,r=0;t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),e=t.readUint32(),r=t.readUint32();let n=e*r;t.skip(4*n)}r>=8&&t.skip(16);let c=t.readUint32();for(let e=0;e<c;++e){let e=t.readUint32(),r=t.readUint32();if(e>2048||r>2048)throw new Error("Size of texture exceeds the max allowed value");let n=t.readUint32();t.skip(n);for(let e=0;e<6;++e){let e=t.readUint32();e>262144&&console.warn(`Size of quads exceeds the max allowed value: ${e}`);let r=4*e*20;t.skip(r)}}t.skip(1024),t.skip(1024);let u=t.readUint8();for(let e=0;e<u;++e)t.skip(1024),t.readUint8(),t.readUint8();let l=t.readUint8();for(let e=0;e<l;++e){let r=t.readUint8(),i=t.readUint8(),s=t.readUint8(),a=t.readUint8();a=1===t.readUint8()?2:255,n[e]={r:s,g:i,b:r,a}}let h=1;r>=12&&(h=t.readUint8());let d={min:ne.create(9999,9999,9999),max:ne.create(0,0,0)};for(let e=0;e<h;++e){let n=0,i=!0,o="";if(r>=12){for(;;){const e=t.readUint8();if(vi(e))break;o=`${o}${String.fromCharCode(e)}`}i=t.readUint8()>0}else o=`Layer ${e}`;for(;;){let e=t.readUint8();if(0===e)break;let r=t.readUint8();if(255!==r)if(r>=l)n+=e;else{for(let t=n;t<n+e;t++){let e=Math.floor(t/(a[1]*a[2])),n=Math.floor(t/a[2]%a[1]),i=Math.floor(t%a[2]);d.min=ne.min(d.min,[e,n,i]),d.max=ne.max(d.max,[e,n,i]),s.push({x:e,y:n,z:i,c:r})}n+=e}else n+=e}}s=s.map((({x:e,y:t,z:r,c:n})=>({x:e-d.min[0],y:t-d.min[1],z:r-d.min[2],c:n})));const f=ne.sub(d.max,d.min);return console.log({bounds:d,trimmedSize:f}),console.timeEnd("convert vxm"),{VOX:s.length,SIZE:[f[0]+1,f[1]+1,f[2]+1],XYZI:s,RGBA:n}})(await s.arrayBuffer());console.time(`Create texture from voxels for ${r}`);let o=await(async(e,r)=>{const i=e.createTexture({size:{width:r.SIZE[0],height:r.SIZE[1],depthOrArrayLayers:r.SIZE[2]},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d",mipLevelCount:3}),s=e.createBuffer({size:4*r.XYZI.length*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE}),a=e.createBuffer({size:4*r.RGBA.length*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE});n(a,r.RGBA.map((e=>[e.r/255,e.g/255,e.b/255,e.a/255])).flat()),t(s,r.XYZI.map((e=>[e.x,e.y,e.z,e.c])).flat());const o=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:i.format,viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),c=e.createComputePipeline({layout:e.createPipelineLayout({bindGroupLayouts:[o]}),compute:{module:e.createShaderModule({code:"@group(0) @binding(0) var output : texture_storage_3d<rgba8unorm, write>;\r\n@group(0) @binding(1) var<storage, read_write> voxelBuffer: array<vec4<u32>>;\r\n@group(0) @binding(2) var<storage, read_write> paletteBuffer: array<vec4<f32>>;\r\n\r\n@compute @workgroup_size(64, 1, 1)\r\n fn main(\r\n   @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n ) {\r\n    let index = GlobalInvocationID.x;\r\n    let voxel = voxelBuffer[index];\r\n    let paletteIndex = voxel.w;\r\n    let position = voxel.xyz;\r\n    let color = paletteBuffer[paletteIndex];\r\n    textureStore(output, position, color);\r\n }"}),entryPoint:"main"}}),u=e.createBindGroup({label:"create-texture-from-voxels",layout:o,entries:[{binding:0,resource:i.createView({baseMipLevel:0,mipLevelCount:1})},{binding:1,resource:{buffer:s}},{binding:2,resource:{buffer:a}}]}),l=e.createCommandEncoder(),h=l.beginComputePass();return h.setPipeline(c),h.setBindGroup(0,u),h.dispatchWorkgroups(r.XYZI.length/64,1,1),h.end(),e.queue.submit([l.finish()]),await e.queue.onSubmittedWorkDone(),i})(i,a);console.timeEnd(`Create texture from voxels for ${r}`),console.time(`Generate octree mips for ${r}`),((e,t,r)=>{const n=Math.min(Rn(r,"3d"),r.mipLevelCount),i=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:r.format,viewDimension:"3d"}}]});for(let s=1;s<n;s++){console.debug(`Generating mip level ${s}`);const n=r.createView({baseMipLevel:s-1,mipLevelCount:1}),a=r.createView({baseMipLevel:s,mipLevelCount:1}),o=t.createBindGroup({layout:i,entries:[{binding:0,resource:n},{binding:1,resource:a}]}),c=t.createComputePipeline({layout:t.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:t.createShaderModule({code:"@group(0) @binding(0) var input : texture_3d<f32>;\r\n@group(0) @binding(1) var output : texture_storage_3d<rgba8unorm, write>;\r\n\r\nconst NODES_PER_LEVEL = 8u;\r\n\r\n/*\r\n  gets the most common color in the octant\r\n  if all voxels in octant are empty, keep it blank\r\n*/\r\n@compute @workgroup_size(4, 4, 4)\r\nfn main(\r\n  @builtin(global_invocation_id) srcTexel : vec3<u32>\r\n){\r\n  // Get the colours of the 8 voxels in the octant\r\n  var colours = array<vec4<f32>, NODES_PER_LEVEL>();\r\n  var isOctantEmpty = true;\r\n  for(var x = u32(0); x < 2; x++){\r\n    for(var y = u32(0); y < 2; y++){\r\n      for(var z = u32(0); z < 2; z++){\r\n        let voxelX = srcTexel.x * 2 + x + 1;\r\n        let voxelY = srcTexel.y * 2 + y;\r\n        let voxelZ = srcTexel.z * 2 + z;\r\n        var voxelId = vec3<u32>(voxelX,voxelY,voxelZ);\r\n        var voxel = textureLoad(input,voxelId,0);\r\n        if(voxel.a > 0){\r\n          var index = x + y * 2 + z * 4;\r\n          colours[index] = voxel;\r\n          isOctantEmpty = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // If all voxels in the octant are empty, keep it blank\r\n  if(isOctantEmpty){\r\n    return;\r\n  }\r\n\r\n  // Get the most common colour in the octant\r\n  var mostCommonColour = vec4<f32>(0);\r\n  var mostCommonColourCount = u32(0);\r\n  for(var i = u32(0); i < NODES_PER_LEVEL; i = i + 1u){\r\n    var colour = colours[i];\r\n    var count = u32(0);\r\n    for(var j = u32(0); j < NODES_PER_LEVEL; j = j + 1u){\r\n      if(colour.a > 0 && all(colour == colours[j])){\r\n        count++;\r\n      }\r\n    }\r\n    if(count > mostCommonColourCount){\r\n      mostCommonColour = colour;\r\n      mostCommonColourCount = count;\r\n    }\r\n  }\r\n\r\n  // Write the most common colour as this nodes colour\r\n  textureStore(output, srcTexel, mostCommonColour);\r\n}"}),entryPoint:"main"}}),u=e.beginComputePass();u.setPipeline(c),u.setBindGroup(0,o);const l=Math.max(1,r.width>>s),h=Math.max(1,r.height>>s),d=Math.max(1,r.depthOrArrayLayers>>s),f=Math.ceil(l/4),m=Math.ceil(h/4),p=Math.ceil(d/4);u.dispatchWorkgroups(f,m,p),u.end()}})(e,i,o),console.timeEnd(`Generate octree mips for ${r}`),console.time(`Create brick map for ${r}`);const c=(e=>{const t={};for(let r=0;r<e.XYZI.length;r++){const n=e.XYZI[r],i=ne.create(Math.floor(n.x/8),Math.floor(n.y/8),Math.floor(n.z/8)),s=`${i[0]},${i[1]},${i[2]}`;t[s]||(t[s]=new Uint32Array(16));const a=n.x%8+n.y%8*8+n.z%8*64;t[s]=gi(t[s],a,!0)}return t})(a);return console.log({brickMap:c}),console.timeEnd(`Create brick map for ${r}`),{name:r,texture:o,brickMap:c}})(c,r,e))));for(const{name:t,texture:n,brickMap:s}of i)console.time(`Add volume for ${t}`),await r.addVolume(c,n,s,t),c=e.createCommandEncoder(),console.timeEnd(`Add volume for ${t}`)}console.timeEnd("Load all volumes");const u=r.getVolumes();let l=[];for(const e of s){const t=u[e.name];if(!t)return void console.warn(`Volume not found for child ${e.name}, skipping...`);const r=xe.identity();"Candle"===e.name&&l.push(e.position),xe.translate(r,e.position,r),xe.scale(r,e.scale,r),xe.multiply(r,xe.fromQuat(e.rotation),r),bi.push(new _i(r,t.size,t.location,t.brickMapOffset,e.name))}console.log({volumes:u,torchPositions:l}),console.debug(`Tavern created with ${bi.length} items`)})(Ii,Oi);const r=[Pi(),ci(),Ti(),sr(Ii)],i=await Promise.all(r);$i(Ii,await Promise.all(i)),document.getElementById("flags").innerHTML=i.reduce(((e,t)=>{if(!t.label)return e;const r=`flag-${t.label}`;return`${e}<div class="debug-row">\n                    <label for="${r}">\n                        ${t.label}\n                    </label>\n                    <div>\n                        <input id="${r}" type="checkbox" checked>\n                   </div>\n                </div>`}),"")})()})();