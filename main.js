/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e,t,r,n,i={2767:(e,t,r)=>{r.d(t,{t:()=>a,E:()=>s});class n{setAnimation(e){this.animation=e,null==e||e.finished.then((()=>this.clearAnimation())).catch((()=>{}))}clearAnimation(){this.animation=this.generator=void 0}}const i=new WeakMap;function a(e){return i.has(e)||i.set(e,{transforms:[],values:new Map}),i.get(e)}function s(e,t){return e.has(t)||e.set(t,new n),e.get(t)}},169:(e,t,r)=>{r.d(t,{Z:()=>i});var n=r(1646);function i(e){return n.V[e]&&(e=n.V[e]),(0,n.Fd)(e)?(0,n.tT)(e):e}},8958:(e,t,r)=>{r.d(t,{r:()=>a});var n=r(7204),i=r(7652);function a(e,t){var r;let a=(null==t?void 0:t.toDefaultUnit)||n.p;const s=e[e.length-1];if((0,i.K)(s)){const e=(null===(r=s.match(/(-?[\d.]+)([a-z%]*)/))||void 0===r?void 0:r[2])||"";e&&(a=t=>t+e)}return a}},1646:(e,t,r)=>{r.d(t,{tf:()=>m,tT:()=>c,Fd:()=>p,V:()=>s,PU:()=>u});var n=r(7204),i=r(2767);const a=["","X","Y","Z"],s={x:"translateX",y:"translateY",z:"translateZ"},o={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:e=>e+"deg"},l={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:e=>e+"px"},rotate:o,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:n.p},skew:o},u=new Map,c=e=>`--motion-${e}`,d=["x","y","z"];["translate","scale","rotate","skew"].forEach((e=>{a.forEach((t=>{d.push(e+t),u.set(c(e+t),l[e])}))}));const h=(e,t)=>d.indexOf(e)-d.indexOf(t),f=new Set(d),p=e=>f.has(e),m=(e,t)=>{s[t]&&(t=s[t]);const{transforms:r}=(0,i.t)(e);var n,a;a=t,-1===(n=r).indexOf(a)&&n.push(a),e.style.transform=g(r)},g=e=>e.sort(h).reduce(v,"").trim(),v=(e,t)=>`${e} ${t}(var(${c(t)}))`},8335:(e,t,r)=>{r.d(t,{i:()=>f});var n=r(1955);function i(e,t,r){const n=Math.max(t-5,0);return i=r-e(n),(a=t-n)?i*(1e3/a):0;var i,a}var a=r(7204);var s=r(6864),o=r(7652),l=r(8958),u=r(1646),c=r(169);function d(e){return(0,s.E)(e)&&!isNaN(e)}function h(e){return(0,o.K)(e)?parseFloat(e):e}const f=function(e){const t=new WeakMap;return(e={})=>{const r=new Map,s=(t=0,a=100,s=0,o=!1)=>{const l=`${t}-${a}-${s}-${o}`;return r.has(l)||r.set(l,(({from:e=0,velocity:t=0,power:r=.8,decay:a=.325,bounceDamping:s,bounceStiffness:o,changeTarget:l,min:u,max:c,restDistance:d=.5,restSpeed:h})=>{a=n.k.ms(a);const f={hasReachedTarget:!1,done:!1,current:e,target:e},p=e=>void 0===u?c:void 0===c||Math.abs(u-e)<Math.abs(c-e)?u:c;let m=r*t;const g=e+m,v=void 0===l?g:l(g);f.target=v,v!==g&&(m=v-e);const x=e=>-m*Math.exp(-e/a),y=e=>v+x(e),b=e=>{const t=x(e),r=y(e);f.done=Math.abs(t)<=d,f.current=f.done?v:r};let _,w;const T=e=>{var t;t=f.current,(void 0!==u&&t<u||void 0!==c&&t>c)&&(_=e,w=(({stiffness:e=100,damping:t=10,mass:r=1,from:a=0,to:s=1,velocity:o=0,restSpeed:l,restDistance:u}={})=>{o=o?n.k.s(o):0;const c={done:!1,hasReachedTarget:!1,current:a,target:s},d=s-a,h=Math.sqrt(e/r)/1e3,f=((e=100,t=10,r=1)=>t/(2*Math.sqrt(e*r)))(e,t,r),p=Math.abs(d)<5;let m;if(l||(l=p?.01:2),u||(u=p?.005:.5),f<1){const e=h*Math.sqrt(1-f*f);m=t=>s-Math.exp(-f*h*t)*((f*h*d-o)/e*Math.sin(e*t)+d*Math.cos(e*t))}else m=e=>s-Math.exp(-h*e)*(d+(h*d-o)*e);return e=>{c.current=m(e);const t=0===e?o:i(m,e,c.current),r=Math.abs(t)<=l,n=Math.abs(s-c.current)<=u;var d,h,f;return c.done=r&&n,c.hasReachedTarget=(d=a,h=s,f=c.current,d<h&&f>=h||d>h&&f<=h),c}})({from:f.current,to:p(f.current),velocity:i(y,e,f.current),damping:s,stiffness:o,restDistance:d,restSpeed:h}))};return T(0),e=>{let t=!1;return w||void 0!==_||(t=!0,b(e),T(e)),void 0!==_&&e>_?(f.hasReachedTarget=!0,w(e-_)):(f.hasReachedTarget=!1,!t&&b(e),f)}})(Object.assign({from:t,to:a,velocity:s},e))),r.get(l)},o=(e,r)=>(t.has(e)||t.set(e,function(e,t=a.p){let r,n=10,i=e(0);const s=[t(i.current)];for(;!i.done&&n<1e4;)i=e(n),s.push(t(i.done?i.target:i.current)),void 0===r&&i.hasReachedTarget&&(r=n),n+=10;const o=n-10;return 1===s.length&&s.push(i.current),{keyframes:s,duration:o/1e3,overshootDuration:(null!=r?r:o)/1e3}}(e,r)),t.get(e));return{createAnimation:(e,t=!0,r,n,f)=>{let p,m,g,v=0,x=a.p;const y=e.length;if(t)if(x=(0,l.r)(e,n?u.PU.get((0,c.Z)(n)):void 0),g=h(e[y-1]),y>1&&null!==e[0])m=h(e[0]);else{const e=null==f?void 0:f.generator;if(e){const{animation:t,generatorStartTime:r}=f,n=(null==t?void 0:t.startTime)||r||0,a=(null==t?void 0:t.currentTime)||performance.now()-n,s=e(a).current;m=s,v=i((t=>e(t).current),a,s)}else r&&(m=h(r()))}if(d(m)&&d(g)){const e=s(m,g,v,null==n?void 0:n.includes("scale"));p=Object.assign(Object.assign({},o(e,x)),{easing:"linear"}),f&&(f.generator=e,f.generatorStartTime=performance.now())}return p||(p={easing:"ease",duration:o(s(0,100)).overshootDuration}),p}}}}()},6864:(e,t,r)=>{r.d(t,{E:()=>n});const n=e=>"number"==typeof e},7652:(e,t,r)=>{r.d(t,{K:()=>n});const n=e=>"string"==typeof e},7204:(e,t,r)=>{r.d(t,{l:()=>n,p:()=>i});const n=()=>{},i=e=>e},1955:(e,t,r)=>{r.d(t,{k:()=>n});const n={ms:e=>1e3*e,s:e=>e/1e3}},7064:(e,t,r)=>{r.d(t,{i:()=>H});const n={duration:.3,delay:0,endDelay:0,repeat:0,easing:"ease"};var i=r(1955),a=r(7204);function s(e,t=!0){if(e&&"finished"!==e.playState)try{e.stop?e.stop():(t&&e.commitStyles(),e.cancel())}catch(e){}}const o=e=>e(),l=(e,t,r=n.duration)=>new Proxy({animations:e.map(o).filter(Boolean),duration:r,options:t},u),u={get:(e,t)=>{const r=e.animations[0];switch(t){case"duration":return e.duration;case"currentTime":return i.k.s((null==r?void 0:r[t])||0);case"playbackRate":case"playState":return null==r?void 0:r[t];case"finished":return e.finished||(e.finished=Promise.all(e.animations.map(c)).catch(a.l)),e.finished;case"stop":return()=>{e.animations.forEach((e=>s(e)))};case"forEachNative":return t=>{e.animations.forEach((r=>t(r,e)))};default:return void 0===(null==r?void 0:r[t])?void 0:()=>e.animations.forEach((e=>e[t]()))}},set:(e,t,r)=>{switch(t){case"currentTime":r=i.k.ms(r);case"playbackRate":for(let n=0;n<e.animations.length;n++)e.animations[n][t]=r;return!0}return!1}},c=e=>e.finished,d=e=>"object"==typeof e&&Boolean(e.createAnimation);var h=r(6864);const f=e=>Array.isArray(e)&&!(0,h.E)(e[0]),p=(e,t,r)=>-r*e+r*t+e,m=(e,t,r)=>t-e==0?1:(r-e)/(t-e);function g(e,t){const r=e[e.length-1];for(let n=1;n<=t;n++){const i=m(0,t,n);e.push(p(r,1,i))}}const v=(e,t,r)=>Math.min(Math.max(r,e),t);const x=(e,t,r)=>(((1-3*r+3*t)*e+(3*r-6*t))*e+3*t)*e,y=1e-7,b=12;function _(e,t,r,n){if(e===t&&r===n)return a.p;return i=>0===i||1===i?i:x(function(e,t,r,n,i){let a,s,o=0;do{s=t+(r-t)/2,a=x(s,n,i)-e,a>0?r=s:t=s}while(Math.abs(a)>y&&++o<b);return s}(i,0,1,e,r),t,n)}const w=e=>"function"==typeof e,T=e=>Array.isArray(e)&&(0,h.E)(e[0]),P={ease:_(.25,.1,.25,1),"ease-in":_(.42,0,1,1),"ease-in-out":_(.42,0,.58,1),"ease-out":_(0,0,.58,1)},S=/\((.*?)\)/;function k(e){if(w(e))return e;if(T(e))return _(...e);if(P[e])return P[e];if(e.startsWith("steps")){const t=S.exec(e);if(t){const e=t[1].split(",");return((e,t="end")=>r=>{const n=(r="end"===t?Math.min(r,.999):Math.max(r,.001))*e,i="end"===t?Math.floor(n):Math.ceil(n);return v(0,1,i/e)})(parseFloat(e[0]),e[1].trim())}}return a.p}class A{constructor(e,t=[0,1],{easing:r,duration:i=n.duration,delay:s=n.delay,endDelay:o=n.endDelay,repeat:l=n.repeat,offset:u,direction:c="normal",autoplay:h=!0}={}){if(this.startTime=null,this.rate=1,this.t=0,this.cancelTimestamp=null,this.easing=a.p,this.duration=0,this.totalDuration=0,this.repeat=0,this.playState="idle",this.finished=new Promise(((e,t)=>{this.resolve=e,this.reject=t})),r=r||n.easing,d(r)){const e=r.createAnimation(t);r=e.easing,t=e.keyframes||t,i=e.duration||i}this.repeat=l,this.easing=f(r)?a.p:k(r),this.updateDuration(i);const x=function(e,t=function(e){const t=[0];return g(t,e-1),t}(e.length),r=a.p){const n=e.length,i=n-t.length;return i>0&&g(t,i),i=>{let a=0;for(;a<n-2&&!(i<t[a+1]);a++);let s=v(0,1,m(t[a],t[a+1],i));const o=function(e,t){return f(e)?e[((e,t,r)=>{const n=t-e;return((r-e)%n+n)%n+e})(0,e.length,t)]:e}(r,a);return s=o(s),p(e[a],e[a+1],s)}}(t,u,f(r)?r.map(k):a.p);this.tick=t=>{var r;let n=0;n=void 0!==this.pauseTime?this.pauseTime:(t-this.startTime)*this.rate,this.t=n,n/=1e3,n=Math.max(n-s,0),"finished"===this.playState&&void 0===this.pauseTime&&(n=this.totalDuration);const i=n/this.duration;let a=Math.floor(i),l=i%1;!l&&i>=1&&(l=1),1===l&&a--;const u=a%2;("reverse"===c||"alternate"===c&&u||"alternate-reverse"===c&&!u)&&(l=1-l);const d=n>=this.totalDuration?1:Math.min(l,1),h=x(this.easing(d));e(h),void 0===this.pauseTime&&("finished"===this.playState||n>=this.totalDuration+o)?(this.playState="finished",null===(r=this.resolve)||void 0===r||r.call(this,h)):"idle"!==this.playState&&(this.frameRequestId=requestAnimationFrame(this.tick))},h&&this.play()}play(){const e=performance.now();this.playState="running",void 0!==this.pauseTime?this.startTime=e-this.pauseTime:this.startTime||(this.startTime=e),this.cancelTimestamp=this.startTime,this.pauseTime=void 0,this.frameRequestId=requestAnimationFrame(this.tick)}pause(){this.playState="paused",this.pauseTime=this.t}finish(){this.playState="finished",this.tick(0)}stop(){var e;this.playState="idle",void 0!==this.frameRequestId&&cancelAnimationFrame(this.frameRequestId),null===(e=this.reject)||void 0===e||e.call(this,!1)}cancel(){this.stop(),this.tick(this.cancelTimestamp)}reverse(){this.rate*=-1}commitStyles(){}updateDuration(e){this.duration=e,this.totalDuration=e*(this.repeat+1)}get currentTime(){return this.t}set currentTime(e){void 0!==this.pauseTime||0===this.rate?this.pauseTime=e:this.startTime=performance.now()-e/this.rate}get playbackRate(){return this.rate}set playbackRate(e){this.rate=e}}var O=r(2767),E=r(1646);const M=e=>e.startsWith("--"),C=new Set,I=(e,t)=>document.createElement("div").animate(e,t),U={cssRegisterProperty:()=>"undefined"!=typeof CSS&&Object.hasOwnProperty.call(CSS,"registerProperty"),waapi:()=>Object.hasOwnProperty.call(Element.prototype,"animate"),partialKeyframes:()=>{try{I({opacity:[1]})}catch(e){return!1}return!0},finished:()=>Boolean(I({opacity:[0,1]},{duration:.001}).finished),linearEasing:()=>{try{I({opacity:0},{easing:"linear(0, 1)"})}catch(e){return!1}return!0}},R={},D={};for(const e in U)D[e]=()=>(void 0===R[e]&&(R[e]=U[e]()),R[e]);const z=(e,t)=>w(e)?D.linearEasing()?`linear(${((e,t)=>{let r="";const n=Math.round(t/.015);for(let t=0;t<n;t++)r+=e(m(0,n-1,t))+", ";return r.substring(0,r.length-2)})(e,t)})`:n.easing:T(e)?j(e):e,j=([e,t,r,n])=>`cubic-bezier(${e}, ${t}, ${r}, ${n})`;var L=r(169);const B=(e,t)=>{t=(0,L.Z)(t);let r=M(t)?e.style.getPropertyValue(t):getComputedStyle(e)[t];if(!r&&0!==r){const e=E.PU.get(t);e&&(r=e.initialValue)}return r},N=(e,t,r)=>{t=(0,L.Z)(t),M(t)?e.style.setProperty(t,r):e.style[t]=r};var G=r(8958);function V(e,t,r,o={},l){const u=window.__MOTION_DEV_TOOLS_RECORD,c=!1!==o.record&&u;let p,{duration:m=n.duration,delay:g=n.delay,endDelay:v=n.endDelay,repeat:x=n.repeat,easing:y=n.easing,persist:b=!1,direction:_,offset:T,allowWebkitAcceleration:P=!1,autoplay:S=!0}=o;const k=(0,O.t)(e),A=(0,E.Fd)(t);let I=D.waapi();A&&(0,E.tf)(e,t);const U=(0,L.Z)(t),R=(0,O.E)(k.values,U),j=E.PU.get(U);return s(R.animation,!(d(y)&&R.generator)&&!1!==o.record),()=>{const n=()=>{var t,r;return null!==(r=null!==(t=B(e,U))&&void 0!==t?t:null==j?void 0:j.initialValue)&&void 0!==r?r:0};let s=function(e,t){for(let r=0;r<e.length;r++)null===e[r]&&(e[r]=r?e[r-1]:t());return e}((e=>Array.isArray(e)?e:[e])(r),n);const k=(0,G.r)(s,j);if(d(y)){const e=y.createAnimation(s,"opacity"!==t,n,U,R);y=e.easing,s=e.keyframes||s,m=e.duration||m}if(M(U)&&(D.cssRegisterProperty()?function(e){if(!C.has(e)){C.add(e);try{const{syntax:t,initialValue:r}=E.PU.has(e)?E.PU.get(e):{};CSS.registerProperty({name:e,inherits:!1,syntax:t,initialValue:r})}catch(e){}}}(U):I=!1),A&&!D.linearEasing()&&(w(y)||f(y)&&y.some(w))&&(I=!1),I){j&&(s=s.map((e=>(0,h.E)(e)?j.toDefaultUnit(e):e))),1!==s.length||D.partialKeyframes()&&!c||s.unshift(n());const t={delay:i.k.ms(g),duration:i.k.ms(m),endDelay:i.k.ms(v),easing:f(y)?void 0:z(y,m),direction:_,iterations:x+1,fill:"both"};p=e.animate({[U]:s,offset:T,easing:f(y)?y.map((e=>z(e,m))):void 0},t),p.finished||(p.finished=new Promise(((e,t)=>{p.onfinish=e,p.oncancel=t})));const r=s[s.length-1];p.finished.then((()=>{b||(N(e,U,r),p.cancel())})).catch(a.l),P||(p.playbackRate=1.000001)}else if(l&&A)s=s.map((e=>"string"==typeof e?parseFloat(e):e)),1===s.length&&s.unshift(parseFloat(n())),p=new l((t=>{N(e,U,k?k(t):t)}),s,Object.assign(Object.assign({},o),{duration:m,easing:y}));else{const t=s[s.length-1];N(e,U,j&&(0,h.E)(t)?j.toDefaultUnit(t):t)}return c&&u(e,t,s,{duration:m,delay:g,easing:y,repeat:x,offset:T},"motion-one"),R.setAnimation(p),p&&!S&&p.pause(),p}}const F=(e,t)=>e[t]?Object.assign(Object.assign({},e),e[t]):Object.assign({},e);function $(e,t,r){return w(e)?e(t,r):e}const q=(W=A,function(e,t,r={}){const n=(e=function(e,t){return"string"==typeof e?e=document.querySelectorAll(e):e instanceof Element&&(e=[e]),Array.from(e||[])}(e)).length;Boolean(n),Boolean(t);const i=[];for(let a=0;a<n;a++){const s=e[a];for(const e in t){const o=F(r,e);o.delay=$(o.delay,a,n);const l=V(s,e,t[e],o,W);i.push(l)}}return l(i,r,r.duration)});var W;function Y(e,t={}){return l([()=>{const r=new A(e,[0,1],t);return r.finished.catch((()=>{})),r}],t,t.duration)}function H(e,t,r){return(w(e)?Y:q)(e,t,r)}},4206:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{Er:()=>f,O0:()=>d,sm:()=>h});var i=r(4404),a=r(6300),s=r(7064),o=r(8335),l=r(1859),u=e([l]);l=(u.then?(await u)():u)[0];var c=function(e,t,r,n){var i,a=arguments.length,s=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var o=e.length-1;o>=0;o--)(i=e[o])&&(s=(a<3?i(s):a>3?i(t,r,s):i(t,r))||s);return a>3&&s&&Object.defineProperty(t,r,s),s};let d=class{value;target;constructor(e){this.value=e,this.target=e}update(){(0,s.i)((e=>{this.value=a.eR.lerp(this.value,this.target,e)}),{easing:(0,o.i)({velocity:2e-4*l.Eh})})}};d=c([i.b.register],d);let h=class{value;target;constructor(e){this.value=e,this.target=e}update(){(0,s.i)((e=>{this.value=this.value+(this.target-this.value)*e}),{easing:(0,o.i)({velocity:2e-4*l.Eh})})}};h=c([i.b.register],h);let f=class{value;target;constructor(e){this.value=e,this.target=e}update(){(0,s.i)((e=>{this.value=a.Yu.slerp(this.value,this.target,e)}),{easing:(0,o.i)({velocity:2e-4*l.Eh})})}};f=c([i.b.register],f),n()}catch(e){n(e)}}))},6881:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{o:()=>T});var i=r(1859),a=(r(8223),r(3307),r(8108),r(2792),r(5805),r(2339),r(6258),r(6921)),s=e([i]);i=(s.then?(await s)():s)[0];const o={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},l={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},u={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:a.mt}},c={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},d={binding:4,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},h={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},f={binding:6,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},p={binding:7,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},m={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},g=(GPUShaderStage.COMPUTE,{binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}}),v={binding:11,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},x={binding:12,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},y={binding:13,visibility:GPUShaderStage.COMPUTE,sampler:{}},b={binding:14,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},_={binding:15,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},w={binding:16,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},T=[o,l,u,c,d,h,f,p,m,g,v,x,y,b,_,w,{binding:17,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:18,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}}];n()}catch(e){n(e)}}))},7899:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{z:()=>v});var i=r(1859),a=r(8223),s=r(3307),o=r(5805),l=r(2339),u=r(6258),c=r(8108),d=r(2792),h=r(6881),f=r(6921),p=e([i,h]);[i,h]=p.then?(await p)():p;const m=8,g=8,v=async({shaderCode:e,entryPoint:t,label:r})=>{const n=i.jO.createBindGroupLayout({entries:h.o}),p=`\nstruct Time {\n  frame: u32,\n  deltaTime: f32\n};\n\n@group(0) @binding(0) var depthTex : texture_2d<f32>;\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\n@group(0) @binding(2) var outputTex : texture_storage_2d<${f.mt}, write>;\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(4) var voxels : texture_3d<f32>;\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(6) var<storage> voxelObjects : array<VoxelObject>;\n@group(0) @binding(7) var<uniform> sunDirection : vec3<f32>;\n@group(0) @binding(8) var linearSampler : sampler;\n@group(0) @binding(10) var normalTex : texture_2d<f32>;\n@group(0) @binding(11) var blueNoiseTex : texture_2d<f32>;\n@group(0) @binding(12) var<uniform> time : Time;\n@group(0) @binding(13) var nearestSampler : sampler;\n@group(0) @binding(14) var velocityAndWaterTex : texture_2d<f32>;\n@group(0) @binding(15) var<storage> bvhNodes: array<BVHNode>;\n@group(0) @binding(16) var worldPosTex : texture_2d<f32>;\n@group(0) @binding(17) var albedoTex : texture_2d<f32>;\n@group(0) @binding(18) var skyCube : texture_cube<f32>;\n\n${u}\n${l}\n${o}\n${a}\n${s}\n${c}\n${d}\n${e}`,v=i.jO.createComputePipeline({layout:i.jO.createPipelineLayout({bindGroupLayouts:[n]}),compute:{module:i.jO.createShaderModule({code:p}),entryPoint:t}});let x,y,b,_=i.jO.createSampler({magFilter:"nearest",minFilter:"nearest"}),w=i.jO.createSampler({magFilter:"linear",minFilter:"linear"});return{render:({commandEncoder:e,outputTextures:t,timestampWrites:r,viewProjectionMatricesBuffer:a,volumeAtlas:s,cameraPositionBuffer:o,transformationMatrixBuffer:l,sunDirectionBuffer:u,blueNoiseTextureView:c,timeBuffer:d,bvhBuffer:h})=>{if(x||(x=i.jO.createTexture({size:[t.finalTexture.width,t.finalTexture.height,1],format:t.finalTexture.format,usage:t.finalTexture.usage}),y=x.createView()),e.copyTextureToTexture({texture:t.finalTexture.texture},{texture:x},{width:t.finalTexture.width,height:t.finalTexture.height,depthOrArrayLayers:1}),!b){const e=[{binding:0,resource:t.depthTexture.view},{binding:1,resource:y},{binding:2,resource:t.finalTexture.view},{binding:3,resource:{buffer:a}},{binding:4,resource:s.atlasTextureView},{binding:5,resource:{buffer:o}},{binding:6,resource:{buffer:l}},{binding:7,resource:{buffer:u}},{binding:8,resource:w},{binding:10,resource:t.normalTexture.view},{binding:11,resource:c},{binding:12,resource:{buffer:d}},{binding:13,resource:_},{binding:14,resource:t.velocityTexture.view},{binding:15,resource:{buffer:h}},{binding:16,resource:t.worldPositionTexture.view},{binding:17,resource:t.albedoTexture.view},{binding:18,resource:t.skyTexture.createView({dimension:"cube"})}],r={layout:n,entries:e};b=i.jO.createBindGroup(r)}const f=e.beginComputePass({timestampWrites:r});f.setPipeline(v),f.setBindGroup(0,b),f.dispatchWorkgroups(Math.ceil(t.finalTexture.width/m),Math.ceil(t.finalTexture.height/g)),f.end()},label:r}};n()}catch(e){n(e)}}))},9164:(e,t,r)=>{r.d(t,{M:()=>a,p:()=>i});var n=r(7883);const i=(e,t)=>new((0,n.d7)(`${t.label}-copy`,t.format,t.usage))(e,t.width,t.height),a=(e,t,r)=>{if(t.width!==r.width||t.height!==r.height)throw new Error("Source and destination textures must have the same dimensions");e.copyTextureToTexture({texture:t.texture},{texture:r.texture},{width:t.texture.width,height:t.texture.height,depthOrArrayLayers:1})}},5e3:(e,t,r)=>{r.d(t,{D:()=>i});var n=r(6921);const i=e=>e.createTexture({label:"sky texture",dimension:"2d",size:[640,640,6],format:n.NB,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING})},7883:(e,t,r)=>{r.d(t,{l1:()=>l,VC:()=>c,$x:()=>u,fu:()=>f,fp:()=>d,Hi:()=>h,d8:()=>s,d7:()=>o});const n=Symbol(),i=e=>new Proxy(e,{construct:(e,t,r)=>e.prototype!==r.prototype?Reflect.construct(e,t,r):(e[n]||(e[n]=Reflect.construct(e,t,r)),e[n])});var a=r(6921);const s=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,o=(e,t,r=s)=>{let n=class{#e;#t;#r;#n;#i=t;#a=r;#s=e;constructor(n,i,a){this.#e=n.createTexture({label:e,size:[i,a,1],format:t,usage:r}),this.#t=this.#e.createView({label:e}),this.#r=i,this.#n=a}get texture(){return this.#e}get view(){return this.#t}get width(){return this.#r}get height(){return this.#n}get format(){return this.#i}get usage(){return this.#a}get label(){return this.#s}};return n=function(e,t,r,n){var i,a=arguments.length,s=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var o=e.length-1;o>=0;o--)(i=e[o])&&(s=(a<3?i(s):a>3?i(t,r,s):i(t,r))||s);return a>3&&s&&Object.defineProperty(t,r,s),s}([i],n),n},l=o("albedo","rgba8unorm"),u=o("normal","rgba16float"),c=o("depth",a.g7,GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST),d=o("velocity","rgba16float"),h=o("world position","rgba32float"),f=o("output",a.mt)},578:(e,t,r)=>{r.d(t,{D:()=>n});const n=async()=>{const e=await navigator.gpu.requestAdapter();let t;console.log(e);try{t=await e.requestDevice({requiredFeatures:["timestamp-query"],requiredLimits:{maxColorAttachmentBytesPerSample:64}})}catch(r){console.warn("Timestamp query or 64 byte colour attachment not supported, falling back"),t=await e.requestDevice()}return t}},4916:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{n:()=>l});var i=r(1859),a=e([i]);let s;i=(a.then?(await a)():a)[0];let o=!1;const l=async(e,t,r)=>{const n=r.size;s||(s=i.jO.createBuffer({size:n,label:"gpu read buffer",usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}));const a=i.jO.createCommandEncoder();if(o)return;o=!0,a.resolveQuerySet(t,0,t.count,r,0),a.copyBufferToBuffer(r,0,s,0,n),i.jO.queue.submit([a.finish()]),await i.jO.queue.onSubmittedWorkDone(),await s.mapAsync(GPUMapMode.READ).finally((()=>{o=!1}));const l=s.getMappedRange(),u=new BigInt64Array(l),c=[];u.forEach((e=>{c.push(Number(e)/1e6)})),c.reduce(((e,t,r)=>(r%2==0&&e.push(c[r+1]-t),e)),[]).forEach(((t,r)=>{i.Lz.addSample(e[r],t)})),s.unmap()};n()}catch(e){n(e)}}))},1859:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{Eh:()=>z,Lz:()=>N,PM:()=>I,UI:()=>L,jO:()=>O,mL:()=>A,sZ:()=>E});var i=r(3532),a=r(2518),s=r(4417),o=r(60),l=r(6300),u=r(6371),c=r(2782),d=r(6273),h=r(596),f=r(6677),p=r(275),m=r(2909),g=r(93),v=r(8600),x=r(4404),y=r(7883),b=r(7684),_=r(7858),w=r(1100),T=r(4916),P=r(5e3),S=r(578),k=e([i,a,s,o,u,c,p,m,g,b,_,T]);[i,a,s,o,u,c,p,m,g,b,_,T]=k.then?(await k)():k;const A=new c.f;let O,E,M,C,I=l.Zc.create(4,4),U=1,R=0,D=R,z=0,j=0,L=new s.i({fieldOfView:Math.PI/180*90,position:l.eR.create(-31,6,-50),direction:l.eR.create(0,0,-.5)});const B=new o.A,N=(0,f.v)();let G,V;N.addSample("frame time",0);let F=Array.from({length:200}).map((()=>({position:[-80*Math.random(),50*Math.random(),-200*Math.random()],size:4,color:l.eR.normalize(l.eR.create(Math.random(),Math.random(),Math.random()))})));F=[{position:[-43.8,5.5,-36],size:2.2,color:l.eR.create(800,20,20)},{position:[-36,5.5,-36],size:2.2,color:l.eR.create(20,800,20)},{position:[-25,5.5,-36],size:2.2,color:l.eR.create(20,20,800)}];const $=(e,t)=>{let r,n,a,s,o,u,c,h,f,p,m,b,_,P,S;M=document.getElementById("webgpu-canvas"),M.style.imageRendering="pixelated",E=M.getContext("webgpu"),E.configure({device:e,format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT});let k,O,$=l.pB.create();const q=e.createSampler({magFilter:"linear",minFilter:"linear"}),W=e.createSampler({magFilter:"nearest",minFilter:"nearest"});e.features.has("timestamp-query")&&(k=e.createQuerySet({type:"timestamp",count:100}),O=e.createBuffer({label:"timestamp query",size:8*k.count,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST})),(async()=>{const t=await(0,d.$L)(e,"blue-noise-rg.png",{usage:GPUTextureUsage.COPY_SRC});c=t.createView()})(),S=new v.f(e,g.j);const Y=(0,i.nr)(e,[0,0,0,0],"camera position");setInterval((()=>{B.log(N.getAverages())}),500);const H=d=>{const v=e.createCommandEncoder();0===R&&(R=d),v.pushDebugGroup("frame");const E=d-R;if(z=E-D,N.addSample("frame time",z),D=E,j++,(()=>{const t=(0,w.i)(j,I[0],I[1],L.fieldOfView,I[0]/I[1],.1),r=(0,w.Z)(L.projectionMatrix,t),n=l.pB.mul(r,L.viewMatrix);_=new Float32Array([...n,...$,...l.pB.invert(n),...l.pB.invert($),...r,...l.pB.invert(r)]),m||(m=e.createBuffer({size:_.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"view matrices buffer"})),e.queue.writeBuffer(m,0,_.buffer,0,_.length*Float32Array.BYTES_PER_ELEMENT);const i=l.pB.mul(L.inverseProjectionMatrix,n),a=l.pB.invert(i);P=new Float32Array(l.pB.getTranslation(a)),e.queue.writeBuffer(Y,0,P.buffer,0,P.length*Float32Array.BYTES_PER_ELEMENT),$=n})(),(()=>{const t=g.j.flatMap((e=>e.toArray()));p?(0,i.bV)(p,t):(p=(0,i.nr)(e,t,"voxel object"),p=e.createBuffer({size:new Float32Array(t).byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1,label:"voxel objects transforms buffer"}))})(),!p||!c)return void requestAnimationFrame(H);if(x.b.updateAll(j),S.update(g.j),h||(h=(0,i.ff)([j,0,0],"time buffer")),f?(0,i.Xx)(f,[I[0],I[1]]):f=(0,i.ff)([I[0],I[1]]),(()=>{const e=l.pB.identity();l.pB.rotateY(e,A.sunRotateY,e);const t=l.eR.normalize(l.eR.transformMat4(l.eR.create(0,.9,-.8),e));b?(0,i.bV)(b,[t[0],t[1],t[2]]):b=(0,i.ff)([t[0],t[1],t[2]],"sun buffer")})(),n=new y.l1(e,I[0],I[1]),r=new y.$x(e,I[0],I[1]),s=new y.VC(e,I[0],I[1]),o=new y.fp(e,I[0],I[1]),a=new y.fu(e,I[0],I[1]),u=new y.Hi(e,I[0],I[1]),G=C.atlasTextureView,!G)return void requestAnimationFrame(H);let M=0;t.forEach(((t,i)=>{const{render:l,label:d,timestampLabels:x}=t;if(!1===B.passesFolder.controllers.find((e=>e.property===d))?.getValue())return;let y;e.features.has("timestamp-query")&&v.clearBuffer(O),e.features.has("timestamp-query")&&(y={querySet:k,beginningOfPassWriteIndex:M,endOfPassWriteIndex:M+1}),S.update(g.j),d&&v.pushDebugGroup(d),l({enabled:document.getElementById(`flag-${d}`)?.checked,commandEncoder:v,resolutionBuffer:f,timeBuffer:h,outputTextures:{finalTexture:a,albedoTexture:n,normalTexture:r,depthTexture:s,skyTexture:V,velocityTexture:o,worldPositionTexture:u},cameraPositionBuffer:Y,volumeAtlas:C,transformationMatrixBuffer:p,viewProjectionMatricesArray:_,viewProjectionMatricesBuffer:m,timestampWrites:y,sunDirectionBuffer:b,blueNoiseTextureView:c,bvhBuffer:S.gpuBuffer,lights:F,linearSampler:q,nearestSampler:W}),M+=x?.length>0?2*x.length:2,d&&v.popDebugGroup()})),v.popDebugGroup();const U=t.reduce(((e,t)=>t.timestampLabels?e.concat(t.timestampLabels):e.concat(t.label)),[]);e.features.has("timestamp-query")&&(0,T.n)(U,k,O),e.queue.submit([v.finish()]),requestAnimationFrame(H)};(()=>{const{clientWidth:e,clientHeight:t}=M.parentElement,r=l.Zc.create(1*e,1*t);I=l.Zc.mulScalar(r,1/U),M.width=r[0],M.height=r[1],M.style.transform="scale(1)"})(),requestAnimationFrame(H)};if(!navigator.gpu)throw new Error("WebGPU not supported");O=await(0,S.D)(),V=(0,P.D)(O),C=new h.Y(O),await(0,g.J)(O,C);const q=await Promise.all([(0,b.P)(),(0,a.H)(),(0,p.Ni)(),(0,m.B)(),(0,_.Q)(),(0,u.$)(O)]);$(O,await Promise.all(q)),B.setupDebugControls(q),n()}catch(e){n(e)}}),1)},3532:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{Xx:()=>s,bV:()=>l,ff:()=>o,nr:()=>u});var i=r(1859),a=e([i]);i=(a.then?(await a)():a)[0];const s=(e,t)=>{const r=new Uint32Array(t);i.jO.queue.writeBuffer(e,0,r.buffer,0,t.length*Uint32Array.BYTES_PER_ELEMENT)},o=(e,t)=>{const r=new Uint32Array(e),n=i.jO.createBuffer({size:r.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:t});return s(n,e),n},l=(e,t)=>{if(t instanceof Float32Array)i.jO.queue.writeBuffer(e,0,t.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT);else{const r=new Float32Array(t);i.jO.queue.writeBuffer(e,0,r.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT)}},u=(e,t,r)=>{const n=new Float32Array(t),i=e.createBuffer({size:n.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:r});return l(i,t),i};n()}catch(e){n(e)}}))},8600:(e,t,r)=>{r.d(t,{f:()=>o});var n=r(6300);const i=e=>{let t=n.eR.create(1/0,1/0,1/0),r=n.eR.create(-1/0,-1/0,-1/0);for(const{AABB:i}of e)t=n.eR.min(i.min,t),r=n.eR.max(i.max,r);return{min:t,max:r}},a=e=>{const t=i(e),r=(t.max[0]-t.min[0])*(t.max[1]-t.min[1])*(t.max[2]-t.min[2]);return e.length*r},s=(44,16,16*Math.ceil(2.75));class o{#o;#l;#u;#c;#d;constructor(e,t){this.#o=e,this.#u=t.map(((e,t)=>({AABB:e.AABB,objectIndex:t}))),this.#c=0,this.#l=new Array(2*t.length-1),this.#h(this.#u,0),this.#d=e.createBuffer({size:this.#l.length*s,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1,label:"bvh buffer"}),this.#f()}get gpuBuffer(){return this.#d}update(e){this.#u=e.map(((e,t)=>({AABB:e.AABB,objectIndex:t}))),this.#c=0,this.#h(this.#u,0),this.#f()}#h(e,t){if(0===this.#u.length)return;if(1===e.length)return void(this.#l[t]={leftChildIndex:this.#u.indexOf(e[0]),rightChildIndex:-1,objectCount:1,AABBMax:e[0].AABB.max,AABBMin:e[0].AABB.min});const r=i(e);let n=-1,s=-1;const{left:o,right:l}=(e=>{let t=1/0,r=-1;const n=Math.floor(e.length/2);for(let i=1;i<e.length;i++){const s=e.slice(0,i),o=e.slice(i),l=a(s)+a(o),u=1e3*Math.abs(i-n)+1*l;u<t&&(t=u,r=i)}return{left:e.slice(0,r),right:e.slice(r)}})(e);o.length>0&&(n=++this.#c,this.#h(o,n)),l.length>0&&(s=++this.#c,this.#h(l,s)),this.#l[t]={leftChildIndex:n,rightChildIndex:s,objectCount:e.length,AABBMax:r.max,AABBMin:r.min}}#f(){return this.#l.forEach(((e,t)=>{const r=t*s,n=new ArrayBuffer(s),i=new DataView(n);i.setInt32(0,e.leftChildIndex,!0),i.setInt32(4,e.rightChildIndex,!0),i.setUint32(8,e.objectCount,!0),i.setFloat32(16,e.AABBMin[0],!0),i.setFloat32(20,e.AABBMin[1],!0),i.setFloat32(24,e.AABBMin[2],!0),i.setFloat32(32,e.AABBMax[0],!0),i.setFloat32(36,e.AABBMax[1],!0),i.setFloat32(40,e.AABBMax[2],!0),this.#o.queue.writeBuffer(this.#d,r,n,0,s)})),this.#d}}},4417:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{i:()=>d});var i=r(1859),a=r(8410),s=r(8024),o=r(6300),l=r(4404),u=e([i,s]);[i,s]=u.then?(await u)():u;const c=new a.Y;let d=class extends s.M{fieldOfView;near=.5;far=1e4;constructor(e){super({position:e.position,rotation:o.Yu.fromMat(o.pB.lookAt(o.eR.create(),e.direction,o.eR.create(0,1,0)))}),this.fieldOfView=e.fieldOfView}get projectionMatrix(){return o.pB.perspective(this.fieldOfView,i.PM[0]/i.PM[1],this.near,this.far)}get inverseProjectionMatrix(){return o.pB.invert(this.projectionMatrix)}get viewProjectionMatrix(){return o.pB.mul(this.projectionMatrix,this.viewMatrix)}get inverseViewProjectionMatrix(){return o.pB.invert(this.viewProjectionMatrix)}update(){const e=.005*i.Eh,t=.03*i.Eh;let r=o.eR.zero();c.pressed.a&&(r=o.eR.add(r,i.UI.left)),c.pressed.d&&(r=o.eR.add(r,i.UI.right)),c.pressed.w&&(r=o.eR.add(r,i.UI.direction)),c.pressed.s&&(r=o.eR.subtract(r,i.UI.direction)),c.pressed.e&&(i.UI.targetRotation=o.Yu.rotateY(i.UI.targetRotation,e)),c.pressed.q&&(i.UI.targetRotation=o.Yu.rotateY(i.UI.targetRotation,-e)),c.pressed[" "]&&(r=o.eR.add(r,i.UI.up)),c.pressed.shift&&(r=o.eR.add(r,i.UI.down)),r=o.eR.normalize(r),i.UI.targetPosition=o.eR.add(i.UI.targetPosition,o.eR.mulScalar(r,t))}};d=function(e,t,r,n){var i,a=arguments.length,s=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,r,n);else for(var o=e.length-1;o>=0;o--)(i=e[o])&&(s=(a<3?i(s):a>3?i(t,r,s):i(t,r))||s);return a>3&&s&&Object.defineProperty(t,r,s),s}([l.b.register],d),n()}catch(e){n(e)}}))},7684:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{P:()=>l});var i=r(1859),a=r(6921),s=e([i]);i=(s.then?(await s)():s)[0];const o="clear",l=async()=>{const e=i.jO.createShaderModule({code:"\n    struct VertexOutput {\n      @builtin(position) position : vec4f,\n    }\n    @vertex\n    fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n      var output : VertexOutput;\n      return output;\n    }\n    @fragment\n    fn fragment_main(@builtin(position) position : vec4f) -> @location(0) vec4<f32> {\n        return vec4(0.0);\n    }"}),t=i.jO.createRenderPipeline({label:o,layout:"auto",vertex:{module:e,entryPoint:"vertex_main"},fragment:{module:e,entryPoint:"fragment_main",targets:[{format:a.mt}]}});return{render:e=>{const r=e.commandEncoder.beginRenderPass({label:o,timestampWrites:e.timestampWrites,colorAttachments:[{view:e.outputTextures.finalTexture.view,loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});r.setPipeline(t),r.draw(6),r.end()},label:o}};n()}catch(e){n(e)}}))},6921:(e,t,r)=>{r.d(t,{NB:()=>a,Wq:()=>o,dn:()=>n,g7:()=>s,mt:()=>i});const n="r8unorm",i="rgba16float",a="rgba16float",s="r32float",o=4},1133:(e,t,r)=>{r.d(t,{z:()=>s});class n{index;dataView;constructor(e){this.dataView=new DataView(e),this.index=0}readUint8(){const e=this.dataView.getUint8(this.index);return this.index++,e}readUint32(){const e=this.dataView.getUint32(this.index,!0);return this.index+=4,e}readFloat32(){const e=this.dataView.getFloat32(this.index,!0);return this.index+=4,e}skip(e){this.index+=e}}var i=r(6300);const a=e=>0===e,s=e=>{console.time("convert vxm");const t=new n(e);let r,s=[],o="",l=[];if(o=String.fromCodePoint(t.readUint8(),t.readUint8(),t.readUint8(),t.readUint8()),"VXMC"!==o&&"VXMA"!==o)throw new Error(`Incorrect magic: ${o}`);if(o[3].charCodeAt(0)>="0".charCodeAt(0)&&o[3].charCodeAt(0)<="9".charCodeAt(0))r=o[3].charCodeAt(0)-"0".charCodeAt(0);else{if(!(o[3].charCodeAt(0)>="A".charCodeAt(0)&&o[3].charCodeAt(0)<="C".charCodeAt(0)))throw new Error("Unsupported version found");r=10+o[3].charCodeAt(0)-"A".charCodeAt(0)}if(r<11||r>12)throw new Error(`Could not load vxm file: Unsupported version found (${r})`);let u=[0,0,0];u[0]=t.readUint32(),u[1]=t.readUint32(),u[2]=t.readUint32();let c=[.5,0,.5];if(c[0]=t.readFloat32(),c[1]=t.readFloat32(),c[2]=t.readFloat32(),t.readUint8()>0){let e=0,r=0;t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),e=t.readUint32(),r=t.readUint32();let n=e*r;t.skip(4*n)}r>=8&&t.skip(16);let d=t.readUint32();for(let e=0;e<d;++e){let e=t.readUint32(),r=t.readUint32();if(e>2048||r>2048)throw new Error("Size of texture exceeds the max allowed value");let n=t.readUint32();t.skip(n);for(let e=0;e<6;++e){let e=t.readUint32();e>262144&&console.warn(`Size of quads exceeds the max allowed value: ${e}`);let r=4*e*20;t.skip(r)}}t.skip(1024),t.skip(1024);let h=t.readUint8();for(let e=0;e<h;++e)t.skip(1024),t.readUint8(),t.readUint8();let f=t.readUint8();for(let e=0;e<f;++e){let r=t.readUint8(),n=t.readUint8(),i=t.readUint8(),a=t.readUint8();a=1===t.readUint8()?2:255,s[e]={r:i,g:n,b:r,a}}let p=1;r>=12&&(p=t.readUint8());let m={min:i.eR.create(9999,9999,9999),max:i.eR.create(0,0,0)};for(let e=0;e<p;++e){let n=0,s=!0,o="";if(r>=12){for(;;){const e=t.readUint8();if(a(e))break;o=`${o}${String.fromCharCode(e)}`}s=t.readUint8()>0}else o=`Layer ${e}`;for(;;){let e=t.readUint8();if(0===e)break;let r=t.readUint8();if(255!==r)if(r>=f)n+=e;else{for(let t=n;t<n+e;t++){let e=Math.floor(t/(u[1]*u[2])),n=Math.floor(t/u[2]%u[1]),a=Math.floor(t%u[2]);m.min=i.eR.min(m.min,[e,n,a]),m.max=i.eR.max(m.max,[e,n,a]),l.push({x:e,y:n,z:a,c:r})}n+=e}else n+=e}}l=l.map((({x:e,y:t,z:r,c:n})=>({x:e-m.min[0],y:t-m.min[1],z:r-m.min[2],c:n})));const g=i.eR.sub(m.max,m.min);return console.timeEnd("convert vxm"),{VOX:l.length,SIZE:[g[0]+1,g[1]+1,g[2]+1],XYZI:l,RGBA:s}}},93:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{J:()=>h,j:()=>u});var i=r(9398),a=r(1133),s=r(7035),o=r(8761),l=e([i]);i=(l.then?(await l)():l)[0];let u=[];const c=["street-scene","debug-plane","Dragon","monu10"],d=async(e,t,r)=>{console.time(`Fetch ${t}`);const n=await fetch(`./Tavern/${t}.vxm`);console.timeEnd(`Fetch ${t}`);const i=await n.arrayBuffer(),l=(0,a.z)(i);console.time(`Create texture from voxels for ${t}`);let u=await(0,s.d)(r,l);console.timeEnd(`Create texture from voxels for ${t}`),console.time(`Create palette texture for ${t}`);const c=await(0,o.e)(r,l);return console.timeEnd(`Create palette texture for ${t}`),{name:t,texture:u,palette:c}},h=async(e,t)=>{const r=await fetch("./Tavern.json"),n=(await r.json()).children.filter((e=>c.includes(e.name))),a=new Set(n.map((e=>e.name))),s=Array.from(a);let o=e.createCommandEncoder();console.time("Load all volumes");{let r=await Promise.all(s.map((t=>d(o,t,e))));for(const{name:n,texture:i,palette:a}of r)console.time(`Add volume for ${n}`),await t.addVolume(i,a,n),o=e.createCommandEncoder(),console.timeEnd(`Add volume for ${n}`)}console.timeEnd("Load all volumes");const l=t.dictionary;let h=[];for(const e of n){const t=l[e.name];if(!t)return void console.warn(`Volume not found for child ${e.name}, skipping...`);"Candle"===e.name&&h.push(e.position);const{position:r,rotation:n,scale:a,name:s}=e,{size:o,location:c,paletteIndex:d}=t;u.push(new i.Q({position:r,rotation:n,scale:a,size:o,atlasLocation:c,name:s,paletteIndex:d}))}console.log({volumes:l}),console.debug(`Tavern created with ${u.length} items`)};n()}catch(e){n(e)}}))},8761:(e,t,r)=>{r.d(t,{e:()=>n});const n=async(e,t)=>{const r=e.createTexture({size:{width:256,height:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC,dimension:"2d",mipLevelCount:1}),n=e.createBuffer({label:"palette buffer",size:1024,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC});t.RGBA.forEach((({r:t,g:r,b:i,a},s)=>{const o=new Uint8Array([t,r,i,a]);e.queue.writeBuffer(n,4*s,o)}));const i=e.createCommandEncoder();return i.copyBufferToTexture({buffer:n},{texture:r},[255,1,1]),e.queue.submit([i.finish()]),await e.queue.onSubmittedWorkDone(),r}},7035:(e,t,r)=>{r.d(t,{d:()=>i});var n=r(6921);const i=async(e,t)=>{const r=e.createTexture({size:{width:t.SIZE[0],height:t.SIZE[1],depthOrArrayLayers:t.SIZE[2]},format:n.dn,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:n.Wq}),i=r.width*r.height*r.depthOrArrayLayers,a=e.createBuffer({size:4*i*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE}),s=e.createBuffer({size:256*t.SIZE[2],usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.UNIFORM,label:"voxels buffer"}),o=Array.from({length:t.SIZE[2]},((e,t)=>t));for(let t=0;t<o.length;t++)e.queue.writeBuffer(s,256*t,new Uint32Array([o[t]]).buffer);for(let r=0;r<t.XYZI.length;r++){const{x:n,y:i,z:s,c:o}=t.XYZI[r],c=(l=t.SIZE,(u=[n,i,s])[0]+u[1]*l[0]+u[2]*(l[0]*l[1]));e.queue.writeBuffer(a,16*c,new Uint32Array([n,i,s,o]).buffer)}var l,u;const c=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"storage"}}]}),d=e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[c]}),vertex:{module:e.createShaderModule({code:"\n          struct VertexOutput {\n            @builtin(position) Position : vec4<f32>,\n          }\n          \n          @vertex\n          fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n            const pos = array(\n              vec2( 1.0,  1.0),\n              vec2( 1.0, -1.0),\n              vec2(-1.0, -1.0),\n              vec2( 1.0,  1.0),\n              vec2(-1.0, -1.0),\n              vec2(-1.0,  1.0),\n            );\n            var output : VertexOutput;\n            output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n            return output;\n          }"}),entryPoint:"vertex_main"},fragment:{module:e.createShaderModule({code:"\n          @group(0) @binding(0) var<uniform> zIndex: u32;\n          @group(0) @binding(1) var<storage, read_write> voxelBuffer: array<vec4<u32>>;\n          \n          override sizeX: u32;\n          override sizeY: u32;\n          override sizeZ: u32;\n           \n          fn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\n            return position.x + position.y * size.x + position.z * (size.x * size.y);\n          }\n          \n          @fragment\n          fn fragment_main(@builtin(position) position : vec4<f32>) -> @location(0) vec4<f32> { \n            let voxelPosition = vec3(position.xy, f32(zIndex));\n            let voxelIndex = convert3DTo1D(vec3<u32>(sizeX, sizeY, sizeZ), vec3<u32>(voxelPosition));\n            let voxel = voxelBuffer[voxelIndex];\n            let normalisedPaletteIndex = f32(voxel.a) / 255.0;\n            return vec4(normalisedPaletteIndex,0,0,0);\n          }\n        "}),entryPoint:"fragment_main",targets:[{format:n.dn}],constants:{sizeX:t.SIZE[0],sizeY:t.SIZE[1],sizeZ:t.SIZE[2]}}}),h=e.createCommandEncoder();for(let t=0;t<r.depthOrArrayLayers;t++){const n=e.createBindGroup({label:"create-texture-from-voxels",layout:c,entries:[{binding:0,resource:{buffer:s,offset:256*t,size:4}},{binding:1,resource:{buffer:a}}]}),i=h.beginRenderPass({colorAttachments:[{view:r.createView({baseArrayLayer:t,arrayLayerCount:1,mipLevelCount:1,dimension:"2d"}),loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});i.setPipeline(d),i.setBindGroup(0,n),i.draw(6),i.end()}return e.queue.submit([h.finish()]),await e.queue.onSubmittedWorkDone(),r}},2782:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{f:()=>s});var i=r(4206),a=e([i]);i=(a.then?(await a)():a)[0];class s{#p;#m;#g;#v;constructor(){this.#p=new i.sm(1),this.#m=new i.sm(0),this.#g=new i.sm(0),this.#v=new i.sm(-3)}set targetScale(e){this.#p.target=e}set targetTranslateX(e){this.#m.target=e}set targetRotateY(e){this.#g.target=e}set targetSunRotateY(e){this.#v.target=e}get targetScale(){return this.#p.target}get targetTranslateX(){return this.#m.target}get targetRotateY(){return this.#g.target}get targetSunRotateY(){return this.#v.target}get sunRotateY(){return this.#v.value}get scale(){return this.#p.value}get translateX(){return this.#m.value}}n()}catch(e){n(e)}}))},4404:(e,t,r)=>{var n;r.d(t,{b:()=>n}),function(e){const t=[];e.updateAll=e=>{for(const r of t)r.update(e)},e.register=e=>class extends e{constructor(...e){super(...e),t.push(this)}}}(n||(n={}))},6677:(e,t,r)=>{r.d(t,{v:()=>n});const n=()=>{let e={};const t=t=>{const r=e[t];return r?r.reduce(((e,t)=>e+t))/r.length:0};return{addSample:(t,r)=>{e[t]||(e[t]=[]),e[t].push(r)>50&&e[t].shift()},clearEntry:t=>{e[t]&&(e[t]=[0])},toString:()=>Object.keys(e).map((e=>`${e}: ${t(e).toFixed(2)}ms`)).join("\n"),toHTML:()=>Object.keys(e).map((e=>`<div class="debug-row">\n                    <div>\n                        ${e}\n                    </div>\n                   <div>${t(e).toFixed(2)}ms</div>\n                </div>`)).join("\n"),getAverages:()=>Object.keys(e).reduce(((e,r)=>(e[r]=t(r),e)),{})}}},6371:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{$:()=>o});var i=r(1859),a=r(2301),s=e([i]);i=(s.then?(await s)():s)[0];const o=async e=>{const t=e.createShaderModule({code:a}),r=e.createRenderPipeline({layout:"auto",vertex:{module:t,entryPoint:"vertex_main"},fragment:{module:t,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]}});return{render:t=>{const n=t.commandEncoder.beginRenderPass({timestampWrites:t.timestampWrites,colorAttachments:[{view:i.sZ.getCurrentTexture().createView(),loadOp:"clear",clearValue:[.3,.3,.3,1],storeOp:"store"}]}),a=e.createBindGroup({layout:r.getBindGroupLayout(0),entries:[{binding:1,resource:t.outputTextures.finalTexture.view}]});n.setPipeline(r),n.setBindGroup(0,a),n.draw(6),n.end()},label:"fullscreen quad"}};n()}catch(e){n(e)}}))},2518:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{H:()=>h});var i=r(1859),a=r(6196),s=r(9018),o=r(9956),l=r(9164),u=r(7266),c=e([i,a,s,o,u]);[i,a,s,o,u]=c.then?(await c)():c;const d=(e,t)=>Math.ceil(e/t)*t,h=async()=>{const e=await(0,a.N)(),t=await(0,o.S)(),r=await(0,s.O)(),n=await(0,u.K)();let c,h,f,p={albedoTexture:null,velocityTexture:null,depthTexture:null,normalTexture:null};return{render:a=>{if(!h){h=i.jO.createBuffer({size:12,usage:GPUBufferUsage.INDIRECT|GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}),c=i.jO.createBuffer({size:4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});const e=new Uint32Array(3);e[0]=1,e[1]=1,e[2]=1,i.jO.queue.writeBuffer(h,0,e,0,e.length);const{width:t,height:r}=a.outputTextures.finalTexture,n=d(t/3*(r/3)*4,4);f=i.jO.createBuffer({size:n,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC})}Object.keys(p).forEach((e=>{const t=a.outputTextures[e];null===p[e]&&(p[e]=(0,l.p)(i.jO,t))}));const{commandEncoder:s,timestampWrites:o}=a;s.clearBuffer(h,0,4),s.clearBuffer(c,0,4),s.clearBuffer(f);let u=s.beginComputePass({timestampWrites:o});t(u,a),u.end(),Object.keys(p).forEach((e=>{const t=a.outputTextures[e],r=p[e];(0,l.M)(s,t,r)})),u=s.beginComputePass({timestampWrites:{querySet:o.querySet,beginningOfPassWriteIndex:o.beginningOfPassWriteIndex+2,endOfPassWriteIndex:o.endOfPassWriteIndex+2}}),r(u,a,p.albedoTexture.view,p.velocityTexture.view,p.depthTexture.view,p.normalTexture.view,h,f,c),u.end(),u=s.beginComputePass({timestampWrites:{querySet:o.querySet,beginningOfPassWriteIndex:o.beginningOfPassWriteIndex+4,endOfPassWriteIndex:o.endOfPassWriteIndex+4}}),n(u,a,f,h),u.end(),u=s.beginComputePass({timestampWrites:{querySet:o.querySet,beginningOfPassWriteIndex:o.beginningOfPassWriteIndex+6,endOfPassWriteIndex:o.endOfPassWriteIndex+6}}),e(u,a),u.end()},label:"primary rays",timestampLabels:["sparse raymarch","interpolate","full raymarch","world pos reconstruct"]}};n()}catch(e){n(e)}}))},7266:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{K:()=>f});var i=r(6921),a=r(1859),s=r(5805),o=r(8223),l=r(3307),u=r(8108),c=r(3405),d=r(9133),h=e([a]);a=(h.then?(await h)():h)[0];const f=async()=>{const e={binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},t={binding:5,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d"}},r={binding:7,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},n={binding:6,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:i.g7,viewDimension:"2d"}},h={binding:10,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},f={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},p={binding:12,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},m=a.jO.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},f,e,t,n,r,{binding:8,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},h,p]}),g=a.jO.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}}]}),v=await a.jO.createComputePipelineAsync({label:"raymarch g-buffer indirect",layout:a.jO.createPipelineLayout({bindGroupLayouts:[m,g]}),compute:{module:a.jO.createShaderModule({code:`\n          @group(0) @binding(0) var voxels : texture_3d<f32>;\n          @group(0) @binding(2) var<uniform> cameraPosition : vec3<f32>;\n          @group(0) @binding(3) var<storage> voxelObjects : array<VoxelObject>;\n          @group(0) @binding(4) var normalTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(5) var albedoTex : texture_storage_2d<rgba8unorm, write>;\n          @group(0) @binding(6) var depthWrite : texture_storage_2d<${i.g7}, write>;\n          @group(0) @binding(7) var velocityTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(8) var<uniform> viewProjections : ViewProjectionMatrices;\n          @group(0) @binding(10) var<storage> bvhNodes: array<BVHNode>;\n          @group(0) @binding(11) var worldPosTex : texture_storage_2d<rgba32float, write>;\n          @group(0) @binding(12) var paletteTex : texture_2d<f32>;\n          ${s}\n          ${o}\n          ${l}\n          ${u}\n          ${d}\n          ${c}`}),entryPoint:"bufferMarch"}});let x,y;return(e,t,r,n)=>{x||(x=(e=>a.jO.createBindGroup({layout:m,entries:[{binding:0,resource:e.volumeAtlas.atlasTextureView},{binding:2,resource:{buffer:e.cameraPositionBuffer}},{binding:3,resource:{buffer:e.transformationMatrixBuffer}},{binding:4,resource:e.outputTextures.normalTexture.view},{binding:5,resource:e.outputTextures.albedoTexture.view},{binding:6,resource:e.outputTextures.depthTexture.view},{binding:7,resource:e.outputTextures.velocityTexture.view},{binding:8,resource:{buffer:e.viewProjectionMatricesBuffer}},{binding:10,resource:{buffer:e.bvhBuffer}},{binding:12,resource:e.volumeAtlas.paletteTextureView}]}))(t),y=(e=>a.jO.createBindGroup({layout:g,entries:[{binding:0,resource:{buffer:e}}]}))(r)),e.setPipeline(v),e.setBindGroup(0,x),e.setBindGroup(1,y),e.dispatchWorkgroupsIndirect(n,0)}};n()}catch(e){n(e)}}))},9018:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{O:()=>c});var i=r(1859),a=r(6921),s=r(5805),o=r(3091),l=r(9133),u=e([i]);i=(u.then?(await u)():u)[0];const c=async()=>{const e=i.jO.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},{binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},{binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:a.g7,viewDimension:"2d"}},{binding:5,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"2d"}},{binding:6,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},{binding:7,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}}]}),t=i.jO.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]}),r=i.jO.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}}]}),n=i.jO.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),u=await i.jO.createComputePipelineAsync({label:"interpolate g-buffer",layout:i.jO.createPipelineLayout({bindGroupLayouts:[e,t,r,n]}),compute:{module:i.jO.createShaderModule({code:`${l}${s}${o}`}),entryPoint:"main"}});let c,d,h,f;return(a,s,o,l,p,m,g,v,x)=>{c||(c=((t,r,n,a,s)=>i.jO.createBindGroup({layout:e,entries:[{binding:0,resource:t.outputTextures.albedoTexture.view},{binding:1,resource:r},{binding:2,resource:t.outputTextures.velocityTexture.view},{binding:3,resource:n},{binding:4,resource:t.outputTextures.depthTexture.view},{binding:5,resource:a},{binding:6,resource:t.outputTextures.normalTexture.view},{binding:7,resource:s}]}))(s,o,l,p,m)),d||(d=(e=>i.jO.createBindGroup({layout:t,entries:[{binding:0,resource:{buffer:e.cameraPositionBuffer}},{binding:1,resource:{buffer:e.viewProjectionMatricesBuffer}}]}))(s)),h||(h=(e=>i.jO.createBindGroup({layout:r,entries:[{binding:0,resource:{buffer:e.transformationMatrixBuffer}},{binding:1,resource:e.volumeAtlas.atlasTextureView},{binding:2,resource:e.volumeAtlas.paletteTextureView}]}))(s)),f||(f=((e,t,r)=>i.jO.createBindGroup({layout:n,entries:[{binding:0,resource:{buffer:e}},{binding:1,resource:{buffer:t}},{binding:2,resource:{buffer:r}}]}))(g,v,x)),a.setPipeline(u),a.setBindGroup(0,c),a.setBindGroup(1,d),a.setBindGroup(2,h),a.setBindGroup(3,f),a.dispatchWorkgroups(Math.ceil(i.PM[0]/16),Math.ceil(i.PM[1]/8))}};n()}catch(e){n(e)}}))},9956:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{S:()=>f});var i=r(6921),a=r(1859),s=r(5805),o=r(8223),l=r(3307),u=r(8108),c=r(3405),d=r(9133),h=e([a]);a=(h.then?(await h)():h)[0];const f=async()=>{const e={binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},t={binding:5,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d"}},r={binding:7,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},n={binding:6,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:i.g7,viewDimension:"2d"}},h={binding:10,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},f={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},p={binding:12,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},m=a.jO.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},f,e,t,n,r,{binding:8,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},h,p]}),g=await a.jO.createComputePipelineAsync({label:"raymarch g-buffer",layout:a.jO.createPipelineLayout({bindGroupLayouts:[m]}),compute:{module:a.jO.createShaderModule({code:`\n          @group(0) @binding(0) var voxels : texture_3d<f32>;\n          @group(0) @binding(2) var<uniform> cameraPosition : vec3<f32>;\n          @group(0) @binding(3) var<storage> voxelObjects : array<VoxelObject>;\n          @group(0) @binding(4) var normalTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(5) var albedoTex : texture_storage_2d<rgba8unorm, write>;\n          @group(0) @binding(6) var depthWrite : texture_storage_2d<${i.g7}, write>;\n          @group(0) @binding(7) var velocityTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(8) var<uniform> viewProjections : ViewProjectionMatrices;\n          @group(0) @binding(10) var<storage> bvhNodes: array<BVHNode>;\n          @group(0) @binding(11) var worldPosTex : texture_storage_2d<rgba32float, write>;\n          @group(0) @binding(12) var paletteTex : texture_2d<f32>;\n          ${s}\n          ${o}\n          ${l}\n          ${u}\n          ${d}\n          ${c}`}),entryPoint:"main"}});let v;return(e,t)=>{v||(v=(e=>a.jO.createBindGroup({layout:m,entries:[{binding:0,resource:e.volumeAtlas.atlasTextureView},{binding:2,resource:{buffer:e.cameraPositionBuffer}},{binding:3,resource:{buffer:e.transformationMatrixBuffer}},{binding:4,resource:e.outputTextures.normalTexture.view},{binding:5,resource:e.outputTextures.albedoTexture.view},{binding:6,resource:e.outputTextures.depthTexture.view},{binding:7,resource:e.outputTextures.velocityTexture.view},{binding:8,resource:{buffer:e.viewProjectionMatricesBuffer}},{binding:10,resource:{buffer:e.bvhBuffer}},{binding:12,resource:e.volumeAtlas.paletteTextureView}]}))(t)),e.setPipeline(g),e.setBindGroup(0,v),e.dispatchWorkgroups(Math.ceil(a.PM[0]/16/3),Math.ceil(a.PM[1]/8/3))}};n()}catch(e){n(e)}}))},6196:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{N:()=>l});var i=r(1859),a=r(5805),s=r(9133),o=e([i]);i=(o.then?(await o)():o)[0];const l=async()=>{const e=i.jO.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"2d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba32float",viewDimension:"2d"}},{binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}}]}),t=await i.jO.createComputePipelineAsync({label:"reconstruct world pos",layout:i.jO.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:i.jO.createShaderModule({code:`\n          ${a}\n          ${s}\n          struct ViewProjectionMatrices {\n            viewProjection : mat4x4<f32>,\n            previousViewProjection : mat4x4<f32>,\n            inverseViewProjection : mat4x4<f32>,\n            projection : mat4x4<f32>,\n            inverseProjection: mat4x4<f32>\n          };\n          \n          @group(0) @binding(0) var depthTex : texture_2d<f32>;\n          @group(0) @binding(1) var<uniform> viewProjections : ViewProjectionMatrices;\n          @group(0) @binding(2) var worldPosTex : texture_storage_2d<rgba32float, write>;\n          @group(0) @binding(3) var<uniform> cameraPosition : vec3<f32>;\n          @group(0) @binding(4) var normalTex : texture_storage_2d<rgba16float, write>;\n        \n          const NEAR_PLANE = 0.5;\n          const FAR_PLANE = 10000.0;\n         \n          \n          @compute @workgroup_size(8, 8, 1)\n          fn main(\n            @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\n          ) {\n            let resolution = textureDimensions(worldPosTex);\n            let pixel = GlobalInvocationID.xy;\n            var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\n            let depth = textureLoad(depthTex, pixel, 0).r;\n            let distanceToSurface = reversedNormalisedDepthToDistance(depth, NEAR_PLANE, FAR_PLANE);\n            let rayDirection = calculateRayDirection(uv, viewProjections.inverseViewProjection);\n            var worldPos = cameraPosition + rayDirection * distanceToSurface;\n            \n            if(depth == 0.0) {\n              worldPos = vec3<f32>(0.0, 0.0, 0.0);\n            }\n            \n            //let normal = computeNormalImproved(vec2<i32>(pixel)); \n            //textureStore(normalTex, pixel, vec4(normal, 1));\n            textureStore(worldPosTex, pixel, vec4(worldPos, 1));\n          }\n`}),entryPoint:"main"}});let r;return(n,a)=>{r||(r=(t=>i.jO.createBindGroup({layout:e,entries:[{binding:0,resource:t.outputTextures.depthTexture.view},{binding:1,resource:{buffer:t.viewProjectionMatricesBuffer}},{binding:2,resource:t.outputTextures.worldPositionTexture.view},{binding:3,resource:{buffer:t.cameraPositionBuffer}},{binding:4,resource:t.outputTextures.normalTexture.view}]}))(a)),n.setPipeline(t),n.setBindGroup(0,r),n.dispatchWorkgroups(Math.ceil(i.PM[0]/8),Math.ceil(i.PM[1]/8))}};n()}catch(e){n(e)}}))},1100:(e,t,r)=>{function n(e,t){let r=0,n=1/t,i=e;for(;i>0;)r+=n*(i%t),i=Math.floor(i/t),n/=t;return r}function i(e,t,r,i,a,s){Math.tan(i/2);return n(e,2),n(e,3),[0,0]}function a(e,t){const r=new Float32Array(e);return r[8]+=t[0],r[9]+=t[1],r}r.d(t,{Z:()=>a,i:()=>i})},8410:(e,t,r)=>{r.d(t,{Y:()=>n});class n{pressed={w:!1,a:!1,s:!1,d:!1,q:!1,e:!1," ":!1,shift:!1};constructor(){window.addEventListener("keydown",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!0})),window.addEventListener("keyup",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!1})),window.addEventListener("blur",(()=>{Object.keys(this.pressed).forEach((e=>{this.pressed[e]=!1}))}))}}},8024:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{M:()=>o});var i=r(6300),a=r(4206),s=e([a]);a=(s.then?(await s)():s)[0];class o{#x;#y;#p;#b;constructor(e){this.#x=new a.O0(e.position),this.#y=new a.Er(e.rotation),this.#p=new a.O0(e.scale??i.eR.create(1,1,1)),this.#b=this.transform}get transform(){let e=i.pB.identity();return i.pB.translate(e,this.#x.value,e),i.pB.scale(e,this.#p.value,e),i.pB.multiply(e,i.pB.fromQuat(this.#y.value),e),e}get previousTransform(){return this.#b}get inverseTransform(){return i.pB.invert(this.transform)}get previousInverseTransform(){return i.pB.invert(this.#b)}set targetPosition(e){this.#x.target=e}get targetPosition(){return this.#x.target}set targetRotation(e){this.#y.target=e}get targetRotation(){return this.#y.target}get direction(){return i.eR.transformQuat(i.eR.create(0,0,1),this.#y.value)}get right(){return i.eR.transformQuat(i.eR.create(1,0,0),this.#y.value)}get left(){return i.eR.transformQuat(i.eR.create(-1,0,0),this.#y.value)}get up(){return i.eR.transformQuat(i.eR.create(0,1,0),this.#y.value)}get down(){return i.eR.transformQuat(i.eR.create(0,-1,0),this.#y.value)}get viewMatrix(){const e=this.#x.value;return i.pB.lookAt(e,i.eR.add(e,this.direction),this.up)}get inverseViewMatrix(){return i.pB.invert(this.viewMatrix)}}n()}catch(e){n(e)}}))},275:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{Ni:()=>F,aY:()=>N,oB:()=>B});var i=r(7328),a=r(1859),s=r(8223),o=r(3307),l=r(8108),u=r(2792),c=r(5805),d=r(2339),h=r(6258),f=r(6921),p=r(175),m=r(7063),g=r(2832),v=r(9133),x=e([a,p,m,g]);[a,p,m,g]=x.then?(await x)():x;const y={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},b={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},_={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:f.mt}},w={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},T={binding:4,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},P={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},S={binding:6,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},k={binding:7,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},A={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},O={binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},E={binding:11,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},M={binding:12,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},C={binding:13,visibility:GPUShaderStage.COMPUTE,sampler:{}},I={binding:14,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},U={binding:15,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},R={binding:16,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},D={binding:17,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},z={binding:18,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}},j={binding:19,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},L="diffuse",B=[y,b,_,w,T,P,S,k,A,O,E,M,C,I,U,R,D,z,j],N=`\nstruct Time {\n  frame: u32,\n  deltaTime: f32,\n  elapsed: f32\n};\n\n@group(0) @binding(0) var depthTex : texture_2d<f32>;\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\n@group(0) @binding(2) var outputTex : texture_storage_2d<${f.mt}, write>;\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(4) var voxels : texture_3d<f32>;\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(6) var<storage> voxelObjects : array<VoxelObject>;\n@group(0) @binding(7) var<uniform> sunDirection : vec3<f32>;\n@group(0) @binding(8) var linearSampler : sampler;\n@group(0) @binding(9) var intermediaryTexture : texture_2d<f32>;\n@group(0) @binding(10) var normalTex : texture_2d<f32>;\n@group(0) @binding(11) var blueNoiseTex : texture_2d<f32>;\n@group(0) @binding(12) var<uniform> time : Time;\n@group(0) @binding(13) var nearestSampler : sampler;\n@group(0) @binding(14) var velocityAndWaterTex : texture_2d<f32>;\n@group(0) @binding(15) var<storage> bvhNodes: array<BVHNode>;\n@group(0) @binding(16) var worldPosTex : texture_2d<f32>;\n@group(0) @binding(17) var albedoTex : texture_2d<f32>;\n@group(0) @binding(18) var skyCube : texture_cube<f32>;\n@group(0) @binding(19) var previousTex : texture_2d<f32>;\n\nconst DOWNSCALE = 1;\n${h}\n${d}\n${c}\n${s}\n${o}\n${l}\n${u}\n${v}\n${i}`,G=16,V=8,F=async()=>{const e=a.jO.createBindGroupLayout({entries:B}),t=a.jO.createComputePipeline({label:L,layout:a.jO.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:a.jO.createShaderModule({code:N}),entryPoint:"main"}});let r,n,i,s,o,l,u,c,d=a.jO.createSampler({magFilter:"nearest",minFilter:"nearest"}),h=a.jO.createSampler({magFilter:"linear",minFilter:"linear"});const f=await(0,p.j)(),v=await(0,m.n)(),x=await(0,g.f)();return{render:p=>{const{outputTextures:m,timestampWrites:g,viewProjectionMatricesBuffer:y,volumeAtlas:b,cameraPositionBuffer:_,transformationMatrixBuffer:w,sunDirectionBuffer:T,blueNoiseTextureView:P,timeBuffer:S,bvhBuffer:k,commandEncoder:A}=p;if(r||(r=a.jO.createTexture({size:[m.finalTexture.width,m.finalTexture.height,1],format:m.finalTexture.format,usage:m.finalTexture.usage}),n=r.createView()),!i){const e={size:[m.finalTexture.width,m.finalTexture.height,1],format:m.finalTexture.format,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST};i=a.jO.createTexture(e),o=a.jO.createTexture(e),u=a.jO.createTexture(e),l=o.createView(),s=i.createView(),c=u.createView()}A.copyTextureToTexture({texture:m.finalTexture.texture},{texture:r},{width:m.finalTexture.width,height:m.finalTexture.height,depthOrArrayLayers:1});const O=[{binding:0,resource:m.depthTexture.view},{binding:1,resource:n},{binding:3,resource:{buffer:y}},{binding:4,resource:b.atlasTextureView},{binding:5,resource:{buffer:_}},{binding:6,resource:{buffer:w}},{binding:7,resource:{buffer:T}},{binding:8,resource:h},{binding:10,resource:m.normalTexture.view},{binding:11,resource:P},{binding:12,resource:{buffer:S}},{binding:13,resource:d},{binding:14,resource:m.velocityTexture.view},{binding:15,resource:{buffer:k}},{binding:16,resource:m.worldPositionTexture.view},{binding:17,resource:m.albedoTexture.view},{binding:18,resource:m.skyTexture.createView({dimension:"cube"})},{binding:19,resource:c}],E={layout:e,entries:[...O,{binding:2,resource:s}]};let M=A.beginComputePass({timestampWrites:g});const C=a.jO.createBindGroup(E);M.setPipeline(t),M.setBindGroup(0,C);const I=Math.ceil(m.finalTexture.width/G/2),U=Math.ceil(m.finalTexture.height/V/2);M.dispatchWorkgroups(I,U),M.end(),M=A.beginComputePass({timestampWrites:{querySet:g.querySet,beginningOfPassWriteIndex:g.beginningOfPassWriteIndex+2,endOfPassWriteIndex:g.endOfPassWriteIndex+2}}),x(M,p,l,s),M.end(),M=A.beginComputePass({timestampWrites:{querySet:g.querySet,beginningOfPassWriteIndex:g.beginningOfPassWriteIndex+4,endOfPassWriteIndex:g.endOfPassWriteIndex+4}}),f(M,O,o,l,s),M.end(),M=A.beginComputePass({timestampWrites:{querySet:g.querySet,beginningOfPassWriteIndex:g.beginningOfPassWriteIndex+6,endOfPassWriteIndex:g.endOfPassWriteIndex+6}}),v(M,O,m.finalTexture.texture,m.finalTexture.view,s),M.end(),A.copyTextureToTexture({texture:i},{texture:u},{width:i.width,height:i.height,depthOrArrayLayers:1})},label:L,timestampLabels:["shadow trace","shadow interpolate","shadow denoise","shadow composite"]}};n()}catch(e){n(e)}}))},7063:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{n:()=>l});var i=r(1859),a=r(275),s=e([i,a]);[i,a]=s.then?(await s)():s;const o={binding:9,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},l=async()=>{const e=i.jO.createBindGroupLayout({entries:[...a.oB,o]}),t=await i.jO.createComputePipelineAsync({label:"diffuse - composite",layout:i.jO.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:i.jO.createShaderModule({code:a.aY}),entryPoint:"composite"}});let r;return(n,a,s,o,l)=>{r||(r=((t,r,n)=>i.jO.createBindGroup({layout:e,entries:[...t,{binding:2,resource:r},{binding:9,resource:n}]}))(a,o,l)),n.setPipeline(t),n.setBindGroup(0,r),n.dispatchWorkgroups(Math.ceil(s.width/16),Math.ceil(s.height/8))}};n()}catch(e){n(e)}}))},175:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{j:()=>l});var i=r(1859),a=r(275),s=e([i,a]);[i,a]=s.then?(await s)():s;const o={binding:9,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},l=async()=>{const e=i.jO.createBindGroupLayout({entries:[...a.oB,o]}),t=i.jO.createComputePipeline({label:"diffuse - denoise",layout:i.jO.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:i.jO.createShaderModule({code:a.aY}),entryPoint:"denoise"}});let r;return(n,a,s,o,l)=>{r||(r=((t,r,n)=>i.jO.createBindGroup({layout:e,entries:[...t,{binding:2,resource:n},{binding:9,resource:r}]}))(a,o,l)),n.setPipeline(t),n.setBindGroup(0,r),n.dispatchWorkgroups(Math.ceil(s.width/16),Math.ceil(s.height/8))}};n()}catch(e){n(e)}}))},2832:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{f:()=>l});var i=r(1859),a=r(5805),s=r(1219),o=e([i]);i=(o.then?(await o)():o)[0];const l=async()=>{const e=i.jO.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"2d"}},{binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},{binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},{binding:5,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},{binding:6,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},{binding:7,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]}),t=i.jO.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]}),r=i.jO.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}}]}),n=i.jO.createComputePipeline({label:"interpolate shadows",layout:i.jO.createPipelineLayout({bindGroupLayouts:[e,t,r]}),compute:{module:i.jO.createShaderModule({code:`${a}${s}`}),entryPoint:"main"}});let o,l,u;return(a,s,c,d)=>{o||(o=((t,r,n)=>i.jO.createBindGroup({layout:e,entries:[{binding:0,resource:t.outputTextures.albedoTexture.view},{binding:1,resource:t.outputTextures.velocityTexture.view},{binding:2,resource:t.outputTextures.depthTexture.view},{binding:3,resource:t.outputTextures.normalTexture.view},{binding:4,resource:r},{binding:5,resource:n},{binding:6,resource:t.blueNoiseTextureView},{binding:7,resource:{buffer:t.timeBuffer}}]}))(s,c,d)),l||(l=(e=>i.jO.createBindGroup({layout:t,entries:[{binding:0,resource:{buffer:e.cameraPositionBuffer}},{binding:1,resource:{buffer:e.viewProjectionMatricesBuffer}}]}))(s)),u||(u=(e=>i.jO.createBindGroup({layout:r,entries:[{binding:0,resource:{buffer:e.transformationMatrixBuffer}},{binding:1,resource:e.volumeAtlas.atlasTextureView},{binding:2,resource:e.volumeAtlas.paletteTextureView}]}))(s)),a.setPipeline(n),a.setBindGroup(0,o),a.setBindGroup(1,l),a.setBindGroup(2,u),a.dispatchWorkgroups(Math.ceil(i.PM[0]/16),Math.ceil(i.PM[1]/8))}};n()}catch(e){n(e)}}))},2909:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{B:()=>h});var i=r(1859),a=r(117),s=r(2339),o=r(5805),l=r(6273),u=r(7883),c=r(6921),d=e([i]);i=(d.then?(await d)():d)[0];const h=async()=>{const e={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},t={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},r={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:c.mt}},n={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},d={binding:4,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},h={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},f={binding:6,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},p={binding:7,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},m={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},g={binding:9,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},v={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}},x={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:c.NB,viewDimension:"2d-array"}},y={binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d-array"}},b={binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},_=i.jO.createBindGroupLayout({entries:[e,t,r,n,d,h,f,p,m,g,b]}),w=i.jO.createBindGroupLayout({entries:[v]}),T=i.jO.createBindGroupLayout({entries:[x,y]}),P=i.jO.createComputePipeline({layout:i.jO.createPipelineLayout({bindGroupLayouts:[_,w]}),compute:{module:i.jO.createShaderModule({code:`${s}${o}${a}`}),entryPoint:"main"}}),S=i.jO.createComputePipeline({layout:i.jO.createPipelineLayout({bindGroupLayouts:[_,T]}),compute:{module:i.jO.createShaderModule({code:`${s}${o}${a}`}),entryPoint:"writeToCube"}});let k;const A=i.jO.createSampler({minFilter:"linear",magFilter:"linear",addressModeU:"repeat",addressModeV:"repeat"}),O=await(0,l.$L)(i.jO,"pebbles.png",{usage:GPUTextureUsage.COPY_SRC}),E=await(0,l.$L)(i.jO,"rgba-noise.png",{usage:GPUTextureUsage.COPY_SRC}),M=i.jO.createTexture({size:[640,640,6],format:c.NB,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING});return{render:({commandEncoder:e,outputTextures:t,timestampWrites:r,viewProjectionMatricesBuffer:n,sunDirectionBuffer:a,timeBuffer:s,cameraPositionBuffer:o})=>{k||(k=i.jO.createTexture({size:[t.finalTexture.width,t.finalTexture.height,1],format:c.mt,usage:u.d8})),e.copyTextureToTexture({texture:t.finalTexture.texture},{texture:k},{width:t.finalTexture.width,height:t.finalTexture.height,depthOrArrayLayers:1});const l=i.jO.createBindGroup({layout:_,entries:[{binding:0,resource:t.depthTexture.view},{binding:1,resource:k.createView()},{binding:2,resource:t.finalTexture.view},{binding:3,resource:{buffer:n}},{binding:4,resource:{buffer:a}},{binding:5,resource:{buffer:s}},{binding:6,resource:E.createView()},{binding:7,resource:O.createView()},{binding:8,resource:A},{binding:9,resource:{buffer:o}},{binding:10,resource:t.worldPositionTexture.view}]}),d=e.beginComputePass({timestampWrites:r});d.setPipeline(S),d.setBindGroup(0,l),d.setBindGroup(1,i.jO.createBindGroup({layout:T,entries:[{binding:2,resource:t.skyTexture.createView({dimension:"2d-array"})},{binding:3,resource:M.createView({dimension:"2d-array"})}]})),d.dispatchWorkgroups(t.skyTexture.width/16,t.skyTexture.height/16,6),d.setPipeline(P),d.setBindGroup(0,l),d.setBindGroup(1,i.jO.createBindGroup({layout:w,entries:[{binding:1,resource:t.skyTexture.createView({dimension:"cube"})}]}));const h=t.depthTexture.width,f=t.depthTexture.height,p=Math.ceil(h/8),m=Math.ceil(f/8);d.dispatchWorkgroups(p,m),d.end(),e.copyTextureToTexture({texture:t.skyTexture},{texture:M},{width:t.skyTexture.width,height:t.skyTexture.height,depthOrArrayLayers:t.skyTexture.depthOrArrayLayers})},label:"sky"}};n()}catch(e){n(e)}}))},7858:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{Q:()=>o});var i=r(7899),a=r(2672),s=e([i]);i=(s.then?(await s)():s)[0];const o=async()=>(0,i.z)({shaderCode:a,entryPoint:"main",label:"tonemap"});n()}catch(e){n(e)}}))},60:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{A:()=>o});var i=r(1859),a=r(4578),s=e([i]);i=(s.then?(await s)():s)[0];class o{gui;timingsFolder;passesFolder;constructor(){document.addEventListener("wheel",(e=>{i.UI.fieldOfView+=.001*e.deltaY,i.UI.fieldOfView=Math.max(Math.min(i.UI.fieldOfView,2),.1)})),this.gui=new a.Ay,this.gui.add(i.mL,"targetSunRotateY",-3,3).onChange((e=>{i.mL.targetSunRotateY=e})).listen(),this.gui.add(i.UI,"fieldOfView",.1,2).onChange((e=>{i.UI.fieldOfView=e})).listen(),this.timingsFolder=this.gui.addFolder("timings"),this.passesFolder=this.gui.addFolder("passes")}log(e){Object.keys(e).forEach((t=>{const r=this.timingsFolder.controllers.find((e=>e.property===t));r?r.setValue(e[t].toFixed(2)):this.timingsFolder.add(e,t)}))}setupDebugControls(e){const t=e.reduce(((e,t)=>(e[t.label]=!0,e)),{});e.forEach((e=>{this.passesFolder.add(t,e.label)}))}}n()}catch(e){n(e)}}))},596:(e,t,r)=>{r.d(t,{Y:()=>c});var n=r(6921);const i=async(e,t,r)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");const n=await(async(e,t)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");const r=e.createTexture({size:{width:t.width,height:t.height,depthOrArrayLayers:t.depthOrArrayLayers},format:t.format,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:t.mipLevelCount}),n=e.createCommandEncoder();for(let e=0;e<t.mipLevelCount;e++)for(let i=0;i<t.depthOrArrayLayers>>e;i++)n.copyTextureToTexture({texture:t,mipLevel:e,origin:{x:0,y:0,z:i}},{texture:r,mipLevel:e,origin:{x:0,y:0,z:i}},{width:t.width>>e,height:t.height>>e,depthOrArrayLayers:1});return e.queue.submit([n.finish()]),await e.queue.onSubmittedWorkDone(),r})(e,t),i=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),a=e.createBuffer({size:256*t.depthOrArrayLayers,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.UNIFORM,label:"z indices buffer"}),s=Array.from({length:t.depthOrArrayLayers},((e,t)=>t));for(let t=0;t<s.length;t++)e.queue.writeBuffer(a,256*t,new Uint32Array([s[t]]).buffer);const o=e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[i]}),vertex:{module:e.createShaderModule({code:"\n          struct VertexOutput {\n            @builtin(position) Position : vec4<f32>,\n          }\n          const pos = array(\n              vec2( 1.0,  1.0),\n              vec2( 1.0, -1.0),\n              vec2(-1.0, -1.0),\n              vec2( 1.0,  1.0),\n              vec2(-1.0, -1.0),\n              vec2(-1.0,  1.0),\n            );\n          @vertex\n          fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n            var output : VertexOutput;\n            output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n            return output;\n          }"}),entryPoint:"vertex_main"},fragment:{module:e.createShaderModule({code:"\n          @group(0) @binding(0) var voxels : texture_3d<f32>;\n          @group(0) @binding(1) var<uniform> zIndex: u32;\n          @fragment\r\nfn fragment_main(@builtin(position) position : vec4<f32>) -> @location(0) vec4<f32> {\r\n  let srcTexel = vec3(vec2<u32>(position.xy),zIndex);\r\n  var colours = array<f32, 8>();\r\n  var isOctantEmpty = true;\r\n  for(var x = u32(0); x < 2; x++){\r\n    for(var y = u32(0); y < 2; y++){\r\n      for(var z = u32(0); z < 2; z++){\r\n        let voxelX = srcTexel.x * 2 + x;\r\n        let voxelY = srcTexel.y * 2 + y;\r\n        let voxelZ = srcTexel.z * 2 + z;\r\n        var voxelId = vec3<u32>(voxelX,voxelY,voxelZ);\r\n        var voxel = textureLoad(voxels,voxelId,0).r;\r\n        if(voxel > 0){\r\n          var index = x + y * 2 + z * 4;\r\n          colours[index] = voxel;\r\n          isOctantEmpty = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // If all voxels in the octant are empty, keep it blank\r\n  if(isOctantEmpty){\r\n    discard;\r\n  }\r\n\r\n  // Get the most common colour in the octant\r\n  var mostCommonColour = f32(0);\r\n  var mostCommonColourCount = u32(0);\r\n  for(var i = u32(0); i < 8; i = i + 1u){\r\n    var colour = colours[i];\r\n    var count = u32(0);\r\n    for(var j = u32(0); j < 8; j = j + 1u){\r\n      if(colour > 0 && colour == colours[j]){\r\n        count++;\r\n      }\r\n    }\r\n    if(count > mostCommonColourCount){\r\n      mostCommonColour = colour;\r\n      mostCommonColourCount = count;\r\n    }\r\n  }\r\n\r\n  return vec4(mostCommonColour, 0,0,0);\r\n}\r\n\r\n\n        "}),entryPoint:"fragment_main",targets:[{format:t.format}]}}),l=e.createCommandEncoder(),u=Math.max(1,t.depthOrArrayLayers>>r);for(let s=0;s<u;s++){const u=e.createBindGroup({layout:i,entries:[{binding:0,resource:t.createView({label:`${r} mip level of volume texture`,dimension:"3d",baseMipLevel:r-1,mipLevelCount:1})},{binding:1,resource:{buffer:a,offset:256*s,size:4}}]}),c=l.beginRenderPass({colorAttachments:[{view:n.createView({label:"volume slice for rendering mips",baseArrayLayer:s,arrayLayerCount:1,baseMipLevel:r,mipLevelCount:1,dimension:"2d-array"}),loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});c.setPipeline(o),c.setBindGroup(0,u),c.draw(6),c.end()}return e.queue.submit([l.finish()]),await e.queue.onSubmittedWorkDone(),await(async(e,t)=>{if("2d"!==t.dimension)throw new Error("Input texture should be a 2D texture");const r=e.createTexture({size:{width:t.width,height:t.height,depthOrArrayLayers:t.depthOrArrayLayers},format:t.format,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d",mipLevelCount:t.mipLevelCount}),n=e.createCommandEncoder();for(let e=0;e<t.mipLevelCount;e++)for(let i=0;i<t.depthOrArrayLayers>>e;i++)n.copyTextureToTexture({texture:t,mipLevel:e,origin:{x:0,y:0,z:i}},{texture:r,mipLevel:e,origin:{x:0,y:0,z:i}},{width:t.width>>e,height:t.height>>e,depthOrArrayLayers:1});return e.queue.submit([n.finish()]),await e.queue.onSubmittedWorkDone(),r})(e,n)},a={format:n.dn,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d"},s=(e,t)=>Math.ceil(e/t)*t,o=Math.pow(2,n.Wq-1),l=o,u=256;class c{#_={};#w;#T;#o;#P;#S;constructor(e){this.#o=e,this.#w=e.createTexture({size:{width:l,height:l,depthOrArrayLayers:l},...a,label:"Volume atlas containing ",mipLevelCount:n.Wq}),this.#T=e.createTexture({size:{width:u,height:1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,label:"Palette texture",mipLevelCount:1}),this.#P=this.#w.createView(),this.#S=this.#T.createView()}get dictionary(){return this.#_}addVolume=async(e,t,r)=>{if(this.#_[r])throw new Error(`Error adding volume to atlas: volume with label ${r} already exists`);const n=this.#o.createCommandEncoder(),{width:l,height:c,depthOrArrayLayers:d}=e,h=s(l,o),f=s(c,o),p=s(d,o),m=this.#w.width+h;if(m>this.#o.limits.maxTextureDimension3D)throw new Error(`Error adding volume to atlas: adding volume would exceed device max texture dimension of ${this.#o.limits.maxTextureDimension3D}`);const g=Math.max(this.#w.height,f),v=Math.max(this.#w.depthOrArrayLayers,p),x=this.#o.createTexture({size:{width:m,height:g,depthOrArrayLayers:v},mipLevelCount:this.#w.mipLevelCount,...a,label:`${this.#w.label}, ${e.label||"unnamed volume"}`}),y=this.#w.width;n.copyTextureToTexture({texture:this.#w},{texture:x},{width:this.#w.width,height:this.#w.height,depthOrArrayLayers:this.#w.depthOrArrayLayers}),n.copyTextureToTexture({texture:e,mipLevel:0,origin:{x:0,y:0,z:0}},{texture:x,mipLevel:0,origin:{x:y,y:0,z:0}},{width:e.width,height:e.height,depthOrArrayLayers:e.depthOrArrayLayers}),this.#w=x;const b=this.#T.height;this.#_[r]={location:[y,0,0],size:[l,c,d],paletteIndex:b};const _=this.#o.createTexture({size:{width:u,height:this.#T.height+1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,label:"Palette texture",mipLevelCount:1});n.copyTextureToTexture({texture:this.#T},{texture:_},{width:u,height:this.#T.height,depthOrArrayLayers:1}),n.copyTextureToTexture({texture:t},{texture:_,origin:{x:0,y:b,z:0}},{width:u,height:1,depthOrArrayLayers:1}),this.#T=_,this.#o.queue.submit([n.finish()]),await this.#o.queue.onSubmittedWorkDone(),this.#w=await(async(e,t)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");let r=t;for(let n=1;n<t.mipLevelCount;n++)r=await i(e,r,n);return r})(this.#o,this.#w),this.#P=this.#w.createView(),this.#S=this.#T.createView()};get atlasTextureView(){return this.#P}get paletteTextureView(){return this.#S}}},9398:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.d(t,{Q:()=>l});var i=r(6300),a=r(8024),s=e([a]);a=(s.then?(await s)():s)[0];const o=e=>{let t=i.eR.create(1/0,1/0,1/0),r=i.eR.create(-1/0,-1/0,-1/0);for(const n of e)t=i.eR.min(t,n),r=i.eR.max(r,n);return{min:t,max:r}};class l extends a.M{#k;#A;#O;#E;#M;constructor({position:e,rotation:t,scale:r,size:n,atlasLocation:i,name:a="unnamed",paletteIndex:s}){super({position:e,rotation:t,scale:r}),this.#k=Symbol(),this.#A=a,this.#O=n,this.#E=i,this.#M=s}get objectSpaceCorners(){return[i.eR.create(0,0,0),i.eR.create(0,0,this.#O[2]),i.eR.create(0,this.#O[1],0),i.eR.create(0,this.#O[1],this.#O[2]),i.eR.create(this.#O[0],0,0),i.eR.create(this.#O[0],0,this.#O[2]),i.eR.create(this.#O[0],this.#O[1],0),i.eR.create(this.#O[0],this.#O[1],this.#O[2])]}get worldSpaceCorners(){return this.objectSpaceCorners.map((e=>i.eR.transformMat4(e,this.transform)))}get AABB(){return o(this.worldSpaceCorners)}get size(){return this.#O}toArray(){return[...this.transform,...this.inverseTransform,...this.previousTransform,...this.previousInverseTransform,...this.#O,0,...this.#E,this.#M]}}n()}catch(e){n(e)}}))},2301:e=>{e.exports="@group(0) @binding(0) var mySampler : sampler;\r\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\r\n//@group(0) @binding(2) var debugTexture : texture_2d<f32>;\r\n\r\nstruct VertexOutput {\r\n  @builtin(position) Position : vec4<f32>,\r\n  @location(0) fragUV : vec2<f32>,\r\n}\r\n\r\n@vertex\r\nfn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\r\n  const pos = array(\r\n    vec2( 1.0,  1.0),\r\n    vec2( 1.0, -1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2( 1.0,  1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2(-1.0,  1.0),\r\n  );\r\n\r\n  const uv = array(\r\n    vec2(1.0, 0.0),\r\n    vec2(1.0, 1.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(1.0, 0.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(0.0, 0.0),\r\n  );\r\n\r\n  var output : VertexOutput;\r\n  output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\r\n  output.fragUV = uv[VertexIndex];\r\n  return output;\r\n}\r\n\r\nfn get_debug_colour(index : i32) -> vec4<f32> {\r\n  if(index < 0){\r\n    return vec4<f32>(0.0, 0.0, 0.0, 1.0);\r\n  }\r\n\r\n  let colours = array(\r\n    vec4<f32>(1.0, 0.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(1.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(0.0, 0.0, 0.0, 1.0),\r\n  );\r\n  return colours[index % 8];\r\n}\r\n\r\n@fragment\r\nfn fragment_main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\r\n    let pixel = fragUV * vec2<f32>(textureDimensions(myTexture));\r\n    var colour = textureLoad(myTexture, vec2<u32>(pixel),0);\r\n//    return abs(colour) % 1.0;\r\n    return colour;\r\n//    return abs(colour) % 8.0 * 0.125;\r\n//    return colour.gggg * 0.5;\r\n//    return (colour.rrrr * 500.0 % 1.0);\r\n//    return get_debug_colour(i32(colour.a));\r\n}\r\n"},3405:e=>{e.exports="struct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  previousInverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\r\n\r\n\r\nfn plainIntersect(ro: vec3<f32>, rd: vec3<f32>, p: vec4<f32>) -> f32 {\r\n    return -(dot(ro, p.xyz) + p.w) / dot(rd, p.xyz);\r\n}\r\n\r\nfn getVelocityStatic(worldPos: vec3<f32>, viewProjections:ViewProjectionMatrices) -> vec2<f32>{\r\n  let vp = viewProjections.viewProjection;\r\n  let previousVp = viewProjections.previousViewProjection;\r\n\r\n  let clipSpace = vp * vec4(worldPos.xyz, 1.0);\r\n  let previousClipSpace = previousVp * vec4(worldPos.xyz, 1.0);\r\n\r\n  let ndc = clipSpace.xyz / clipSpace.w;\r\n  let previousNdc = previousClipSpace.xyz / previousClipSpace.w;\r\n\r\n  var uv = ndc.xy * 0.5 + 0.5;\r\n  var previousUv = previousNdc.xy * 0.5 + 0.5;\r\n\r\n  var velocity = previousUv - uv;\r\n  return velocity;\r\n}\r\n\r\nfn getVelocity(objectPos: vec3<f32>, modelMatrix: mat4x4<f32>, previousModelMatrix: mat4x4<f32>, viewProjections: ViewProjectionMatrices) -> vec2<f32> {\r\n  let vp = viewProjections.viewProjection;\r\n  let previousVp = viewProjections.previousViewProjection;\r\n\r\n  // Get current object space position of the current pixel\r\n  let objectClipSpace = vp * modelMatrix * vec4(objectPos.xyz, 1.0);\r\n  let objectNDC = objectClipSpace.xyz / objectClipSpace.w;\r\n\r\n  // Get previous position of the current object space position\r\n  let previousObjectClipSpace = previousVp * previousModelMatrix * vec4(objectPos.xyz, 1.0);\r\n  let previousObjectNDC = previousObjectClipSpace.xyz / previousObjectClipSpace.w;\r\n\r\n  // UV\r\n  var uv = objectNDC.xy * 0.5 + 0.5;\r\n  var previousUv = previousObjectNDC.xy * 0.5 + 0.5;\r\n  uv.y = 1.0 - uv.y;\r\n  previousUv.y = 1.0 - previousUv.y;\r\n\r\n  // Get velocity based on the difference between the current and previous positions\r\n  var velocity = previousUv - uv;\r\n  return velocity;\r\n}\r\n\r\nfn getLeftChildIndex(index: i32) -> i32 {\r\n  return index * 2 + 1;\r\n}\r\n\r\nfn getRightChildIndex(index: i32) -> i32 {\r\n  return index * 2 + 2;\r\n}\r\n\r\nfn getParentIndex(index: i32) -> i32 {\r\n  return (index - 1) / 2;\r\n}\r\n\r\n\r\nfn dirIsNegative(dir: vec3<f32>, axis: i32) -> bool {\r\n  return dir[axis] < 0.0;\r\n}\r\n\r\nfn getDebugColour(index: i32) -> vec3<f32> {\r\n  let colours = array<vec3<f32>, 6>(\r\n    vec3<f32>(1.0, 0.0, 0.0),\r\n    vec3<f32>(0.0, 1.0, 0.0),\r\n    vec3<f32>(0.0, 0.0, 1.0),\r\n    vec3<f32>(1.0, 1.0, 0.0),\r\n    vec3<f32>(1.0, 0.0, 1.0),\r\n    vec3<f32>(0.0, 1.0, 1.0)\r\n  );\r\n  return colours[index % 6];\r\n}\r\n\r\n\r\nfn customNormalize(value: f32, min: f32, max: f32) -> f32 {\r\n    return (value - min) / (max - min);\r\n}\r\n\r\nconst IDENTITY_MATRIX = mat4x4<f32>(\r\n  vec4<f32>(1.0, 0.0, 0.0, 0.0),\r\n  vec4<f32>(0.0, 1.0, 0.0, 0.0),\r\n  vec4<f32>(0.0, 0.0, 1.0, 0.0),\r\n  vec4<f32>(0.0, 0.0, 0.0, 1.0)\r\n);\r\n\r\nfn intersectSphere(origin: vec3<f32>, dir: vec3<f32>, spherePos: vec3<f32>, sphereRad: f32) -> f32\r\n{\r\n\tlet oc = origin - spherePos;\r\n\tlet b = 2.0 * dot(dir, oc);\r\n\tlet c = dot(oc, oc) - sphereRad*sphereRad;\r\n\tlet disc = b * b - 4.0 * c;\r\n\tif (disc < 0.0)\r\n\t{\r\n\t  return -1.0;\r\n\t}\r\n\r\n//    float q = (-b + ((b < 0.0) ? -sqrt(disc) : sqrt(disc))) / 2.0;\r\n  let q = (-b + select(sqrt(disc), -sqrt(disc), b < 0.0)) / 2.0;\r\n\tvar t0 = q;\r\n\tvar t1 = c / q;\r\n\tif (t0 > t1) {\r\n\t\tvar temp = t0;\r\n\t\tt0 = t1;\r\n\t\tt1 = temp;\r\n\t}\r\n\tif (t1 < 0.0){\r\n\t  return -1.0;\r\n\t}\r\n\r\n  return select(t0, t1, t0 < 0.0);\r\n}\r\n\r\nfn skyDomeIntersection(ro: vec3<f32>, rd: vec3<f32>) -> f32 {\r\n    return intersectSphere(ro, rd, vec3<f32>(0.0, 0.0, 0.0), 100.0);\r\n}\r\n\r\nfn reprojectWorldPos(worldPos: vec3<f32>, viewProjections: ViewProjectionMatrices) -> vec3<f32> {\r\n  let clipSpace = viewProjections.previousViewProjection * vec4(worldPos.xyz, 1.0);\r\n  return 0.5 * (clipSpace.xyz / clipSpace.w) + 0.5;\r\n}\r\n\r\nfn reprojectObjectWorldPos(worldPos: vec3<f32>, previousModelMatrix: mat4x4<f32>, viewProjections: ViewProjectionMatrices) -> vec3<f32> {\r\n  let clipSpace = viewProjections.previousViewProjection * previousModelMatrix * vec4(worldPos.xyz, 1.0);\r\n  return 0.5 * (clipSpace.xyz / clipSpace.w) + 0.5;\r\n}\r\n\r\nfn tracePixel(pixel: vec2<u32>){\r\n   let resolution = textureDimensions(albedoTex);\r\n   var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\r\n   let rayDirection = calculateRayDirection(uv,viewProjections.inverseViewProjection);\r\n    var rayOrigin = cameraPosition;\r\n    var closestIntersection = RayMarchResult();\r\n\r\n    let bvhResult = rayMarchBVH(rayOrigin, rayDirection);\r\n    if(!bvhResult.hit){\r\n      textureStore(albedoTex, pixel, vec4(0));\r\n      textureStore(normalTex, pixel, vec4(0));\r\n      textureStore(depthWrite, pixel, vec4(0));\r\n      let worldPos = rayOrigin + skyDomeIntersection(rayOrigin, rayDirection) * rayDirection;\r\n      let velocity = getVelocityStatic(worldPos, viewProjections);\r\n      textureStore(velocityTex, pixel, vec4(velocity,0, -1.0));\r\n      return;\r\n    }\r\n    closestIntersection = bvhResult;\r\n\r\n    let voxelObject = voxelObjects[closestIntersection.voxelObjectIndex];\r\n    let paletteX = i32(closestIntersection.palettePosition * 255.0);\r\n    let paletteY = i32(voxelObject.paletteIndex);\r\n    let albedo = textureLoad(paletteTex, vec2(paletteX, paletteY), 0).rgb;\r\n    let normal = transformNormal(voxelObject.inverseTransform,vec3<f32>(closestIntersection.normal));\r\n    let worldPos = rayOrigin + rayDirection * closestIntersection.t;\r\n    let velocity = getVelocityStatic(worldPos, viewProjections);\r\n    let depth = closestIntersection.t;\r\n    let normalisedDepth = distanceToReversedNormalisedDepth(depth, NEAR_PLANE, FAR_PLANE);\r\n\r\n    textureStore(albedoTex, pixel, vec4(albedo, 1));\r\n    textureStore(normalTex, pixel, vec4(normal,1));\r\n    textureStore(velocityTex, pixel, vec4(velocity,0,f32(closestIntersection.voxelObjectIndex)));\r\n    textureStore(depthWrite, pixel, vec4(normalisedDepth));\r\n}\r\n\r\n@compute @workgroup_size(16, 8, 1)\r\nfn main(\r\n   @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\r\n) {\r\n  let pixel = GlobalInvocationID.xy * 3;\r\n  tracePixel(pixel);\r\n}\r\n\r\n@group(1) @binding(0) var<storage, read> screenRayBuffer : array<vec2<u32>>;\r\n\r\nconst REMAINING_RAY_OFFSETS = array<vec2<u32>, 8>(\r\n  vec2<u32>(0,1),\r\n  vec2<u32>(1,0),\r\n  vec2<u32>(1,1),\r\n  vec2<u32>(2,0),\r\n  vec2<u32>(2,1),\r\n  vec2<u32>(0,2),\r\n  vec2<u32>(1,2),\r\n  vec2<u32>(2,2)\r\n);\r\n\r\n@compute @workgroup_size(64, 1, 1)\r\nfn bufferMarch(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\r\n  @builtin(local_invocation_id) LocalInvocationID : vec3<u32>,\r\n  @builtin(workgroup_id) WorkGroupID : vec3<u32>,\r\n) {\r\n  let bufferIndex = GlobalInvocationID.x / 8;\r\n  let localRayIndex = GlobalInvocationID.x % 8;\r\n  let pixel = screenRayBuffer[bufferIndex];\r\n  let offsetPixel = pixel + REMAINING_RAY_OFFSETS[localRayIndex];\r\n\r\n  tracePixel(offsetPixel);\r\n//  textureStore(depthWrite, offsetPixel, vec4(0,0,0,0));\r\n//   textureStore(albedoTex, offsetPixel, vec4(1,0,0,1));\r\n}"},3091:e=>{e.exports="struct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  previousInverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\r\n\r\nstruct VoxelObject {\r\n  transform: mat4x4<f32>,\r\n  inverseTransform: mat4x4<f32>,\r\n  previousTransform: mat4x4<f32>,\r\n  previousInverseTransform: mat4x4<f32>,\r\n  size : vec3<f32>,\r\n  atlasLocation : vec3<f32>,\r\n  paletteIndex : f32,\r\n}\r\n\r\n// Textures\r\n@group(0) @binding(0) var albedoTex : texture_storage_2d<rgba8unorm, write>;\r\n@group(0) @binding(1) var albedoCopyTex : texture_2d<f32>;\r\n@group(0) @binding(2) var velocityTex : texture_storage_2d<rgba16float, write>;\r\n@group(0) @binding(3) var velocityCopyTex : texture_2d<f32>;\r\n@group(0) @binding(4) var depthTex : texture_storage_2d<r32float, write>;\r\n@group(0) @binding(5) var depthCopyTex : texture_2d<f32>;\r\n@group(0) @binding(6) var normalTex : texture_storage_2d<rgba16float, write>;\r\n@group(0) @binding(7) var normalCopyTex : texture_2d<f32>;\r\n\r\n// Camera\r\n@group(1) @binding(0) var<uniform> cameraPosition : vec3<f32>;\r\n@group(1) @binding(1) var<uniform> viewProjections : ViewProjectionMatrices;\r\n\r\n// Voxels\r\n@group(2) @binding(0) var<storage> voxelObjects : array<VoxelObject>;\r\n@group(2) @binding(1) var volumeAtlasTex : texture_3d<f32>;\r\n@group(2) @binding(2) var paletteTex : texture_2d<f32>;\r\n\r\n// Screen Rays\r\nstruct ScreenRay {\r\n  pixel : vec2<u32>,\r\n};\r\n@group(3) @binding(0) var<storage, read_write> indirectArgs : array<atomic<u32>>;\r\n@group(3) @binding(1) var<storage, read_write> screenRays : array<ScreenRay>;\r\n@group(3) @binding(2) var<storage, read_write> counter : array<atomic<u32>>;\r\n\r\nconst neighborOffsets = array<vec2<i32>, 4>(\r\n  vec2<i32>(0, 0),\r\n  vec2<i32>(3, 0),\r\n  vec2<i32>(0, 3),\r\n  vec2<i32>(3, 3)\r\n);\r\n\r\n// Normal is in voxel (object) space, so will only have 1 or -1 values on one axis\r\nfn isOnSharedPlane(\r\n  normal : vec3<f32>,\r\n  voxelPos : vec3<f32>,\r\n  neighborVoxelPos : vec3<f32>,\r\n  neighborNormal : vec3<f32>\r\n) -> bool {\r\n  let epsilon = 0.001;\r\n  if(abs(neighborNormal.y) > 0.0 && abs(normal.y) > 0.0){\r\n    return abs(voxelPos.y - neighborVoxelPos.y) < epsilon;\r\n  }\r\n  if(abs(neighborNormal.x) > 0.0 && abs(normal.x) > 0.0){\r\n    return abs(voxelPos.x - neighborVoxelPos.x) < epsilon;\r\n  }\r\n  if(abs(neighborNormal.z) > 0.0 && abs(normal.z) > 0.0){\r\n    return abs(voxelPos.z - neighborVoxelPos.z) < epsilon;\r\n  }\r\n  return false;\r\n}\r\n\r\nconst NEAR_PLANE = 0.5;\r\nconst FAR_PLANE = 10000.0;\r\n\r\nconst REMAINING_RAY_OFFSETS = array<vec2<u32>, 8>(\r\n  vec2<u32>(0,1),\r\n  vec2<u32>(1,0),\r\n  vec2<u32>(1,1),\r\n  vec2<u32>(2,0),\r\n  vec2<u32>(2,1),\r\n  vec2<u32>(0,2),\r\n  vec2<u32>(1,2),\r\n  vec2<u32>(2,2)\r\n);\r\n\r\n// Increment the count of the ray buffers, and only increment the dispatch indirect args every 8 rays, due to the 64x1x1 workgroup size (8 ray groups, 8 rays per group)\r\nfn incrementCounters() -> u32{\r\n  let count = atomicAdd(&counter[0], 1);\r\n  if(count % 8 == 0){\r\n   atomicAdd(&indirectArgs[0], 1);\r\n  }\r\n  return count;\r\n}\r\n\r\n/**\r\n  * Interpolate the depth, normal and uv of the pixel from the 4 nearest neighbors\r\n  * if not valid for interpolation, add to a ray buffer for use in the next pass\r\n  * Ray buffer is a list of pixel groups that need to be re-marched at full resolution\r\n  * The stored value is the origin of the group ([0,0] in a [3x3] kernel)\r\n  */\r\n@compute @workgroup_size(16, 8, 1)\r\n fn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\r\n) {\r\n  let texSize = textureDimensions(albedoCopyTex);\r\n  let pixel = vec2<i32>(GlobalInvocationID.xy);\r\n  let uv = vec2<f32>(pixel) / vec2<f32>(texSize);\r\n  let nearestFilledPixel = (pixel / 3) * 3;\r\n  let isOriginPixel = all(pixel == nearestFilledPixel);\r\n\r\n  let isCornerPixel = all(pixel == nearestFilledPixel + vec2(2));\r\n  let nearestUV = vec2<f32>(nearestFilledPixel) / vec2<f32>(texSize);\r\n  let velocityRef = textureLoad(velocityCopyTex, nearestFilledPixel, 0);\r\n\r\n  var hasFoundObject = false;\r\n  // Check if each neightbor is the same object\r\n  for(var i = 1; i < 4; i = i + 1) {\r\n    let objectIndex = textureLoad(velocityCopyTex, nearestFilledPixel + neighborOffsets[i], 0).a;\r\n    if(objectIndex != velocityRef.a) {\r\n       if(isOriginPixel){\r\n         // Add to ray buffer\r\n         let count = incrementCounters();\r\n         screenRays[count].pixel = vec2<u32>(pixel);\r\n       }\r\n       return;\r\n    }\r\n    if(objectIndex != -1.0) {\r\n      hasFoundObject = true;\r\n    }\r\n  }\r\n  if(!hasFoundObject) {\r\n    // Dont march any more rays - we have hit the sky\r\n    textureStore(velocityTex, pixel, vec4(velocityRef.xyz, -1.0));\r\n    textureStore(depthTex, pixel, vec4(0.0));\r\n    textureStore(normalTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\r\n    textureStore(albedoTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\r\n    return;\r\n  }\r\n  let voxelObject = voxelObjects[i32(velocityRef.a)];\r\n  let depthRef = textureLoad(depthCopyTex, nearestFilledPixel, 0).r;\r\n  let normalRef = textureLoad(normalCopyTex, nearestFilledPixel, 0).xyz;\r\n  let localNormal = (voxelObject.inverseTransform * vec4(normalRef, 0.0)).xyz;\r\n  let rayDirection = calculateRayDirection(nearestUV, viewProjections.inverseViewProjection);\r\n  let worldPosRef = cameraPosition + rayDirection * reversedNormalisedDepthToDistance(depthRef, NEAR_PLANE, FAR_PLANE);\r\n  let localPosRef = (voxelObject.inverseTransform * vec4(worldPosRef, 1.0)).xyz;\r\n  let voxelPosRef = floor(localPosRef);\r\n\r\n  // Check if each neightbor is the same voxel plane\r\n  for(var i = 0; i < 4; i = i + 1) {\r\n    let neighborPixel = nearestFilledPixel + neighborOffsets[i];\r\n    let neighborUV = vec2<f32>(neighborPixel) / vec2<f32>(texSize);\r\n    let neighborDepth = textureLoad(depthCopyTex, neighborPixel, 0).r;\r\n    let neighborNormal = textureLoad(normalCopyTex, neighborPixel, 0).xyz;\r\n    let neighborLocalNormal = (voxelObject.inverseTransform * vec4(neighborNormal, 0.0)).xyz;\r\n    let neighborRayDirection = calculateRayDirection(neighborUV, viewProjections.inverseViewProjection);\r\n    let neighborWorldPos = cameraPosition + neighborRayDirection * reversedNormalisedDepthToDistance(neighborDepth, NEAR_PLANE, FAR_PLANE);\r\n    let neighborLocalPos = (voxelObject.inverseTransform * vec4(neighborWorldPos, 1.0)).xyz;\r\n    let neighborVoxelPos = floor(neighborLocalPos);\r\n\r\n    if(!isOnSharedPlane(localNormal, voxelPosRef, neighborVoxelPos, neighborLocalNormal)) {\r\n      if(isOriginPixel){\r\n        // Add to ray buffer\r\n        let count = incrementCounters();\r\n        screenRays[count].pixel = vec2<u32>(pixel);\r\n      }else{\r\n        textureStore(albedoTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\r\n        textureStore(normalTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\r\n        textureStore(velocityTex, pixel, vec4(velocityRef.xyz, -1.0));\r\n        textureStore(depthTex, pixel, vec4(0.0));\r\n      }\r\n      return;\r\n    }\r\n  }\r\n\r\n  let pixel0 = nearestFilledPixel;\r\n  let pixel1 = nearestFilledPixel + vec2<i32>(3, 0);\r\n  let pixel2 = nearestFilledPixel + vec2<i32>(0, 3);\r\n  let pixel3 = nearestFilledPixel + vec2<i32>(3, 3);\r\n\r\n  // Interpolate\r\n  let normal0 = normalRef;\r\n  let normal1 = textureLoad(normalCopyTex, pixel1, 0).xyz;\r\n  let normal2 = textureLoad(normalCopyTex, pixel2, 0).xyz;\r\n  let normal3 = textureLoad(normalCopyTex, pixel3, 0).xyz;\r\n\r\n  let depth0 = depthRef;\r\n  let depth1 = textureLoad(depthCopyTex, pixel1, 0).r;\r\n  let depth2 = textureLoad(depthCopyTex, pixel2, 0).r;\r\n  let depth3 = textureLoad(depthCopyTex, pixel3, 0).r;\r\n\r\n  let xInterp = f32(pixel.x) % 3.0 / 3.0;\r\n  let yInterp = f32(pixel.y) % 3.0 / 3.0;\r\n\r\n  let depthBottom = mix(depth0, depth1, xInterp);\r\n  let depthTop = mix(depth2, depth3, xInterp);\r\n  let depth = mix(depthBottom, depthTop, yInterp);\r\n\r\n  let normalTop = mix(normal0, normal1, xInterp);\r\n  let normalBottom = mix(normal2, normal3, xInterp);\r\n  let normal = mix(normalTop, normalBottom, yInterp);\r\n\r\n  let worldPos =\r\n    cameraPosition\r\n    + calculateRayDirection(uv, viewProjections.inverseViewProjection)\r\n    * reversedNormalisedDepthToDistance(depth, NEAR_PLANE, FAR_PLANE);\r\n\r\n  let localPos = (voxelObject.inverseTransform * vec4(worldPos, 1.0)).xyz;\r\n  let voxelPos = floor(localPos);\r\n  let atlasSamplePos = vec3<i32>(voxelObject.atlasLocation + voxelPos);\r\n  let palettePos = textureLoad(volumeAtlasTex, atlasSamplePos, 0).r;\r\n  let paletteX = i32(palettePos* 255.0);\r\n  let paletteY = i32(voxelObject.paletteIndex);\r\n  let albedo = textureLoad(paletteTex, vec2(paletteX, paletteY), 0).rgb;\r\n\r\n  textureStore(albedoTex, pixel, vec4(albedo, 1.0));\r\n  textureStore(velocityTex, pixel, velocityRef);\r\n  textureStore(depthTex, pixel, vec4(depth));\r\n  textureStore(normalTex, pixel, vec4(normal, 1.0));\r\n\r\n}"},2339:e=>{e.exports="// Constants\r\nconst infinity : f32 = 99999999.0;\r\n\r\n// Utility functions\r\nfn degreesToRadians(degrees : f32) -> f32 {\r\n    return degrees * (3.1415926535897932385 / 180.0);\r\n}\r\n\r\nfn unitVector(v : vec3<f32>) -> vec3<f32> {\r\n    return v / length(v);\r\n}\r\n\r\nfn lengthSquared(v : vec3<f32>) -> f32 {\r\n    return v.x * v.x + v.y * v.y + v.z * v.z;\r\n}\r\n\r\nfn random(co : vec2<f32>) -> f32 {\r\n    return fract(sin(dot(co, vec2<f32>(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nfn randomMinMax(co : vec2<f32>, min : f32, max : f32) -> f32 {\r\n    return min + (max - min) * random(co);\r\n}\r\n\r\nfn randomFloat3(co : vec2<f32>) -> vec3<f32> {\r\n    return vec3<f32>(random(co), random(co * 2.0), random(co * 3.0));\r\n}\r\n\r\nfn randomFloat3MinMax(co : vec2<f32>, min : f32, max : f32) -> vec3<f32> {\r\n    return vec3<f32>(randomMinMax(co, min, max), randomMinMax(co * 2.0, min, max), randomMinMax(co * 3.0, min, max));\r\n}\r\n\r\nfn randomInUnitSphere(co : vec2<f32>) -> vec3<f32> {\r\n    var p : vec3<f32> = randomFloat3MinMax(co, -1.0, 1.0);\r\n    while (lengthSquared(p) < 1.0) {\r\n        p = randomFloat3MinMax(co, -1.0, 1.0);\r\n    }\r\n    return p;\r\n}\r\n\r\nfn randomInUnitDisk(seed : vec2<f32>) -> vec2<f32> {\r\n    let r = sqrt(random(seed));\r\n    let theta = 2.0 * 3.14159265359 * random(vec2<f32>(seed.y, seed.x));\r\n    return vec2<f32>(cos(theta), sin(theta)) * r;\r\n}\r\n\r\nfn randomInPlanarUnitDisk(seed : vec2<f32>, normal: vec3<f32>) -> vec3<f32> {\r\n    let disk = randomInUnitDisk(seed);\r\n    var diskNormal = cross(normal, vec3<f32>(0.0, 1.0, 0.0));\r\n    if (length(diskNormal) < 0.01) {\r\n        diskNormal = cross(normal, vec3<f32>(1.0, 0.0, 0.0));\r\n    }\r\n    diskNormal = normalize(diskNormal);\r\n    let diskTangent = cross(diskNormal, normal);\r\n    return disk.x * diskTangent + disk.y * diskNormal;\r\n}\r\n\r\nfn reflect(v : vec3<f32>, n : vec3<f32>) -> vec3<f32> {\r\n    return v - 2.0 * dot(v, n) * n;\r\n}\r\n\r\nfn randomUnitVector(co : vec2<f32>) -> vec3<f32> {\r\n    return unitVector(randomInUnitSphere(co));\r\n}\r\n\r\nfn nearZero(e : vec3<f32>) -> bool {\r\n    const s : f32 = 1e-8;\r\n    return (abs(e.x) < s) && (abs(e.y) < s) && (abs(e.z) < s);\r\n}\r\n\r\nfn randomInHemisphere(co : vec2<f32>, normal : vec3<f32>) -> vec3<f32> {\r\n    let inUnitSphere = randomUnitVector(co);\r\n    if (dot(inUnitSphere, normal) > 0.0) {\r\n        return inUnitSphere;\r\n    }\r\n    return -inUnitSphere;\r\n}\r\n\r\nfn randomAlongVector(co : vec2<f32>, direction : vec3<f32>) -> vec3<f32> {\r\n    return normalize(direction) * random(co);\r\n}\r\n\r\n// Function to perturb the normal vector within the hemisphere\r\nfn perturbDirection(normal: vec3<f32>, scatterAmount: f32, co: vec2<f32>) -> vec3<f32> {\r\n    // Generate a random vector in a hemisphere\r\n    let hemisphereVector : vec3<f32> = randomInHemisphere(co, normal);\r\n\r\n    // Combine the perturbation with the original normal\r\n    let perturbedDir : vec3<f32> = normalize(normal + scatterAmount * hemisphereVector);\r\n\r\n    return perturbedDir;\r\n}\r\n\r\nfn permute4(x: vec4<f32>) -> vec4<f32> { return ((x * 34. + 1.) * x) % vec4<f32>(289.); }\r\nfn taylorInvSqrt4(r: vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r; }\r\nfn fade3(t: vec3<f32>) -> vec3<f32> { return t * t * t * (t * (t * 6. - 15.) + 10.); }\r\n\r\nfn perlinNoise3(P: vec3<f32>) -> f32 {\r\n    var Pi0 : vec3<f32> = floor(P); // Integer part for indexing\r\n    var Pi1 : vec3<f32> = Pi0 + vec3<f32>(1.); // Integer part + 1\r\n    Pi0 = Pi0 % vec3<f32>(289.);\r\n    Pi1 = Pi1 % vec3<f32>(289.);\r\n    let Pf0 = fract(P); // Fractional part for interpolation\r\n    let Pf1 = Pf0 - vec3<f32>(1.); // Fractional part - 1.\r\n    let ix = vec4<f32>(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n    let iy = vec4<f32>(Pi0.yy, Pi1.yy);\r\n    let iz0 = Pi0.zzzz;\r\n    let iz1 = Pi1.zzzz;\r\n\r\n    let ixy = permute4(permute4(ix) + iy);\r\n    let ixy0 = permute4(ixy + iz0);\r\n    let ixy1 = permute4(ixy + iz1);\r\n\r\n    var gx0: vec4<f32> = ixy0 / 7.;\r\n    var gy0: vec4<f32> = fract(floor(gx0) / 7.) - 0.5;\r\n    gx0 = fract(gx0);\r\n    var gz0: vec4<f32> = vec4<f32>(0.5) - abs(gx0) - abs(gy0);\r\n    var sz0: vec4<f32> = step(gz0, vec4<f32>(0.));\r\n    gx0 = gx0 + sz0 * (step(vec4<f32>(0.), gx0) - 0.5);\r\n    gy0 = gy0 + sz0 * (step(vec4<f32>(0.), gy0) - 0.5);\r\n\r\n    var gx1: vec4<f32> = ixy1 / 7.;\r\n    var gy1: vec4<f32> = fract(floor(gx1) / 7.) - 0.5;\r\n    gx1 = fract(gx1);\r\n    var gz1: vec4<f32> = vec4<f32>(0.5) - abs(gx1) - abs(gy1);\r\n    var sz1: vec4<f32> = step(gz1, vec4<f32>(0.));\r\n    gx1 = gx1 - sz1 * (step(vec4<f32>(0.), gx1) - 0.5);\r\n    gy1 = gy1 - sz1 * (step(vec4<f32>(0.), gy1) - 0.5);\r\n\r\n    var g000: vec3<f32> = vec3<f32>(gx0.x, gy0.x, gz0.x);\r\n    var g100: vec3<f32> = vec3<f32>(gx0.y, gy0.y, gz0.y);\r\n    var g010: vec3<f32> = vec3<f32>(gx0.z, gy0.z, gz0.z);\r\n    var g110: vec3<f32> = vec3<f32>(gx0.w, gy0.w, gz0.w);\r\n    var g001: vec3<f32> = vec3<f32>(gx1.x, gy1.x, gz1.x);\r\n    var g101: vec3<f32> = vec3<f32>(gx1.y, gy1.y, gz1.y);\r\n    var g011: vec3<f32> = vec3<f32>(gx1.z, gy1.z, gz1.z);\r\n    var g111: vec3<f32> = vec3<f32>(gx1.w, gy1.w, gz1.w);\r\n\r\n    let norm0 = taylorInvSqrt4(\r\n        vec4<f32>(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n    g000 = g000 * norm0.x;\r\n    g010 = g010 * norm0.y;\r\n    g100 = g100 * norm0.z;\r\n    g110 = g110 * norm0.w;\r\n    let norm1 = taylorInvSqrt4(\r\n        vec4<f32>(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n    g001 = g001 * norm1.x;\r\n    g011 = g011 * norm1.y;\r\n    g101 = g101 * norm1.z;\r\n    g111 = g111 * norm1.w;\r\n\r\n    let n000 = dot(g000, Pf0);\r\n    let n100 = dot(g100, vec3<f32>(Pf1.x, Pf0.yz));\r\n    let n010 = dot(g010, vec3<f32>(Pf0.x, Pf1.y, Pf0.z));\r\n    let n110 = dot(g110, vec3<f32>(Pf1.xy, Pf0.z));\r\n    let n001 = dot(g001, vec3<f32>(Pf0.xy, Pf1.z));\r\n    let n101 = dot(g101, vec3<f32>(Pf1.x, Pf0.y, Pf1.z));\r\n    let n011 = dot(g011, vec3<f32>(Pf0.x, Pf1.yz));\r\n    let n111 = dot(g111, Pf1);\r\n\r\n    var fade_xyz: vec3<f32> = fade3(Pf0);\r\n    let temp = vec4<f32>(f32(fade_xyz.z)); // simplify after chrome bug fix\r\n    let n_z = mix(vec4<f32>(n000, n100, n010, n110), vec4<f32>(n001, n101, n011, n111), temp);\r\n    let n_yz = mix(n_z.xy, n_z.zw, vec2f(f32(fade_xyz.y))); // simplify after chrome bug fix\r\n    let n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r\n    return 2.2 * n_xyz;\r\n}"},8223:e=>{e.exports="struct BoxIntersectionResult {\r\n    tNear: f32,\r\n    tFar: f32,\r\n    normal: vec3<f32>,\r\n    isHit: bool,\r\n}\r\n\r\nfn simpleBoxIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n) -> f32 {\r\n  let m = 1.0/rd; // can precompute if traversing a set of aligned boxes\r\n  let n = m*ro;   // can precompute if traversing a set of aligned boxes\r\n  let k = abs(m)*boxSize;\r\n  let t1 = -n - k;\r\n  let t2 = -n + k;\r\n  let tN = max( max( t1.x, t1.y ), t1.z );\r\n  let tF = min( min( t2.x, t2.y ), t2.z );\r\n  if( tN>tF || tF<0.0) {\r\n    return -1.0; // no intersection\r\n  }\r\n  return tN;\r\n}\r\n\r\nfn boxIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    result.isHit = false;\r\n    result.tNear = -1.0;\r\n    result.tFar = -1.0;\r\n\r\n    let offsetRayOrigin = ro - boxSize;\r\n    let m: vec3<f32> = 1.0 / rd;\r\n    let n: vec3<f32> = m * offsetRayOrigin;\r\n    let k: vec3<f32> = abs(m) * boxSize;\r\n    let t1: vec3<f32> = -n - k;\r\n    let t2: vec3<f32> = -n + k;\r\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\r\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\r\n    if (tN > tF || tF < 0.0) {\r\n        return result;\r\n    }\r\n    // Check if the ray starts inside the volume\r\n    let insideVolume = tN < 0.0;\r\n    var normal = select(\r\n        step(vec3<f32>(tN), t1),\r\n        step(t2, vec3<f32>(tF)),\r\n        tN < 0.0,\r\n    );\r\n    normal *= -sign(rd);\r\n    // Check if the intersection is in the correct direction, only if inside the volume\r\n    if (insideVolume && dot(normal, rd) < 0.0) {\r\n        return result;\r\n    }\r\n    result.tNear = tN;\r\n    result.tFar = tF;\r\n    result.normal = normal;\r\n    result.isHit = true;\r\n    return result;\r\n}\r\n\r\nfn planeIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    planeNormal: vec3<f32>,\r\n    planeDistance: f32,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    let denom = dot(planeNormal, rd);\r\n    if (abs(denom) > 0.0001) {\r\n        let t = -(dot(planeNormal, ro) + planeDistance) / denom;\r\n        if (t > 0.0) {\r\n            result.isHit = true;\r\n            result.tNear = t;\r\n            result.tFar = t;\r\n            result.normal = planeNormal;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfn get3x3From4x4(m: mat4x4<f32>) -> mat3x3<f32> {\r\n    return mat3x3<f32>(\r\n        m[0].xyz,\r\n        m[1].xyz,\r\n        m[2].xyz,\r\n    );\r\n}\r\n\r\n\r\nfn intersectOBB(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n    boxOrientation: mat3x3<f32>,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    result.isHit = false;\r\n    result.tNear = -1.0;\r\n    result.tFar = -1.0;\r\n\r\n    let offsetRayOrigin = ro - boxSize;\r\n    let m: vec3<f32> = 1.0 / rd;\r\n    let n: vec3<f32> = m * offsetRayOrigin;\r\n    let k: vec3<f32> = abs(m) * boxSize;\r\n    let t1: vec3<f32> = -n - k;\r\n    let t2: vec3<f32> = -n + k;\r\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\r\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\r\n    if (tN > tF || tF < 0.0) {\r\n        return result;\r\n    }\r\n    // Check if the ray starts inside the volume\r\n    let insideVolume = tN < 0.0;\r\n    var normal = select(\r\n        step(vec3<f32>(tN), t1),\r\n        step(t2, vec3<f32>(tF)),\r\n        tN < 0.0,\r\n    );\r\n    normal *= -sign(rd);\r\n    // Check if the intersection is in the correct direction, only if inside the volume\r\n    if (insideVolume && dot(normal, rd) < 0.0) {\r\n        return result;\r\n    }\r\n    result.tNear = tN;\r\n    result.tFar = tF;\r\n    result.normal = normal;\r\n    result.isHit = true;\r\n    return result;\r\n}"},2792:e=>{e.exports="const MAX_COARSE_RAY_STEPS = 64;\r\n\r\nfn rayMarchCoarse(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>) -> bool {\r\n    let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\r\n    var voxelSize = vec3<f32>(1.0);\r\n    var objectPos = objectRayOrigin;\r\n    var currentIndex = vec3<i32>(round(objectPos));\r\n    var tDelta = voxelSize / abs(objectRayDirection);\r\n    var tIncrement = min(tDelta.x, min(tDelta.y, tDelta.z));\r\n\r\n    for(var i = 0; i < MAX_COARSE_RAY_STEPS; i++)\r\n    {\r\n      let samplePosition = objectPos + voxelObject.atlasLocation;\r\n      let uv = samplePosition / vec3<f32>(textureDimensions(voxels));\r\n      let mipSample0 = textureSampleLevel(voxels, nearestSampler, uv, 0.0);\r\n\r\n      if(mipSample0.a > 0.0){\r\n          return true;\r\n      }\r\n\r\n      objectPos += objectRayDirection * tIncrement;\r\n      currentIndex = vec3<i32>(round(objectPos));\r\n//      if(!isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n//          break;\r\n//      }\r\n    }\r\n    return false;\r\n}\r\n\r\nfn rayMarchTransformedCoarse(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> bool {\r\n    var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n    let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n    return rayMarchCoarse(voxelObject, objectRayDirection, objectRayOrigin);\r\n}\r\n\r\n// Used for shadows, return first hit\r\nfn rayMarchBVHCoarse(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, maxDistance: f32) -> bool {\r\n  // Create a stack to store the nodes to visit\r\n      var stack = stack_new();\r\n      stack_push(&stack, 0);\r\n\r\n      var iterations = 0;\r\n      var nodeIndex = 0;\r\n\r\n      while (stack.head > 0u && iterations < 32) {\r\n        let node = bvhNodes[nodeIndex];\r\n        if(node.objectCount == 0){\r\n          nodeIndex = stack_pop(&stack);\r\n        }\r\n        // valid leaf, raymarch it\r\n        else if(node.objectCount == 1){\r\n            // Raymarch the voxel object if it's a leaf node\r\n            let voxelObject = voxelObjects[node.leftIndex]; // left index represents the voxel object index for leaf nodes\r\n            let AABBDist = getDistanceToNode(rayOrigin, rayDirection, node);\r\n            if(rayMarchTransformedCoarse(voxelObject, rayDirection, rayOrigin + rayDirection * AABBDist)){\r\n              return true;\r\n            }\r\n            // Pop the stack and continue\r\n            nodeIndex = stack_pop(&stack);\r\n        }\r\n        else{\r\n          let leftDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.leftIndex]);\r\n          let rightDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.rightIndex]);\r\n          let hitLeft = leftDist >= 0.0 && leftDist < maxDistance;\r\n          let hitRight = rightDist >= 0.0 && rightDist < maxDistance;\r\n          if(hitLeft){\r\n            var nearIndex = node.leftIndex;\r\n            // We hit both left and right, choose the closest one\r\n            if(hitRight){\r\n              if(leftDist < rightDist){\r\n                // left is closer, push right to stack\r\n                stack_push(&stack, node.rightIndex);\r\n              } else {\r\n                // right is closer, push left to stack\r\n                stack_push(&stack, node.leftIndex);\r\n                nearIndex = node.rightIndex;\r\n              }\r\n            }\r\n            nodeIndex = nearIndex;\r\n          }\r\n          // We only hit the right Node\r\n          else if(hitRight){\r\n            nodeIndex = node.rightIndex;\r\n          }\r\n          // We didn't hit any node, pop the stack\r\n          else{\r\n            nodeIndex = stack_pop(&stack);\r\n          }\r\n        }\r\n\r\n        iterations += 1;\r\n      }\r\n\r\n      return false;\r\n}"},8108:e=>{e.exports="const BRICK_SIZE = 8;\r\nconst MAX_STEPS = 256;\r\n\r\n\r\nstruct BVHNode {\r\n  leftIndex: i32,\r\n  rightIndex: i32,\r\n  objectCount: u32,\r\n  AABBMin: vec3<f32>,\r\n  AABBMax: vec3<f32>\r\n}\r\n\r\nfn getDistanceToNode(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, node: BVHNode) -> f32 {\r\n  if(all(rayOrigin >= node.AABBMin) && all(rayOrigin <= node.AABBMax)){\r\n    return 0.0;\r\n  }\r\n  let boxSize = (node.AABBMax - node.AABBMin) / 2;\r\n  let intersection = boxIntersection(rayOrigin - node.AABBMin, rayDirection, boxSize);\r\n  if(intersection.isHit){\r\n    return intersection.tNear;\r\n  }\r\n  return -1.0;\r\n\r\n}\r\n\r\n// Stack-based BVH traversal\r\nfn rayMarchBVH(rayOrigin: vec3<f32>, rayDirection: vec3<f32>) -> RayMarchResult {\r\n  var closestIntersection = RayMarchResult();\r\n closestIntersection.t = FAR_PLANE;\r\n\r\n  // Create a stack to store the nodes to visit\r\n  var stack = stack_new();\r\n  stack_push(&stack, 0);\r\n\r\n  var iterations = 0;\r\n  var nodeIndex = 0;\r\n  var closestRayMarchDistance = FAR_PLANE;\r\n\r\n  while (stack.head > 0u && iterations < MAX_STEPS) {\r\n    let node = bvhNodes[nodeIndex];\r\n    if(node.objectCount > 1){\r\n      let leftNode = bvhNodes[node.leftIndex];\r\n      let rightNode = bvhNodes[node.rightIndex];\r\n      let leftDist = getDistanceToNode(rayOrigin, rayDirection, leftNode);\r\n      let rightDist = getDistanceToNode(rayOrigin, rayDirection, rightNode);\r\n      let hitLeft = leftDist >= 0.0;\r\n      let hitRight = rightDist >= 0.0;\r\n      if(hitLeft){\r\n        var nearIndex = node.leftIndex;\r\n        // We hit both left and right, choose the closest one\r\n        if(hitRight){\r\n          if(leftDist < rightDist){\r\n            // left is closer, push right to stack\r\n            stack_push(&stack, node.rightIndex);\r\n          } else {\r\n            // right is closer, push left to stack\r\n            stack_push(&stack, node.leftIndex);\r\n            nearIndex = node.rightIndex;\r\n          }\r\n        }\r\n        nodeIndex = nearIndex;\r\n      }\r\n      // We only hit the right Node\r\n      else if(hitRight){\r\n        nodeIndex = node.rightIndex;\r\n      }\r\n      // We didn't hit any node, pop the stack\r\n      else{\r\n        nodeIndex = stack_pop(&stack);\r\n      }\r\n    }\r\n    // valid leaf, raymarch it\r\n    else if(node.objectCount == 1){\r\n        let distanceToLeaf = getDistanceToNode(rayOrigin, rayDirection, node);\r\n        if(distanceToLeaf > closestRayMarchDistance){\r\n          nodeIndex = stack_pop(&stack);\r\n          continue;\r\n        }\r\n        let worldPos = rayOrigin + rayDirection * distanceToLeaf;\r\n        let voxelObject = voxelObjects[node.leftIndex];\r\n         var rayMarchResult = rayMarchTransformed(voxelObject, rayDirection, worldPos, 0);\r\n//        var rayMarchResult = rayMarchOctree(voxelObject, rayDirection, worldPos, 3);\r\n        rayMarchResult.voxelObjectIndex = node.leftIndex;\r\n        rayMarchResult.t += distanceToLeaf;\r\n\r\n        let totalDistance = rayMarchResult.t;\r\n        if(rayMarchResult.hit && totalDistance < closestRayMarchDistance){\r\n          closestIntersection = rayMarchResult;\r\n          closestRayMarchDistance = totalDistance;\r\n        }\r\n\r\n        nodeIndex = stack_pop(&stack);\r\n    }\r\n\r\n    iterations += 1;\r\n//    closestIntersection.colour += vec3<f32>(0.0075);\r\n  }\r\n\r\n  return closestIntersection;\r\n}\r\n\r\nconst MAX_SHADOW_BVH_VISITS = 8;\r\n\r\nfn rayMarchBVHShadows(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, mipLevel: u32) -> RayMarchResult {\r\n   var closestIntersection = RayMarchResult();\r\n   closestIntersection.t = FAR_PLANE;\r\n\r\n   // Create a stack to store the nodes to visit\r\n   var stack = stack_new();\r\n   stack_push(&stack, 0);\r\n\r\n   var iterations = 0;\r\n   var nodeIndex = 0;\r\n\r\n   while (stack.head > 0u && iterations < MAX_SHADOW_BVH_VISITS) {\r\n     let node = bvhNodes[nodeIndex];\r\n     if(node.objectCount > 1){\r\n       let leftNode = bvhNodes[node.leftIndex];\r\n       let rightNode = bvhNodes[node.rightIndex];\r\n       let leftDist = getDistanceToNode(rayOrigin, rayDirection, leftNode);\r\n       let rightDist = getDistanceToNode(rayOrigin, rayDirection, rightNode);\r\n       let hitLeft = leftDist >= 0.0;\r\n       let hitRight = rightDist >= 0.0;\r\n       if(hitLeft){\r\n         var nearIndex = node.leftIndex;\r\n         // We hit both left and right, choose the closest one\r\n         if(hitRight){\r\n           if(leftDist < rightDist){\r\n             // left is closer, push right to stack\r\n             stack_push(&stack, node.rightIndex);\r\n           } else {\r\n             // right is closer, push left to stack\r\n             stack_push(&stack, node.leftIndex);\r\n             nearIndex = node.rightIndex;\r\n           }\r\n         }\r\n         nodeIndex = nearIndex;\r\n       }\r\n       // We only hit the right Node\r\n       else if(hitRight){\r\n         nodeIndex = node.rightIndex;\r\n       }\r\n       // We didn't hit any node, pop the stack\r\n       else{\r\n         nodeIndex = stack_pop(&stack);\r\n       }\r\n     }\r\n     // valid leaf, raymarch it\r\n     else if(node.objectCount == 1){\r\n         let distanceToLeaf = getDistanceToNode(rayOrigin, rayDirection, node);\r\n         if(distanceToLeaf < 0.0){\r\n           nodeIndex = stack_pop(&stack);\r\n           continue;\r\n         }\r\n         let worldPos = rayOrigin + rayDirection * distanceToLeaf;\r\n         let voxelObject = voxelObjects[node.leftIndex];\r\n         var rayMarchResult = rayMarchTransformed(voxelObject, rayDirection, worldPos, mipLevel);\r\n         rayMarchResult.t += distanceToLeaf;\r\n//       var rayMarchResult = rayMarchOctree(voxelObject, rayDirection, worldPos, 3);\r\n         rayMarchResult.voxelObjectIndex = node.leftIndex;\r\n         if(rayMarchResult.hit){\r\n           return rayMarchResult;\r\n         }\r\n\r\n         nodeIndex = stack_pop(&stack);\r\n     }\r\n\r\n     iterations += 1;\r\n //    closestIntersection.colour += vec3<f32>(0.0075);\r\n   }\r\n\r\n   return closestIntersection;\r\n }"},9133:e=>{e.exports="fn distanceToReversedNormalisedDepth(depth: f32, near: f32, far: f32) -> f32 {\r\n   return (far - depth) / (far - near);//Reversed\r\n}\r\n\r\nfn reversedNormalisedDepthToDistance(depth: f32, near: f32, far: f32) -> f32 {\r\n    return far - depth * (far - near); //Reversed\r\n}"},5805:e=>{e.exports="fn calculateRayDirection(uv: vec2<f32>, inverseProjection: mat4x4<f32>) -> vec3<f32> {\r\n  let clipSpace = vec2(1.0 - uv.x, 1.0 - uv.y) * 2.0 - 1.0;\r\n  let viewRay = vec3<f32>(clipSpace, 1.0);\r\n  let viewRayView = inverseProjection * vec4(viewRay, 1.0);\r\n  return normalize(viewRayView.xyz);\r\n}\r\n\r\nfn normaliseValue(min: f32, max: f32, value: f32) -> f32 {\r\n  return (value - min) / (max - min);\r\n}"},6258:e=>{e.exports="struct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  previousInverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};"},3307:e=>{e.exports="const EPSILON = 0.001;\r\nconst MAX_RAY_STEPS = 256;\r\nconst FAR_PLANE = 10000.0;\r\nconst NEAR_PLANE = 0.5;\r\nconst STACK_LEN: u32 = 32u;\r\n\r\n// Function to transform a normal vector from object to world space\r\nfn transformNormal(inverseTransform: mat4x4<f32>, normal: vec3<f32>) -> vec3<f32> {\r\n    let worldNormal = normalize((vec4<f32>(normal, 0.0) * inverseTransform).xyz);\r\n    return worldNormal;\r\n}\r\n\r\n// Function to transform an object space position to world space\r\nfn transformPosition(transform: mat4x4<f32>, position: vec3<f32>) -> vec3<f32> {\r\n    let worldPosition = (transform * vec4<f32>(position, 1.0)).xyz;\r\n    return worldPosition;\r\n}\r\n\r\nfn getMaxMipLevel(size: vec3<f32>) -> u32 {\r\n  return u32(log2(max(size.x, max(size.y, size.z))));\r\n}\r\n\r\nstruct Brick {\r\n  voxels: array<u32, 16>\r\n}\r\nstruct VoxelObject {\r\n  transform: mat4x4<f32>,\r\n  inverseTransform: mat4x4<f32>,\r\n  previousTransform: mat4x4<f32>,\r\n  previousInverseTransform: mat4x4<f32>,\r\n  size : vec3<f32>,\r\n  atlasLocation : vec3<f32>,\r\n  paletteIndex : f32,\r\n}\r\n\r\nstruct RayMarchResult {\r\n  voxelObjectIndex: i32,\r\n  palettePosition: f32,\r\n  normal: vec3<f32>,\r\n  hit: bool,\r\n  t: f32,\r\n}\r\n\r\nfn isInBounds(position: vec3<i32>, size: vec3<i32>) -> bool {\r\n  return all(position >= vec3(0)) && all(position <= size - vec3(1));\r\n}\r\n\r\nfn getMipLevelFromVoxelSize(voxelSize: vec3<f32>) -> u32 {\r\n  return u32(log2(max(voxelSize.x, max(voxelSize.y, voxelSize.z))));\r\n}\r\n\r\nfn convert1DTo3D(size: vec3<u32>, index: u32) -> vec3<u32> {\r\n  return vec3(\r\n    index % size.x,\r\n    index / size.y,\r\n    index / (size.x * size.y)\r\n  );\r\n}\r\n\r\nfn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\r\n  return position.x + position.y * size.x + position.z * (size.x * size.y);\r\n}\r\n\r\n\r\nfn doesBrickContainVoxels(brick: Brick) -> bool {\r\n  for(var i = 0; i < 16; i++){\r\n    if(brick.voxels[i] > 0){\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfn getBit(value: u32, bitIndex: u32) -> bool {\r\n  return (value & (1u << bitIndex)) != 0;\r\n}\r\n\r\n// gets bit in 512bit bitmask in a brick\r\n// bitIndex is the index of the bit in the bitmask, 0-511\r\nfn getBitInBrick(brick: Brick, bitIndex: u32) -> bool {\r\n  let maskIndex = bitIndex / 32;\r\n  let bitIndexInMask = bitIndex % 32;\r\n  return getBit(brick.voxels[maskIndex], bitIndexInMask);\r\n}\r\n\r\nfn getScaleFromMatrix(transform: mat4x4<f32>) -> vec3<f32> {\r\n  return vec3<f32>(length(transform[0].xyz), length(transform[1].xyz), length(transform[2].xyz));\r\n}\r\n\r\n\r\nfn rayMarchAtMip(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\r\n  var output = RayMarchResult();\r\n  let rayDirSign = sign(objectRayDirection);\r\n  let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\r\n  var voxelSize = vec3(f32(1 << mipLevel));\r\n  var shiftedRayOrigin = objectRayOrigin - objectRayDirection * EPSILON;\r\n  var objectPos = shiftedRayOrigin;\r\n  var currentIndex = vec3<i32>(floor(objectPos));\r\n  var scaledRayOrigin =  objectRayOrigin / voxelSize;\r\n  var scaledObjectPos = floor(objectPos / voxelSize);\r\n  var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\r\n  var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\r\n  let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\r\n  var objectNormal = mask * -rayDirSign;\r\n  var tCurrent = min(tMax.x, min(tMax.y, tMax.z));\r\n\r\n  // RAYMARCH\r\n  for(var i = 0; i < MAX_RAY_STEPS; i++)\r\n  {\r\n    let samplePosition = vec3<u32>(currentIndex) + atlasLocation;\r\n    let mipSample0 = textureLoad(voxels, samplePosition / vec3((1u << mipLevel)), mipLevel);\r\n\r\n    if(mipSample0.r > 0.0 && isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n        output.normal = objectNormal;\r\n        output.hit = true;\r\n        output.t = tCurrent + EPSILON;\r\n        output.palettePosition = mipSample0.r;\r\n        return output;\r\n    }\r\n\r\n    var scaledRayOrigin = shiftedRayOrigin / voxelSize;\r\n    var scaledObjectPos = floor(objectPos / voxelSize);\r\n    var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\r\n    var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\r\n    let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\r\n\r\n    tCurrent = min(tMax.x, min(tMax.y, tMax.z));\r\n    objectPos = objectRayOrigin + objectRayDirection * tCurrent;\r\n    currentIndex = vec3<i32>(floor(objectPos / voxelSize) * voxelSize);\r\n    objectNormal = mask * -rayDirSign;\r\n\r\n    if(!isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n        break;\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\nfn rayMarchTransformed(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\r\n      var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n      let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n      return  rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\r\n}\r\n\r\nfn rayMarchOctree(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, startingMipLevel: u32) -> RayMarchResult {\r\n   var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n   let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n   var output = RayMarchResult();\r\n   for(var mipLevel = startingMipLevel; mipLevel > 0; mipLevel--){\r\n     output = rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\r\n     if(output.hit){\r\n       objectRayOrigin += (output.t - EPSILON) * objectRayDirection;\r\n     }\r\n     else{\r\n      return output;\r\n     }\r\n   }\r\n   return rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, 0);\r\n}\r\n\r\nconst SHADOW_MIN_MIP_LEVEL =1u;\r\n\r\nfn rayMarchOctreeShadows(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, startingMipLevel: u32) -> RayMarchResult {\r\n   var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n   let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n   var output = RayMarchResult();\r\n   for(var mipLevel = startingMipLevel; mipLevel > SHADOW_MIN_MIP_LEVEL; mipLevel--){\r\n     output = rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\r\n     if(output.hit){\r\n       objectRayOrigin += (output.t - EPSILON) * objectRayDirection;\r\n     }\r\n     else{\r\n      return output;\r\n     }\r\n   }\r\n   return rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, SHADOW_MIN_MIP_LEVEL);\r\n}\r\n\r\n\r\nstruct Stack {\r\n  arr: array<i32, STACK_LEN>,\r\n\thead: u32,\r\n}\r\n\r\nfn stack_new() -> Stack {\r\n    var arr: array<i32, STACK_LEN>;\r\n    return Stack(arr, 0u);\r\n}\r\n\r\nfn stack_push(stack: ptr<function, Stack>, val: i32) {\r\n    (*stack).arr[(*stack).head] = val;\r\n    (*stack).head += 1u;\r\n}\r\n\r\nfn stack_pop(stack: ptr<function, Stack>) -> i32 {\r\n    (*stack).head -= 1u;\r\n    return (*stack).arr[(*stack).head];\r\n}\r\n\r\nconst colours = array<vec3<f32>, 6>(\r\n  vec3<f32>(1.0, 0.0, 0.0),\r\n  vec3<f32>(0.0, 1.0, 0.0),\r\n  vec3<f32>(0.0, 0.0, 1.0),\r\n  vec3<f32>(1.0, 1.0, 0.0),\r\n  vec3<f32>(1.0, 0.0, 1.0),\r\n  vec3<f32>(0.0, 1.0, 1.0)\r\n);\r\n\r\nfn debugColourFromIndex(index: i32) -> vec3<f32> {\r\n  return colours[index % 6];\r\n}\r\n\r\n\r\nconst OCTREE_CHILD_OFFSETS = array<vec3<i32>, 8>(\r\n  vec3<i32>(0, 0, 0),\r\n  vec3<i32>(1, 0, 0),\r\n  vec3<i32>(0, 1, 0),\r\n  vec3<i32>(1, 1, 0),\r\n  vec3<i32>(0, 0, 1),\r\n  vec3<i32>(1, 0, 1),\r\n  vec3<i32>(0, 1, 1),\r\n  vec3<i32>(1, 1, 1)\r\n);"},1219:e=>{e.exports="struct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  previousInverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\r\n\r\nstruct VoxelObject {\r\n  transform: mat4x4<f32>,\r\n  inverseTransform: mat4x4<f32>,\r\n  previousTransform: mat4x4<f32>,\r\n  previousInverseTransform: mat4x4<f32>,\r\n  size : vec3<f32>,\r\n  atlasLocation : vec3<f32>,\r\n  paletteIndex : f32,\r\n}\r\n\r\nstruct Time {\r\n  frame: u32,\r\n  deltaTime: f32,\r\n  elapsed: f32\r\n};\r\n\r\n// Textures\r\n@group(0) @binding(0) var albedoTex : texture_2d<f32>;\r\n@group(0) @binding(1) var velocityTex : texture_2d<f32>;\r\n@group(0) @binding(2) var depthTex : texture_2d<f32>;\r\n@group(0) @binding(3) var normalTex : texture_2d<f32>;\r\n@group(0) @binding(4) var shadowTex : texture_storage_2d<rgba16float, write>;\r\n@group(0) @binding(5) var shadowCopyTex : texture_2d<f32>;\r\n@group(0) @binding(6) var blueNoiseTex : texture_2d<f32>;\r\n@group(0) @binding(7) var<uniform> time : Time;\r\n\r\n// Camera\r\n@group(1) @binding(0) var<uniform> cameraPosition : vec3<f32>;\r\n@group(1) @binding(1) var<uniform> viewProjections : ViewProjectionMatrices;\r\n\r\n// Voxels\r\n@group(2) @binding(0) var<storage> voxelObjects : array<VoxelObject>;\r\n@group(2) @binding(1) var volumeAtlasTex : texture_3d<f32>;\r\n@group(2) @binding(2) var paletteTex : texture_2d<f32>;\r\n\r\n//\r\n//// Screen Rays\r\n//struct ScreenRay {\r\n//  pixel : vec2<u32>,\r\n//};\r\n//@group(3) @binding(0) var<storage, read_write> indirectArgs : array<atomic<u32>>;\r\n//@group(3) @binding(1) var<storage, read_write> screenRays : array<ScreenRay>;\r\n//@group(3) @binding(2) var<storage, read_write> counter : array<atomic<u32>>;\r\n\r\nconst neighborOffsets = array<vec2<i32>, 4>(\r\n  vec2<i32>(-2, -2),// bottom left\r\n  vec2<i32>(2, -2),// bottom right\r\n  vec2<i32>(-2, 2),// top left\r\n  vec2<i32>(2, 2)// top right\r\n);\r\n\r\nfn cubicInterpolate(p0: f32, p1: f32, p2: f32, p3: f32, t: f32) -> f32 {\r\n  let a = (3.0 * (p1 - p2) - p0 + p3) * 0.5;\r\n  let b = 2.0 * p2 + p0 - (5.0 * p1 + p3) * 0.5;\r\n  let c = (p2 - p0) * 0.5;\r\n  return ((a * t + b) * t + c) * t + p1;\r\n}\r\n\r\n// Normal is in voxel (object) space, so will only have 1 or -1 values on one axis\r\nfn checkSharedPlane(\r\n  normal : vec3<f32>,\r\n  voxelPos : vec3<f32>,\r\n  neighborVoxelPos : vec3<f32>,\r\n  neighborNormal : vec3<f32>\r\n) -> bool {\r\n  if(any(normal != neighborNormal)){\r\n  return false;\r\n  }\r\n  if(abs(neighborNormal.x) > 0.0){\r\n    return voxelPos.x == neighborVoxelPos.x;\r\n  }\r\n  if(abs(neighborNormal.y) > 0.0){\r\n    return voxelPos.y == neighborVoxelPos.y;\r\n  }\r\n  if(abs(neighborNormal.z) > 0.0){\r\n    return voxelPos.z == neighborVoxelPos.z;\r\n  }\r\n  return false;\r\n}\r\n\r\n// Increment the count of the ray buffers, and only increment the dispatch indirect args every 8 rays, due to the 64x1x1 workgroup size (8 ray groups, 8 rays per group)\r\n//fn incrementCounters() -> u32{\r\n//  let count = atomicAdd(&counter[0], 1);\r\n//  if(count % 8 == 0){\r\n//   atomicAdd(&indirectArgs[0], 1);\r\n//  }\r\n//  return count;\r\n//}\r\n\r\nfn hermiteBasis(t: f32) -> f32 {\r\n    // Example Hermite basis functions:\r\n    // h0(t) = 2t^3 - 3t^2 + 1\r\n    // h1(t) = -2t^3 + 3t^2\r\n    // h2(t) = t^3 - 2t^2 + t\r\n    // h3(t) = t^3 - t^2\r\n    return 2.0 * t * t * t - 3.0 * t * t + 1.0; // This is h0(t), similarly define others as needed\r\n}\r\n\r\nconst BLUE_NOISE_SIZE = 512;\r\n\r\n/**\r\n  * Interpolate the depth, normal and uv of the pixel from the 4 nearest neighbors\r\n  * if not valid for interpolation, add to a ray buffer for use in the next pass\r\n  * Ray buffer is a list of pixel groups that need to be re-marched at full resolution\r\n  * The stored value is the origin of the group ([0,0] in a [3x3] kernel)\r\n  */\r\n@compute @workgroup_size(16, 8, 1)\r\n fn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\r\n) {\r\n  let texSize = textureDimensions(albedoTex);\r\n\r\n  var blueNoisePixel = vec2<i32>(GlobalInvocationID.xy);\r\n  blueNoisePixel.x += i32(time.frame) * 32;\r\n  blueNoisePixel.y += i32(time.frame) * 16;\r\n  blueNoisePixel = blueNoisePixel % BLUE_NOISE_SIZE;\r\n  if(time.frame % 2 == 0){\r\n    blueNoisePixel.y = BLUE_NOISE_SIZE - blueNoisePixel.y;\r\n  }\r\n  if(time.frame % 3 == 0){\r\n    blueNoisePixel.x = BLUE_NOISE_SIZE - blueNoisePixel.x;\r\n  }\r\n\r\n  var r = textureLoad(blueNoiseTex, blueNoisePixel, 0).rg;\r\n//  let pixel = vec2<i32>(GlobalInvocationID.xy) + vec2<i32>(r * 3.0 - vec2(1.5));\r\n  let pixel = vec2<i32>(GlobalInvocationID.xy);\r\n  let uv = vec2<f32>(pixel) / vec2<f32>(texSize);\r\n  // Nearest even pixel\r\n  let nearestFilledPixel = vec2<i32>(round(vec2<f32>(GlobalInvocationID.xy) / 2.0) * 2.0);\r\n  let isOriginPixel = all(vec2<i32>(GlobalInvocationID.xy) == nearestFilledPixel);\r\n\r\n  let nearestUV = vec2<f32>(nearestFilledPixel) / vec2<f32>(texSize);\r\n  let velocityRef = textureLoad(velocityTex, nearestFilledPixel, 0);\r\n\r\n  var hasFoundObject = false;\r\n  // Check if each neightbor is the same object, object index is stored in the alpha channel of the velocity texture\r\n  for(var i = 1; i < 4; i = i + 1) {\r\n    let objectIndex = textureLoad(velocityTex, nearestFilledPixel + neighborOffsets[i], 0).a;\r\n    if(objectIndex != velocityRef.a) {\r\n       if(isOriginPixel){\r\n         // Add to ray buffer\r\n//         let count = incrementCounters();\r\n//         screenRays[count].pixel = vec2<u32>(pixel);\r\n       }\r\n       else {\r\n        textureStore(shadowTex, pixel, vec4(0.0));\r\n       }\r\n       return;\r\n    }\r\n    if(objectIndex != -1.0) {\r\n      hasFoundObject = true;\r\n    }\r\n  }\r\n  if(!hasFoundObject) {\r\n    // Dont march any more rays - we have hit the sky\r\n    return;\r\n  }\r\n  let voxelObject = voxelObjects[i32(velocityRef.a)];\r\n  let shadowRef = textureLoad(shadowCopyTex, nearestFilledPixel, 0).r;\r\n  let depthRef = textureLoad(depthTex, nearestFilledPixel, 0).r;\r\n  let normalRef = textureLoad(normalTex, nearestFilledPixel, 0).xyz;\r\n  let localNormal = (voxelObject.inverseTransform * vec4(normalRef, 0.0)).xyz;\r\n  let rayDirection = calculateRayDirection(nearestUV, viewProjections.inverseViewProjection);\r\n  let worldPosRef = cameraPosition + rayDirection * depthRef;\r\n  let localPosRef = (voxelObject.inverseTransform * vec4(worldPosRef, 1.0)).xyz;\r\n  let voxelPosRef = floor(localPosRef);\r\n\r\n  // Check if each neightbor is the same voxel plane\r\n  for(var i = 0; i < 4; i = i + 1) {\r\n    let neighborPixel = nearestFilledPixel + neighborOffsets[i];\r\n    let neighborUV = vec2<f32>(neighborPixel) / vec2<f32>(texSize);\r\n    let neighborDepth = textureLoad(depthTex, neighborPixel, 0).r;\r\n    let neighborNormal = textureLoad(normalTex, neighborPixel, 0).xyz;\r\n    let neighborLocalNormal = (voxelObject.inverseTransform * vec4(neighborNormal, 0.0)).xyz;\r\n    let neighborRayDirection = calculateRayDirection(neighborUV, viewProjections.inverseViewProjection);\r\n    let neighborWorldPos = cameraPosition + neighborRayDirection * neighborDepth;\r\n    let neighborLocalPos = (voxelObject.inverseTransform * vec4(neighborWorldPos, 1.0)).xyz;\r\n    let neighborVoxelPos = floor(neighborLocalPos);\r\n\r\n    if(!checkSharedPlane(localNormal, voxelPosRef, neighborVoxelPos, neighborLocalNormal)) {\r\n      if(isOriginPixel){\r\n        // Add to ray buffer\r\n//        let count = incrementCounters();\r\n//        screenRays[count].pixel = vec2<u32>(pixel);\r\n      }else{\r\n        textureStore(shadowTex, pixel, vec4(0.0));\r\n      }\r\n      return;\r\n    }\r\n  }\r\n\r\n  let steps = select(5,13,uv.x> 0.5);\r\n  let maxDistance = distance(vec2(0.0), vec2(4.0));\r\n\r\n  var totalWeight = 0.0;\r\n  var shadow = vec3(0.0);\r\n\r\n  // Interpolate\r\n\r\n  for(var x = -4; x <= 4; x += 2){\r\n    for(var y = -4; y <= 4; y += 2){\r\n      let offsetPixel = nearestFilledPixel + vec2<i32>(x, y);\r\n      let distanceToPixel = distance(vec2<f32>(offsetPixel), vec2<f32>(pixel));\r\n      // Normalize distance to a parameter t in the range [0, 1] based on a chosen scale\r\n      let t = clamp(distanceToPixel / maxDistance, 0.0, 1.0);\r\n      // Calculate weight using Hermite basis function\r\n      let weight = hermiteBasis(t);\r\n      // Accumulate the weighted color\r\n      shadow += textureLoad(shadowCopyTex, offsetPixel, 0).rgb * weight;\r\n      totalWeight += weight;\r\n    }\r\n  }\r\n\r\n  shadow /= totalWeight;\r\n\r\n  textureStore(shadowTex, pixel, vec4(shadow, 1));\r\n}"},7328:e=>{e.exports="\r\n// TODO: offset in object space instead of world space to scale with object size\r\nfn diffuseRay(worldPos: vec3<f32>, shadowRayDirection: vec3<f32>, normal: vec3<f32>, voxelObjectSize: f32) -> bool {\r\n  let rayOrigin = worldPos + normal * 0.005;\r\n  return rayMarchBVHShadows(rayOrigin, shadowRayDirection, 0).hit;\r\n}\r\n\r\nfn shadowRay(worldPos: vec3<f32>, shadowRayDirection: vec3<f32>, normal: vec3<f32>, voxelObjectSize: f32) -> bool {\r\n  let rayOrigin = worldPos + normal * 0.005;\r\n  return rayMarchBVHShadows(rayOrigin, shadowRayDirection, 0).hit;\r\n}\r\n\r\n\r\nconst SUN_COLOR = vec3(0.6,0.5,0.4) * 200.0;\r\nconst MOON_COLOR = vec3<f32>(0.5, 0.5, 1.0);\r\nconst SUBPIXEL_SAMPLE_POSITIONS: array<vec2<f32>, 8> = array<vec2<f32>, 8>(\r\n  vec2<f32>(0.25, 0.25),\r\n  vec2<f32>(0.75, 0.25),\r\n  vec2<f32>(0.25, 0.75),\r\n  vec2<f32>(0.75, 0.75),\r\n  vec2<f32>(0.125, 0.125),\r\n  vec2<f32>(0.375, 0.125),\r\n  vec2<f32>(0.625, 0.125),\r\n  vec2<f32>(0.875, 0.125)\r\n);\r\nconst BLUE_NOISE_SIZE = 511;\r\nconst SUN_DIRECTION: vec3<f32> = vec3<f32>(1.0,-1.0,-1.0);\r\nconst SKY_COLOUR: vec3<f32> = vec3<f32>(0.6, 0.8, 0.9);\r\nconst SHADOW_ACNE_OFFSET: f32 = 0.005;\r\nconst SCATTER_AMOUNT: f32 = 0.01;\r\n//const POSITION_SCATTER_AMOUNT: f32 = 0.1;\r\n//const SCATTER_AMOUNT: f32 = 0.00;\r\nconst POSITION_SCATTER_AMOUNT: f32 = 0.00;\r\n\r\nfn blinnPhong(normal: vec3<f32>, lightDirection: vec3<f32>, viewDirection: vec3<f32>, specularStrength: f32, shininess: f32, lightColour: vec3<f32>) -> vec3<f32> {\r\n  let halfDirection = normalize(lightDirection + viewDirection);\r\n  let diffuse = max(dot(normal, lightDirection), 0.0);\r\n  let specular = pow(max(dot(normal, halfDirection), 0.0), shininess);\r\n  return (diffuse + specular * specularStrength) * lightColour;\r\n}\r\n\r\nstruct Light {\r\n  direction: vec3<f32>,\r\n  colour: vec3<f32>,\r\n};\r\n\r\n// Function to remap the blue noise value to a sample index\r\nfn remapToSampleIndex(blueNoiseValue: f32, numSamples: u32) -> u32 {\r\n    // Map blue noise value to the index range [0, numSamples)\r\n    return u32(blueNoiseValue * f32(numSamples));\r\n}\r\n\r\nfn randomInCosineWeightedHemisphere(r: vec2<f32>, normal: vec3<f32>) -> vec3<f32> {\r\n  let r1 = 2.0 * PI * r.x;\r\n  let r2 = r.y;\r\n  let r2s = sqrt(r2);\r\n  let w = normal;\r\n  let u = normalize(cross((select(vec3<f32>(1.0, 0.0, 0.0), vec3<f32>(0.0, 1.0, 0.0),abs(w.x) > 0.1)), w));\r\n  let v = cross(w, u);\r\n  return normalize(u * cos(r1) * r2s + v * sin(r1) * r2s + w * sqrt(1.0 - r2));\r\n}\r\n\r\nconst SAMPLES_PER_PIXEL = 1u;\r\nconst SAMPLE_OFFSETS: array<vec2<i32>, 4> = array<vec2<i32>, 4>(\r\n  vec2<i32>(0, 0),\r\n  vec2<i32>(1, 1),\r\n  vec2<i32>(0, 1),\r\n  vec2<i32>(1, 0),\r\n);\r\n\r\n@compute @workgroup_size(16, 8, 1)\r\nfn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let pixel = vec2<i32>(GlobalInvocationID.xy) * 2;\r\n\r\n  let uv = (vec2<f32>(pixel) + vec2(0.5)) / vec2<f32>(textureDimensions(outputTex));\r\n\r\n  let outputPixel = pixel;\r\n  var normalSample = textureLoad(normalTex, pixel, 0).rgb;\r\n  let worldPosSample = textureLoad(worldPosTex, pixel, 0);\r\n  let voxelObject = voxelObjects[i32(worldPosSample.a)];\r\n  let axisScales = getScaleFromMatrix(voxelObject.transform);\r\n  let voxelObjectScale = axisScales.x * axisScales.y * axisScales.z;\r\n\r\n  let depthSample = textureLoad(depthTex, pixel, 0).r;\r\n  if(depthSample < 0.00001){ // SKY\r\n    textureStore(outputTex, outputPixel, vec4(0.0));\r\n    return;\r\n  }\r\n  let rayDirection = calculateRayDirection(uv, viewProjections.inverseViewProjection);\r\n\r\n  var worldPos = worldPosSample.rgb;\r\n\r\n  var samplePixel = outputPixel;\r\n  samplePixel.x += i32(time.frame) * 32;\r\n  samplePixel.y += i32(time.frame) * 16;\r\n  var blueNoisePixel = (samplePixel / 2) % BLUE_NOISE_SIZE;\r\n  if(time.frame % 2 == 0){\r\n    blueNoisePixel.y = BLUE_NOISE_SIZE - blueNoisePixel.y;\r\n  }\r\n  if(time.frame % 3 == 0){\r\n    blueNoisePixel.x = BLUE_NOISE_SIZE - blueNoisePixel.x;\r\n  }\r\n  var r = textureLoad(blueNoiseTex, blueNoisePixel, 0).rg;\r\n  let sampleWorldPos = worldPos + randomInPlanarUnitDisk(r, normalSample) * POSITION_SCATTER_AMOUNT;\r\n\r\n  var radiance = vec3(0.1);\r\n\r\n  // Calculate the probability of sampling the sun\r\n//  let sunProbability = clamp(dot(normalSample, sunDirection) * 0.5, 0.0, 1.0) * 0.5;\r\n  let sunProbability = 0.05;\r\n  // Calculate the probability of sampling the diffuse light\r\n  let diffuseProbability = 1.0 - sunProbability;\r\n\r\n// TODO: push to buffer instead and evaluate in a separate pass\r\n  if(r.x < sunProbability){\r\n    let shadowRayDirection = sunDirection + randomInCosineWeightedHemisphere(r, sunDirection) * SCATTER_AMOUNT;\r\n    if(!shadowRay(sampleWorldPos, shadowRayDirection, normalSample, voxelObjectScale)){\r\n      let viewDirection = normalize(cameraPosition - worldPos);\r\n      let diffuse = max(dot(normalSample, sunDirection), 0.0);\r\n      let specular = pow(max(dot(normalSample, normalize(sunDirection + viewDirection)), 0.0), 32.0);\r\n      let lightIntensity = SUN_COLOR * (diffuse + specular);\r\n      radiance += lightIntensity;\r\n    }\r\n  } else{\r\n     var diffuseDirection = randomInCosineWeightedHemisphere(r, normalSample);\r\n     if(!diffuseRay(sampleWorldPos, diffuseDirection, normalSample, voxelObjectScale)){\r\n          let sky = textureSampleLevel(skyCube, linearSampler, diffuseDirection, 0.0);\r\n          radiance += clamp(vec3(sky.rgb), vec3(0.0), vec3(32.0));\r\n      }\r\n  }\r\n\r\n  textureStore(outputTex, outputPixel, vec4(radiance, 1.0));\r\n}\r\n\r\nconst PI = 3.1415926535897932384626433832795;\r\n\r\nfn polarToCartesian(angle: f32, radius: f32) -> vec2<f32> {\r\n  let radians = angle * PI / 180.0;\r\n  let x = radius * cos(radians);\r\n  let y = radius * sin(radians);\r\n  return vec2<f32>(x, y);\r\n}\r\n\r\nfn calculateVariance(neighborhood: array<vec3<f32>, 9>) -> f32 {\r\n    var mean: vec3<f32> = vec3<f32>(0.0);\r\n    var variance: f32 = 0.0;\r\n\r\n    // Calculate the mean\r\n    for (var i = 0; i < 9; i = i + 1) {\r\n        mean = mean + neighborhood[i];\r\n    }\r\n    mean = mean / 9.0;\r\n\r\n    // Calculate the variance\r\n    for (var i = 0; i < 9; i = i + 1) {\r\n        var diff = length(neighborhood[i] - mean);\r\n        variance = variance + diff * diff;\r\n    }\r\n\r\n    return variance / 9.0;\r\n}\r\n\r\n\r\nconst NEIGHBORHOOD_SAMPLE_POSITIONS = array<vec2<i32>, 8>(\r\n    vec2<i32>(-1, -1),\r\n    vec2<i32>(0, -1),\r\n    vec2<i32>(1, -1),\r\n    vec2<i32>(-1, 0),\r\n    vec2<i32>(1, 0),\r\n    vec2<i32>(-1, 1),\r\n    vec2<i32>(0, 1),\r\n    vec2<i32>(1, 1)\r\n);\r\n\r\nconst DEPTH_SENSITIVITY = 5000.0;\r\nconst BLUR_RADIUS = 2.0;\r\nconst GOLDEN_RATIO = 1.61803398875;\r\n\r\n@compute @workgroup_size(16, 8, 1)\r\nfn denoise(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let texSize = textureDimensions(outputTex);\r\n  let texelSize = 1.0 / vec2<f32>(texSize);\r\n  let pixel = vec2<i32>(GlobalInvocationID.xy);\r\n  let uv = (vec2<f32>(pixel) + vec2(0.5)) / vec2<f32>(texSize);\r\n  let albedoSample = textureLoad(albedoTex, pixel, 0);\r\n  let normalRef = textureLoad(normalTex, pixel, 0).rgb;\r\n  let depthRef = textureLoad(depthTex, pixel, 0).r;\r\n  let shadowRef = textureLoad(intermediaryTexture, pixel, 0);\r\n\r\n  // Temporal sampling\r\n  let uvVelocity: vec2<f32> = textureLoad(velocityAndWaterTex, pixel, 0).xy;\r\n  let previousUv = uv - uvVelocity;\r\n  let previousPixel = vec2<i32>(previousUv * vec2<f32>(texSize));\r\n  var previousShadow = textureSampleLevel(previousTex, linearSampler, previousUv, 0);\r\n\r\n\r\n  // Clamp the history sample to the min and max of the 3x3 neighborhood\r\n  var minCol = shadowRef;\r\n  var maxCol = shadowRef;\r\n  for (var x: i32 = -1; x <= 1; x = x + 1) {\r\n      for (var y: i32 = -1; y <= 1; y = y + 1) {\r\n          let neighbourPixel = clamp(vec2(i32(pixel.x) + x, i32(pixel.y) + y), vec2(0), vec2(i32(texSize.x - 1), i32(texSize.y - 1)));\r\n          let s = textureLoad(intermediaryTexture, neighbourPixel, 0);\r\n          minCol = min(minCol, s);\r\n          maxCol = max(maxCol, s);\r\n      }\r\n  }\r\n  previousShadow = clamp(previousShadow, minCol, maxCol);\r\n\r\n  // Get variance of the 3x3 neighborhood\r\n  let previousShadowNeighbourhood = array<vec3<f32>, 9>(\r\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel), 0).rgb,\r\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[0], 0).rgb,\r\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[1], 0).rgb,\r\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[2], 0).rgb,\r\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[3], 0).rgb,\r\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[4], 0).rgb,\r\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[5], 0).rgb,\r\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[6], 0).rgb,\r\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[7], 0).rgb\r\n  );\r\n\r\n  let variance = clamp(calculateVariance(previousShadowNeighbourhood), 0.0, 1.0);\r\n\r\n  // Bilateral blur\r\n  var outputColour = shadowRef;\r\n  var totalWeight = 1.0;\r\n  let golden_angle = 137.5; // The golden angle in degrees\r\n  let taps = i32(clamp(variance * 32.0, 0, 16));\r\n//  let taps = 8;\r\n\r\n  for(var i = 0; i <= taps; i++){\r\n      let angle = (golden_angle * f32(i)) % 360.0;\r\n      let radius = f32(i) * 0.5;\r\n      let sampleUV = polarToCartesian(angle, radius) * texelSize + uv;\r\n      let samplePixel = vec2<i32>(sampleUV * vec2<f32>(texSize));\r\n      let normalSample = textureSampleLevel(normalTex, nearestSampler, sampleUV, 0.0).rgb;\r\n      let depthLoad = textureLoad(depthTex, samplePixel, 0).r;\r\n      let shadowSample = textureSampleLevel(intermediaryTexture, linearSampler, sampleUV, 0.0);\r\n      let normalWeight = dot(normalSample, normalRef);\r\n      let depthWeight = clamp(1.0 - abs(depthRef - depthLoad) * DEPTH_SENSITIVITY, 0.0, 1.0);\r\n//      let weight = depthWeight * normalWeight;\r\n      let weight = normalWeight;\r\n      totalWeight += weight;\r\n      outputColour += shadowSample * weight;\r\n  }\r\n  outputColour /= totalWeight;\r\n//  textureStore(outputTex, pixel, vec4(variance * 16.0));\r\n  textureStore(outputTex, pixel, shadowRef);\r\n//  textureStore(outputTex, pixel, mix(shadowRef, previousShadow, 0.5));\r\n//  textureStore(outputTex, pixel, mix(outputColour, previousShadow, 0.5));\r\n//  textureStore(outputTex, pixel, vec4(f32(taps)));\r\n//  textureStore(outputTex, pixel, vec4(totalWeight / f32(taps)));\r\n//  textureStore(outputTex, pixel, vec4(shadowVariance * 32.0));\r\n}\r\n\r\n@compute @workgroup_size(16, 8, 1)\r\nfn composite(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let texSize = textureDimensions(outputTex);\r\n  let texelSize = 1.0 / vec2<f32>(texSize);\r\n  let pixel = vec2<i32>(GlobalInvocationID.xy);\r\n  let shadowRef = textureLoad(intermediaryTexture, pixel, 0);\r\n  let depthRef = textureLoad(depthTex, pixel, 0).r;\r\n  let normalRef = textureLoad(normalTex, pixel, 0).rgb;\r\n  let uv = (vec2<f32>(pixel) + vec2(0.5)) / vec2<f32>(texSize);\r\n\r\n  // Bilateral blur\r\n  var outputColour = shadowRef;\r\n  var totalWeight = 1.0;\r\n  let golden_angle = 137.5; // The golden angle in degrees\r\n  let taps = 8;\r\n\r\n   for(var i = 0; i <= taps; i++){\r\n       let angle = (golden_angle * f32(i)) % 360.0;\r\n       let radius =  f32(i) * 0.5;\r\n       let sampleUV = polarToCartesian(angle, radius) * texelSize + uv;\r\n       let samplePixel = vec2<i32>(sampleUV * vec2<f32>(texSize));\r\n       let normalSample = textureSampleLevel(normalTex, nearestSampler, sampleUV, 0.0).rgb;\r\n       let depthLoad = textureLoad(depthTex, samplePixel, 0).r;\r\n       let shadowSample = textureSampleLevel(intermediaryTexture, linearSampler, sampleUV, 0.0);\r\n       let normalWeight = dot(normalSample, normalRef);\r\n       let depthWeight = clamp(1.0 - abs(depthRef - depthLoad) * DEPTH_SENSITIVITY, 0.0, 1.0);\r\n       let weight = depthWeight * normalWeight;\r\n       totalWeight += weight;\r\n       outputColour += shadowSample * weight;\r\n    }\r\n    outputColour /= totalWeight;\r\n\r\n  let albedoRef = textureLoad(albedoTex, pixel, 0);\r\n   textureStore(outputTex, pixel,shadowRef);\r\n//  textureStore(outputTex, pixel,shadowRef * albedoRef);\r\n//  textureStore(outputTex, pixel,outputColour * albedoRef);\r\n}\r\n"},117:e=>{e.exports="const PI\t \t= 3.141592;\r\nconst EPSILON_NRM = 0.0001; // TODO: use resolution to normalize\r\n\r\nstruct Time {\r\n  frame: u32,\r\n  deltaTime: f32,\r\n  elapsed: f32\r\n};\r\n\r\n// Cloud parameters\r\nconst EARTH_RADIUS = 6300e3;\r\nconst CLOUD_START = 600.0;\r\nconst CLOUD_HEIGHT = 600.0;\r\nconst SUN_POWER = vec3(0.6,0.5,0.4) * 800.0;\r\nconst LOW_SCATTER = vec3(0.6,0.4,0.3)  * 10.0;\r\nconst MAX_DISTANCE = 10000.0;\r\n\r\n@group(0) @binding(0) var depth : texture_2d<f32>;\r\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\r\n@group(0) @binding(2) var outputTex : texture_storage_2d<rgba16float, write>;\r\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\r\n@group(0) @binding(4) var<uniform> sunDirection : vec3<f32>;\r\n@group(0) @binding(5) var<uniform> time : Time;\r\n@group(0) @binding(6) var blueNoiseTex : texture_2d<f32>;\r\n@group(0) @binding(7) var pebbleTex : texture_2d<f32>;\r\n@group(0) @binding(8) var linearSampler : sampler;\r\n@group(0) @binding(9) var<uniform> cameraPosition : vec3<f32>;\r\n@group(0) @binding(10) var worldPosTex : texture_2d<f32>;\r\n@group(1) @binding(1) var skyCube : texture_cube<f32>;\r\n@group(1) @binding(2) var skyCubeWrite : texture_storage_2d_array<rgba16float, write>;\r\n@group(1) @binding(3) var lastSkyCube : texture_2d_array<f32>;\r\n\r\n\r\n\r\n// Noise generation functions (by iq)\r\nfn hash( n: f32 ) -> f32\r\n{\r\n    return fract(sin(n)*43758.5453);\r\n}\r\n\r\nfn hash2( p: vec2<f32> ) -> f32 {\r\n    return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123);\r\n}\r\n\r\nfn sampleBlueNoise( uv: vec2<f32> ) -> vec2<f32>\r\n{\r\n    return textureSampleLevel(blueNoiseTex, linearSampler, uv, 0.0).rg;\r\n}\r\n\r\nfn samplePebbles( uv: vec2<f32> ) -> f32\r\n{\r\n  return textureSampleLevel(pebbleTex, linearSampler, uv, 0.0).r;\r\n}\r\n\r\nfn noise3( x:vec3<f32> ) -> f32\r\n{\r\n  var p = floor(x);\r\n  var f = fract(x);\r\n  f = f*f*(3.0 - 2.0 *f);\r\n\tlet uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\r\n\tlet rg = sampleBlueNoise((uv+0.5)/256.0).yx;\r\n\treturn mix( rg.x, rg.y, f.z );\r\n}\r\n\r\nfn noise2( p:vec2<f32> ) -> f32\r\n{\r\n  let i = floor( p );\r\n  var f = fract( p );\r\n\tf = f*f*(3.0 - 2.0*f);\r\n  return -1.0+2.0*mix( mix( hash2( i + vec2(0.0,0.0) ),\r\n                     hash2( i + vec2(1.0,0.0) ), f.x),\r\n                mix( hash2( i + vec2(0.0,1.0) ),\r\n                     hash2( i + vec2(1.0,1.0) ), f.x), f.y);\r\n}\r\n\r\nfn fbm( p: vec3<f32> ) -> f32\r\n{\r\n    var pCopy = p;\r\n    let m = mat3x3<f32>( 0.00,  0.80,  0.60,\r\n              -0.80,  0.36, -0.48,\r\n              -0.60, -0.48,  0.64 );\r\n    var f = 0.5000*noise3( pCopy );\r\n    pCopy = m*pCopy*2.02;\r\n    f += 0.2500*noise3( pCopy );\r\n    pCopy = m*pCopy*2.03;\r\n    f += 0.1250*noise3( pCopy );\r\n    return f;\r\n}\r\n\r\nfn intersectSphere(origin: vec3<f32>, dir: vec3<f32>, spherePos: vec3<f32>, sphereRad: f32) -> f32\r\n{\r\n\tlet oc = origin - spherePos;\r\n\tlet b = 2.0 * dot(dir, oc);\r\n\tlet c = dot(oc, oc) - sphereRad*sphereRad;\r\n\tlet disc = b * b - 4.0 * c;\r\n\tif (disc < 0.0)\r\n\t{\r\n\t  return -1.0;\r\n\t}\r\n\r\n//    float q = (-b + ((b < 0.0) ? -sqrt(disc) : sqrt(disc))) / 2.0;\r\n  let q = (-b + select(sqrt(disc), -sqrt(disc), b < 0.0)) / 2.0;\r\n\tvar t0 = q;\r\n\tvar t1 = c / q;\r\n\tif (t0 > t1) {\r\n\t\tvar temp = t0;\r\n\t\tt0 = t1;\r\n\t\tt1 = temp;\r\n\t}\r\n\tif (t1 < 0.0){\r\n\t  return -1.0;\r\n\t}\r\n\r\n  return select(t0, t1, t0 < 0.0);\r\n}\r\n\r\n// TODO: pass time buffer\r\n\r\n// return the density of clouds at a given point, and height\r\nfn clouds(p: vec3<f32>, t: f32) -> vec2<f32>\r\n{\r\n    var pCopy = p;\r\n    let atmoHeight = length(p - vec3(0.0, -EARTH_RADIUS, 0.0)) - EARTH_RADIUS;\r\n    let cloudHeight = clamp((atmoHeight-CLOUD_START)/(CLOUD_HEIGHT), 0.0, 1.0);\r\n    pCopy.z += t*40;\r\n    let largeWeather = clamp((samplePebbles(-0.00005*pCopy.zx) - 0.18)*5.0, 0.0, 2.0);\r\n    //let largeWeather = 1.0;\r\n    pCopy.x += t*32;\r\n    var weather = largeWeather*max(0.0,samplePebbles(0.0002*pCopy.zx) - 0.28)/0.72;\r\n    weather *= smoothstep(0.0, 0.5, cloudHeight) * smoothstep(1.0, 0.5, cloudHeight);\r\n    let cloudShape = pow(weather, 0.3+1.5*smoothstep(0.2, 0.5, cloudHeight));\r\n    if(cloudShape <= 0.0){\r\n        return vec2(0.0, cloudHeight);\r\n    }\r\n    pCopy.x += t*48;\r\n\t  var den= max(0.0, cloudShape - 0.7*fbm(p*.01));\r\n    if(den <= 0.0){\r\n        return vec2(0.0, cloudHeight);\r\n    }\r\n    pCopy.y += t*60;\r\n    den= max(0.0, den - 0.2*fbm(p*0.05));\r\n    return vec2(largeWeather*0.2*min(1.0, 5.0*den), cloudHeight);\r\n}\r\n\r\n// From https://www.shadertoy.com/view/4sjBDG\r\nfn numericalMieFit( costh: f32) -> f32\r\n{\r\n    // This function was optimized to minimize (delta*delta)/reference in order to capture\r\n    // the low intensity behavior.\r\n    var bestParams = array<f32, 10>();\r\n    bestParams[0]=9.805233e-06;\r\n    bestParams[1]=-6.500000e+01;\r\n    bestParams[2]=-5.500000e+01;\r\n    bestParams[3]=8.194068e-01;\r\n    bestParams[4]=1.388198e-01;\r\n    bestParams[5]=-8.370334e+01;\r\n    bestParams[6]=7.810083e+00;\r\n    bestParams[7]=2.054747e-03;\r\n    bestParams[8]=2.600563e-02;\r\n    bestParams[9]=-4.552125e-12;\r\n\r\n    var p1 = costh + bestParams[3];\r\n    let expValues = exp(vec4(bestParams[1] *costh+bestParams[2], bestParams[5] *p1*p1, bestParams[6] *costh, bestParams[9] *costh));\r\n    let expValWeight= vec4(bestParams[0], bestParams[4], bestParams[7], bestParams[8]);\r\n    return dot(expValues, expValWeight);\r\n}\r\n\r\nfn lightRay(p: vec3<f32>, phaseFunction: f32, dC: f32, mu: f32, sun_direction: vec3<f32>, cloudHeight: f32, t: f32) -> f32\r\n{\r\n    let nbSampleLight = 6;\r\n\t  let zMaxl         = 200.;\r\n    let stepL         = zMaxl/f32(nbSampleLight);\r\n    var pCopy = p;\r\n    var cloudHeightCopy = 0.0;\r\n\r\n    var lighRayDen = 0.0;\r\n    pCopy += sun_direction*stepL*hash(dot(pCopy, vec3(12.256, 2.646, 6.356)) + t * 4);\r\n    for(var j=0; j<nbSampleLight; j++)\r\n    {\r\n        let cloudsResult = clouds( pCopy + sun_direction*f32(j)*stepL, time.elapsed);\r\n        lighRayDen += cloudsResult.x;\r\n        cloudHeightCopy = cloudsResult.y;\r\n    }\r\n    let scatterAmount = mix(0.008, 1.0, smoothstep(0.96, 0.0, mu));\r\n    let beersLaw = exp(-stepL*lighRayDen)+0.5*scatterAmount*exp(-0.1*stepL*lighRayDen)+scatterAmount*0.4*exp(-0.02*stepL*lighRayDen);\r\n    return beersLaw * phaseFunction * mix(0.05 + 1.5*pow(min(1.0, dC*8.5), 0.3+5.5*cloudHeightCopy), 1.0, clamp(lighRayDen*0.4, 0.0, 1.0));\r\n}\r\n\r\n\r\nfn Schlick (f0: f32, VoH: f32 ) -> f32\r\n{\r\n\treturn f0+(1.-f0)*pow(1.0-VoH,5.0);\r\n}\r\n\r\nfn skyRay(org: vec3<f32>, dir: vec3<f32>,sun_direction: vec3<f32>) -> vec3<f32>\r\n{\r\n\r\n  let ATM_START = EARTH_RADIUS+CLOUD_START;\r\n\tlet ATM_END = ATM_START+CLOUD_HEIGHT;\r\n\r\n  let nbSample = 8;\r\n  var color = vec3(0.0);\r\n  let distToAtmStart = intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_START);\r\n  let distToAtmEnd = intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_END);\r\n  var p = org + distToAtmStart * dir;\r\n\r\n  let stepS = (distToAtmEnd-distToAtmStart) / f32(nbSample);\r\n  var T = 1.;\r\n  let mu = dot(sun_direction, dir);\r\n  let phaseFunction = numericalMieFit(mu);\r\n  p += dir*stepS*hash(dot(dir, vec3(12.256, 2.646, 6.356)) + time.elapsed * 4);\r\n  if(dir.y > 0.01){\r\n    for(var i=0; i<nbSample; i++)\r\n    {\r\n      if(distance(p, org) > MAX_DISTANCE){\r\n        break;\r\n      }\r\n      let cloudResult = clouds(p, time.elapsed);\r\n      let cloudHeight = cloudResult.y;\r\n      let density = cloudResult.x;\r\n      if(density>0.)\r\n      {\r\n        let intensity = lightRay(p, phaseFunction, density, mu, sun_direction, cloudHeight, time.elapsed);\r\n        let ambient = (0.5 + 0.6*cloudHeight)*vec3(0.2, 0.5, 1.0)*6.5 + vec3(0.8) * max(0.0, 1.0 - 2.0*cloudHeight);\r\n        var radiance = ambient + SUN_POWER*intensity;\r\n        radiance*=density;\r\n        color += T*(radiance - radiance * exp(-density * stepS)) / density;   // By Seb Hillaire\r\n        T *= exp(-density*stepS);\r\n        if( T <= 0.05){\r\n          break;\r\n        }\r\n      }\r\n      p += dir*stepS;\r\n    }\r\n  }\r\n\r\n  let pC = org + intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_END+1000.0)*dir;\r\n  // high clouds\r\n  color += T*vec3(3.0)*max(0.0, fbm(vec3(1.0, 1.0, 1.8)*pC*0.002) - 0.4);\r\n\r\n\tvar background = 6.0*mix(vec3(0.2, 0.52, 1.0), vec3(0.8, 0.95, 1.0), pow(0.5+0.5*mu, 15.0))+mix(vec3(3.5), vec3(0.0), min(1.0, 2.3*dir.y));\r\n  background += T*vec3(1e4*smoothstep(0.9998, 1.0, mu));\r\n  color += background * T;\r\n\r\n  return color;\r\n}\r\n\r\nfn D_GGX(r: f32,  NoH: f32, h: vec3<f32>) -> f32\r\n{\r\n    let a = NoH * r;\r\n    let k = r / ((1.0 - NoH * NoH) + a * a);\r\n    return k * k * (1.0 / PI);\r\n}\r\n\r\nfn HenyeyGreenstein(mu: f32, inG: f32) -> f32\r\n{\r\n\treturn (1.-inG * inG)/(pow(1.+inG*inG - 2.0 * inG*mu, 1.5)*4.0* PI);\r\n}\r\n\r\nfn tonemapACES( x: vec3<f32> ) -> vec3<f32>\r\n{\r\n    let a = 2.51;\r\n    let b = 0.03;\r\n    let c = 2.43;\r\n    let d = 0.59;\r\n    let e = 0.14;\r\n    return (x*(a*x+b))/(x*(c*x+d)+e);\r\n}\r\n\r\n\r\nfn sample_sky(rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> vec3<f32> {\r\n    return skyRay(rayOrigin, rayDirection,sunDirection);\r\n}\r\n\r\nstruct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  previousInverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\r\n\r\n// Function to mimic the ease_out_expo function\r\nfn ease_out_expo(x: f32) -> f32 {\r\n    let t: f32 = x;\r\n    let b: f32 = 0.0;\r\n    let c: f32 = 1.0;\r\n    let d: f32 = 1.0; // Set the duration within the function\r\n    let intermediate_result: f32 = c * (-pow(2.0, -10.0 * t / d) + 1.0) + b;\r\n    return select(intermediate_result, b + c, t == d);\r\n}\r\n\r\nconst SKY_COLOUR: vec3<f32> = vec3<f32>(0.6, 0.8, 0.9);\r\nconst START_DISTANCE: f32 = 0.0;\r\nconst FOG_DENSITY: f32 = 0.01;\r\nconst NEAR: f32 = 0.5;\r\nconst FAR: f32 = 10000.0;\r\n\r\nfn rotateY(v: vec3<f32>, angle: f32) -> vec3<f32> {\r\n    let s = sin(angle);\r\n    let c = cos(angle);\r\n    return vec3<f32>(\r\n        v.x * c - v.z * s,\r\n        v.y,\r\n        v.x * s + v.z * c\r\n    );\r\n}\r\n\r\nfn rotateX(v: vec3<f32>, angle: f32) -> vec3<f32> {\r\n    let s = sin(angle);\r\n    let c = cos(angle);\r\n    return vec3<f32>(\r\n        v.x,\r\n        v.y * c - v.z * s,\r\n        v.y * s + v.z * c\r\n    );\r\n}\r\n\r\n// Rotate ray around the y axis, incrementally increasing the x rotation to form a spiral patttern\r\nfn spiralBlurCubeSample(rayDirection: vec3<f32>) -> vec4<f32>\r\n{\r\n  var weights = 0.0;\r\n  var output = vec4(0.0);\r\n  for(var i = 0; i < 6; i++){\r\n    var r = rayDirection.xy + vec2(f32(i) * 0.0001);\r\n    var sampleRayDirection = mix(rayDirection,randomInHemisphere(r, rayDirection),0.003);\r\n    output += textureSampleLevel(skyCube, linearSampler, sampleRayDirection, 0.0);\r\n    weights += 1.0;\r\n  }\r\n  return output / weights;\r\n}\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n    let resolution = textureDimensions(depth);\r\n    let pixel = GlobalInvocationID.xy;\r\n    var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\r\n    let rayDirection = calculateRayDirection(uv,viewProjections.inverseViewProjection);\r\n    let rayOrigin = cameraPosition;\r\n//    let sky = textureSampleLevel(skyCube, linearSampler, rayDirection, 0.0).rgb;\r\n    let sky = spiralBlurCubeSample(rayDirection).rgb;\r\n\r\n    var color = sky;\r\n    let distanceToCamera = textureLoad(depth, pixel, 0).r;\r\n\r\n    if(distanceToCamera > 9999.0){\r\n      let output = vec4(color, 1);\r\n      textureStore(outputTex, pixel, output);\r\n      return;\r\n    }\r\n\r\n}\r\n\r\nfn getDebugColor(index: u32) -> vec4<f32> {\r\n  let colors = array<vec4<f32>, 8>(\r\n    vec4<f32>(1.0, 0.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(1.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(0.5, 0.5, 0.5, 1.0)\r\n  );\r\n  return colors[index % 8];\r\n}\r\n\r\nfn getCubeRayDirection(uv: vec2<f32>, faceIndex: u32) -> vec3<f32>\r\n{\r\n  let uMapped = uv.x * 2.0 - 1.0;\r\n  let vMapped = uv.y * 2.0 - 1.0;\r\n\r\n  switch(faceIndex)\r\n  {\r\n    case 0{return vec3<f32>(1.0, -vMapped, -uMapped);}\r\n    case 1{return vec3<f32>(-1.0, -vMapped, uMapped);}\r\n    case 2{return vec3<f32>(uMapped, 1.0, vMapped);}\r\n    case 3{return vec3<f32>(uMapped, -1.0, -vMapped);}\r\n    case 4{return vec3<f32>(uMapped, -vMapped, 1.0);}\r\n    case 5{return vec3<f32>(-uMapped, -vMapped, -1.0);}\r\n    default{return vec3<f32>(0.0);}\r\n  }\r\n}\r\n\r\nfn getFramePixelOffset() -> vec2<u32>\r\n{\r\n  let frameIndex = time.frame % 4;\r\n  let x = frameIndex % 2;\r\n  let y = frameIndex / 2;\r\n  return vec2<u32>(x, y);\r\n}\r\n\r\nconst offsets = array<vec2<i32>,8>(\r\n  vec2(-1,-1), vec2(-1, 1),\r\n\tvec2(1, -1), vec2(1, 1),\r\n\tvec2(1, 0), vec2(0, -1),\r\n\tvec2(0, 1), vec2(-1, 0)\r\n);\r\n\r\nfn RGBToYCoCg( RGB: vec3<f32> ) -> vec3<f32>\r\n{\r\n\tlet Y = dot(RGB, vec3(  1, 2,  1 )) * 0.25;\r\n\tlet Co= dot(RGB, vec3(  2, 0, -2 )) * 0.25 + ( 0.5 * 256.0/255.0 );\r\n\tlet Cg= dot(RGB, vec3( -1, 2, -1 )) * 0.25 + ( 0.5 * 256.0/255.0 );\r\n\treturn vec3(Y, Co, Cg);\r\n}\r\n\r\nfn YCoCgToRGB( YCoCg: vec3<f32> ) -> vec3<f32>\r\n{\r\n\tlet Y= YCoCg.x;\r\n\tlet Co= YCoCg.y - ( 0.5 * 256.0 / 255.0 );\r\n\tlet Cg= YCoCg.z - ( 0.5 * 256.0 / 255.0 );\r\n\tlet R= Y + Co-Cg;\r\n\tlet G= Y + Cg;\r\n\tlet B= Y - Co-Cg;\r\n\treturn vec3(R,G,B);\r\n}\r\n\r\nconst gaussianWeights = array<f32, 25>(\r\n  0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\r\n  0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\r\n  0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\r\n  0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\r\n  0.003765, 0.015019, 0.023792, 0.015019, 0.003765\r\n);\r\n\r\n\r\nconst gaussianOffsets = array<vec2<i32>, 25>(\r\n  vec2(-2, -2), vec2(-1, -2), vec2(0, -2), vec2(1, -2), vec2(2, -2),\r\n  vec2(-2, -1), vec2(-1, -1), vec2(0, -1), vec2(1, -1), vec2(2, -1),\r\n  vec2(-2, 0), vec2(-1, 0), vec2(0, 0), vec2(1, 0), vec2(2, 0),\r\n  vec2(-2, 1), vec2(-1, 1), vec2(0, 1), vec2(1, 1), vec2(2, 1),\r\n  vec2(-2, 2), vec2(-1, 2), vec2(0, 2), vec2(1, 2), vec2(2, 2)\r\n);\r\n\r\nfn gaussianBlurHistorySample( pixel: vec2<u32>, cubeFaceIndex: u32 ) -> vec3<f32>\r\n{\r\n  let textureSize = textureDimensions(lastSkyCube).xy;\r\n  var color = vec3<f32>(0.0);\r\n  var weights = 0.0;\r\n  for(var i = 0; i < 25; i++)\r\n  {\r\n    let samplePixel = vec2<i32>(pixel) + gaussianOffsets[i];\r\n    if(any(samplePixel < vec2(0)) || any(samplePixel >= vec2<i32>(textureSize))){\r\n      continue;\r\n    }\r\n    color += RGBToYCoCg(textureLoad(lastSkyCube, samplePixel, cubeFaceIndex, 0).rgb) * gaussianWeights[i];\r\n    weights += gaussianWeights[i];\r\n  }\r\n\r\n  return color / weights;\r\n}\r\n\r\nfn polarToCartesian(angle: f32, radius: f32) -> vec2<f32> {\r\n  let radians = angle * PI / 180.0;\r\n  let x = radius * cos(radians);\r\n  let y = radius * sin(radians);\r\n  return vec2<f32>(x, y);\r\n}\r\n\r\nfn spiralBlurHistorySample( pixel: vec2<u32>, cubeFaceIndex: u32 ) -> vec3<f32>\r\n{\r\n  var weights = 0.0;\r\n  var output = vec3<f32>(0.0);\r\n   let textureSize = textureDimensions(lastSkyCube).xy;\r\n  for(var i = 0; i <= 6; i++){\r\n      let angle = (i % 6) * 60; // 0, 90, 180, 270\r\n      let radius = (i + 1) / 2;\r\n      let samplePixel = vec2<i32>(pixel) + vec2<i32>(polarToCartesian(f32(angle), f32(radius)));\r\n      if(any(samplePixel < vec2(0)) || any(samplePixel >= vec2<i32>(textureSize))){\r\n        continue;\r\n      }\r\n      output += RGBToYCoCg(textureLoad(lastSkyCube, samplePixel, cubeFaceIndex, 0).rgb);\r\n      weights += 1.0;\r\n    }\r\n\r\n    return output / weights;\r\n}\r\n\r\nconst HISTORY_BLEND = 0.8;\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn writeToCube(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let cubeFaceIndex = GlobalInvocationID.z;\r\n  var pixel = GlobalInvocationID.xy;\r\n  pixel *= 2;\r\n  pixel += getFramePixelOffset();\r\n  var rayDirection = getCubeRayDirection(vec2<f32>(pixel) / vec2<f32>(textureDimensions(skyCubeWrite).xy), cubeFaceIndex);\r\n  rayDirection = normalize(rayDirection);\r\n  let sky = sample_sky(rayDirection, cameraPosition);\r\n  let mu = dot(sunDirection, rayDirection);\r\n  let fogDistance = intersectSphere(cameraPosition, rayDirection, vec3(0.0, -EARTH_RADIUS, 0.0), EARTH_RADIUS+160.0);\r\n  let fogPhase = 0.5*HenyeyGreenstein(mu, 0.7)+0.5*HenyeyGreenstein(mu, -0.6);\r\n  var colour = sky;\r\n  colour = mix(fogPhase*0.1*LOW_SCATTER*SUN_POWER+10.0*vec3(0.55, 0.8, 1.0), colour, exp(-0.0003*fogDistance));\r\n  let newSample = colour;\r\n  var history = textureLoad(lastSkyCube, pixel, cubeFaceIndex, 0).rgb;\r\n  colour = mix(newSample, history, HISTORY_BLEND);\r\n  textureStore(skyCubeWrite, pixel, cubeFaceIndex, vec4(colour,1));\r\n}"},2672:e=>{e.exports="fn uncharted2_tonemap_partial(x: vec3<f32>) -> vec3<f32>\r\n{\r\n    let A = 0.15f;\r\n    let B = 0.50f;\r\n    let C = 0.10f;\r\n    let D = 0.20f;\r\n    let E = 0.02f;\r\n    let F = 0.30f;\r\n    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\r\n}\r\n\r\nfn luminance(v: vec3<f32>) -> f32\r\n{\r\n    return dot(v, vec3(0.2126f, 0.7152f, 0.0722f));\r\n}\r\n\r\nfn aces(v: vec3<f32>) -> vec3<f32>\r\n{\r\n    let a = 2.51f;\r\n    let b = 0.03f;\r\n    let c = 2.43f;\r\n    let d = 0.59f;\r\n    let e = 0.14f;\r\n    return clamp((v*(a*v+b))/(v*(c*v+d)+e), vec3(0.0), vec3(1.0f));\r\n}\r\n\r\nfn reverse_aces(v: vec3<f32>) -> vec3<f32>\r\n{\r\n    let a = 2.51f;\r\n    let b = 0.03f;\r\n    let c = 2.43f;\r\n    let d = 0.59f;\r\n    let e = 0.14f;\r\n    return clamp((v*(v*(c-e)-b))/(a-v*(d-e)), vec3(0.0), vec3(1.0f));\r\n}\r\n\r\nfn uncharted2_filmic(v: vec3<f32>) -> vec3<f32>\r\n{\r\n    let exposure_bias = 0.4f;\r\n    let curr = uncharted2_tonemap_partial(v * exposure_bias);\r\n    let W = vec3(11.2f);\r\n    let white_scale = vec3(1.0f) / uncharted2_tonemap_partial(W);\r\n    return curr * white_scale;\r\n}\r\n\r\nfn reinhard_jodie(v: vec3<f32>) -> vec3<f32>\r\n{\r\n    let l = luminance(v);\r\n    let tv = v / (1.0f + v);\r\n    return mix(v / (1.0f + l), tv, tv);\r\n}\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let pixel = GlobalInvocationID.xy;\r\n  let inputSample = textureLoad(inputTex, pixel, 0);\r\n  let toneMapped = uncharted2_filmic(inputSample.rgb);\r\n//  let gammaCorrected = pow(toneMapped, vec3(1.0f / 0.3f));\r\n  textureStore(outputTex,pixel,vec4(toneMapped,1));\r\n}"},4578:(e,t,r)=>{r.d(t,{Ay:()=>v});class n{constructor(e,t,r,i,a="div"){this.parent=e,this.object=t,this.property=r,this._disabled=!1,this._hidden=!1,this.initialValue=this.getValue(),this.domElement=document.createElement(a),this.domElement.classList.add("controller"),this.domElement.classList.add(i),this.$name=document.createElement("div"),this.$name.classList.add("name"),n.nextNameID=n.nextNameID||0,this.$name.id="lil-gui-name-"+ ++n.nextNameID,this.$widget=document.createElement("div"),this.$widget.classList.add("widget"),this.$disable=this.$widget,this.domElement.appendChild(this.$name),this.domElement.appendChild(this.$widget),this.domElement.addEventListener("keydown",(e=>e.stopPropagation())),this.domElement.addEventListener("keyup",(e=>e.stopPropagation())),this.parent.children.push(this),this.parent.controllers.push(this),this.parent.$children.appendChild(this.domElement),this._listenCallback=this._listenCallback.bind(this),this.name(r)}name(e){return this._name=e,this.$name.textContent=e,this}onChange(e){return this._onChange=e,this}_callOnChange(){this.parent._callOnChange(this),void 0!==this._onChange&&this._onChange.call(this,this.getValue()),this._changed=!0}onFinishChange(e){return this._onFinishChange=e,this}_callOnFinishChange(){this._changed&&(this.parent._callOnFinishChange(this),void 0!==this._onFinishChange&&this._onFinishChange.call(this,this.getValue())),this._changed=!1}reset(){return this.setValue(this.initialValue),this._callOnFinishChange(),this}enable(e=!0){return this.disable(!e)}disable(e=!0){return e===this._disabled||(this._disabled=e,this.domElement.classList.toggle("disabled",e),this.$disable.toggleAttribute("disabled",e)),this}show(e=!0){return this._hidden=!e,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}options(e){const t=this.parent.add(this.object,this.property,e);return t.name(this._name),this.destroy(),t}min(e){return this}max(e){return this}step(e){return this}decimals(e){return this}listen(e=!0){return this._listening=e,void 0!==this._listenCallbackID&&(cancelAnimationFrame(this._listenCallbackID),this._listenCallbackID=void 0),this._listening&&this._listenCallback(),this}_listenCallback(){this._listenCallbackID=requestAnimationFrame(this._listenCallback);const e=this.save();e!==this._listenPrevValue&&this.updateDisplay(),this._listenPrevValue=e}getValue(){return this.object[this.property]}setValue(e){return this.getValue()!==e&&(this.object[this.property]=e,this._callOnChange(),this.updateDisplay()),this}updateDisplay(){return this}load(e){return this.setValue(e),this._callOnFinishChange(),this}save(){return this.getValue()}destroy(){this.listen(!1),this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.controllers.splice(this.parent.controllers.indexOf(this),1),this.parent.$children.removeChild(this.domElement)}}class i extends n{constructor(e,t,r){super(e,t,r,"boolean","label"),this.$input=document.createElement("input"),this.$input.setAttribute("type","checkbox"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$input.addEventListener("change",(()=>{this.setValue(this.$input.checked),this._callOnFinishChange()})),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.checked=this.getValue(),this}}function a(e){let t,r;return(t=e.match(/(#|0x)?([a-f0-9]{6})/i))?r=t[2]:(t=e.match(/rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\)/))?r=parseInt(t[1]).toString(16).padStart(2,0)+parseInt(t[2]).toString(16).padStart(2,0)+parseInt(t[3]).toString(16).padStart(2,0):(t=e.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i))&&(r=t[1]+t[1]+t[2]+t[2]+t[3]+t[3]),!!r&&"#"+r}const s={isPrimitive:!0,match:e=>"number"==typeof e,fromHexString:e=>parseInt(e.substring(1),16),toHexString:e=>"#"+e.toString(16).padStart(6,0)},o={isPrimitive:!1,match:e=>Array.isArray(e),fromHexString(e,t,r=1){const n=s.fromHexString(e);t[0]=(n>>16&255)/255*r,t[1]=(n>>8&255)/255*r,t[2]=(255&n)/255*r},toHexString:([e,t,r],n=1)=>s.toHexString(e*(n=255/n)<<16^t*n<<8^r*n<<0)},l={isPrimitive:!1,match:e=>Object(e)===e,fromHexString(e,t,r=1){const n=s.fromHexString(e);t.r=(n>>16&255)/255*r,t.g=(n>>8&255)/255*r,t.b=(255&n)/255*r},toHexString:({r:e,g:t,b:r},n=1)=>s.toHexString(e*(n=255/n)<<16^t*n<<8^r*n<<0)},u=[{isPrimitive:!0,match:e=>"string"==typeof e,fromHexString:a,toHexString:a},s,o,l];class c extends n{constructor(e,t,r,n){var i;super(e,t,r,"color"),this.$input=document.createElement("input"),this.$input.setAttribute("type","color"),this.$input.setAttribute("tabindex",-1),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$text=document.createElement("input"),this.$text.setAttribute("type","text"),this.$text.setAttribute("spellcheck","false"),this.$text.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this.$display.appendChild(this.$input),this.$widget.appendChild(this.$display),this.$widget.appendChild(this.$text),this._format=(i=this.initialValue,u.find((e=>e.match(i)))),this._rgbScale=n,this._initialValueHexString=this.save(),this._textFocused=!1,this.$input.addEventListener("input",(()=>{this._setValueFromHexString(this.$input.value)})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$text.addEventListener("input",(()=>{const e=a(this.$text.value);e&&this._setValueFromHexString(e)})),this.$text.addEventListener("focus",(()=>{this._textFocused=!0,this.$text.select()})),this.$text.addEventListener("blur",(()=>{this._textFocused=!1,this.updateDisplay(),this._callOnFinishChange()})),this.$disable=this.$text,this.updateDisplay()}reset(){return this._setValueFromHexString(this._initialValueHexString),this}_setValueFromHexString(e){if(this._format.isPrimitive){const t=this._format.fromHexString(e);this.setValue(t)}else this._format.fromHexString(e,this.getValue(),this._rgbScale),this._callOnChange(),this.updateDisplay()}save(){return this._format.toHexString(this.getValue(),this._rgbScale)}load(e){return this._setValueFromHexString(e),this._callOnFinishChange(),this}updateDisplay(){return this.$input.value=this._format.toHexString(this.getValue(),this._rgbScale),this._textFocused||(this.$text.value=this.$input.value.substring(1)),this.$display.style.backgroundColor=this.$input.value,this}}class d extends n{constructor(e,t,r){super(e,t,r,"function"),this.$button=document.createElement("button"),this.$button.appendChild(this.$name),this.$widget.appendChild(this.$button),this.$button.addEventListener("click",(e=>{e.preventDefault(),this.getValue().call(this.object),this._callOnChange()})),this.$button.addEventListener("touchstart",(()=>{}),{passive:!0}),this.$disable=this.$button}}class h extends n{constructor(e,t,r,n,i,a){super(e,t,r,"number"),this._initInput(),this.min(n),this.max(i);const s=void 0!==a;this.step(s?a:this._getImplicitStep(),s),this.updateDisplay()}decimals(e){return this._decimals=e,this.updateDisplay(),this}min(e){return this._min=e,this._onUpdateMinMax(),this}max(e){return this._max=e,this._onUpdateMinMax(),this}step(e,t=!0){return this._step=e,this._stepExplicit=t,this}updateDisplay(){const e=this.getValue();if(this._hasSlider){let t=(e-this._min)/(this._max-this._min);t=Math.max(0,Math.min(t,1)),this.$fill.style.width=100*t+"%"}return this._inputFocused||(this.$input.value=void 0===this._decimals?e:e.toFixed(this._decimals)),this}_initInput(){this.$input=document.createElement("input"),this.$input.setAttribute("type","text"),this.$input.setAttribute("aria-labelledby",this.$name.id),window.matchMedia("(pointer: coarse)").matches&&(this.$input.setAttribute("type","number"),this.$input.setAttribute("step","any")),this.$widget.appendChild(this.$input),this.$disable=this.$input;const e=e=>{const t=parseFloat(this.$input.value);isNaN(t)||(this._snapClampSetValue(t+e),this.$input.value=this.getValue())};let t,r,n,i,a,s=!1;const o=e=>{if(s){const n=e.clientX-t,i=e.clientY-r;Math.abs(i)>5?(e.preventDefault(),this.$input.blur(),s=!1,this._setDraggingStyle(!0,"vertical")):Math.abs(n)>5&&l()}if(!s){const t=e.clientY-n;a-=t*this._step*this._arrowKeyMultiplier(e),i+a>this._max?a=this._max-i:i+a<this._min&&(a=this._min-i),this._snapClampSetValue(i+a)}n=e.clientY},l=()=>{this._setDraggingStyle(!1,"vertical"),this._callOnFinishChange(),window.removeEventListener("mousemove",o),window.removeEventListener("mouseup",l)};this.$input.addEventListener("input",(()=>{let e=parseFloat(this.$input.value);isNaN(e)||(this._stepExplicit&&(e=this._snap(e)),this.setValue(this._clamp(e)))})),this.$input.addEventListener("keydown",(t=>{"Enter"===t.key&&this.$input.blur(),"ArrowUp"===t.code&&(t.preventDefault(),e(this._step*this._arrowKeyMultiplier(t))),"ArrowDown"===t.code&&(t.preventDefault(),e(this._step*this._arrowKeyMultiplier(t)*-1))})),this.$input.addEventListener("wheel",(t=>{this._inputFocused&&(t.preventDefault(),e(this._step*this._normalizeMouseWheel(t)))}),{passive:!1}),this.$input.addEventListener("mousedown",(e=>{t=e.clientX,r=n=e.clientY,s=!0,i=this.getValue(),a=0,window.addEventListener("mousemove",o),window.addEventListener("mouseup",l)})),this.$input.addEventListener("focus",(()=>{this._inputFocused=!0})),this.$input.addEventListener("blur",(()=>{this._inputFocused=!1,this.updateDisplay(),this._callOnFinishChange()}))}_initSlider(){this._hasSlider=!0,this.$slider=document.createElement("div"),this.$slider.classList.add("slider"),this.$fill=document.createElement("div"),this.$fill.classList.add("fill"),this.$slider.appendChild(this.$fill),this.$widget.insertBefore(this.$slider,this.$input),this.domElement.classList.add("hasSlider");const e=e=>{const t=this.$slider.getBoundingClientRect();let r=(n=e,i=t.left,a=t.right,s=this._min,(n-i)/(a-i)*(this._max-s)+s);var n,i,a,s;this._snapClampSetValue(r)},t=t=>{e(t.clientX)},r=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("mousemove",t),window.removeEventListener("mouseup",r)};let n,i,a=!1;const s=t=>{t.preventDefault(),this._setDraggingStyle(!0),e(t.touches[0].clientX),a=!1},o=t=>{if(a){const e=t.touches[0].clientX-n,r=t.touches[0].clientY-i;Math.abs(e)>Math.abs(r)?s(t):(window.removeEventListener("touchmove",o),window.removeEventListener("touchend",l))}else t.preventDefault(),e(t.touches[0].clientX)},l=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("touchmove",o),window.removeEventListener("touchend",l)},u=this._callOnFinishChange.bind(this);let c;this.$slider.addEventListener("mousedown",(n=>{this._setDraggingStyle(!0),e(n.clientX),window.addEventListener("mousemove",t),window.addEventListener("mouseup",r)})),this.$slider.addEventListener("touchstart",(e=>{e.touches.length>1||(this._hasScrollBar?(n=e.touches[0].clientX,i=e.touches[0].clientY,a=!0):s(e),window.addEventListener("touchmove",o,{passive:!1}),window.addEventListener("touchend",l))}),{passive:!1}),this.$slider.addEventListener("wheel",(e=>{if(Math.abs(e.deltaX)<Math.abs(e.deltaY)&&this._hasScrollBar)return;e.preventDefault();const t=this._normalizeMouseWheel(e)*this._step;this._snapClampSetValue(this.getValue()+t),this.$input.value=this.getValue(),clearTimeout(c),c=setTimeout(u,400)}),{passive:!1})}_setDraggingStyle(e,t="horizontal"){this.$slider&&this.$slider.classList.toggle("active",e),document.body.classList.toggle("lil-gui-dragging",e),document.body.classList.toggle(`lil-gui-${t}`,e)}_getImplicitStep(){return this._hasMin&&this._hasMax?(this._max-this._min)/1e3:.1}_onUpdateMinMax(){!this._hasSlider&&this._hasMin&&this._hasMax&&(this._stepExplicit||this.step(this._getImplicitStep(),!1),this._initSlider(),this.updateDisplay())}_normalizeMouseWheel(e){let{deltaX:t,deltaY:r}=e;return Math.floor(e.deltaY)!==e.deltaY&&e.wheelDelta&&(t=0,r=-e.wheelDelta/120,r*=this._stepExplicit?1:10),t+-r}_arrowKeyMultiplier(e){let t=this._stepExplicit?1:10;return e.shiftKey?t*=10:e.altKey&&(t/=10),t}_snap(e){const t=Math.round(e/this._step)*this._step;return parseFloat(t.toPrecision(15))}_clamp(e){return e<this._min&&(e=this._min),e>this._max&&(e=this._max),e}_snapClampSetValue(e){this.setValue(this._clamp(this._snap(e)))}get _hasScrollBar(){const e=this.parent.root.$children;return e.scrollHeight>e.clientHeight}get _hasMin(){return void 0!==this._min}get _hasMax(){return void 0!==this._max}}class f extends n{constructor(e,t,r,n){super(e,t,r,"option"),this.$select=document.createElement("select"),this.$select.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this.$select.addEventListener("change",(()=>{this.setValue(this._values[this.$select.selectedIndex]),this._callOnFinishChange()})),this.$select.addEventListener("focus",(()=>{this.$display.classList.add("focus")})),this.$select.addEventListener("blur",(()=>{this.$display.classList.remove("focus")})),this.$widget.appendChild(this.$select),this.$widget.appendChild(this.$display),this.$disable=this.$select,this.options(n)}options(e){return this._values=Array.isArray(e)?e:Object.values(e),this._names=Array.isArray(e)?e:Object.keys(e),this.$select.replaceChildren(),this._names.forEach((e=>{const t=document.createElement("option");t.textContent=e,this.$select.appendChild(t)})),this.updateDisplay(),this}updateDisplay(){const e=this.getValue(),t=this._values.indexOf(e);return this.$select.selectedIndex=t,this.$display.textContent=-1===t?e:this._names[t],this}}class p extends n{constructor(e,t,r){super(e,t,r,"string"),this.$input=document.createElement("input"),this.$input.setAttribute("type","text"),this.$input.setAttribute("spellcheck","false"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$input.addEventListener("input",(()=>{this.setValue(this.$input.value)})),this.$input.addEventListener("keydown",(e=>{"Enter"===e.code&&this.$input.blur()})),this.$input.addEventListener("blur",(()=>{this._callOnFinishChange()})),this.$widget.appendChild(this.$input),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.value=this.getValue(),this}}let m=!1;class g{constructor({parent:e,autoPlace:t=void 0===e,container:r,width:n,title:i="Controls",closeFolders:a=!1,injectStyles:s=!0,touchStyles:o=!0}={}){if(this.parent=e,this.root=e?e.root:this,this.children=[],this.controllers=[],this.folders=[],this._closed=!1,this._hidden=!1,this.domElement=document.createElement("div"),this.domElement.classList.add("lil-gui"),this.$title=document.createElement("div"),this.$title.classList.add("title"),this.$title.setAttribute("role","button"),this.$title.setAttribute("aria-expanded",!0),this.$title.setAttribute("tabindex",0),this.$title.addEventListener("click",(()=>this.openAnimated(this._closed))),this.$title.addEventListener("keydown",(e=>{"Enter"!==e.code&&"Space"!==e.code||(e.preventDefault(),this.$title.click())})),this.$title.addEventListener("touchstart",(()=>{}),{passive:!0}),this.$children=document.createElement("div"),this.$children.classList.add("children"),this.domElement.appendChild(this.$title),this.domElement.appendChild(this.$children),this.title(i),this.parent)return this.parent.children.push(this),this.parent.folders.push(this),void this.parent.$children.appendChild(this.domElement);this.domElement.classList.add("root"),o&&this.domElement.classList.add("allow-touch-styles"),!m&&s&&(function(e){const t=document.createElement("style");t.innerHTML='.lil-gui {\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  line-height: 1;\n  font-weight: normal;\n  font-style: normal;\n  text-align: left;\n  color: var(--text-color);\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  --background-color: #1f1f1f;\n  --text-color: #ebebeb;\n  --title-background-color: #111111;\n  --title-text-color: #ebebeb;\n  --widget-color: #424242;\n  --hover-color: #4f4f4f;\n  --focus-color: #595959;\n  --number-color: #2cc9ff;\n  --string-color: #a2db3c;\n  --font-size: 11px;\n  --input-font-size: 11px;\n  --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;\n  --font-family-mono: Menlo, Monaco, Consolas, "Droid Sans Mono", monospace;\n  --padding: 4px;\n  --spacing: 4px;\n  --widget-height: 20px;\n  --title-height: calc(var(--widget-height) + var(--spacing) * 1.25);\n  --name-width: 45%;\n  --slider-knob-width: 2px;\n  --slider-input-width: 27%;\n  --color-input-width: 27%;\n  --slider-input-min-width: 45px;\n  --color-input-min-width: 45px;\n  --folder-indent: 7px;\n  --widget-padding: 0 0 0 3px;\n  --widget-border-radius: 2px;\n  --checkbox-size: calc(0.75 * var(--widget-height));\n  --scrollbar-width: 5px;\n}\n.lil-gui, .lil-gui * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n.lil-gui.root {\n  width: var(--width, 245px);\n  display: flex;\n  flex-direction: column;\n  background: var(--background-color);\n}\n.lil-gui.root > .title {\n  background: var(--title-background-color);\n  color: var(--title-text-color);\n}\n.lil-gui.root > .children {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.lil-gui.root > .children::-webkit-scrollbar {\n  width: var(--scrollbar-width);\n  height: var(--scrollbar-width);\n  background: var(--background-color);\n}\n.lil-gui.root > .children::-webkit-scrollbar-thumb {\n  border-radius: var(--scrollbar-width);\n  background: var(--focus-color);\n}\n@media (pointer: coarse) {\n  .lil-gui.allow-touch-styles, .lil-gui.allow-touch-styles .lil-gui {\n    --widget-height: 28px;\n    --padding: 6px;\n    --spacing: 6px;\n    --font-size: 13px;\n    --input-font-size: 16px;\n    --folder-indent: 10px;\n    --scrollbar-width: 7px;\n    --slider-input-min-width: 50px;\n    --color-input-min-width: 65px;\n  }\n}\n.lil-gui.force-touch-styles, .lil-gui.force-touch-styles .lil-gui {\n  --widget-height: 28px;\n  --padding: 6px;\n  --spacing: 6px;\n  --font-size: 13px;\n  --input-font-size: 16px;\n  --folder-indent: 10px;\n  --scrollbar-width: 7px;\n  --slider-input-min-width: 50px;\n  --color-input-min-width: 65px;\n}\n.lil-gui.autoPlace {\n  max-height: 100%;\n  position: fixed;\n  top: 0;\n  right: 15px;\n  z-index: 1001;\n}\n\n.lil-gui .controller {\n  display: flex;\n  align-items: center;\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n}\n.lil-gui .controller.disabled {\n  opacity: 0.5;\n}\n.lil-gui .controller.disabled, .lil-gui .controller.disabled * {\n  pointer-events: none !important;\n}\n.lil-gui .controller > .name {\n  min-width: var(--name-width);\n  flex-shrink: 0;\n  white-space: pre;\n  padding-right: var(--spacing);\n  line-height: var(--widget-height);\n}\n.lil-gui .controller .widget {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  min-height: var(--widget-height);\n}\n.lil-gui .controller.string input {\n  color: var(--string-color);\n}\n.lil-gui .controller.boolean {\n  cursor: pointer;\n}\n.lil-gui .controller.color .display {\n  width: 100%;\n  height: var(--widget-height);\n  border-radius: var(--widget-border-radius);\n  position: relative;\n}\n@media (hover: hover) {\n  .lil-gui .controller.color .display:hover:before {\n    content: " ";\n    display: block;\n    position: absolute;\n    border-radius: var(--widget-border-radius);\n    border: 1px solid #fff9;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n.lil-gui .controller.color input[type=color] {\n  opacity: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n.lil-gui .controller.color input[type=text] {\n  margin-left: var(--spacing);\n  font-family: var(--font-family-mono);\n  min-width: var(--color-input-min-width);\n  width: var(--color-input-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.option select {\n  opacity: 0;\n  position: absolute;\n  width: 100%;\n  max-width: 100%;\n}\n.lil-gui .controller.option .display {\n  position: relative;\n  pointer-events: none;\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  line-height: var(--widget-height);\n  max-width: 100%;\n  overflow: hidden;\n  word-break: break-all;\n  padding-left: 0.55em;\n  padding-right: 1.75em;\n  background: var(--widget-color);\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .display.focus {\n    background: var(--focus-color);\n  }\n}\n.lil-gui .controller.option .display.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.option .display:after {\n  font-family: "lil-gui";\n  content: "↕";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  padding-right: 0.375em;\n}\n.lil-gui .controller.option .widget,\n.lil-gui .controller.option select {\n  cursor: pointer;\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .widget:hover .display {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number input {\n  color: var(--number-color);\n}\n.lil-gui .controller.number.hasSlider input {\n  margin-left: var(--spacing);\n  width: var(--slider-input-width);\n  min-width: var(--slider-input-min-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.number .slider {\n  width: 100%;\n  height: var(--widget-height);\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  padding-right: var(--slider-knob-width);\n  overflow: hidden;\n  cursor: ew-resize;\n  touch-action: pan-y;\n}\n@media (hover: hover) {\n  .lil-gui .controller.number .slider:hover {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number .slider.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.number .slider.active .fill {\n  opacity: 0.95;\n}\n.lil-gui .controller.number .fill {\n  height: 100%;\n  border-right: var(--slider-knob-width) solid var(--number-color);\n  box-sizing: content-box;\n}\n\n.lil-gui-dragging .lil-gui {\n  --hover-color: var(--widget-color);\n}\n.lil-gui-dragging * {\n  cursor: ew-resize !important;\n}\n\n.lil-gui-dragging.lil-gui-vertical * {\n  cursor: ns-resize !important;\n}\n\n.lil-gui .title {\n  height: var(--title-height);\n  line-height: calc(var(--title-height) - 4px);\n  font-weight: 600;\n  padding: 0 var(--padding);\n  -webkit-tap-highlight-color: transparent;\n  cursor: pointer;\n  outline: none;\n  text-decoration-skip: objects;\n}\n.lil-gui .title:before {\n  font-family: "lil-gui";\n  content: "▾";\n  padding-right: 2px;\n  display: inline-block;\n}\n.lil-gui .title:active {\n  background: var(--title-background-color);\n  opacity: 0.75;\n}\n@media (hover: hover) {\n  body:not(.lil-gui-dragging) .lil-gui .title:hover {\n    background: var(--title-background-color);\n    opacity: 0.85;\n  }\n  .lil-gui .title:focus {\n    text-decoration: underline var(--focus-color);\n  }\n}\n.lil-gui.root > .title:focus {\n  text-decoration: none !important;\n}\n.lil-gui.closed > .title:before {\n  content: "▸";\n}\n.lil-gui.closed > .children {\n  transform: translateY(-7px);\n  opacity: 0;\n}\n.lil-gui.closed:not(.transition) > .children {\n  display: none;\n}\n.lil-gui.transition > .children {\n  transition-duration: 300ms;\n  transition-property: height, opacity, transform;\n  transition-timing-function: cubic-bezier(0.2, 0.6, 0.35, 1);\n  overflow: hidden;\n  pointer-events: none;\n}\n.lil-gui .children:empty:before {\n  content: "Empty";\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n  display: block;\n  height: var(--widget-height);\n  font-style: italic;\n  line-height: var(--widget-height);\n  opacity: 0.5;\n}\n.lil-gui.root > .children > .lil-gui > .title {\n  border: 0 solid var(--widget-color);\n  border-width: 1px 0;\n  transition: border-color 300ms;\n}\n.lil-gui.root > .children > .lil-gui.closed > .title {\n  border-bottom-color: transparent;\n}\n.lil-gui + .controller {\n  border-top: 1px solid var(--widget-color);\n  margin-top: 0;\n  padding-top: var(--spacing);\n}\n.lil-gui .lil-gui .lil-gui > .title {\n  border: none;\n}\n.lil-gui .lil-gui .lil-gui > .children {\n  border: none;\n  margin-left: var(--folder-indent);\n  border-left: 2px solid var(--widget-color);\n}\n.lil-gui .lil-gui .controller {\n  border: none;\n}\n\n.lil-gui label, .lil-gui input, .lil-gui button {\n  -webkit-tap-highlight-color: transparent;\n}\n.lil-gui input {\n  border: 0;\n  outline: none;\n  font-family: var(--font-family);\n  font-size: var(--input-font-size);\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  background: var(--widget-color);\n  color: var(--text-color);\n  width: 100%;\n}\n@media (hover: hover) {\n  .lil-gui input:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui input:active {\n    background: var(--focus-color);\n  }\n}\n.lil-gui input:disabled {\n  opacity: 1;\n}\n.lil-gui input[type=text],\n.lil-gui input[type=number] {\n  padding: var(--widget-padding);\n  -moz-appearance: textfield;\n}\n.lil-gui input[type=text]:focus,\n.lil-gui input[type=number]:focus {\n  background: var(--focus-color);\n}\n.lil-gui input[type=checkbox] {\n  appearance: none;\n  width: var(--checkbox-size);\n  height: var(--checkbox-size);\n  border-radius: var(--widget-border-radius);\n  text-align: center;\n  cursor: pointer;\n}\n.lil-gui input[type=checkbox]:checked:before {\n  font-family: "lil-gui";\n  content: "✓";\n  font-size: var(--checkbox-size);\n  line-height: var(--checkbox-size);\n}\n@media (hover: hover) {\n  .lil-gui input[type=checkbox]:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button {\n  outline: none;\n  cursor: pointer;\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  color: var(--text-color);\n  width: 100%;\n  height: var(--widget-height);\n  text-transform: none;\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  border: none;\n}\n@media (hover: hover) {\n  .lil-gui button:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui button:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button:active {\n  background: var(--focus-color);\n}\n\n@font-face {\n  font-family: "lil-gui";\n  src: url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff");\n}';const r=document.querySelector("head link[rel=stylesheet], head style");r?document.head.insertBefore(t,r):document.head.appendChild(t)}(),m=!0),r?r.appendChild(this.domElement):t&&(this.domElement.classList.add("autoPlace"),document.body.appendChild(this.domElement)),n&&this.domElement.style.setProperty("--width",n+"px"),this._closeFolders=a}add(e,t,r,n,a){if(Object(r)===r)return new f(this,e,t,r);const s=e[t];switch(typeof s){case"number":return new h(this,e,t,r,n,a);case"boolean":return new i(this,e,t);case"string":return new p(this,e,t);case"function":return new d(this,e,t)}console.error("gui.add failed\n\tproperty:",t,"\n\tobject:",e,"\n\tvalue:",s)}addColor(e,t,r=1){return new c(this,e,t,r)}addFolder(e){const t=new g({parent:this,title:e});return this.root._closeFolders&&t.close(),t}load(e,t=!0){return e.controllers&&this.controllers.forEach((t=>{t instanceof d||t._name in e.controllers&&t.load(e.controllers[t._name])})),t&&e.folders&&this.folders.forEach((t=>{t._title in e.folders&&t.load(e.folders[t._title])})),this}save(e=!0){const t={controllers:{},folders:{}};return this.controllers.forEach((e=>{if(!(e instanceof d)){if(e._name in t.controllers)throw new Error(`Cannot save GUI with duplicate property "${e._name}"`);t.controllers[e._name]=e.save()}})),e&&this.folders.forEach((e=>{if(e._title in t.folders)throw new Error(`Cannot save GUI with duplicate folder "${e._title}"`);t.folders[e._title]=e.save()})),t}open(e=!0){return this._setClosed(!e),this.$title.setAttribute("aria-expanded",!this._closed),this.domElement.classList.toggle("closed",this._closed),this}close(){return this.open(!1)}_setClosed(e){this._closed!==e&&(this._closed=e,this._callOnOpenClose(this))}show(e=!0){return this._hidden=!e,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}openAnimated(e=!0){return this._setClosed(!e),this.$title.setAttribute("aria-expanded",!this._closed),requestAnimationFrame((()=>{const t=this.$children.clientHeight;this.$children.style.height=t+"px",this.domElement.classList.add("transition");const r=e=>{e.target===this.$children&&(this.$children.style.height="",this.domElement.classList.remove("transition"),this.$children.removeEventListener("transitionend",r))};this.$children.addEventListener("transitionend",r);const n=e?this.$children.scrollHeight:0;this.domElement.classList.toggle("closed",!e),requestAnimationFrame((()=>{this.$children.style.height=n+"px"}))})),this}title(e){return this._title=e,this.$title.textContent=e,this}reset(e=!0){return(e?this.controllersRecursive():this.controllers).forEach((e=>e.reset())),this}onChange(e){return this._onChange=e,this}_callOnChange(e){this.parent&&this.parent._callOnChange(e),void 0!==this._onChange&&this._onChange.call(this,{object:e.object,property:e.property,value:e.getValue(),controller:e})}onFinishChange(e){return this._onFinishChange=e,this}_callOnFinishChange(e){this.parent&&this.parent._callOnFinishChange(e),void 0!==this._onFinishChange&&this._onFinishChange.call(this,{object:e.object,property:e.property,value:e.getValue(),controller:e})}onOpenClose(e){return this._onOpenClose=e,this}_callOnOpenClose(e){this.parent&&this.parent._callOnOpenClose(e),void 0!==this._onOpenClose&&this._onOpenClose.call(this,e)}destroy(){this.parent&&(this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.folders.splice(this.parent.folders.indexOf(this),1)),this.domElement.parentElement&&this.domElement.parentElement.removeChild(this.domElement),Array.from(this.children).forEach((e=>e.destroy()))}controllersRecursive(){let e=Array.from(this.controllers);return this.folders.forEach((t=>{e=e.concat(t.controllersRecursive())})),e}foldersRecursive(){let e=Array.from(this.folders);return this.folders.forEach((t=>{e=e.concat(t.foldersRecursive())})),e}}const v=g},6273:(e,t,r)=>{r.d(t,{$L:()=>Ve});const n=e=>e&&"number"==typeof e.length&&e.buffer instanceof ArrayBuffer&&"number"==typeof e.byteLength,i={i32:{numElements:1,align:4,size:4,type:"i32",View:Int32Array},u32:{numElements:1,align:4,size:4,type:"u32",View:Uint32Array},f32:{numElements:1,align:4,size:4,type:"f32",View:Float32Array},f16:{numElements:1,align:2,size:2,type:"u16",View:Uint16Array},vec2f:{numElements:2,align:8,size:8,type:"f32",View:Float32Array},vec2i:{numElements:2,align:8,size:8,type:"i32",View:Int32Array},vec2u:{numElements:2,align:8,size:8,type:"u32",View:Uint32Array},vec2h:{numElements:2,align:4,size:4,type:"u16",View:Uint16Array},vec3i:{numElements:3,align:16,size:12,type:"i32",View:Int32Array},vec3u:{numElements:3,align:16,size:12,type:"u32",View:Uint32Array},vec3f:{numElements:3,align:16,size:12,type:"f32",View:Float32Array},vec3h:{numElements:3,align:8,size:6,type:"u16",View:Uint16Array},vec4i:{numElements:4,align:16,size:16,type:"i32",View:Int32Array},vec4u:{numElements:4,align:16,size:16,type:"u32",View:Uint32Array},vec4f:{numElements:4,align:16,size:16,type:"f32",View:Float32Array},vec4h:{numElements:4,align:8,size:8,type:"u16",View:Uint16Array},mat2x2f:{numElements:4,align:8,size:16,type:"f32",View:Float32Array},mat2x2h:{numElements:4,align:4,size:8,type:"u16",View:Uint16Array},mat3x2f:{numElements:6,align:8,size:24,type:"f32",View:Float32Array},mat3x2h:{numElements:6,align:4,size:12,type:"u16",View:Uint16Array},mat4x2f:{numElements:8,align:8,size:32,type:"f32",View:Float32Array},mat4x2h:{numElements:8,align:4,size:16,type:"u16",View:Uint16Array},mat2x3f:{numElements:8,align:16,size:32,pad:[3,1],type:"f32",View:Float32Array},mat2x3h:{numElements:8,align:8,size:16,pad:[3,1],type:"u16",View:Uint16Array},mat3x3f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x3h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x3f:{numElements:16,align:16,size:64,pad:[3,1],type:"f32",View:Float32Array},mat4x3h:{numElements:16,align:8,size:32,pad:[3,1],type:"u16",View:Uint16Array},mat2x4f:{numElements:8,align:16,size:32,type:"f32",View:Float32Array},mat2x4h:{numElements:8,align:8,size:16,type:"u16",View:Uint16Array},mat3x4f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x4h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x4f:{numElements:16,align:16,size:64,type:"f32",View:Float32Array},mat4x4h:{numElements:16,align:8,size:32,type:"u16",View:Uint16Array},bool:{numElements:0,align:1,size:0,type:"bool",View:Uint32Array}},a={...i,"atomic<i32>":i.i32,"atomic<u32>":i.u32,"vec2<i32>":i.vec2i,"vec2<u32>":i.vec2u,"vec2<f32>":i.vec2f,"vec2<f16>":i.vec2h,"vec3<i32>":i.vec3i,"vec3<u32>":i.vec3u,"vec3<f32>":i.vec3f,"vec3<f16>":i.vec3h,"vec4<i32>":i.vec4i,"vec4<u32>":i.vec4u,"vec4<f32>":i.vec4f,"vec4<f16>":i.vec4h,"mat2x2<f32>":i.mat2x2f,"mat2x2<f16>":i.mat2x2h,"mat3x2<f32>":i.mat3x2f,"mat3x2<f16>":i.mat3x2h,"mat4x2<f32>":i.mat4x2f,"mat4x2<f16>":i.mat4x2h,"mat2x3<f32>":i.mat2x3f,"mat2x3<f16>":i.mat2x3h,"mat3x3<f32>":i.mat3x3f,"mat3x3<f16>":i.mat3x3h,"mat4x3<f32>":i.mat4x3f,"mat4x3<f16>":i.mat4x3h,"mat2x4<f32>":i.mat2x4f,"mat2x4<f16>":i.mat2x4h,"mat3x4<f32>":i.mat3x4f,"mat3x4<f16>":i.mat3x4h,"mat4x4<f32>":i.mat4x4f,"mat4x4<f16>":i.mat4x4h},s=(o=a,Object.keys(o));var o,l,u,c,d,h;!function(e=[],t){const r=new Set;for(const n of s){const i=a[n];r.has(i)||(r.add(i),i.flatten=e.includes(n)?t:!t)}}(),new WeakMap;class f{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class p{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(e){throw new Error("Cannot evaluate node")}evaluateString(e){return this.evaluate(e).toString()}search(e){}searchBlock(e,t){if(e){t(m.instance);for(const r of e)r instanceof Array?this.searchBlock(r,t):r.search(t);t(g.instance)}}}class m extends p{}m.instance=new m;class g extends p{}g.instance=new g;class v extends p{constructor(){super()}}class x extends v{constructor(e,t,r,n){super(),this.name=e,this.args=t,this.returnType=r,this.body=n}get astNodeType(){return"function"}search(e){this.searchBlock(this.body,e)}}class y extends v{constructor(e){super(),this.expression=e}get astNodeType(){return"staticAssert"}search(e){this.expression.search(e)}}class b extends v{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"while"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class _ extends v{constructor(e){super(),this.body=e}get astNodeType(){return"continuing"}search(e){this.searchBlock(this.body,e)}}class w extends v{constructor(e,t,r,n){super(),this.init=e,this.condition=t,this.increment=r,this.body=n}get astNodeType(){return"for"}search(e){var t,r,n;null===(t=this.init)||void 0===t||t.search(e),null===(r=this.condition)||void 0===r||r.search(e),null===(n=this.increment)||void 0===n||n.search(e),this.searchBlock(this.body,e)}}class T extends v{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"var"}search(e){var t;e(this),null===(t=this.value)||void 0===t||t.search(e)}}class P extends v{constructor(e,t,r){super(),this.name=e,this.type=t,this.value=r}get astNodeType(){return"override"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class S extends v{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"let"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class k extends v{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"const"}evaluate(e){return this.value.evaluate(e)}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}!function(e){e.increment="++",e.decrement="--"}(l||(l={})),function(e){e.parse=function(t){const r=t;if("parse"==r)throw new Error("Invalid value for IncrementOperator");return e[r]}}(l||(l={}));class A extends v{constructor(e,t){super(),this.operator=e,this.variable=t}get astNodeType(){return"increment"}search(e){this.variable.search(e)}}!function(e){e.assign="=",e.addAssign="+=",e.subtractAssin="-=",e.multiplyAssign="*=",e.divideAssign="/=",e.moduloAssign="%=",e.andAssign="&=",e.orAssign="|=",e.xorAssign="^=",e.shiftLeftAssign="<<=",e.shiftRightAssign=">>="}(u||(u={})),function(e){e.parse=function(e){const t=e;if("parse"==t)throw new Error("Invalid value for AssignOperator");return t}}(u||(u={}));class O extends v{constructor(e,t,r){super(),this.operator=e,this.variable=t,this.value=r}get astNodeType(){return"assign"}search(e){this.value.search(e)}}class E extends v{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"call"}}class M extends v{constructor(e,t){super(),this.body=e,this.continuing=t}get astNodeType(){return"loop"}}class C extends v{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"body"}}class I extends v{constructor(e,t,r,n){super(),this.condition=e,this.body=t,this.elseif=r,this.else=n}get astNodeType(){return"if"}search(e){this.condition.search(e),this.searchBlock(this.body,e),this.searchBlock(this.elseif,e),this.searchBlock(this.else,e)}}class U extends v{constructor(e){super(),this.value=e}get astNodeType(){return"return"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class R extends v{constructor(e){super(),this.name=e}get astNodeType(){return"enable"}}class D extends v{constructor(e,t){super(),this.name=e,this.type=t}get astNodeType(){return"alias"}}class z extends v{constructor(){super()}get astNodeType(){return"discard"}}class j extends v{constructor(){super()}get astNodeType(){return"break"}}class L extends v{constructor(){super()}get astNodeType(){return"continue"}}class B extends v{constructor(e){super(),this.name=e}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class N extends B{constructor(e,t){super(e),this.members=t}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(e){for(let t=0;t<this.members.length;t++)if(this.members[t].name==e)return t;return-1}}class G extends B{constructor(e,t,r){super(e),this.format=t,this.access=r}get astNodeType(){return"template"}}class V extends B{constructor(e,t,r,n){super(e),this.storage=t,this.type=r,this.access=n}get astNodeType(){return"pointer"}}class F extends B{constructor(e,t,r,n){super(e),this.attributes=t,this.format=r,this.count=n}get astNodeType(){return"array"}get isArray(){return!0}}class $ extends B{constructor(e,t,r){super(e),this.format=t,this.access=r}get astNodeType(){return"sampler"}}class q extends p{constructor(){super()}}class W extends q{constructor(e){super(),this.value=e}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class Y extends q{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"createExpr"}}class H extends q{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"callExpr"}evaluate(e){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(e));case"acos":return Math.acos(this.args[0].evaluate(e));case"acosh":return Math.acosh(this.args[0].evaluate(e));case"asin":return Math.asin(this.args[0].evaluate(e));case"asinh":return Math.asinh(this.args[0].evaluate(e));case"atan":return Math.atan(this.args[0].evaluate(e));case"atan2":return Math.atan2(this.args[0].evaluate(e),this.args[1].evaluate(e));case"atanh":return Math.atanh(this.args[0].evaluate(e));case"ceil":return Math.ceil(this.args[0].evaluate(e));case"clamp":return Math.min(Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e)),this.args[2].evaluate(e));case"cos":return Math.cos(this.args[0].evaluate(e));case"degrees":return 180*this.args[0].evaluate(e)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(e)-this.args[1].evaluate(e),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(e));case"exp2":return Math.pow(2,this.args[0].evaluate(e));case"floor":return Math.floor(this.args[0].evaluate(e));case"fma":return this.args[0].evaluate(e)*this.args[1].evaluate(e)+this.args[2].evaluate(e);case"fract":case"modf":return this.args[0].evaluate(e)-Math.floor(this.args[0].evaluate(e));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(e));case"log":return Math.log(this.args[0].evaluate(e));case"log2":return Math.log2(this.args[0].evaluate(e));case"max":return Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e));case"min":return Math.min(this.args[0].evaluate(e),this.args[1].evaluate(e));case"mix":return this.args[0].evaluate(e)*(1-this.args[2].evaluate(e))+this.args[1].evaluate(e)*this.args[2].evaluate(e);case"pow":return Math.pow(this.args[0].evaluate(e),this.args[1].evaluate(e));case"radians":return this.args[0].evaluate(e)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(e));case"sign":return Math.sign(this.args[0].evaluate(e));case"sin":return Math.sin(this.args[0].evaluate(e));case"sinh":return Math.sinh(this.args[0].evaluate(e));case"saturate":return Math.min(Math.max(this.args[0].evaluate(e),0),1);case"smoothstep":return this.args[0].evaluate(e)*this.args[0].evaluate(e)*(3-2*this.args[0].evaluate(e));case"sqrt":return Math.sqrt(this.args[0].evaluate(e));case"step":return this.args[0].evaluate(e)<this.args[1].evaluate(e)?0:1;case"tan":return Math.tan(this.args[0].evaluate(e));case"tanh":return Math.tanh(this.args[0].evaluate(e));case"trunc":return Math.trunc(this.args[0].evaluate(e));default:throw new Error("Non const function: "+this.name)}}search(e){for(const t of this.args)t.search(e);e(this)}}class X extends q{constructor(e){super(),this.name=e}get astNodeType(){return"varExpr"}search(e){e(this)}}class Z extends q{constructor(e,t){super(),this.name=e,this.initializer=t}get astNodeType(){return"constExpr"}evaluate(e){var t,r;if(this.initializer instanceof Y){const n=null===(t=this.postfix)||void 0===t?void 0:t.evaluateString(e),i=null===(r=this.initializer.type)||void 0===r?void 0:r.name,a=e.structs.get(i),s=null==a?void 0:a.getMemberIndex(n);if(-1!=s)return this.initializer.args[s].evaluate(e);console.log(s)}return this.initializer.evaluate(e)}search(e){this.initializer.search(e)}}class K extends q{constructor(e){super(),this.value=e}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class Q extends q{constructor(e,t){super(),this.type=e,this.value=t}get astNodeType(){return"bitcastExpr"}search(e){this.value.search(e)}}class J extends q{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"typecastExpr"}evaluate(e){return this.args[0].evaluate(e)}search(e){this.searchBlock(this.args,e)}}class ee extends q{constructor(e){super(),this.contents=e}get astNodeType(){return"groupExpr"}evaluate(e){return this.contents[0].evaluate(e)}search(e){this.searchBlock(this.contents,e)}}class te extends q{constructor(){super()}}class re extends te{constructor(e,t){super(),this.operator=e,this.right=t}get astNodeType(){return"unaryOp"}evaluate(e){switch(this.operator){case"+":return this.right.evaluate(e);case"-":return-this.right.evaluate(e);case"!":return this.right.evaluate(e)?0:1;case"~":return~this.right.evaluate(e);default:throw new Error("Unknown unary operator: "+this.operator)}}search(e){this.right.search(e)}}class ne extends te{constructor(e,t,r){super(),this.operator=e,this.left=t,this.right=r}get astNodeType(){return"binaryOp"}evaluate(e){switch(this.operator){case"+":return this.left.evaluate(e)+this.right.evaluate(e);case"-":return this.left.evaluate(e)-this.right.evaluate(e);case"*":return this.left.evaluate(e)*this.right.evaluate(e);case"/":return this.left.evaluate(e)/this.right.evaluate(e);case"%":return this.left.evaluate(e)%this.right.evaluate(e);case"==":return this.left.evaluate(e)==this.right.evaluate(e)?1:0;case"!=":return this.left.evaluate(e)!=this.right.evaluate(e)?1:0;case"<":return this.left.evaluate(e)<this.right.evaluate(e)?1:0;case">":return this.left.evaluate(e)>this.right.evaluate(e)?1:0;case"<=":return this.left.evaluate(e)<=this.right.evaluate(e)?1:0;case">=":return this.left.evaluate(e)>=this.right.evaluate(e)?1:0;case"&&":return this.left.evaluate(e)&&this.right.evaluate(e)?1:0;case"||":return this.left.evaluate(e)||this.right.evaluate(e)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}search(e){this.left.search(e),this.right.search(e)}}class ie extends p{constructor(){super()}}class ae extends ie{constructor(e,t){super(),this.selector=e,this.body=t}get astNodeType(){return"case"}search(e){this.searchBlock(this.body,e)}}class se extends ie{constructor(e){super(),this.body=e}get astNodeType(){return"default"}search(e){this.searchBlock(this.body,e)}}class oe extends p{constructor(e,t,r){super(),this.name=e,this.type=t,this.attributes=r}get astNodeType(){return"argument"}}class le extends p{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"elseif"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class ue extends p{constructor(e,t,r){super(),this.name=e,this.type=t,this.attributes=r}get astNodeType(){return"member"}}class ce extends p{constructor(e,t){super(),this.name=e,this.value=t}get astNodeType(){return"attribute"}}!function(e){e[e.token=0]="token",e[e.keyword=1]="keyword",e[e.reserved=2]="reserved"}(d||(d={}));class de{constructor(e,t,r){this.name=e,this.type=t,this.rule=r}toString(){return this.name}}class he{}c=he,he.none=new de("",d.reserved,""),he.eof=new de("EOF",d.token,""),he.reserved={asm:new de("asm",d.reserved,"asm"),bf16:new de("bf16",d.reserved,"bf16"),do:new de("do",d.reserved,"do"),enum:new de("enum",d.reserved,"enum"),f16:new de("f16",d.reserved,"f16"),f64:new de("f64",d.reserved,"f64"),handle:new de("handle",d.reserved,"handle"),i8:new de("i8",d.reserved,"i8"),i16:new de("i16",d.reserved,"i16"),i64:new de("i64",d.reserved,"i64"),mat:new de("mat",d.reserved,"mat"),premerge:new de("premerge",d.reserved,"premerge"),regardless:new de("regardless",d.reserved,"regardless"),typedef:new de("typedef",d.reserved,"typedef"),u8:new de("u8",d.reserved,"u8"),u16:new de("u16",d.reserved,"u16"),u64:new de("u64",d.reserved,"u64"),unless:new de("unless",d.reserved,"unless"),using:new de("using",d.reserved,"using"),vec:new de("vec",d.reserved,"vec"),void:new de("void",d.reserved,"void")},he.keywords={array:new de("array",d.keyword,"array"),atomic:new de("atomic",d.keyword,"atomic"),bool:new de("bool",d.keyword,"bool"),f32:new de("f32",d.keyword,"f32"),i32:new de("i32",d.keyword,"i32"),mat2x2:new de("mat2x2",d.keyword,"mat2x2"),mat2x3:new de("mat2x3",d.keyword,"mat2x3"),mat2x4:new de("mat2x4",d.keyword,"mat2x4"),mat3x2:new de("mat3x2",d.keyword,"mat3x2"),mat3x3:new de("mat3x3",d.keyword,"mat3x3"),mat3x4:new de("mat3x4",d.keyword,"mat3x4"),mat4x2:new de("mat4x2",d.keyword,"mat4x2"),mat4x3:new de("mat4x3",d.keyword,"mat4x3"),mat4x4:new de("mat4x4",d.keyword,"mat4x4"),ptr:new de("ptr",d.keyword,"ptr"),sampler:new de("sampler",d.keyword,"sampler"),sampler_comparison:new de("sampler_comparison",d.keyword,"sampler_comparison"),struct:new de("struct",d.keyword,"struct"),texture_1d:new de("texture_1d",d.keyword,"texture_1d"),texture_2d:new de("texture_2d",d.keyword,"texture_2d"),texture_2d_array:new de("texture_2d_array",d.keyword,"texture_2d_array"),texture_3d:new de("texture_3d",d.keyword,"texture_3d"),texture_cube:new de("texture_cube",d.keyword,"texture_cube"),texture_cube_array:new de("texture_cube_array",d.keyword,"texture_cube_array"),texture_multisampled_2d:new de("texture_multisampled_2d",d.keyword,"texture_multisampled_2d"),texture_storage_1d:new de("texture_storage_1d",d.keyword,"texture_storage_1d"),texture_storage_2d:new de("texture_storage_2d",d.keyword,"texture_storage_2d"),texture_storage_2d_array:new de("texture_storage_2d_array",d.keyword,"texture_storage_2d_array"),texture_storage_3d:new de("texture_storage_3d",d.keyword,"texture_storage_3d"),texture_depth_2d:new de("texture_depth_2d",d.keyword,"texture_depth_2d"),texture_depth_2d_array:new de("texture_depth_2d_array",d.keyword,"texture_depth_2d_array"),texture_depth_cube:new de("texture_depth_cube",d.keyword,"texture_depth_cube"),texture_depth_cube_array:new de("texture_depth_cube_array",d.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new de("texture_depth_multisampled_2d",d.keyword,"texture_depth_multisampled_2d"),texture_external:new de("texture_external",d.keyword,"texture_external"),u32:new de("u32",d.keyword,"u32"),vec2:new de("vec2",d.keyword,"vec2"),vec3:new de("vec3",d.keyword,"vec3"),vec4:new de("vec4",d.keyword,"vec4"),bitcast:new de("bitcast",d.keyword,"bitcast"),block:new de("block",d.keyword,"block"),break:new de("break",d.keyword,"break"),case:new de("case",d.keyword,"case"),continue:new de("continue",d.keyword,"continue"),continuing:new de("continuing",d.keyword,"continuing"),default:new de("default",d.keyword,"default"),discard:new de("discard",d.keyword,"discard"),else:new de("else",d.keyword,"else"),enable:new de("enable",d.keyword,"enable"),fallthrough:new de("fallthrough",d.keyword,"fallthrough"),false:new de("false",d.keyword,"false"),fn:new de("fn",d.keyword,"fn"),for:new de("for",d.keyword,"for"),function:new de("function",d.keyword,"function"),if:new de("if",d.keyword,"if"),let:new de("let",d.keyword,"let"),const:new de("const",d.keyword,"const"),loop:new de("loop",d.keyword,"loop"),while:new de("while",d.keyword,"while"),private:new de("private",d.keyword,"private"),read:new de("read",d.keyword,"read"),read_write:new de("read_write",d.keyword,"read_write"),return:new de("return",d.keyword,"return"),storage:new de("storage",d.keyword,"storage"),switch:new de("switch",d.keyword,"switch"),true:new de("true",d.keyword,"true"),alias:new de("alias",d.keyword,"alias"),type:new de("type",d.keyword,"type"),uniform:new de("uniform",d.keyword,"uniform"),var:new de("var",d.keyword,"var"),override:new de("override",d.keyword,"override"),workgroup:new de("workgroup",d.keyword,"workgroup"),write:new de("write",d.keyword,"write"),r8unorm:new de("r8unorm",d.keyword,"r8unorm"),r8snorm:new de("r8snorm",d.keyword,"r8snorm"),r8uint:new de("r8uint",d.keyword,"r8uint"),r8sint:new de("r8sint",d.keyword,"r8sint"),r16uint:new de("r16uint",d.keyword,"r16uint"),r16sint:new de("r16sint",d.keyword,"r16sint"),r16float:new de("r16float",d.keyword,"r16float"),rg8unorm:new de("rg8unorm",d.keyword,"rg8unorm"),rg8snorm:new de("rg8snorm",d.keyword,"rg8snorm"),rg8uint:new de("rg8uint",d.keyword,"rg8uint"),rg8sint:new de("rg8sint",d.keyword,"rg8sint"),r32uint:new de("r32uint",d.keyword,"r32uint"),r32sint:new de("r32sint",d.keyword,"r32sint"),r32float:new de("r32float",d.keyword,"r32float"),rg16uint:new de("rg16uint",d.keyword,"rg16uint"),rg16sint:new de("rg16sint",d.keyword,"rg16sint"),rg16float:new de("rg16float",d.keyword,"rg16float"),rgba8unorm:new de("rgba8unorm",d.keyword,"rgba8unorm"),rgba8unorm_srgb:new de("rgba8unorm_srgb",d.keyword,"rgba8unorm_srgb"),rgba8snorm:new de("rgba8snorm",d.keyword,"rgba8snorm"),rgba8uint:new de("rgba8uint",d.keyword,"rgba8uint"),rgba8sint:new de("rgba8sint",d.keyword,"rgba8sint"),bgra8unorm:new de("bgra8unorm",d.keyword,"bgra8unorm"),bgra8unorm_srgb:new de("bgra8unorm_srgb",d.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new de("rgb10a2unorm",d.keyword,"rgb10a2unorm"),rg11b10float:new de("rg11b10float",d.keyword,"rg11b10float"),rg32uint:new de("rg32uint",d.keyword,"rg32uint"),rg32sint:new de("rg32sint",d.keyword,"rg32sint"),rg32float:new de("rg32float",d.keyword,"rg32float"),rgba16uint:new de("rgba16uint",d.keyword,"rgba16uint"),rgba16sint:new de("rgba16sint",d.keyword,"rgba16sint"),rgba16float:new de("rgba16float",d.keyword,"rgba16float"),rgba32uint:new de("rgba32uint",d.keyword,"rgba32uint"),rgba32sint:new de("rgba32sint",d.keyword,"rgba32sint"),rgba32float:new de("rgba32float",d.keyword,"rgba32float"),static_assert:new de("static_assert",d.keyword,"static_assert")},he.tokens={decimal_float_literal:new de("decimal_float_literal",d.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new de("hex_float_literal",d.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new de("int_literal",d.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new de("uint_literal",d.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new de("ident",d.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new de("and",d.token,"&"),and_and:new de("and_and",d.token,"&&"),arrow:new de("arrow ",d.token,"->"),attr:new de("attr",d.token,"@"),attr_left:new de("attr_left",d.token,"[["),attr_right:new de("attr_right",d.token,"]]"),forward_slash:new de("forward_slash",d.token,"/"),bang:new de("bang",d.token,"!"),bracket_left:new de("bracket_left",d.token,"["),bracket_right:new de("bracket_right",d.token,"]"),brace_left:new de("brace_left",d.token,"{"),brace_right:new de("brace_right",d.token,"}"),colon:new de("colon",d.token,":"),comma:new de("comma",d.token,","),equal:new de("equal",d.token,"="),equal_equal:new de("equal_equal",d.token,"=="),not_equal:new de("not_equal",d.token,"!="),greater_than:new de("greater_than",d.token,">"),greater_than_equal:new de("greater_than_equal",d.token,">="),shift_right:new de("shift_right",d.token,">>"),less_than:new de("less_than",d.token,"<"),less_than_equal:new de("less_than_equal",d.token,"<="),shift_left:new de("shift_left",d.token,"<<"),modulo:new de("modulo",d.token,"%"),minus:new de("minus",d.token,"-"),minus_minus:new de("minus_minus",d.token,"--"),period:new de("period",d.token,"."),plus:new de("plus",d.token,"+"),plus_plus:new de("plus_plus",d.token,"++"),or:new de("or",d.token,"|"),or_or:new de("or_or",d.token,"||"),paren_left:new de("paren_left",d.token,"("),paren_right:new de("paren_right",d.token,")"),semicolon:new de("semicolon",d.token,";"),star:new de("star",d.token,"*"),tilde:new de("tilde",d.token,"~"),underscore:new de("underscore",d.token,"_"),xor:new de("xor",d.token,"^"),plus_equal:new de("plus_equal",d.token,"+="),minus_equal:new de("minus_equal",d.token,"-="),times_equal:new de("times_equal",d.token,"*="),division_equal:new de("division_equal",d.token,"/="),modulo_equal:new de("modulo_equal",d.token,"%="),and_equal:new de("and_equal",d.token,"&="),or_equal:new de("or_equal",d.token,"|="),xor_equal:new de("xor_equal",d.token,"^="),shift_right_equal:new de("shift_right_equal",d.token,">>="),shift_left_equal:new de("shift_left_equal",d.token,"<<=")},he.storage_class=[c.keywords.function,c.keywords.private,c.keywords.workgroup,c.keywords.uniform,c.keywords.storage],he.access_mode=[c.keywords.read,c.keywords.write,c.keywords.read_write],he.sampler_type=[c.keywords.sampler,c.keywords.sampler_comparison],he.sampled_texture_type=[c.keywords.texture_1d,c.keywords.texture_2d,c.keywords.texture_2d_array,c.keywords.texture_3d,c.keywords.texture_cube,c.keywords.texture_cube_array],he.multisampled_texture_type=[c.keywords.texture_multisampled_2d],he.storage_texture_type=[c.keywords.texture_storage_1d,c.keywords.texture_storage_2d,c.keywords.texture_storage_2d_array,c.keywords.texture_storage_3d],he.depth_texture_type=[c.keywords.texture_depth_2d,c.keywords.texture_depth_2d_array,c.keywords.texture_depth_cube,c.keywords.texture_depth_cube_array,c.keywords.texture_depth_multisampled_2d],he.texture_external_type=[c.keywords.texture_external],he.any_texture_type=[...c.sampled_texture_type,...c.multisampled_texture_type,...c.storage_texture_type,...c.depth_texture_type,...c.texture_external_type],he.texel_format=[c.keywords.r8unorm,c.keywords.r8snorm,c.keywords.r8uint,c.keywords.r8sint,c.keywords.r16uint,c.keywords.r16sint,c.keywords.r16float,c.keywords.rg8unorm,c.keywords.rg8snorm,c.keywords.rg8uint,c.keywords.rg8sint,c.keywords.r32uint,c.keywords.r32sint,c.keywords.r32float,c.keywords.rg16uint,c.keywords.rg16sint,c.keywords.rg16float,c.keywords.rgba8unorm,c.keywords.rgba8unorm_srgb,c.keywords.rgba8snorm,c.keywords.rgba8uint,c.keywords.rgba8sint,c.keywords.bgra8unorm,c.keywords.bgra8unorm_srgb,c.keywords.rgb10a2unorm,c.keywords.rg11b10float,c.keywords.rg32uint,c.keywords.rg32sint,c.keywords.rg32float,c.keywords.rgba16uint,c.keywords.rgba16sint,c.keywords.rgba16float,c.keywords.rgba32uint,c.keywords.rgba32sint,c.keywords.rgba32float],he.const_literal=[c.tokens.int_literal,c.tokens.uint_literal,c.tokens.decimal_float_literal,c.tokens.hex_float_literal,c.keywords.true,c.keywords.false],he.literal_or_ident=[c.tokens.ident,c.tokens.int_literal,c.tokens.uint_literal,c.tokens.decimal_float_literal,c.tokens.hex_float_literal],he.element_count_expression=[c.tokens.int_literal,c.tokens.uint_literal,c.tokens.ident],he.template_types=[c.keywords.vec2,c.keywords.vec3,c.keywords.vec4,c.keywords.mat2x2,c.keywords.mat2x3,c.keywords.mat2x4,c.keywords.mat3x2,c.keywords.mat3x3,c.keywords.mat3x4,c.keywords.mat4x2,c.keywords.mat4x3,c.keywords.mat4x4,c.keywords.atomic,c.keywords.bitcast,...c.any_texture_type],he.attribute_name=[c.tokens.ident,c.keywords.block],he.assignment_operators=[c.tokens.equal,c.tokens.plus_equal,c.tokens.minus_equal,c.tokens.times_equal,c.tokens.division_equal,c.tokens.modulo_equal,c.tokens.and_equal,c.tokens.or_equal,c.tokens.xor_equal,c.tokens.shift_right_equal,c.tokens.shift_left_equal],he.increment_operators=[c.tokens.plus_plus,c.tokens.minus_minus];class fe{constructor(e,t,r){this.type=e,this.lexeme=t,this.line=r}toString(){return this.lexeme}isTemplateType(){return-1!=he.template_types.indexOf(this.type)}isArrayType(){return this.type==he.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class pe{constructor(e){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=e?e:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new fe(he.eof,"",this._line)),this._tokens}scanToken(){let e=this._advance();if("\n"==e)return this._line++,!0;if(this._isWhitespace(e))return!0;if("/"==e){if("/"==this._peekAhead()){for(;"\n"!=e;){if(this._isAtEnd())return!0;e=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let t=1;for(;t>0;){if(this._isAtEnd())return!0;if(e=this._advance(),"\n"==e)this._line++;else if("*"==e){if("/"==this._peekAhead()&&(this._advance(),t--,0==t))return!0}else"/"==e&&"*"==this._peekAhead()&&(this._advance(),t++)}return!0}}let t=he.none;for(;;){let r=this._findType(e);const n=this._peekAhead();if(">"==e&&(">"==n||"="==n)){let e=!1,t=this._tokens.length-1;for(let r=0;r<5&&t>=0;++r,--t)if(this._tokens[t].type===he.tokens.less_than){t>0&&this._tokens[t-1].isArrayOrTemplateType()&&(e=!0);break}if(e)return this._addToken(r),!0}if(r===he.none){let n=e,i=0;const a=2;for(let e=0;e<a;++e)if(n+=this._peekAhead(e),r=this._findType(n),r!==he.none){i=e;break}if(r===he.none)return t!==he.none&&(this._current--,this._addToken(t),!0);e=n,this._current+=i+1}if(t=r,this._isAtEnd())break;e+=this._advance()}return t!==he.none&&(this._addToken(t),!0)}_findType(e){for(const t in he.keywords){const r=he.keywords[t];if(this._match(e,r.rule))return r}for(const t in he.tokens){const r=he.tokens[t];if(this._match(e,r.rule))return r}return he.none}_match(e,t){if("string"==typeof t){if(t==e)return!0}else{const r=t.exec(e);if(r&&0==r.index&&r[0]==e)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(e){return" "==e||"\t"==e||"\r"==e}_advance(e=0){let t=this._source[this._current];return e=e||0,e++,this._current+=e,t}_peekAhead(e=0){return e=e||0,this._current+e>=this._source.length?"\0":this._source[this._current+e]}_addToken(e){const t=this._source.substring(this._start,this._current);this._tokens.push(new fe(e,t,this._line))}}class me{constructor(){this._tokens=[],this._current=0,this._context=new f}parse(e){this._initialize(e);let t=[];for(;!this._isAtEnd();){const e=this._global_decl_or_directive();if(!e)break;t.push(e)}return t}_initialize(e){if(e)if("string"==typeof e){const t=new pe(e);this._tokens=t.scanTokens()}else this._tokens=e;else this._tokens=[];this._current=0}_error(e,t){return console.error(e,t),{token:e,message:t,toString:function(){return`${t}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==he.eof}_match(e){if(e instanceof de)return!!this._check(e)&&(this._advance(),!0);for(let t=0,r=e.length;t<r;++t){const r=e[t];if(this._check(r))return this._advance(),!0}return!1}_consume(e,t){if(this._check(e))return this._advance();throw this._error(this._peek(),t)}_check(e){if(this._isAtEnd())return!1;const t=this._peek();if(e instanceof Array){let r=t.type;return-1!=e.indexOf(r)}return t.type==e}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(he.tokens.semicolon)&&!this._isAtEnd(););if(this._match(he.keywords.alias)){const e=this._type_alias();return this._consume(he.tokens.semicolon,"Expected ';'"),e}if(this._match(he.keywords.enable)){const e=this._enable_directive();return this._consume(he.tokens.semicolon,"Expected ';'"),e}const e=this._attribute();if(this._check(he.keywords.var)){const t=this._global_variable_decl();return null!=t&&(t.attributes=e),this._consume(he.tokens.semicolon,"Expected ';'."),t}if(this._check(he.keywords.override)){const t=this._override_variable_decl();return null!=t&&(t.attributes=e),this._consume(he.tokens.semicolon,"Expected ';'."),t}if(this._check(he.keywords.let)){const t=this._global_let_decl();return null!=t&&(t.attributes=e),this._consume(he.tokens.semicolon,"Expected ';'."),t}if(this._check(he.keywords.const)){const t=this._global_const_decl();return null!=t&&(t.attributes=e),this._consume(he.tokens.semicolon,"Expected ';'."),t}if(this._check(he.keywords.struct)){const t=this._struct_decl();return null!=t&&(t.attributes=e),t}if(this._check(he.keywords.fn)){const t=this._function_decl();return null!=t&&(t.attributes=e),t}return null}_function_decl(){if(!this._match(he.keywords.fn))return null;const e=this._consume(he.tokens.ident,"Expected function name.").toString();this._consume(he.tokens.paren_left,"Expected '(' for function arguments.");const t=[];if(!this._check(he.tokens.paren_right))do{if(this._check(he.tokens.paren_right))break;const e=this._attribute(),r=this._consume(he.tokens.ident,"Expected argument name.").toString();this._consume(he.tokens.colon,"Expected ':' for argument type.");const n=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=n,t.push(new oe(r,i,e)))}while(this._match(he.tokens.comma));this._consume(he.tokens.paren_right,"Expected ')' after function arguments.");let r=null;if(this._match(he.tokens.arrow)){const e=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=e)}const n=this._compound_statement();return new x(e,t,r,n)}_compound_statement(){const e=[];for(this._consume(he.tokens.brace_left,"Expected '{' for block.");!this._check(he.tokens.brace_right);){const t=this._statement();null!==t&&e.push(t)}return this._consume(he.tokens.brace_right,"Expected '}' for block."),e}_statement(){for(;this._match(he.tokens.semicolon)&&!this._isAtEnd(););if(this._check(he.keywords.if))return this._if_statement();if(this._check(he.keywords.switch))return this._switch_statement();if(this._check(he.keywords.loop))return this._loop_statement();if(this._check(he.keywords.for))return this._for_statement();if(this._check(he.keywords.while))return this._while_statement();if(this._check(he.keywords.continuing))return this._continuing_statement();if(this._check(he.keywords.static_assert))return this._static_assert_statement();if(this._check(he.tokens.brace_left))return this._compound_statement();let e=null;return e=this._check(he.keywords.return)?this._return_statement():this._check([he.keywords.var,he.keywords.let,he.keywords.const])?this._variable_statement():this._match(he.keywords.discard)?new z:this._match(he.keywords.break)?new j:this._match(he.keywords.continue)?new L:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=e&&this._consume(he.tokens.semicolon,"Expected ';' after statement."),e}_static_assert_statement(){if(!this._match(he.keywords.static_assert))return null;let e=this._optional_paren_expression();return new y(e)}_while_statement(){if(!this._match(he.keywords.while))return null;let e=this._optional_paren_expression();const t=this._compound_statement();return new b(e,t)}_continuing_statement(){if(!this._match(he.keywords.continuing))return null;const e=this._compound_statement();return new _(e)}_for_statement(){if(!this._match(he.keywords.for))return null;this._consume(he.tokens.paren_left,"Expected '('.");const e=this._check(he.tokens.semicolon)?null:this._for_init();this._consume(he.tokens.semicolon,"Expected ';'.");const t=this._check(he.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(he.tokens.semicolon,"Expected ';'.");const r=this._check(he.tokens.paren_right)?null:this._for_increment();this._consume(he.tokens.paren_right,"Expected ')'.");const n=this._compound_statement();return new w(e,t,r,n)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(he.keywords.var)){const e=this._variable_decl();if(null===e)throw this._error(this._peek(),"Variable declaration expected.");let t=null;return this._match(he.tokens.equal)&&(t=this._short_circuit_or_expression()),new T(e.name,e.type,e.storage,e.access,t)}if(this._match(he.keywords.let)){const e=this._consume(he.tokens.ident,"Expected name for let.").toString();let t=null;if(this._match(he.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(he.tokens.equal,"Expected '=' for let.");const r=this._short_circuit_or_expression();return new S(e,t,null,null,r)}if(this._match(he.keywords.const)){const e=this._consume(he.tokens.ident,"Expected name for const.").toString();let t=null;if(this._match(he.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(he.tokens.equal,"Expected '=' for const.");const r=this._short_circuit_or_expression();return new k(e,t,null,null,r)}return null}_increment_decrement_statement(){const e=this._current,t=this._unary_expression();if(null==t)return null;if(!this._check(he.increment_operators))return this._current=e,null;const r=this._consume(he.increment_operators,"Expected increment operator");return new A(r.type===he.tokens.plus_plus?l.increment:l.decrement,t)}_assignment_statement(){let e=null;if(this._check(he.tokens.brace_right))return null;let t=this._match(he.tokens.underscore);if(t||(e=this._unary_expression()),!t&&null==e)return null;const r=this._consume(he.assignment_operators,"Expected assignment operator."),n=this._short_circuit_or_expression();return new O(u.parse(r.lexeme),e,n)}_func_call_statement(){if(!this._check(he.tokens.ident))return null;const e=this._current,t=this._consume(he.tokens.ident,"Expected function name."),r=this._argument_expression_list();return null===r?(this._current=e,null):new E(t.lexeme,r)}_loop_statement(){if(!this._match(he.keywords.loop))return null;this._consume(he.tokens.brace_left,"Expected '{' for loop.");const e=[];let t=this._statement();for(;null!==t;){if(Array.isArray(t))for(let r of t)e.push(r);else e.push(t);t=this._statement()}let r=null;return this._match(he.keywords.continuing)&&(r=this._compound_statement()),this._consume(he.tokens.brace_right,"Expected '}' for loop."),new M(e,r)}_switch_statement(){if(!this._match(he.keywords.switch))return null;const e=this._optional_paren_expression();this._consume(he.tokens.brace_left,"Expected '{' for switch.");const t=this._switch_body();if(null==t||0==t.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(he.tokens.brace_right,"Expected '}' for switch."),new C(e,t)}_switch_body(){const e=[];if(this._match(he.keywords.case)){const t=this._case_selectors();this._match(he.tokens.colon),this._consume(he.tokens.brace_left,"Exected '{' for switch case.");const r=this._case_body();this._consume(he.tokens.brace_right,"Exected '}' for switch case."),e.push(new ae(t,r))}if(this._match(he.keywords.default)){this._match(he.tokens.colon),this._consume(he.tokens.brace_left,"Exected '{' for switch default.");const t=this._case_body();this._consume(he.tokens.brace_right,"Exected '}' for switch default."),e.push(new se(t))}if(this._check([he.keywords.default,he.keywords.case])){const t=this._switch_body();e.push(t[0])}return e}_case_selectors(){var e,t,r,n;const i=[null!==(t=null===(e=this._shift_expression())||void 0===e?void 0:e.evaluate(this._context).toString())&&void 0!==t?t:""];for(;this._match(he.tokens.comma);)i.push(null!==(n=null===(r=this._shift_expression())||void 0===r?void 0:r.evaluate(this._context).toString())&&void 0!==n?n:"");return i}_case_body(){if(this._match(he.keywords.fallthrough))return this._consume(he.tokens.semicolon,"Expected ';'"),[];let e=this._statement();if(null==e)return[];e instanceof Array||(e=[e]);const t=this._case_body();return 0==t.length?e:[...e,t[0]]}_if_statement(){if(!this._match(he.keywords.if))return null;const e=this._optional_paren_expression(),t=this._compound_statement();let r=[];this._match_elseif()&&(r=this._elseif_statement(r));let n=null;return this._match(he.keywords.else)&&(n=this._compound_statement()),new I(e,t,r,n)}_match_elseif(){return this._tokens[this._current].type===he.keywords.else&&this._tokens[this._current+1].type===he.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(e=[]){const t=this._optional_paren_expression(),r=this._compound_statement();return e.push(new le(t,r)),this._match_elseif()&&this._elseif_statement(e),e}_return_statement(){if(!this._match(he.keywords.return))return null;const e=this._short_circuit_or_expression();return new U(e)}_short_circuit_or_expression(){let e=this._short_circuit_and_expr();for(;this._match(he.tokens.or_or);)e=new ne(this._previous().toString(),e,this._short_circuit_and_expr());return e}_short_circuit_and_expr(){let e=this._inclusive_or_expression();for(;this._match(he.tokens.and_and);)e=new ne(this._previous().toString(),e,this._inclusive_or_expression());return e}_inclusive_or_expression(){let e=this._exclusive_or_expression();for(;this._match(he.tokens.or);)e=new ne(this._previous().toString(),e,this._exclusive_or_expression());return e}_exclusive_or_expression(){let e=this._and_expression();for(;this._match(he.tokens.xor);)e=new ne(this._previous().toString(),e,this._and_expression());return e}_and_expression(){let e=this._equality_expression();for(;this._match(he.tokens.and);)e=new ne(this._previous().toString(),e,this._equality_expression());return e}_equality_expression(){const e=this._relational_expression();return this._match([he.tokens.equal_equal,he.tokens.not_equal])?new ne(this._previous().toString(),e,this._relational_expression()):e}_relational_expression(){let e=this._shift_expression();for(;this._match([he.tokens.less_than,he.tokens.greater_than,he.tokens.less_than_equal,he.tokens.greater_than_equal]);)e=new ne(this._previous().toString(),e,this._shift_expression());return e}_shift_expression(){let e=this._additive_expression();for(;this._match([he.tokens.shift_left,he.tokens.shift_right]);)e=new ne(this._previous().toString(),e,this._additive_expression());return e}_additive_expression(){let e=this._multiplicative_expression();for(;this._match([he.tokens.plus,he.tokens.minus]);)e=new ne(this._previous().toString(),e,this._multiplicative_expression());return e}_multiplicative_expression(){let e=this._unary_expression();for(;this._match([he.tokens.star,he.tokens.forward_slash,he.tokens.modulo]);)e=new ne(this._previous().toString(),e,this._unary_expression());return e}_unary_expression(){return this._match([he.tokens.minus,he.tokens.bang,he.tokens.tilde,he.tokens.star,he.tokens.and])?new re(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const e=this._primary_expression(),t=this._postfix_expression();return t&&(e.postfix=t),e}_postfix_expression(){if(this._match(he.tokens.bracket_left)){const e=this._short_circuit_or_expression();this._consume(he.tokens.bracket_right,"Expected ']'.");const t=this._postfix_expression();return t&&(e.postfix=t),e}if(this._match(he.tokens.period)){const e=this._consume(he.tokens.ident,"Expected member name."),t=this._postfix_expression(),r=new W(e.lexeme);return t&&(r.postfix=t),r}return null}_getStruct(e){return this._context.aliases.has(e)?this._context.aliases.get(e).type:this._context.structs.has(e)?this._context.structs.get(e):null}_primary_expression(){if(this._match(he.tokens.ident)){const e=this._previous().toString();if(this._check(he.tokens.paren_left)){const t=this._argument_expression_list(),r=this._getStruct(e);return null!=r?new Y(r,t):new H(e,t)}if(this._context.constants.has(e)){const t=this._context.constants.get(e);return new Z(e,t.value)}return new X(e)}if(this._match(he.const_literal))return new K(parseFloat(this._previous().toString()));if(this._check(he.tokens.paren_left))return this._paren_expression();if(this._match(he.keywords.bitcast)){this._consume(he.tokens.less_than,"Expected '<'.");const e=this._type_decl();this._consume(he.tokens.greater_than,"Expected '>'.");const t=this._paren_expression();return new Q(e,t)}const e=this._type_decl(),t=this._argument_expression_list();return new J(e,t)}_argument_expression_list(){if(!this._match(he.tokens.paren_left))return null;const e=[];do{if(this._check(he.tokens.paren_right))break;const t=this._short_circuit_or_expression();e.push(t)}while(this._match(he.tokens.comma));return this._consume(he.tokens.paren_right,"Expected ')' for agument list"),e}_optional_paren_expression(){this._match(he.tokens.paren_left);const e=this._short_circuit_or_expression();return this._match(he.tokens.paren_right),new ee([e])}_paren_expression(){this._consume(he.tokens.paren_left,"Expected '('.");const e=this._short_circuit_or_expression();return this._consume(he.tokens.paren_right,"Expected ')'."),new ee([e])}_struct_decl(){if(!this._match(he.keywords.struct))return null;const e=this._consume(he.tokens.ident,"Expected name for struct.").toString();this._consume(he.tokens.brace_left,"Expected '{' for struct body.");const t=[];for(;!this._check(he.tokens.brace_right);){const e=this._attribute(),r=this._consume(he.tokens.ident,"Expected variable name.").toString();this._consume(he.tokens.colon,"Expected ':' for struct member type.");const n=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=n),this._check(he.tokens.brace_right)?this._match(he.tokens.comma):this._consume(he.tokens.comma,"Expected ',' for struct member."),t.push(new ue(r,i,e))}this._consume(he.tokens.brace_right,"Expected '}' after struct body.");const r=new N(e,t);return this._context.structs.set(e,r),r}_global_variable_decl(){const e=this._variable_decl();return e&&this._match(he.tokens.equal)&&(e.value=this._const_expression()),e}_override_variable_decl(){const e=this._override_decl();return e&&this._match(he.tokens.equal)&&(e.value=this._const_expression()),e}_global_const_decl(){if(!this._match(he.keywords.const))return null;const e=this._consume(he.tokens.ident,"Expected variable name");let t=null;if(this._match(he.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let r=null;if(this._match(he.tokens.equal)){const e=this._short_circuit_or_expression();if(e instanceof Y)r=e;else if(e instanceof Z&&e.initializer instanceof Y)r=e.initializer;else try{const t=e.evaluate(this._context);r=new K(t)}catch(t){r=e}}const n=new k(e.toString(),t,"","",r);return this._context.constants.set(n.name,n),n}_global_let_decl(){if(!this._match(he.keywords.let))return null;const e=this._consume(he.tokens.ident,"Expected variable name");let t=null;if(this._match(he.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let r=null;return this._match(he.tokens.equal)&&(r=this._const_expression()),new S(e.toString(),t,"","",r)}_const_expression(){if(this._match(he.const_literal))return new W(this._previous().toString());const e=this._type_decl();this._consume(he.tokens.paren_left,"Expected '('.");let t=[];for(;!this._check(he.tokens.paren_right)&&(t.push(this._const_expression()),this._check(he.tokens.comma));)this._advance();return this._consume(he.tokens.paren_right,"Expected ')'."),new Y(e,t)}_variable_decl(){if(!this._match(he.keywords.var))return null;let e="",t="";this._match(he.tokens.less_than)&&(e=this._consume(he.storage_class,"Expected storage_class.").toString(),this._match(he.tokens.comma)&&(t=this._consume(he.access_mode,"Expected access_mode.").toString()),this._consume(he.tokens.greater_than,"Expected '>'."));const r=this._consume(he.tokens.ident,"Expected variable name");let n=null;if(this._match(he.tokens.colon)){const e=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=e)}return new T(r.toString(),n,e,t,null)}_override_decl(){if(!this._match(he.keywords.override))return null;const e=this._consume(he.tokens.ident,"Expected variable name");let t=null;if(this._match(he.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}return new P(e.toString(),t,null)}_enable_directive(){const e=this._consume(he.tokens.ident,"identity expected.");return new R(e.toString())}_type_alias(){const e=this._consume(he.tokens.ident,"identity expected.");this._consume(he.tokens.equal,"Expected '=' for type alias.");let t=this._type_decl();if(null===t)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);const r=new D(e.toString(),t);return this._context.aliases.set(r.name,r),r}_type_decl(){if(this._check([he.tokens.ident,...he.texel_format,he.keywords.bool,he.keywords.f32,he.keywords.i32,he.keywords.u32])){const e=this._advance(),t=e.toString();return this._context.structs.has(t)?this._context.structs.get(t):this._context.aliases.has(t)?this._context.aliases.get(t).type:new B(e.toString())}let e=this._texture_sampler_types();if(e)return e;if(this._check(he.template_types)){let e=this._advance().toString(),t=null,r=null;return this._match(he.tokens.less_than)&&(t=this._type_decl(),r=null,this._match(he.tokens.comma)&&(r=this._consume(he.access_mode,"Expected access_mode for pointer").toString()),this._consume(he.tokens.greater_than,"Expected '>' for type.")),new G(e,t,r)}if(this._match(he.keywords.ptr)){let e=this._previous().toString();this._consume(he.tokens.less_than,"Expected '<' for pointer.");const t=this._consume(he.storage_class,"Expected storage_class for pointer");this._consume(he.tokens.comma,"Expected ',' for pointer.");const r=this._type_decl();let n=null;return this._match(he.tokens.comma)&&(n=this._consume(he.access_mode,"Expected access_mode for pointer").toString()),this._consume(he.tokens.greater_than,"Expected '>' for pointer."),new V(e,t.toString(),r,n)}const t=this._attribute();if(this._match(he.keywords.array)){let e=null,r=-1;const n=this._previous();if(this._match(he.tokens.less_than)){e=this._type_decl(),this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);let t="";this._match(he.tokens.comma)&&(t=this._shift_expression().evaluate(this._context).toString()),this._consume(he.tokens.greater_than,"Expected '>' for array."),r=t?parseInt(t):0}return new F(n.toString(),t,e,r)}return null}_texture_sampler_types(){if(this._match(he.sampler_type))return new $(this._previous().toString(),null,null);if(this._match(he.depth_texture_type))return new $(this._previous().toString(),null,null);if(this._match(he.sampled_texture_type)||this._match(he.multisampled_texture_type)){const e=this._previous();this._consume(he.tokens.less_than,"Expected '<' for sampler type.");const t=this._type_decl();return this._consume(he.tokens.greater_than,"Expected '>' for sampler type."),new $(e.toString(),t,null)}if(this._match(he.storage_texture_type)){const e=this._previous();this._consume(he.tokens.less_than,"Expected '<' for sampler type.");const t=this._consume(he.texel_format,"Invalid texel format.").toString();this._consume(he.tokens.comma,"Expected ',' after texel format.");const r=this._consume(he.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(he.tokens.greater_than,"Expected '>' for sampler type."),new $(e.toString(),t,r)}return null}_attribute(){let e=[];for(;this._match(he.tokens.attr);){const t=this._consume(he.attribute_name,"Expected attribute name"),r=new ce(t.toString(),null);if(this._match(he.tokens.paren_left)){if(r.value=this._consume(he.literal_or_ident,"Expected attribute value").toString(),this._check(he.tokens.comma)){this._advance();do{const e=this._consume(he.literal_or_ident,"Expected attribute value").toString();r.value instanceof Array||(r.value=[r.value]),r.value.push(e)}while(this._match(he.tokens.comma))}this._consume(he.tokens.paren_right,"Expected ')'")}e.push(r)}for(;this._match(he.tokens.attr_left);){if(!this._check(he.tokens.attr_right))do{const t=this._consume(he.attribute_name,"Expected attribute name"),r=new ce(t.toString(),null);if(this._match(he.tokens.paren_left)){if(r.value=[this._consume(he.literal_or_ident,"Expected attribute value").toString()],this._check(he.tokens.comma)){this._advance();do{const e=this._consume(he.literal_or_ident,"Expected attribute value").toString();r.value.push(e)}while(this._match(he.tokens.comma))}this._consume(he.tokens.paren_right,"Expected ')'")}e.push(r)}while(this._match(he.tokens.comma));this._consume(he.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==e.length?null:e}}class ge{constructor(e,t){this.name=e,this.attributes=t,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class ve{constructor(e,t,r){this.name=e,this.type=t,this.attributes=r,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class xe extends ge{constructor(e,t){super(e,t),this.members=[],this.align=0}get isStruct(){return!0}}class ye extends ge{constructor(e,t){super(e,t),this.count=0,this.stride=0}get isArray(){return!0}}class be extends ge{constructor(e,t,r,n){super(e,r),this.format=t,this.access=n}get isTemplate(){return!0}}!function(e){e[e.Uniform=0]="Uniform",e[e.Storage=1]="Storage",e[e.Texture=2]="Texture",e[e.Sampler=3]="Sampler",e[e.StorageTexture=4]="StorageTexture"}(h||(h={}));class _e{constructor(e,t,r,n,i,a,s){this.name=e,this.type=t,this.group=r,this.binding=n,this.attributes=i,this.resourceType=a,this.access=s}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class we{constructor(e,t){this.name=e,this.type=t}}class Te{constructor(e,t){this.align=e,this.size=t}}class Pe{constructor(e,t,r,n){this.name=e,this.type=t,this.locationType=r,this.location=n,this.interpolation=null}}class Se{constructor(e,t,r,n){this.name=e,this.type=t,this.locationType=r,this.location=n}}class ke{constructor(e,t=null){this.stage=null,this.inputs=[],this.outputs=[],this.resources=[],this.name=e,this.stage=t}}class Ae{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class Oe{constructor(e,t,r,n){this.name=e,this.type=t,this.attributes=r,this.id=n}}class Ee{constructor(e){this.resources=null,this.node=e}}class Me{constructor(e){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new Ae,this._types=new Map,this._functions=new Map,e&&this.update(e)}_isStorageTexture(e){return"texture_storage_1d"==e.name||"texture_storage_2d"==e.name||"texture_storage_2d_array"==e.name||"texture_storage_3d"==e.name}update(e){const t=(new me).parse(e);for(const e of t)e instanceof x&&this._functions.set(e.name,new Ee(e));for(const e of t)if(e instanceof N){const t=this._getTypeInfo(e,null);t instanceof xe&&this.structs.push(t)}else if(e instanceof D)this.aliases.push(this._getAliasInfo(e));else if(e instanceof P){const t=e,r=this._getAttributeNum(t.attributes,"id",0),n=null!=t.type?this._getTypeInfo(t.type,t.attributes):null;this.overrides.push(new Oe(t.name,n,t.attributes,r))}else if(this._isUniformVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=new _e(t.name,i,r,n,t.attributes,h.Uniform,t.access);this.uniforms.push(a)}else if(this._isStorageVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=this._isStorageTexture(i),s=new _e(t.name,i,r,n,t.attributes,a?h.StorageTexture:h.Storage,t.access);this.storage.push(s)}else if(this._isTextureVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=this._isStorageTexture(i),s=new _e(t.name,i,r,n,t.attributes,a?h.StorageTexture:h.Texture,t.access);a?this.storage.push(s):this.textures.push(s)}else if(this._isSamplerVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=new _e(t.name,i,r,n,t.attributes,h.Sampler,t.access);this.samplers.push(a)}else if(e instanceof x){const t=this._getAttribute(e,"vertex"),r=this._getAttribute(e,"fragment"),n=this._getAttribute(e,"compute"),i=t||r||n;if(i){const t=new ke(e.name,null==i?void 0:i.name);t.inputs=this._getInputs(e.args),t.outputs=this._getOutputs(e.returnType),t.resources=this._findResources(e),this.entry[i.name].push(t)}}}_findResource(e){for(const t of this.uniforms)if(t.name==e)return t;for(const t of this.storage)if(t.name==e)return t;for(const t of this.textures)if(t.name==e)return t;for(const t of this.samplers)if(t.name==e)return t;return null}_findResources(e){const t=[],r=this,n=[];return e.search((e=>{if(e instanceof m)n.push({});else if(e instanceof g)n.pop();else if(e instanceof T){if(n.length>0){const t=e;n[n.length-1][t.name]=t}}else if(e instanceof S){if(n.length>0){const t=e;n[n.length-1][t.name]=t}}else if(e instanceof X){const i=e;if(n.length>0&&n[n.length-1][i.name])return;const a=r._findResource(i.name);a&&t.push(a)}else if(e instanceof H){const n=e,i=r._functions.get(n.name);i&&(null===i.resources&&(i.resources=r._findResources(i.node)),t.push(...i.resources))}})),[...new Map(t.map((e=>[e.name,e]))).values()]}getBindGroups(){const e=[];function t(t,r){t>=e.length&&(e.length=t+1),void 0===e[t]&&(e[t]=[]),r>=e[t].length&&(e[t].length=r+1)}for(const r of this.uniforms)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.storage)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.textures)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.samplers)t(r.group,r.binding),e[r.group][r.binding]=r;return e}_getOutputs(e,t=void 0){if(void 0===t&&(t=[]),e instanceof N)this._getStructOutputs(e,t);else{const r=this._getOutputInfo(e);null!==r&&t.push(r)}return t}_getStructOutputs(e,t){for(const r of e.members)if(r.type instanceof N)this._getStructOutputs(r.type,t);else{const e=this._getAttribute(r,"location")||this._getAttribute(r,"builtin");if(null!==e){const n=this._getTypeInfo(r.type,r.type.attributes),i=this._parseInt(e.value),a=new Se(r.name,n,e.name,i);t.push(a)}}}_getOutputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const r=this._getTypeInfo(e,e.attributes),n=this._parseInt(t.value);return new Se("",r,t.name,n)}return null}_getInputs(e,t=void 0){void 0===t&&(t=[]);for(const r of e)if(r.type instanceof N)this._getStructInputs(r.type,t);else{const e=this._getInputInfo(r);null!==e&&t.push(e)}return t}_getStructInputs(e,t){for(const r of e.members)if(r.type instanceof N)this._getStructInputs(r.type,t);else{const e=this._getInputInfo(r);null!==e&&t.push(e)}}_getInputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const r=this._getAttribute(e,"interpolation"),n=this._getTypeInfo(e.type,e.attributes),i=this._parseInt(t.value),a=new Pe(e.name,n,t.name,i);return null!==r&&(a.interpolation=this._parseString(r.value)),a}return null}_parseString(e){return e instanceof Array&&(e=e[0]),e}_parseInt(e){e instanceof Array&&(e=e[0]);const t=parseInt(e);return isNaN(t)?e:t}_getAlias(e){for(const t of this.aliases)if(t.name==e)return t.type;return null}_getAliasInfo(e){return new we(e.name,this._getTypeInfo(e.type,null))}_getTypeInfo(e,t){if(this._types.has(e))return this._types.get(e);if(e instanceof F){const r=e,n=this._getTypeInfo(r.format,r.attributes),i=new ye(r.name,t);return i.format=n,i.count=r.count,this._types.set(e,i),this._updateTypeInfo(i),i}if(e instanceof N){const r=e,n=new xe(r.name,t);for(const e of r.members){const t=this._getTypeInfo(e.type,e.attributes);n.members.push(new ve(e.name,t,e.attributes))}return this._types.set(e,n),this._updateTypeInfo(n),n}if(e instanceof $){const r=e,n=r.format instanceof B,i=r.format?n?this._getTypeInfo(r.format,null):new ge(r.format,null):null,a=new be(r.name,i,t,r.access);return this._types.set(e,a),this._updateTypeInfo(a),a}if(e instanceof G){const r=e,n=r.format?this._getTypeInfo(r.format,null):null,i=new be(r.name,n,t,r.access);return this._types.set(e,i),this._updateTypeInfo(i),i}const r=new ge(e.name,t);return this._types.set(e,r),this._updateTypeInfo(r),r}_updateTypeInfo(e){var t,r;const n=this._getTypeSize(e);if(e.size=null!==(t=null==n?void 0:n.size)&&void 0!==t?t:0,e instanceof ye){const t=this._getTypeSize(e.format);e.stride=null!==(r=null==t?void 0:t.size)&&void 0!==r?r:0,this._updateTypeInfo(e.format)}e instanceof xe&&this._updateStructInfo(e)}_updateStructInfo(e){var t;let r=0,n=0,i=0,a=0;for(let s=0,o=e.members.length;s<o;++s){const o=e.members[s],l=this._getTypeSize(o);if(!l)continue;null!==(t=this._getAlias(o.type.name))&&void 0!==t||o.type;const u=l.align,c=l.size;r=this._roundUp(u,r+n),n=c,i=r,a=Math.max(a,u),o.offset=r,o.size=c,this._updateTypeInfo(o.type)}e.size=this._roundUp(a,i+n),e.align=a}_getTypeSize(e){var t;if(null==e)return null;const r=this._getAttributeNum(e.attributes,"size",0),n=this._getAttributeNum(e.attributes,"align",0);if(e instanceof ve&&(e=e.type),e instanceof ge){const t=this._getAlias(e.name);null!==t&&(e=t)}{const t=Me._typeInfo[e.name];if(void 0!==t){const i="f16"===e.format?2:1;return new Te(Math.max(n,t.align/i),Math.max(r,t.size/i))}}{const t=Me._typeInfo[e.name.substring(0,e.name.length-1)];if(t){const i="h"===e.name[e.name.length-1]?2:1;return new Te(Math.max(n,t.align/i),Math.max(r,t.size/i))}}if(e instanceof ye){let i=e,a=8,s=8;const o=this._getTypeSize(i.format);return null!==o&&(s=o.size,a=o.align),s=i.count*this._getAttributeNum(null!==(t=null==e?void 0:e.attributes)&&void 0!==t?t:null,"stride",this._roundUp(a,s)),r&&(s=r),new Te(Math.max(n,a),Math.max(r,s))}if(e instanceof xe){let t=0,i=0,a=0,s=0,o=0;for(const r of e.members){const e=this._getTypeSize(r.type);null!==e&&(t=Math.max(e.align,t),a=this._roundUp(e.align,a+s),s=e.size,o=a)}return i=this._roundUp(t,o+s),new Te(Math.max(n,t),Math.max(r,i))}return null}_isUniformVar(e){return e instanceof T&&"uniform"==e.storage}_isStorageVar(e){return e instanceof T&&"storage"==e.storage}_isTextureVar(e){return e instanceof T&&null!==e.type&&-1!=Me._textureTypes.indexOf(e.type.name)}_isSamplerVar(e){return e instanceof T&&null!==e.type&&-1!=Me._samplerTypes.indexOf(e.type.name)}_getAttribute(e,t){const r=e;if(!r||!r.attributes)return null;const n=r.attributes;for(let e of n)if(e.name==t)return e;return null}_getAttributeNum(e,t,r){if(null===e)return r;for(let n of e)if(n.name==t){let e=null!==n&&null!==n.value?n.value:r;return e instanceof Array&&(e=e[0]),"number"==typeof e?e:"string"==typeof e?parseInt(e):r}return r}_roundUp(e,t){return Math.ceil(t/e)*e}}function Ce(e,t){const r=function(e){return Array.isArray(e)||n(e)?[...e,1,1].slice(0,3):function(e){return[e.width,e.height||1,e.depthOrArrayLayers||1]}(e)}(e),i=Math.max(...r.slice(0,"3d"===t?3:2));return 1+Math.log2(i)|0}Me._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},Me._textureTypes=he.any_texture_type.map((e=>e.name)),Me._samplerTypes=he.sampler_type.map((e=>e.name));const Ie=new WeakMap;const Ue=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function Re(e){return n(e)||Array.isArray(e)||function(e){const t=e;return n(t.data)||Array.isArray(t.data)}(e)}function De(e){switch(e){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Ue.entries()].map((([e,{formats:[t,r]}])=>[[t,e],[r,e]])).flat());const ze={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},je=/([a-z]+)(\d+)([a-z]+)/;function Le(e){const[,t,r,n]=je.exec(e),i=t.length,a=parseInt(r)/8;return{channels:t,numChannels:i,bytesPerChannel:a,bytesPerElement:i*a,Type:ze[`${r}${n}`]}}function Be(e,t,r,i={}){r.forEach(((r,a)=>{const s=[0,0,a+(i.baseArrayLayer||0)];if(Re(r))!function(e,t,r,i){const a=function(e,t){if(n(e))return e;const{Type:r}=Le(t);return new r(e)}(r.data||r,t.format),s=function(e,t){return[e.width,e.height,e.depthOrArrayLayers].map((e=>Math.max(1,Math.floor(e/1))))}(t),{bytesPerElement:o}=Le(t.format),l=i.origin||[0,0,0];e.queue.writeTexture({texture:t,origin:l},a,{bytesPerRow:o*s[0],rowsPerImage:s[1]},s)}(e,t,r,{origin:s});else{const n=r,{flipY:a,premultipliedAlpha:o,colorSpace:l}=i;e.queue.copyExternalImageToTexture({source:n,flipY:a},{texture:t,premultipliedAlpha:o,colorSpace:l,origin:s},Ne(n,i))}})),t.mipLevelCount>1&&function(e,t,r){let n=Ie.get(e);n||(n={pipelineByFormatAndView:{},moduleByViewType:{}},Ie.set(e,n));let{sampler:i,uniformBuffer:a,uniformValues:s}=n;const{pipelineByFormatAndView:o,moduleByViewType:l}=n;r=r||function(e){switch(e.dimension){case"1d":return"1d";case"3d":return"3d";default:return e.depthOrArrayLayers>1?"2d-array":"2d"}}(t);let u=l[r];if(!u){const t=function(e){let t,r;switch(e){case"2d":t="texture_2d<f32>",r="textureSample(ourTexture, ourSampler, fsInput.texcoord)";break;case"2d-array":t="texture_2d_array<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              fsInput.texcoord,\n              uni.layer)";break;case"cube":t="texture_cube<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1))";break;case"cube-array":t="texture_cube_array<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1), uni.layer)";break;default:throw new Error(`unsupported view: ${e}`)}return`\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        struct Uniforms {\n          layer: u32,\n        };\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: ${t};\n        @group(0) @binding(2) var<uniform> uni: Uniforms;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          _ = uni.layer; // make sure this is used so all pipelines have the same bindings\n          return ${r};\n        }\n      `}(r);u=e.createShaderModule({label:`mip level generation for ${r}`,code:t}),l[r]=u}i||(i=e.createSampler({minFilter:"linear",magFilter:"linear"}),a=e.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),s=new Uint32Array(1),Object.assign(n,{sampler:i,uniformBuffer:a,uniformValues:s}));const c=`${t.format}.${r}`;o[c]||(o[c]=e.createRenderPipeline({label:`mip level generator pipeline for ${r}`,layout:"auto",vertex:{module:u,entryPoint:"vs"},fragment:{module:u,entryPoint:"fs",targets:[{format:t.format}]}}));const d=o[c];for(let n=1;n<t.mipLevelCount;++n)for(let o=0;o<t.depthOrArrayLayers;++o){s[0]=o,e.queue.writeBuffer(a,0,s);const l=e.createBindGroup({layout:d.getBindGroupLayout(0),entries:[{binding:0,resource:i},{binding:1,resource:t.createView({dimension:r,baseMipLevel:n-1,mipLevelCount:1})},{binding:2,resource:{buffer:a}}]}),u={label:"mip gen renderPass",colorAttachments:[{view:t.createView({dimension:"2d",baseMipLevel:n,mipLevelCount:1,baseArrayLayer:o,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},c=e.createCommandEncoder({label:"mip gen encoder"}),h=c.beginRenderPass(u);h.setPipeline(d),h.setBindGroup(0,l),h.draw(3),h.end();const f=c.finish();e.queue.submit([f])}}(e,t)}function Ne(e,t){if(e instanceof HTMLVideoElement)return[e.videoWidth,e.videoHeight,1];{const r=e,{width:i,height:a}=r;if(i>0&&a>0&&!Re(e))return[i,a,1];const s=t.format||"rgba8unorm",{bytesPerElement:o,bytesPerChannel:l}=Le(s),u=n(e)||Array.isArray(e)?e:e.data;return function(e,t,r,n="2d"){if(r%1!=0)throw new Error("can't guess dimensions");if(e||t){if(t){if(!e&&(e=r/t)%1)throw new Error("can't guess dimensions")}else if((t=r/e)%1)throw new Error("can't guess dimensions")}else{const i=Math.sqrt(r/("cube"===n?6:1));i%1==0?(e=i,t=i):(e=r,t=1)}const i=r/e/t;if(i%1)throw new Error("can't guess dimensions");return[e,t,i]}(i,a,(n(u)?u.byteLength:u.length*l)/o)}}async function Ge(e,t,r={}){const n=await Promise.all(t.map((e=>async function(e,t={}){const r=await fetch(e),n=await r.blob(),i={...t,...void 0!==t.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(n,i)}(e))));return function(e,t,r={}){const n=Ne(t[0],r);n[2]=n[2]>1?n[2]:t.length;const i=e.createTexture({dimension:De(r.dimension),format:r.format||"rgba8unorm",mipLevelCount:r.mipLevelCount?r.mipLevelCount:r.mips?Ce(n):1,size:n,usage:(r.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return Be(e,i,t,r),i}(e,n,r)}async function Ve(e,t,r={}){return Ge(e,[t],r)}},6300:(e,t,r)=>{r.d(t,{Yu:()=>Ve,Zc:()=>M,eR:()=>te,pB:()=>ve});let n=1e-6,i=Float32Array;function a(e=0,t=0){const r=new i(2);return void 0!==e&&(r[0]=e,void 0!==t&&(r[1]=t)),r}let s=Float32Array;function o(e,t,r){const n=new s(3);return void 0!==e&&(n[0]=e,void 0!==t&&(n[1]=t,void 0!==r&&(n[2]=r))),n}const l=a;function u(e,t,r){return(r=r||new i(2))[0]=e[0]-t[0],r[1]=e[1]-t[1],r}const c=u;function d(e,t,r){return(r=r||new i(2))[0]=e[0]*t,r[1]=e[1]*t,r}const h=d;function f(e,t){return(t=t||new i(2))[0]=1/e[0],t[1]=1/e[1],t}const p=f;function m(e,t){return e[0]*t[0]+e[1]*t[1]}function g(e){const t=e[0],r=e[1];return Math.sqrt(t*t+r*r)}const v=g;function x(e){const t=e[0],r=e[1];return t*t+r*r}const y=x;function b(e,t){const r=e[0]-t[0],n=e[1]-t[1];return Math.sqrt(r*r+n*n)}const _=b;function w(e,t){const r=e[0]-t[0],n=e[1]-t[1];return r*r+n*n}const T=w;function P(e,t){return(t=t||new i(2))[0]=e[0],t[1]=e[1],t}const S=P;function k(e,t,r){return(r=r||new i(2))[0]=e[0]*t[0],r[1]=e[1]*t[1],r}const A=k;function O(e,t,r){return(r=r||new i(2))[0]=e[0]/t[0],r[1]=e[1]/t[1],r}const E=O;var M=Object.freeze({__proto__:null,create:a,setDefaultType:function(e){const t=i;return i=e,t},fromValues:l,set:function(e,t,r){return(r=r||new i(2))[0]=e,r[1]=t,r},ceil:function(e,t){return(t=t||new i(2))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(e,t){return(t=t||new i(2))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},round:function(e,t){return(t=t||new i(2))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},clamp:function(e,t=0,r=1,n){return(n=n||new i(2))[0]=Math.min(r,Math.max(t,e[0])),n[1]=Math.min(r,Math.max(t,e[1])),n},add:function(e,t,r){return(r=r||new i(2))[0]=e[0]+t[0],r[1]=e[1]+t[1],r},addScaled:function(e,t,r,n){return(n=n||new i(2))[0]=e[0]+t[0]*r,n[1]=e[1]+t[1]*r,n},angle:function(e,t){const r=e[0],n=e[1],i=e[0],a=e[1],s=Math.sqrt(r*r+n*n)*Math.sqrt(i*i+a*a),o=s&&m(e,t)/s;return Math.acos(o)},subtract:u,sub:c,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<n&&Math.abs(e[1]-t[1])<n},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]},lerp:function(e,t,r,n){return(n=n||new i(2))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n},lerpV:function(e,t,r,n){return(n=n||new i(2))[0]=e[0]+r[0]*(t[0]-e[0]),n[1]=e[1]+r[1]*(t[1]-e[1]),n},max:function(e,t,r){return(r=r||new i(2))[0]=Math.max(e[0],t[0]),r[1]=Math.max(e[1],t[1]),r},min:function(e,t,r){return(r=r||new i(2))[0]=Math.min(e[0],t[0]),r[1]=Math.min(e[1],t[1]),r},mulScalar:d,scale:h,divScalar:function(e,t,r){return(r=r||new i(2))[0]=e[0]/t,r[1]=e[1]/t,r},inverse:f,invert:p,cross:function(e,t,r){r=r||new s(3);const n=e[0]*t[1]-e[1]*t[0];return r[0]=0,r[1]=0,r[2]=n,r},dot:m,length:g,len:v,lengthSq:x,lenSq:y,distance:b,dist:_,distanceSq:w,distSq:T,normalize:function(e,t){t=t||new i(2);const r=e[0],n=e[1],a=Math.sqrt(r*r+n*n);return a>1e-5?(t[0]=r/a,t[1]=n/a):(t[0]=0,t[1]=0),t},negate:function(e,t){return(t=t||new i(2))[0]=-e[0],t[1]=-e[1],t},copy:P,clone:S,multiply:k,mul:A,divide:O,div:E,random:function(e=1,t){t=t||new i(2);const r=2*Math.random()*Math.PI;return t[0]=Math.cos(r)*e,t[1]=Math.sin(r)*e,t},zero:function(e){return(e=e||new i(2))[0]=0,e[1]=0,e},transformMat4:function(e,t,r){r=r||new i(2);const n=e[0],a=e[1];return r[0]=n*t[0]+a*t[4]+t[12],r[1]=n*t[1]+a*t[5]+t[13],r},transformMat3:function(e,t,r){r=r||new i(2);const n=e[0],a=e[1];return r[0]=t[0]*n+t[4]*a+t[8],r[1]=t[1]*n+t[5]*a+t[9],r}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);const C=o;function I(e,t,r){return(r=r||new s(3))[0]=e[0]-t[0],r[1]=e[1]-t[1],r[2]=e[2]-t[2],r}const U=I;function R(e,t,r){return(r=r||new s(3))[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r}const D=R;function z(e,t){return(t=t||new s(3))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}const j=z;function L(e,t,r){r=r||new s(3);const n=e[2]*t[0]-e[0]*t[2],i=e[0]*t[1]-e[1]*t[0];return r[0]=e[1]*t[2]-e[2]*t[1],r[1]=n,r[2]=i,r}function B(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function N(e){const t=e[0],r=e[1],n=e[2];return Math.sqrt(t*t+r*r+n*n)}const G=N;function V(e){const t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n}const F=V;function $(e,t){const r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(r*r+n*n+i*i)}const q=$;function W(e,t){const r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return r*r+n*n+i*i}const Y=W;function H(e,t){t=t||new s(3);const r=e[0],n=e[1],i=e[2],a=Math.sqrt(r*r+n*n+i*i);return a>1e-5?(t[0]=r/a,t[1]=n/a,t[2]=i/a):(t[0]=0,t[1]=0,t[2]=0),t}function X(e,t){return(t=t||new s(3))[0]=e[0],t[1]=e[1],t[2]=e[2],t}const Z=X;function K(e,t,r){return(r=r||new s(3))[0]=e[0]*t[0],r[1]=e[1]*t[1],r[2]=e[2]*t[2],r}const Q=K;function J(e,t,r){return(r=r||new s(3))[0]=e[0]/t[0],r[1]=e[1]/t[1],r[2]=e[2]/t[2],r}const ee=J;var te=Object.freeze({__proto__:null,create:o,setDefaultType:function(e){const t=s;return s=e,t},fromValues:C,set:function(e,t,r,n){return(n=n||new s(3))[0]=e,n[1]=t,n[2]=r,n},ceil:function(e,t){return(t=t||new s(3))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(e,t){return(t=t||new s(3))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},round:function(e,t){return(t=t||new s(3))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},clamp:function(e,t=0,r=1,n){return(n=n||new s(3))[0]=Math.min(r,Math.max(t,e[0])),n[1]=Math.min(r,Math.max(t,e[1])),n[2]=Math.min(r,Math.max(t,e[2])),n},add:function(e,t,r){return(r=r||new s(3))[0]=e[0]+t[0],r[1]=e[1]+t[1],r[2]=e[2]+t[2],r},addScaled:function(e,t,r,n){return(n=n||new s(3))[0]=e[0]+t[0]*r,n[1]=e[1]+t[1]*r,n[2]=e[2]+t[2]*r,n},angle:function(e,t){const r=e[0],n=e[1],i=e[2],a=e[0],s=e[1],o=e[2],l=Math.sqrt(r*r+n*n+i*i)*Math.sqrt(a*a+s*s+o*o),u=l&&B(e,t)/l;return Math.acos(u)},subtract:I,sub:U,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<n&&Math.abs(e[1]-t[1])<n&&Math.abs(e[2]-t[2])<n},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},lerp:function(e,t,r,n){return(n=n||new s(3))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n[2]=e[2]+r*(t[2]-e[2]),n},lerpV:function(e,t,r,n){return(n=n||new s(3))[0]=e[0]+r[0]*(t[0]-e[0]),n[1]=e[1]+r[1]*(t[1]-e[1]),n[2]=e[2]+r[2]*(t[2]-e[2]),n},max:function(e,t,r){return(r=r||new s(3))[0]=Math.max(e[0],t[0]),r[1]=Math.max(e[1],t[1]),r[2]=Math.max(e[2],t[2]),r},min:function(e,t,r){return(r=r||new s(3))[0]=Math.min(e[0],t[0]),r[1]=Math.min(e[1],t[1]),r[2]=Math.min(e[2],t[2]),r},mulScalar:R,scale:D,divScalar:function(e,t,r){return(r=r||new s(3))[0]=e[0]/t,r[1]=e[1]/t,r[2]=e[2]/t,r},inverse:z,invert:j,cross:L,dot:B,length:N,len:G,lengthSq:V,lenSq:F,distance:$,dist:q,distanceSq:W,distSq:Y,normalize:H,negate:function(e,t){return(t=t||new s(3))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},copy:X,clone:Z,multiply:K,mul:Q,divide:J,div:ee,random:function(e=1,t){t=t||new s(3);const r=2*Math.random()*Math.PI,n=2*Math.random()-1,i=Math.sqrt(1-n*n)*e;return t[0]=Math.cos(r)*i,t[1]=Math.sin(r)*i,t[2]=n*e,t},zero:function(e){return(e=e||new s(3))[0]=0,e[1]=0,e[2]=0,e},transformMat4:function(e,t,r){r=r||new s(3);const n=e[0],i=e[1],a=e[2],o=t[3]*n+t[7]*i+t[11]*a+t[15]||1;return r[0]=(t[0]*n+t[4]*i+t[8]*a+t[12])/o,r[1]=(t[1]*n+t[5]*i+t[9]*a+t[13])/o,r[2]=(t[2]*n+t[6]*i+t[10]*a+t[14])/o,r},transformMat4Upper3x3:function(e,t,r){r=r||new s(3);const n=e[0],i=e[1],a=e[2];return r[0]=n*t[0]+i*t[4]+a*t[8],r[1]=n*t[1]+i*t[5]+a*t[9],r[2]=n*t[2]+i*t[6]+a*t[10],r},transformMat3:function(e,t,r){r=r||new s(3);const n=e[0],i=e[1],a=e[2];return r[0]=n*t[0]+i*t[4]+a*t[8],r[1]=n*t[1]+i*t[5]+a*t[9],r[2]=n*t[2]+i*t[6]+a*t[10],r},transformQuat:function(e,t,r){r=r||new s(3);const n=t[0],i=t[1],a=t[2],o=2*t[3],l=e[0],u=e[1],c=e[2],d=i*c-a*u,h=a*l-n*c,f=n*u-i*l;return r[0]=l+d*o+2*(i*f-a*h),r[1]=u+h*o+2*(a*d-n*f),r[2]=c+f*o+2*(n*h-i*d),r},getTranslation:function(e,t){return(t=t||new s(3))[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,r){const n=4*t;return(r=r||new s(3))[0]=e[n+0],r[1]=e[n+1],r[2]=e[n+2],r},getScaling:function(e,t){t=t||new s(3);const r=e[0],n=e[1],i=e[2],a=e[4],o=e[5],l=e[6],u=e[8],c=e[9],d=e[10];return t[0]=Math.sqrt(r*r+n*n+i*i),t[1]=Math.sqrt(a*a+o*o+l*l),t[2]=Math.sqrt(u*u+c*c+d*d),t}});let re=Float32Array;function ne(e,t){return(t=t||new re(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}const ie=ne;function ae(e){return(e=e||new re(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function se(e,t){t=t||new re(16);const r=e[0],n=e[1],i=e[2],a=e[3],s=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=e[9],h=e[10],f=e[11],p=e[12],m=e[13],g=e[14],v=e[15],x=h*v,y=g*f,b=l*v,_=g*u,w=l*f,T=h*u,P=i*v,S=g*a,k=i*f,A=h*a,O=i*u,E=l*a,M=c*m,C=p*d,I=s*m,U=p*o,R=s*d,D=c*o,z=r*m,j=p*n,L=r*d,B=c*n,N=r*o,G=s*n,V=x*o+_*d+w*m-(y*o+b*d+T*m),F=y*n+P*d+A*m-(x*n+S*d+k*m),$=b*n+S*o+O*m-(_*n+P*o+E*m),q=T*n+k*o+E*d-(w*n+A*o+O*d),W=1/(r*V+s*F+c*$+p*q);return t[0]=W*V,t[1]=W*F,t[2]=W*$,t[3]=W*q,t[4]=W*(y*s+b*c+T*p-(x*s+_*c+w*p)),t[5]=W*(x*r+S*c+k*p-(y*r+P*c+A*p)),t[6]=W*(_*r+P*s+E*p-(b*r+S*s+O*p)),t[7]=W*(w*r+A*s+O*c-(T*r+k*s+E*c)),t[8]=W*(M*u+U*f+R*v-(C*u+I*f+D*v)),t[9]=W*(C*a+z*f+B*v-(M*a+j*f+L*v)),t[10]=W*(I*a+j*u+N*v-(U*a+z*u+G*v)),t[11]=W*(D*a+L*u+G*f-(R*a+B*u+N*f)),t[12]=W*(I*h+D*g+C*l-(R*g+M*l+U*h)),t[13]=W*(L*g+M*i+j*h-(z*h+B*g+C*i)),t[14]=W*(z*l+G*g+U*i-(N*g+I*i+j*l)),t[15]=W*(N*h+R*i+B*l-(L*l+G*h+D*i)),t}const oe=se;function le(e,t,r){r=r||new re(16);const n=e[0],i=e[1],a=e[2],s=e[3],o=e[4],l=e[5],u=e[6],c=e[7],d=e[8],h=e[9],f=e[10],p=e[11],m=e[12],g=e[13],v=e[14],x=e[15],y=t[0],b=t[1],_=t[2],w=t[3],T=t[4],P=t[5],S=t[6],k=t[7],A=t[8],O=t[9],E=t[10],M=t[11],C=t[12],I=t[13],U=t[14],R=t[15];return r[0]=n*y+o*b+d*_+m*w,r[1]=i*y+l*b+h*_+g*w,r[2]=a*y+u*b+f*_+v*w,r[3]=s*y+c*b+p*_+x*w,r[4]=n*T+o*P+d*S+m*k,r[5]=i*T+l*P+h*S+g*k,r[6]=a*T+u*P+f*S+v*k,r[7]=s*T+c*P+p*S+x*k,r[8]=n*A+o*O+d*E+m*M,r[9]=i*A+l*O+h*E+g*M,r[10]=a*A+u*O+f*E+v*M,r[11]=s*A+c*O+p*E+x*M,r[12]=n*C+o*I+d*U+m*R,r[13]=i*C+l*I+h*U+g*R,r[14]=a*C+u*I+f*U+v*R,r[15]=s*C+c*I+p*U+x*R,r}const ue=le;let ce,de,he;function fe(e,t,r){r=r||new re(16);let n=e[0],i=e[1],a=e[2];const s=Math.sqrt(n*n+i*i+a*a);n/=s,i/=s,a/=s;const o=n*n,l=i*i,u=a*a,c=Math.cos(t),d=Math.sin(t),h=1-c;return r[0]=o+(1-o)*c,r[1]=n*i*h+a*d,r[2]=n*a*h-i*d,r[3]=0,r[4]=n*i*h-a*d,r[5]=l+(1-l)*c,r[6]=i*a*h+n*d,r[7]=0,r[8]=n*a*h+i*d,r[9]=i*a*h-n*d,r[10]=u+(1-u)*c,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}const pe=fe;function me(e,t,r,n){n=n||new re(16);let i=t[0],a=t[1],s=t[2];const o=Math.sqrt(i*i+a*a+s*s);i/=o,a/=o,s/=o;const l=i*i,u=a*a,c=s*s,d=Math.cos(r),h=Math.sin(r),f=1-d,p=l+(1-l)*d,m=i*a*f+s*h,g=i*s*f-a*h,v=i*a*f-s*h,x=u+(1-u)*d,y=a*s*f+i*h,b=i*s*f+a*h,_=a*s*f-i*h,w=c+(1-c)*d,T=e[0],P=e[1],S=e[2],k=e[3],A=e[4],O=e[5],E=e[6],M=e[7],C=e[8],I=e[9],U=e[10],R=e[11];return n[0]=p*T+m*A+g*C,n[1]=p*P+m*O+g*I,n[2]=p*S+m*E+g*U,n[3]=p*k+m*M+g*R,n[4]=v*T+x*A+y*C,n[5]=v*P+x*O+y*I,n[6]=v*S+x*E+y*U,n[7]=v*k+x*M+y*R,n[8]=b*T+_*A+w*C,n[9]=b*P+_*O+w*I,n[10]=b*S+_*E+w*U,n[11]=b*k+_*M+w*R,e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n}const ge=me;var ve=Object.freeze({__proto__:null,setDefaultType:function(e){const t=re;return re=e,t},create:function(e,t,r,n,i,a,s,o,l,u,c,d,h,f,p,m){const g=new re(16);return void 0!==e&&(g[0]=e,void 0!==t&&(g[1]=t,void 0!==r&&(g[2]=r,void 0!==n&&(g[3]=n,void 0!==i&&(g[4]=i,void 0!==a&&(g[5]=a,void 0!==s&&(g[6]=s,void 0!==o&&(g[7]=o,void 0!==l&&(g[8]=l,void 0!==u&&(g[9]=u,void 0!==c&&(g[10]=c,void 0!==d&&(g[11]=d,void 0!==h&&(g[12]=h,void 0!==f&&(g[13]=f,void 0!==p&&(g[14]=p,void 0!==m&&(g[15]=m)))))))))))))))),g},set:function(e,t,r,n,i,a,s,o,l,u,c,d,h,f,p,m,g){return(g=g||new re(16))[0]=e,g[1]=t,g[2]=r,g[3]=n,g[4]=i,g[5]=a,g[6]=s,g[7]=o,g[8]=l,g[9]=u,g[10]=c,g[11]=d,g[12]=h,g[13]=f,g[14]=p,g[15]=m,g},fromMat3:function(e,t){return(t=t||new re(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=0,t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=0,t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromQuat:function(e,t){t=t||new re(16);const r=e[0],n=e[1],i=e[2],a=e[3],s=r+r,o=n+n,l=i+i,u=r*s,c=n*s,d=n*o,h=i*s,f=i*o,p=i*l,m=a*s,g=a*o,v=a*l;return t[0]=1-d-p,t[1]=c+v,t[2]=h-g,t[3]=0,t[4]=c-v,t[5]=1-u-p,t[6]=f+m,t[7]=0,t[8]=h+g,t[9]=f-m,t[10]=1-u-d,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},negate:function(e,t){return(t=t||new re(16))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=-e[7],t[8]=-e[8],t[9]=-e[9],t[10]=-e[10],t[11]=-e[11],t[12]=-e[12],t[13]=-e[13],t[14]=-e[14],t[15]=-e[15],t},copy:ne,clone:ie,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<n&&Math.abs(e[1]-t[1])<n&&Math.abs(e[2]-t[2])<n&&Math.abs(e[3]-t[3])<n&&Math.abs(e[4]-t[4])<n&&Math.abs(e[5]-t[5])<n&&Math.abs(e[6]-t[6])<n&&Math.abs(e[7]-t[7])<n&&Math.abs(e[8]-t[8])<n&&Math.abs(e[9]-t[9])<n&&Math.abs(e[10]-t[10])<n&&Math.abs(e[11]-t[11])<n&&Math.abs(e[12]-t[12])<n&&Math.abs(e[13]-t[13])<n&&Math.abs(e[14]-t[14])<n&&Math.abs(e[15]-t[15])<n},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},identity:ae,transpose:function(e,t){if((t=t||new re(16))===e){let r;return r=e[1],e[1]=e[4],e[4]=r,r=e[2],e[2]=e[8],e[8]=r,r=e[3],e[3]=e[12],e[12]=r,r=e[6],e[6]=e[9],e[9]=r,r=e[7],e[7]=e[13],e[13]=r,r=e[11],e[11]=e[14],e[14]=r,t}const r=e[0],n=e[1],i=e[2],a=e[3],s=e[4],o=e[5],l=e[6],u=e[7],c=e[8],d=e[9],h=e[10],f=e[11],p=e[12],m=e[13],g=e[14],v=e[15];return t[0]=r,t[1]=s,t[2]=c,t[3]=p,t[4]=n,t[5]=o,t[6]=d,t[7]=m,t[8]=i,t[9]=l,t[10]=h,t[11]=g,t[12]=a,t[13]=u,t[14]=f,t[15]=v,t},inverse:se,determinant:function(e){const t=e[0],r=e[1],n=e[2],i=e[3],a=e[4],s=e[5],o=e[6],l=e[7],u=e[8],c=e[9],d=e[10],h=e[11],f=e[12],p=e[13],m=e[14],g=e[15],v=d*g,x=m*h,y=o*g,b=m*l,_=o*h,w=d*l,T=n*g,P=m*i,S=n*h,k=d*i,A=n*l,O=o*i;return t*(v*s+b*c+_*p-(x*s+y*c+w*p))+a*(x*r+T*c+k*p-(v*r+P*c+S*p))+u*(y*r+P*s+A*p-(b*r+T*s+O*p))+f*(w*r+S*s+O*c-(_*r+k*s+A*c))},invert:oe,multiply:le,mul:ue,setTranslation:function(e,t,r){return e!==(r=r||ae())&&(r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[8]=e[8],r[9]=e[9],r[10]=e[10],r[11]=e[11]),r[12]=t[0],r[13]=t[1],r[14]=t[2],r[15]=1,r},getTranslation:function(e,t){return(t=t||o())[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,r){const n=4*t;return(r=r||o())[0]=e[n+0],r[1]=e[n+1],r[2]=e[n+2],r},setAxis:function(e,t,r,n){n!==e&&(n=ne(e,n));const i=4*r;return n[i+0]=t[0],n[i+1]=t[1],n[i+2]=t[2],n},getScaling:function(e,t){t=t||o();const r=e[0],n=e[1],i=e[2],a=e[4],s=e[5],l=e[6],u=e[8],c=e[9],d=e[10];return t[0]=Math.sqrt(r*r+n*n+i*i),t[1]=Math.sqrt(a*a+s*s+l*l),t[2]=Math.sqrt(u*u+c*c+d*d),t},perspective:function(e,t,r,n,i){i=i||new re(16);const a=Math.tan(.5*Math.PI-.5*e);if(i[0]=a/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=a,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,n===1/0)i[10]=-1,i[14]=-r;else{const e=1/(r-n);i[10]=n*e,i[14]=n*r*e}return i},ortho:function(e,t,r,n,i,a,s){return(s=s||new re(16))[0]=2/(t-e),s[1]=0,s[2]=0,s[3]=0,s[4]=0,s[5]=2/(n-r),s[6]=0,s[7]=0,s[8]=0,s[9]=0,s[10]=1/(i-a),s[11]=0,s[12]=(t+e)/(e-t),s[13]=(n+r)/(r-n),s[14]=i/(i-a),s[15]=1,s},frustum:function(e,t,r,n,i,a,s){const o=t-e,l=n-r,u=i-a;return(s=s||new re(16))[0]=2*i/o,s[1]=0,s[2]=0,s[3]=0,s[4]=0,s[5]=2*i/l,s[6]=0,s[7]=0,s[8]=(e+t)/o,s[9]=(n+r)/l,s[10]=a/u,s[11]=-1,s[12]=0,s[13]=0,s[14]=i*a/u,s[15]=0,s},aim:function(e,t,r,n){return n=n||new re(16),ce=ce||o(),de=de||o(),he=he||o(),H(I(t,e,he),he),H(L(r,he,ce),ce),H(L(he,ce,de),de),n[0]=ce[0],n[1]=ce[1],n[2]=ce[2],n[3]=0,n[4]=de[0],n[5]=de[1],n[6]=de[2],n[7]=0,n[8]=he[0],n[9]=he[1],n[10]=he[2],n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n},cameraAim:function(e,t,r,n){return n=n||new re(16),ce=ce||o(),de=de||o(),he=he||o(),H(I(e,t,he),he),H(L(r,he,ce),ce),H(L(he,ce,de),de),n[0]=ce[0],n[1]=ce[1],n[2]=ce[2],n[3]=0,n[4]=de[0],n[5]=de[1],n[6]=de[2],n[7]=0,n[8]=he[0],n[9]=he[1],n[10]=he[2],n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n},lookAt:function(e,t,r,n){return n=n||new re(16),ce=ce||o(),de=de||o(),he=he||o(),H(I(e,t,he),he),H(L(r,he,ce),ce),H(L(he,ce,de),de),n[0]=ce[0],n[1]=de[0],n[2]=he[0],n[3]=0,n[4]=ce[1],n[5]=de[1],n[6]=he[1],n[7]=0,n[8]=ce[2],n[9]=de[2],n[10]=he[2],n[11]=0,n[12]=-(ce[0]*e[0]+ce[1]*e[1]+ce[2]*e[2]),n[13]=-(de[0]*e[0]+de[1]*e[1]+de[2]*e[2]),n[14]=-(he[0]*e[0]+he[1]*e[1]+he[2]*e[2]),n[15]=1,n},translation:function(e,t){return(t=t||new re(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},translate:function(e,t,r){r=r||new re(16);const n=t[0],i=t[1],a=t[2],s=e[0],o=e[1],l=e[2],u=e[3],c=e[4],d=e[5],h=e[6],f=e[7],p=e[8],m=e[9],g=e[10],v=e[11],x=e[12],y=e[13],b=e[14],_=e[15];return e!==r&&(r[0]=s,r[1]=o,r[2]=l,r[3]=u,r[4]=c,r[5]=d,r[6]=h,r[7]=f,r[8]=p,r[9]=m,r[10]=g,r[11]=v),r[12]=s*n+c*i+p*a+x,r[13]=o*n+d*i+m*a+y,r[14]=l*n+h*i+g*a+b,r[15]=u*n+f*i+v*a+_,r},rotationX:function(e,t){t=t||new re(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateX:function(e,t,r){r=r||new re(16);const n=e[4],i=e[5],a=e[6],s=e[7],o=e[8],l=e[9],u=e[10],c=e[11],d=Math.cos(t),h=Math.sin(t);return r[4]=d*n+h*o,r[5]=d*i+h*l,r[6]=d*a+h*u,r[7]=d*s+h*c,r[8]=d*o-h*n,r[9]=d*l-h*i,r[10]=d*u-h*a,r[11]=d*c-h*s,e!==r&&(r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},rotationY:function(e,t){t=t||new re(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateY:function(e,t,r){r=r||new re(16);const n=e[0],i=e[1],a=e[2],s=e[3],o=e[8],l=e[9],u=e[10],c=e[11],d=Math.cos(t),h=Math.sin(t);return r[0]=d*n-h*o,r[1]=d*i-h*l,r[2]=d*a-h*u,r[3]=d*s-h*c,r[8]=d*o+h*n,r[9]=d*l+h*i,r[10]=d*u+h*a,r[11]=d*c+h*s,e!==r&&(r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},rotationZ:function(e,t){t=t||new re(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateZ:function(e,t,r){r=r||new re(16);const n=e[0],i=e[1],a=e[2],s=e[3],o=e[4],l=e[5],u=e[6],c=e[7],d=Math.cos(t),h=Math.sin(t);return r[0]=d*n+h*o,r[1]=d*i+h*l,r[2]=d*a+h*u,r[3]=d*s+h*c,r[4]=d*o-h*n,r[5]=d*l-h*i,r[6]=d*u-h*a,r[7]=d*c-h*s,e!==r&&(r[8]=e[8],r[9]=e[9],r[10]=e[10],r[11]=e[11],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},axisRotation:fe,rotation:pe,axisRotate:me,rotate:ge,scaling:function(e,t){return(t=t||new re(16))[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},scale:function(e,t,r){r=r||new re(16);const n=t[0],i=t[1],a=t[2];return r[0]=n*e[0],r[1]=n*e[1],r[2]=n*e[2],r[3]=n*e[3],r[4]=i*e[4],r[5]=i*e[5],r[6]=i*e[6],r[7]=i*e[7],r[8]=a*e[8],r[9]=a*e[9],r[10]=a*e[10],r[11]=a*e[11],e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},uniformScaling:function(e,t){return(t=t||new re(16))[0]=e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},uniformScale:function(e,t,r){return(r=r||new re(16))[0]=t*e[0],r[1]=t*e[1],r[2]=t*e[2],r[3]=t*e[3],r[4]=t*e[4],r[5]=t*e[5],r[6]=t*e[6],r[7]=t*e[7],r[8]=t*e[8],r[9]=t*e[9],r[10]=t*e[10],r[11]=t*e[11],e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r}});let xe=Float32Array;function ye(e,t,r,n){const i=new xe(4);return void 0!==e&&(i[0]=e,void 0!==t&&(i[1]=t,void 0!==r&&(i[2]=r,void 0!==n&&(i[3]=n)))),i}const be=ye;function _e(e,t,r){r=r||new xe(4);const n=.5*t,i=Math.sin(n);return r[0]=i*e[0],r[1]=i*e[1],r[2]=i*e[2],r[3]=Math.cos(n),r}function we(e,t,r){r=r||new xe(4);const n=e[0],i=e[1],a=e[2],s=e[3],o=t[0],l=t[1],u=t[2],c=t[3];return r[0]=n*c+s*o+i*u-a*l,r[1]=i*c+s*l+a*o-n*u,r[2]=a*c+s*u+n*l-i*o,r[3]=s*c-n*o-i*l-a*u,r}const Te=we;function Pe(e,t,r,i){i=i||new xe(4);const a=e[0],s=e[1],o=e[2],l=e[3];let u,c,d=t[0],h=t[1],f=t[2],p=t[3],m=a*d+s*h+o*f+l*p;if(m<0&&(m=-m,d=-d,h=-h,f=-f,p=-p),1-m>n){const e=Math.acos(m),t=Math.sin(e);u=Math.sin((1-r)*e)/t,c=Math.sin(r*e)/t}else u=1-r,c=r;return i[0]=u*a+c*d,i[1]=u*s+c*h,i[2]=u*o+c*f,i[3]=u*l+c*p,i}function Se(e,t){return(t=t||new xe(4))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}const ke=Se;function Ae(e,t,r){return(r=r||new xe(4))[0]=e[0]-t[0],r[1]=e[1]-t[1],r[2]=e[2]-t[2],r[3]=e[3]-t[3],r}const Oe=Ae;function Ee(e,t,r){return(r=r||new xe(4))[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r[3]=e[3]*t,r}const Me=Ee;function Ce(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function Ie(e){const t=e[0],r=e[1],n=e[2],i=e[3];return Math.sqrt(t*t+r*r+n*n+i*i)}const Ue=Ie;function Re(e){const t=e[0],r=e[1],n=e[2],i=e[3];return t*t+r*r+n*n+i*i}const De=Re;function ze(e,t){t=t||new xe(4);const r=e[0],n=e[1],i=e[2],a=e[3],s=Math.sqrt(r*r+n*n+i*i+a*a);return s>1e-5?(t[0]=r/s,t[1]=n/s,t[2]=i/s,t[3]=a/s):(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}let je,Le,Be,Ne,Ge;var Ve=Object.freeze({__proto__:null,create:ye,setDefaultType:function(e){const t=xe;return xe=e,t},fromValues:be,set:function(e,t,r,n,i){return(i=i||new xe(4))[0]=e,i[1]=t,i[2]=r,i[3]=n,i},fromAxisAngle:_e,toAxisAngle:function(e,t){t=t||o(4);const r=2*Math.acos(e[3]),i=Math.sin(.5*r);return i>n?(t[0]=e[0]/i,t[1]=e[1]/i,t[2]=e[2]/i):(t[0]=1,t[1]=0,t[2]=0),{angle:r,axis:t}},angle:function(e,t){const r=Ce(e,t);return Math.acos(2*r*r-1)},multiply:we,mul:Te,rotateX:function(e,t,r){r=r||new xe(4);const n=.5*t,i=e[0],a=e[1],s=e[2],o=e[3],l=Math.sin(n),u=Math.cos(n);return r[0]=i*u+o*l,r[1]=a*u+s*l,r[2]=s*u-a*l,r[3]=o*u-i*l,r},rotateY:function(e,t,r){r=r||new xe(4);const n=.5*t,i=e[0],a=e[1],s=e[2],o=e[3],l=Math.sin(n),u=Math.cos(n);return r[0]=i*u-s*l,r[1]=a*u+o*l,r[2]=s*u+i*l,r[3]=o*u-a*l,r},rotateZ:function(e,t,r){r=r||new xe(4);const n=.5*t,i=e[0],a=e[1],s=e[2],o=e[3],l=Math.sin(n),u=Math.cos(n);return r[0]=i*u+a*l,r[1]=a*u-i*l,r[2]=s*u+o*l,r[3]=o*u-s*l,r},slerp:Pe,inverse:function(e,t){t=t||new xe(4);const r=e[0],n=e[1],i=e[2],a=e[3],s=r*r+n*n+i*i+a*a,o=s?1/s:0;return t[0]=-r*o,t[1]=-n*o,t[2]=-i*o,t[3]=a*o,t},conjugate:function(e,t){return(t=t||new xe(4))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t},fromMat:function(e,t){t=t||new xe(4);const r=e[0]+e[5]+e[10];if(r>0){const n=Math.sqrt(r+1);t[3]=.5*n;const i=.5/n;t[0]=(e[6]-e[9])*i,t[1]=(e[8]-e[2])*i,t[2]=(e[1]-e[4])*i}else{let r=0;e[5]>e[0]&&(r=1),e[10]>e[4*r+r]&&(r=2);const n=(r+1)%3,i=(r+2)%3,a=Math.sqrt(e[4*r+r]-e[4*n+n]-e[4*i+i]+1);t[r]=.5*a;const s=.5/a;t[3]=(e[4*n+i]-e[4*i+n])*s,t[n]=(e[4*n+r]+e[4*r+n])*s,t[i]=(e[4*i+r]+e[4*r+i])*s}return t},fromEuler:function(e,t,r,n,i){i=i||new xe(4);const a=.5*e,s=.5*t,o=.5*r,l=Math.sin(a),u=Math.cos(a),c=Math.sin(s),d=Math.cos(s),h=Math.sin(o),f=Math.cos(o);switch(n){case"xyz":i[0]=l*d*f+u*c*h,i[1]=u*c*f-l*d*h,i[2]=u*d*h+l*c*f,i[3]=u*d*f-l*c*h;break;case"xzy":i[0]=l*d*f-u*c*h,i[1]=u*c*f-l*d*h,i[2]=u*d*h+l*c*f,i[3]=u*d*f+l*c*h;break;case"yxz":i[0]=l*d*f+u*c*h,i[1]=u*c*f-l*d*h,i[2]=u*d*h-l*c*f,i[3]=u*d*f+l*c*h;break;case"yzx":i[0]=l*d*f+u*c*h,i[1]=u*c*f+l*d*h,i[2]=u*d*h-l*c*f,i[3]=u*d*f-l*c*h;break;case"zxy":i[0]=l*d*f-u*c*h,i[1]=u*c*f+l*d*h,i[2]=u*d*h+l*c*f,i[3]=u*d*f-l*c*h;break;case"zyx":i[0]=l*d*f-u*c*h,i[1]=u*c*f+l*d*h,i[2]=u*d*h-l*c*f,i[3]=u*d*f+l*c*h;break;default:throw new Error(`Unknown rotation order: ${n}`)}return i},copy:Se,clone:ke,add:function(e,t,r){return(r=r||new xe(4))[0]=e[0]+t[0],r[1]=e[1]+t[1],r[2]=e[2]+t[2],r[3]=e[3]+t[3],r},subtract:Ae,sub:Oe,mulScalar:Ee,scale:Me,divScalar:function(e,t,r){return(r=r||new xe(4))[0]=e[0]/t,r[1]=e[1]/t,r[2]=e[2]/t,r[3]=e[3]/t,r},dot:Ce,lerp:function(e,t,r,n){return(n=n||new xe(4))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n[2]=e[2]+r*(t[2]-e[2]),n[3]=e[3]+r*(t[3]-e[3]),n},length:Ie,len:Ue,lengthSq:Re,lenSq:De,normalize:ze,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<n&&Math.abs(e[1]-t[1])<n&&Math.abs(e[2]-t[2])<n&&Math.abs(e[3]-t[3])<n},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},identity:function(e){return(e=e||new xe(4))[0]=0,e[1]=0,e[2]=0,e[3]=1,e},rotationTo:function(e,t,r){r=r||new xe(4),je=je||o(),Le=Le||o(1,0,0),Be=Be||o(0,1,0);const n=B(e,t);return n<-.999999?(L(Le,e,je),G(je)<1e-6&&L(Be,e,je),H(je,je),_e(je,Math.PI,r),r):n>.999999?(r[0]=0,r[1]=0,r[2]=0,r[3]=1,r):(L(e,t,je),r[0]=je[0],r[1]=je[1],r[2]=je[2],r[3]=1+n,ze(r,r))},sqlerp:function(e,t,r,n,i,a){return a=a||new xe(4),Ne=Ne||new xe(4),Ge=Ge||new xe(4),Pe(e,n,i,Ne),Pe(t,r,i,Ge),Pe(Ne,Ge,2*i*(1-i),a),a}});Float32Array}},a={};function s(e){var t=a[e];if(void 0!==t)return t.exports;var r=a[e]={exports:{}};return i[e](r,r.exports,s),r.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",r="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",n=e=>{e&&e.d<1&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},s.a=(i,a,s)=>{var o;s&&((o=[]).d=-1);var l,u,c,d=new Set,h=i.exports,f=new Promise(((e,t)=>{c=t,u=e}));f[t]=h,f[e]=e=>(o&&e(o),d.forEach(e),f.catch((e=>{}))),i.exports=f,a((i=>{var a;l=(i=>i.map((i=>{if(null!==i&&"object"==typeof i){if(i[e])return i;if(i.then){var a=[];a.d=0,i.then((e=>{s[t]=e,n(a)}),(e=>{s[r]=e,n(a)}));var s={};return s[e]=e=>e(a),s}}var o={};return o[e]=e=>{},o[t]=i,o})))(i);var s=()=>l.map((e=>{if(e[r])throw e[r];return e[t]})),u=new Promise((t=>{(a=()=>t(s)).r=0;var r=e=>e!==o&&!d.has(e)&&(d.add(e),e&&!e.d&&(a.r++,e.push(a)));l.map((t=>t[e](r)))}));return a.r?u:s()}),(e=>(e?c(f[r]=e):u(h),n(o)))),o&&o.d<0&&(o.d=0)},s.d=(e,t)=>{for(var r in t)s.o(t,r)&&!s.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s(1859)})();