(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{UI:()=>qa,Ji:()=>La,mL:()=>Ca,Eh:()=>ja,jO:()=>Ga,sZ:()=>Ra,PM:()=>Ba});const t=(e,t)=>{const n=new Uint32Array(t);Ga.queue.writeBuffer(e,0,n.buffer,0,t.length*Uint32Array.BYTES_PER_ELEMENT)},n=(e,n)=>{const r=new Uint32Array(e),i=Ga.createBuffer({size:r.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:n});return t(i,e),i},r=(e,t)=>{if(t instanceof Float32Array)Ga.queue.writeBuffer(e,0,t.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT);else{const n=new Float32Array(t);Ga.queue.writeBuffer(e,0,n.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT)}},i=(e,t,n)=>{const i=new Float32Array(t),a=e.createBuffer({size:i.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:n});return r(a,t),a},a="fn calculateRayDirection(uv: vec2<f32>, inverseProjection: mat4x4<f32>) -> vec3<f32> {\n  let clipSpace = vec2(1.0 - uv.x, 1.0 - uv.y) * 2.0 - 1.0;\n  let viewRay = vec3<f32>(clipSpace, 1.0);\n  let viewRayView = inverseProjection * vec4(viewRay, 1.0);\n  return normalize(viewRayView.xyz);\n}\n\nfn normaliseValue(min: f32, max: f32, value: f32) -> f32 {\n  return (value - min) / (max - min);\n}",o="r8unorm",s="rgba16float",u="rgba16float",l="r32float",c="struct BoxIntersectionResult {\n    tNear: f32,\n    tFar: f32,\n    normal: vec3<f32>,\n    isHit: bool,\n}\n\nfn simpleBoxIntersection(\n    ro: vec3<f32>,\n    rd: vec3<f32>,\n    boxSize: vec3<f32>,\n) -> f32 {\n  let m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n  let n = m*ro;   // can precompute if traversing a set of aligned boxes\n  let k = abs(m)*boxSize;\n  let t1 = -n - k;\n  let t2 = -n + k;\n  let tN = max( max( t1.x, t1.y ), t1.z );\n  let tF = min( min( t2.x, t2.y ), t2.z );\n  if( tN>tF || tF<0.0) {\n    return -1.0; // no intersection\n  }\n  return tN;\n}\n\nfn boxIntersection(\n    ro: vec3<f32>,\n    rd: vec3<f32>,\n    boxSize: vec3<f32>,\n) -> BoxIntersectionResult {\n    var result = BoxIntersectionResult();\n    result.isHit = false;\n    result.tNear = -1.0;\n    result.tFar = -1.0;\n\n    let offsetRayOrigin = ro - boxSize;\n    let m: vec3<f32> = 1.0 / rd;\n    let n: vec3<f32> = m * offsetRayOrigin;\n    let k: vec3<f32> = abs(m) * boxSize;\n    let t1: vec3<f32> = -n - k;\n    let t2: vec3<f32> = -n + k;\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\n    if (tN > tF || tF < 0.0) {\n        return result;\n    }\n    // Check if the ray starts inside the volume\n    let insideVolume = tN < 0.0;\n    var normal = select(\n        step(vec3<f32>(tN), t1),\n        step(t2, vec3<f32>(tF)),\n        tN < 0.0,\n    );\n    normal *= -sign(rd);\n    // Check if the intersection is in the correct direction, only if inside the volume\n    if (insideVolume && dot(normal, rd) < 0.0) {\n        return result;\n    }\n    result.tNear = tN;\n    result.tFar = tF;\n    result.normal = normal;\n    result.isHit = true;\n    return result;\n}\n\nfn planeIntersection(\n    ro: vec3<f32>,\n    rd: vec3<f32>,\n    planeNormal: vec3<f32>,\n    planeDistance: f32,\n) -> BoxIntersectionResult {\n    var result = BoxIntersectionResult();\n    let denom = dot(planeNormal, rd);\n    if (abs(denom) > 0.0001) {\n        let t = -(dot(planeNormal, ro) + planeDistance) / denom;\n        if (t > 0.0) {\n            result.isHit = true;\n            result.tNear = t;\n            result.tFar = t;\n            result.normal = planeNormal;\n        }\n    }\n    return result;\n}\n\nfn get3x3From4x4(m: mat4x4<f32>) -> mat3x3<f32> {\n    return mat3x3<f32>(\n        m[0].xyz,\n        m[1].xyz,\n        m[2].xyz,\n    );\n}\n\n\nfn intersectOBB(\n    ro: vec3<f32>,\n    rd: vec3<f32>,\n    boxSize: vec3<f32>,\n    boxOrientation: mat3x3<f32>,\n) -> BoxIntersectionResult {\n    var result = BoxIntersectionResult();\n    result.isHit = false;\n    result.tNear = -1.0;\n    result.tFar = -1.0;\n\n    let offsetRayOrigin = ro - boxSize;\n    let m: vec3<f32> = 1.0 / rd;\n    let n: vec3<f32> = m * offsetRayOrigin;\n    let k: vec3<f32> = abs(m) * boxSize;\n    let t1: vec3<f32> = -n - k;\n    let t2: vec3<f32> = -n + k;\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\n    if (tN > tF || tF < 0.0) {\n        return result;\n    }\n    // Check if the ray starts inside the volume\n    let insideVolume = tN < 0.0;\n    var normal = select(\n        step(vec3<f32>(tN), t1),\n        step(t2, vec3<f32>(tF)),\n        tN < 0.0,\n    );\n    normal *= -sign(rd);\n    // Check if the intersection is in the correct direction, only if inside the volume\n    if (insideVolume && dot(normal, rd) < 0.0) {\n        return result;\n    }\n    result.tNear = tN;\n    result.tFar = tF;\n    result.normal = normal;\n    result.isHit = true;\n    return result;\n}",d="const EPSILON = 0.0001;\nconst MAX_RAY_STEPS = 256;\nconst FAR_PLANE = 10000.0;\nconst NEAR_PLANE = 0.5;\nconst STACK_LEN: u32 = 32u;\n\n// Function to transform a normal vector from object to world space\nfn transformNormal(inverseTransform: mat4x4<f32>, normal: vec3<f32>) -> vec3<f32> {\n    let worldNormal = normalize((vec4<f32>(normal, 0.0) * inverseTransform).xyz);\n    return worldNormal;\n}\n\n// Function to transform an object space position to world space\nfn transformPosition(transform: mat4x4<f32>, position: vec3<f32>) -> vec3<f32> {\n    let worldPosition = (transform * vec4<f32>(position, 1.0)).xyz;\n    return worldPosition;\n}\n\nfn getMaxMipLevel(size: vec3<f32>) -> u32 {\n  return u32(log2(max(size.x, max(size.y, size.z))));\n}\n\nstruct Brick {\n  voxels: array<u32, 16>\n}\nstruct VoxelObject {\n  transform: mat4x4<f32>,\n  inverseTransform: mat4x4<f32>,\n  previousTransform: mat4x4<f32>,\n  previousInverseTransform: mat4x4<f32>,\n  size : vec3<f32>,\n  atlasLocation : vec3<f32>,\n  paletteIndex : f32,\n}\n\nstruct RayMarchResult {\n  voxelObjectIndex: i32,\n  palettePosition: f32,\n  worldPos: vec3<f32>,\n  objectPos: vec3<f32>,\n  normal: vec3<f32>,\n  stepsTaken: i32,\n  hit: bool,\n  t: f32,\n}\n\nfn isInBounds(position: vec3<i32>, size: vec3<i32>) -> bool {\n  return all(position >= vec3(0)) && all(position <= size - vec3(1));\n}\n\nfn getMipLevelFromVoxelSize(voxelSize: vec3<f32>) -> u32 {\n  return u32(log2(max(voxelSize.x, max(voxelSize.y, voxelSize.z))));\n}\n\nfn convert1DTo3D(size: vec3<u32>, index: u32) -> vec3<u32> {\n  return vec3(\n    index % size.x,\n    index / size.y,\n    index / (size.x * size.y)\n  );\n}\n\nfn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\n  return position.x + position.y * size.x + position.z * (size.x * size.y);\n}\n\n\nfn doesBrickContainVoxels(brick: Brick) -> bool {\n  for(var i = 0; i < 16; i++){\n    if(brick.voxels[i] > 0){\n      return true;\n    }\n  }\n  return false;\n}\n\nfn getBit(value: u32, bitIndex: u32) -> bool {\n  return (value & (1u << bitIndex)) != 0;\n}\n\n// gets bit in 512bit bitmask in a brick\n// bitIndex is the index of the bit in the bitmask, 0-511\nfn getBitInBrick(brick: Brick, bitIndex: u32) -> bool {\n  let maskIndex = bitIndex / 32;\n  let bitIndexInMask = bitIndex % 32;\n  return getBit(brick.voxels[maskIndex], bitIndexInMask);\n}\n\nfn rayMarchAtMip(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\n  var output = RayMarchResult();\n  let rayDirSign = sign(objectRayDirection);\n  let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\n  var voxelSize = vec3(f32(1 << mipLevel));\n  var shiftedRayOrigin = objectRayOrigin - objectRayDirection * EPSILON;\n  var objectPos = shiftedRayOrigin;\n  var currentIndex = vec3<i32>(floor(objectPos));\n  var scaledRayOrigin =  objectRayOrigin / voxelSize;\n  var scaledObjectPos = floor(objectPos / voxelSize);\n  var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\n  var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\n  let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\n  var objectNormal = mask * -rayDirSign;\n  var tCurrent = min(tMax.x, min(tMax.y, tMax.z));\n\n  // RAYMARCH\n  for(var i = 0; i < MAX_RAY_STEPS; i++)\n  {\n    output.stepsTaken = i;\n\n    let samplePosition = vec3<u32>(currentIndex) + atlasLocation;\n    let mipSample0 = textureLoad(voxels, samplePosition / vec3((1u << mipLevel)), mipLevel);\n\n    if(mipSample0.r > 0.0 && isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\n        output.objectPos = objectPos;\n        output.worldPos = (voxelObject.transform *  vec4(objectPos, 1.0)).xyz;\n        output.normal = transformNormal(voxelObject.inverseTransform,vec3<f32>(objectNormal));\n        output.hit = true;\n        output.t = tCurrent;\n        output.palettePosition = mipSample0.r;\n        return output;\n    }\n\n    var scaledRayOrigin = shiftedRayOrigin / voxelSize;\n    var scaledObjectPos = floor(objectPos / voxelSize);\n    var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\n    var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\n    let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\n\n    tCurrent = min(tMax.x, min(tMax.y, tMax.z));\n    objectPos = objectRayOrigin + objectRayDirection * tCurrent;\n    currentIndex = vec3<i32>(floor(objectPos / voxelSize) * voxelSize);\n    objectNormal = mask * -rayDirSign;\n\n\n    if(!isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\n        break;\n    }\n  }\n  return output;\n}\n\nfn rayMarchTransformed(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\n      var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\n      let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\n      return  rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\n}\n\nfn rayMarchOctree(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, startingMipLevel: u32) -> RayMarchResult {\n   var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\n   let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\n   var output = RayMarchResult();\n   for(var mipLevel = startingMipLevel; mipLevel > 0; mipLevel--){\n     output = rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\n     if(output.hit){\n       objectRayOrigin += (output.t - EPSILON) * objectRayDirection;\n     }\n     else{\n      return output;\n     }\n   }\n   return rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, 0);\n}\n\nconst SHADOW_MIN_MIP_LEVEL =1u;\n\nfn rayMarchOctreeShadows(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, startingMipLevel: u32) -> RayMarchResult {\n   var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\n   let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\n   var output = RayMarchResult();\n   for(var mipLevel = startingMipLevel; mipLevel > SHADOW_MIN_MIP_LEVEL; mipLevel--){\n     output = rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\n     if(output.hit){\n       objectRayOrigin += (output.t - EPSILON) * objectRayDirection;\n     }\n     else{\n      return output;\n     }\n   }\n   return rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, SHADOW_MIN_MIP_LEVEL);\n}\n\n\nstruct Stack {\n  arr: array<i32, STACK_LEN>,\n\thead: u32,\n}\n\nfn stack_new() -> Stack {\n    var arr: array<i32, STACK_LEN>;\n    return Stack(arr, 0u);\n}\n\nfn stack_push(stack: ptr<function, Stack>, val: i32) {\n    (*stack).arr[(*stack).head] = val;\n    (*stack).head += 1u;\n}\n\nfn stack_pop(stack: ptr<function, Stack>) -> i32 {\n    (*stack).head -= 1u;\n    return (*stack).arr[(*stack).head];\n}\n\nconst colours = array<vec3<f32>, 6>(\n  vec3<f32>(1.0, 0.0, 0.0),\n  vec3<f32>(0.0, 1.0, 0.0),\n  vec3<f32>(0.0, 0.0, 1.0),\n  vec3<f32>(1.0, 1.0, 0.0),\n  vec3<f32>(1.0, 0.0, 1.0),\n  vec3<f32>(0.0, 1.0, 1.0)\n);\n\nfn debugColourFromIndex(index: i32) -> vec3<f32> {\n  return colours[index % 6];\n}\n\n\nconst OCTREE_CHILD_OFFSETS = array<vec3<i32>, 8>(\n  vec3<i32>(0, 0, 0),\n  vec3<i32>(1, 0, 0),\n  vec3<i32>(0, 1, 0),\n  vec3<i32>(1, 1, 0),\n  vec3<i32>(0, 0, 1),\n  vec3<i32>(1, 0, 1),\n  vec3<i32>(0, 1, 1),\n  vec3<i32>(1, 1, 1)\n);",f="const BRICK_SIZE = 8;\nconst MAX_STEPS = 256;\n\n\nstruct BVHNode {\n  leftIndex: i32,\n  rightIndex: i32,\n  objectCount: u32,\n  AABBMin: vec3<f32>,\n  AABBMax: vec3<f32>\n}\n\nfn getDistanceToNode(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, node: BVHNode) -> f32 {\n  if(all(rayOrigin >= node.AABBMin) && all(rayOrigin <= node.AABBMax)){\n    return 0.0;\n  }\n  let boxSize = (node.AABBMax - node.AABBMin) / 2;\n  let intersection = boxIntersection(rayOrigin - node.AABBMin, rayDirection, boxSize);\n  if(intersection.isHit){\n    return intersection.tNear;\n  }\n  return -1.0;\n\n}\n\n// Stack-based BVH traversal\nfn rayMarchBVH(rayOrigin: vec3<f32>, rayDirection: vec3<f32>) -> RayMarchResult {\n  var closestIntersection = RayMarchResult();\n  closestIntersection.worldPos = rayOrigin + rayDirection * FAR_PLANE;\n\n  // Create a stack to store the nodes to visit\n  var stack = stack_new();\n  stack_push(&stack, 0);\n\n  var iterations = 0;\n  var nodeIndex = 0;\n\n  while (stack.head > 0u && iterations < MAX_STEPS) {\n    let node = bvhNodes[nodeIndex];\n    if(node.objectCount > 1){\n      let leftNode = bvhNodes[node.leftIndex];\n      let rightNode = bvhNodes[node.rightIndex];\n      let leftDist = getDistanceToNode(rayOrigin, rayDirection, leftNode);\n      let rightDist = getDistanceToNode(rayOrigin, rayDirection, rightNode);\n      let hitLeft = leftDist >= 0.0;\n      let hitRight = rightDist >= 0.0;\n      if(hitLeft){\n        var nearIndex = node.leftIndex;\n        // We hit both left and right, choose the closest one\n        if(hitRight){\n          if(leftDist < rightDist){\n            // left is closer, push right to stack\n            stack_push(&stack, node.rightIndex);\n          } else {\n            // right is closer, push left to stack\n            stack_push(&stack, node.leftIndex);\n            nearIndex = node.rightIndex;\n          }\n        }\n        nodeIndex = nearIndex;\n      }\n      // We only hit the right Node\n      else if(hitRight){\n        nodeIndex = node.rightIndex;\n      }\n      // We didn't hit any node, pop the stack\n      else{\n        nodeIndex = stack_pop(&stack);\n      }\n    }\n    // valid leaf, raymarch it\n    else if(node.objectCount == 1){\n        let distanceToLeaf = getDistanceToNode(rayOrigin, rayDirection, node);\n        if(distanceToLeaf < 0.0){\n          nodeIndex = stack_pop(&stack);\n          continue;\n        }\n        let worldPos = rayOrigin + rayDirection * distanceToLeaf;\n        let voxelObject = voxelObjects[node.leftIndex];\n//          let rayMarchResult = rayMarchTransformed(voxelObject, rayDirection, worldPos, 0);\n        var rayMarchResult = rayMarchOctree(voxelObject, rayDirection, worldPos, 3);\n        rayMarchResult.voxelObjectIndex = node.leftIndex;\n        if(rayMarchResult.hit){\n          return rayMarchResult;\n        }\n\n        nodeIndex = stack_pop(&stack);\n    }\n\n    iterations += 1;\n//    closestIntersection.colour += vec3<f32>(0.0075);\n  }\n\n  return closestIntersection;\n}\n\nconst MAX_SHADOW_BVH_VISITS = 8;\n\nfn rayMarchBVHShadows(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, mipLevel: u32) -> RayMarchResult {\n   var closestIntersection = RayMarchResult();\n   closestIntersection.worldPos = rayOrigin + rayDirection * FAR_PLANE;\n\n   // Create a stack to store the nodes to visit\n   var stack = stack_new();\n   stack_push(&stack, 0);\n\n   var iterations = 0;\n   var nodeIndex = 0;\n\n   while (stack.head > 0u && iterations < MAX_SHADOW_BVH_VISITS) {\n     let node = bvhNodes[nodeIndex];\n     if(node.objectCount > 1){\n       let leftNode = bvhNodes[node.leftIndex];\n       let rightNode = bvhNodes[node.rightIndex];\n       let leftDist = getDistanceToNode(rayOrigin, rayDirection, leftNode);\n       let rightDist = getDistanceToNode(rayOrigin, rayDirection, rightNode);\n       let hitLeft = leftDist >= 0.0;\n       let hitRight = rightDist >= 0.0;\n       if(hitLeft){\n         var nearIndex = node.leftIndex;\n         // We hit both left and right, choose the closest one\n         if(hitRight){\n           if(leftDist < rightDist){\n             // left is closer, push right to stack\n             stack_push(&stack, node.rightIndex);\n           } else {\n             // right is closer, push left to stack\n             stack_push(&stack, node.leftIndex);\n             nearIndex = node.rightIndex;\n           }\n         }\n         nodeIndex = nearIndex;\n       }\n       // We only hit the right Node\n       else if(hitRight){\n         nodeIndex = node.rightIndex;\n       }\n       // We didn't hit any node, pop the stack\n       else{\n         nodeIndex = stack_pop(&stack);\n       }\n     }\n     // valid leaf, raymarch it\n     else if(node.objectCount == 1){\n         let distanceToLeaf = getDistanceToNode(rayOrigin, rayDirection, node);\n         if(distanceToLeaf < 0.0){\n           nodeIndex = stack_pop(&stack);\n           continue;\n         }\n         let worldPos = rayOrigin + rayDirection * distanceToLeaf;\n         let voxelObject = voxelObjects[node.leftIndex];\n         var rayMarchResult = rayMarchTransformed(voxelObject, rayDirection, worldPos, mipLevel);\n         rayMarchResult.voxelObjectIndex = node.leftIndex;\n//         let rayMarchResult = rayMarchOctree(voxelObject, rayDirection, worldPos, 3);\n         if(rayMarchResult.hit){\n           return rayMarchResult;\n         }\n\n         nodeIndex = stack_pop(&stack);\n     }\n\n     iterations += 1;\n //    closestIntersection.colour += vec3<f32>(0.0075);\n   }\n\n   return closestIntersection;\n }",h="struct ViewProjectionMatrices {\n  viewProjection : mat4x4<f32>,\n  previousViewProjection : mat4x4<f32>,\n  inverseViewProjection : mat4x4<f32>,\n  previousInverseViewProjection : mat4x4<f32>,\n  projection : mat4x4<f32>,\n  inverseProjection: mat4x4<f32>\n};\n\n\nfn plainIntersect(ro: vec3<f32>, rd: vec3<f32>, p: vec4<f32>) -> f32 {\n    return -(dot(ro, p.xyz) + p.w) / dot(rd, p.xyz);\n}\n\nfn getVelocityStatic(worldPos: vec3<f32>, viewProjections:ViewProjectionMatrices) -> vec2<f32>{\n  let vp = viewProjections.viewProjection;\n  let previousVp = viewProjections.previousViewProjection;\n\n  let clipSpace = vp * vec4(worldPos.xyz, 1.0);\n  let previousClipSpace = previousVp * vec4(worldPos.xyz, 1.0);\n\n  let ndc = clipSpace.xyz / clipSpace.w;\n  let previousNdc = previousClipSpace.xyz / previousClipSpace.w;\n\n  var uv = ndc.xy * 0.5 + 0.5;\n  var previousUv = previousNdc.xy * 0.5 + 0.5;\n\n  var velocity = previousUv - uv;\n  return velocity;\n}\n\nfn getVelocity(objectPos: vec3<f32>, modelMatrix: mat4x4<f32>, previousModelMatrix: mat4x4<f32>, viewProjections: ViewProjectionMatrices) -> vec2<f32> {\n  let vp = viewProjections.viewProjection;\n  let previousVp = viewProjections.previousViewProjection;\n\n  // Get current object space position of the current pixel\n  let objectClipSpace = vp * modelMatrix * vec4(objectPos.xyz, 1.0);\n  let objectNDC = objectClipSpace.xyz / objectClipSpace.w;\n\n  // Get previous position of the current object space position\n  let previousObjectClipSpace = previousVp * previousModelMatrix * vec4(objectPos.xyz, 1.0);\n  let previousObjectNDC = previousObjectClipSpace.xyz / previousObjectClipSpace.w;\n\n  // UV\n  var uv = objectNDC.xy * 0.5 + 0.5;\n  var previousUv = previousObjectNDC.xy * 0.5 + 0.5;\n  uv.y = 1.0 - uv.y;\n  previousUv.y = 1.0 - previousUv.y;\n\n  // Get velocity based on the difference between the current and previous positions\n  var velocity = previousUv - uv;\n  return velocity;\n}\n\nfn getLeftChildIndex(index: i32) -> i32 {\n  return index * 2 + 1;\n}\n\nfn getRightChildIndex(index: i32) -> i32 {\n  return index * 2 + 2;\n}\n\nfn getParentIndex(index: i32) -> i32 {\n  return (index - 1) / 2;\n}\n\n\nfn dirIsNegative(dir: vec3<f32>, axis: i32) -> bool {\n  return dir[axis] < 0.0;\n}\n\nfn getDebugColour(index: i32) -> vec3<f32> {\n  let colours = array<vec3<f32>, 6>(\n    vec3<f32>(1.0, 0.0, 0.0),\n    vec3<f32>(0.0, 1.0, 0.0),\n    vec3<f32>(0.0, 0.0, 1.0),\n    vec3<f32>(1.0, 1.0, 0.0),\n    vec3<f32>(1.0, 0.0, 1.0),\n    vec3<f32>(0.0, 1.0, 1.0)\n  );\n  return colours[index % 6];\n}\n\n\nfn customNormalize(value: f32, min: f32, max: f32) -> f32 {\n    return (value - min) / (max - min);\n}\n\nconst IDENTITY_MATRIX = mat4x4<f32>(\n  vec4<f32>(1.0, 0.0, 0.0, 0.0),\n  vec4<f32>(0.0, 1.0, 0.0, 0.0),\n  vec4<f32>(0.0, 0.0, 1.0, 0.0),\n  vec4<f32>(0.0, 0.0, 0.0, 1.0)\n);\n\nfn intersectSphere(origin: vec3<f32>, dir: vec3<f32>, spherePos: vec3<f32>, sphereRad: f32) -> f32\n{\n\tlet oc = origin - spherePos;\n\tlet b = 2.0 * dot(dir, oc);\n\tlet c = dot(oc, oc) - sphereRad*sphereRad;\n\tlet disc = b * b - 4.0 * c;\n\tif (disc < 0.0)\n\t{\n\t  return -1.0;\n\t}\n\n//    float q = (-b + ((b < 0.0) ? -sqrt(disc) : sqrt(disc))) / 2.0;\n  let q = (-b + select(sqrt(disc), -sqrt(disc), b < 0.0)) / 2.0;\n\tvar t0 = q;\n\tvar t1 = c / q;\n\tif (t0 > t1) {\n\t\tvar temp = t0;\n\t\tt0 = t1;\n\t\tt1 = temp;\n\t}\n\tif (t1 < 0.0){\n\t  return -1.0;\n\t}\n\n  return select(t0, t1, t0 < 0.0);\n}\n\nfn skyDomeIntersection(ro: vec3<f32>, rd: vec3<f32>) -> f32 {\n    return intersectSphere(ro, rd, vec3<f32>(0.0, 0.0, 0.0), 100.0);\n}\n\nfn reprojectWorldPos(worldPos: vec3<f32>, viewProjections: ViewProjectionMatrices) -> vec3<f32> {\n  let clipSpace = viewProjections.previousViewProjection * vec4(worldPos.xyz, 1.0);\n  return 0.5 * (clipSpace.xyz / clipSpace.w) + 0.5;\n}\n\nfn reprojectObjectWorldPos(worldPos: vec3<f32>, previousModelMatrix: mat4x4<f32>, viewProjections: ViewProjectionMatrices) -> vec3<f32> {\n  let clipSpace = viewProjections.previousViewProjection * previousModelMatrix * vec4(worldPos.xyz, 1.0);\n  return 0.5 * (clipSpace.xyz / clipSpace.w) + 0.5;\n}\n\nfn tracePixel(pixel: vec2<u32>){\n   let resolution = textureDimensions(albedoTex);\n   var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\n   let rayDirection = calculateRayDirection(uv,viewProjections.inverseViewProjection);\n    var rayOrigin = cameraPosition;\n    var closestIntersection = RayMarchResult();\n\n    let bvhResult = rayMarchBVH(rayOrigin, rayDirection);\n    if(!bvhResult.hit){\n      textureStore(albedoTex, pixel, vec4(0));\n      textureStore(normalTex, pixel, vec4(0));\n      textureStore(depthWrite, pixel, vec4(FAR_PLANE));\n      let worldPos = rayOrigin + skyDomeIntersection(rayOrigin, rayDirection) * rayDirection;\n      let velocity = getVelocityStatic(worldPos, viewProjections);\n      textureStore(velocityTex, pixel, vec4(velocity,0, -1.0));\n      return;\n    }\n    closestIntersection = bvhResult;\n\n    let voxelObject = voxelObjects[closestIntersection.voxelObjectIndex];\n    let paletteX = i32(closestIntersection.palettePosition * 255.0);\n    let paletteY = i32(voxelObject.paletteIndex);\n    let albedo = textureLoad(paletteTex, vec2(paletteX, paletteY), 0).rgb;\n    let normal = closestIntersection.normal;\n    let worldPos = closestIntersection.worldPos;\n    let velocity = getVelocityStatic(worldPos, viewProjections);\n\n    let depth = distance(cameraPosition, worldPos);\n    textureStore(albedoTex, pixel, vec4(albedo, 1));\n    textureStore(normalTex, pixel, vec4(normal,1));\n    textureStore(velocityTex, pixel, vec4(velocity,0,f32(closestIntersection.voxelObjectIndex)));\n    textureStore(depthWrite, pixel, vec4(depth, 0, 0, 0));\n}\n\n@compute @workgroup_size(16, 8, 1)\nfn main(\n   @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\n) {\n  let pixel = GlobalInvocationID.xy * 3;\n  tracePixel(pixel);\n}\n\n@group(1) @binding(0) var<storage, read> screenRayBuffer : array<vec2<u32>>;\n\nconst REMAINING_RAY_OFFSETS = array<vec2<u32>, 8>(\n  vec2<u32>(0,1),\n  vec2<u32>(1,0),\n  vec2<u32>(1,1),\n  vec2<u32>(2,0),\n  vec2<u32>(2,1),\n  vec2<u32>(0,2),\n  vec2<u32>(1,2),\n  vec2<u32>(2,2)\n);\n\n@compute @workgroup_size(64, 1, 1)\nfn bufferMarch(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\n  @builtin(local_invocation_id) LocalInvocationID : vec3<u32>,\n  @builtin(workgroup_id) WorkGroupID : vec3<u32>,\n) {\n  let bufferIndex = GlobalInvocationID.x / 8;\n  let localRayIndex = GlobalInvocationID.x % 8;\n  let pixel = screenRayBuffer[bufferIndex];\n  let offsetPixel = pixel + REMAINING_RAY_OFFSETS[localRayIndex];\n//  textureStore(albedoTex, offsetPixel, vec4(1,0,0,1));\n  tracePixel(offsetPixel);\n}",p=Symbol(),m=e=>new Proxy(e,{construct:(e,t,n)=>e.prototype!==n.prototype?Reflect.construct(e,t,n):(e[p]||(e[p]=Reflect.construct(e,t,n)),e[p])});const g=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,v=(e,t,n=g)=>{let r=class{#e;#t;#n;#r;#i=t;#a=n;#o=e;constructor(r,i,a){this.#e=r.createTexture({label:e,size:[i,a,1],format:t,usage:n}),this.#t=this.#e.createView({label:e}),this.#n=i,this.#r=a}get texture(){return this.#e}get view(){return this.#t}get width(){return this.#n}get height(){return this.#r}get format(){return this.#i}get usage(){return this.#a}get label(){return this.#o}};return r=function(e,t,n,r){var i,a=arguments.length,o=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(o=(a<3?i(o):a>3?i(t,n,o):i(t,n))||o);return a>3&&o&&Object.defineProperty(t,n,o),o}([m],r),r},x=v("albedo","rgba8unorm"),y=v("normal","rgba16float"),b=v("depth",l,GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST),_=v("velocity","rgba16float"),w=v("world position","rgba32float"),T=v("output",s),S=async()=>{const e=await(async()=>{const e=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"2d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba32float",viewDimension:"2d"}},{binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]}),t=await Ga.createComputePipelineAsync({label:"reconstruct world position",layout:Ga.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:Ga.createShaderModule({code:`\n          ${a}\n          struct ViewProjectionMatrices {\n            viewProjection : mat4x4<f32>,\n            previousViewProjection : mat4x4<f32>,\n            inverseViewProjection : mat4x4<f32>,\n            projection : mat4x4<f32>,\n            inverseProjection: mat4x4<f32>\n          };\n          \n          @group(0) @binding(0) var depthTex : texture_2d<f32>;\n          @group(0) @binding(1) var<uniform> viewProjections : ViewProjectionMatrices;\n          @group(0) @binding(2) var worldPosTex : texture_storage_2d<rgba32float, write>;\n          @group(0) @binding(3) var<uniform> cameraPosition : vec3<f32>;\n        \n          const NEAR = 0.5;\n          const FAR = 10000.0;\n          \n          @compute @workgroup_size(8, 8, 1)\n          fn main(\n            @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\n          ) {\n            let resolution = textureDimensions(worldPosTex);\n            let pixel = GlobalInvocationID.xy;\n            var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\n            let depth = textureLoad(depthTex, pixel, 0).r;\n            let rayDirection = calculateRayDirection(uv, viewProjections.inverseViewProjection);\n            let worldPos = cameraPosition + rayDirection * depth;\n            textureStore(worldPosTex, pixel, vec4(worldPos, 1));\n          }\n`}),entryPoint:"main"}});let n;return(r,i)=>{n||(n=(t=>Ga.createBindGroup({layout:e,entries:[{binding:0,resource:t.outputTextures.depthTexture.view},{binding:1,resource:{buffer:t.viewProjectionMatricesBuffer}},{binding:2,resource:t.outputTextures.worldPositionTexture.view},{binding:3,resource:{buffer:t.cameraPositionBuffer}}]}))(i)),r.setPipeline(t),r.setBindGroup(0,n),r.dispatchWorkgroups(Math.ceil(Ba[0]/8),Math.ceil(Ba[1]/8))}})(),t=await(async()=>{const e={binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},t={binding:5,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d"}},n={binding:7,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},r={binding:6,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:l,viewDimension:"2d"}},i={binding:10,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},o={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},s={binding:12,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},u=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},o,e,t,r,n,{binding:8,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},i,s]}),p=await Ga.createComputePipelineAsync({label:"raymarch g-buffer",layout:Ga.createPipelineLayout({bindGroupLayouts:[u]}),compute:{module:Ga.createShaderModule({code:`\n          @group(0) @binding(0) var voxels : texture_3d<f32>;\n          @group(0) @binding(2) var<uniform> cameraPosition : vec3<f32>;\n          @group(0) @binding(3) var<storage> voxelObjects : array<VoxelObject>;\n          @group(0) @binding(4) var normalTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(5) var albedoTex : texture_storage_2d<rgba8unorm, write>;\n          @group(0) @binding(6) var depthWrite : texture_storage_2d<${l}, write>;\n          @group(0) @binding(7) var velocityTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(8) var<uniform> viewProjections : ViewProjectionMatrices;\n          @group(0) @binding(10) var<storage> bvhNodes: array<BVHNode>;\n          @group(0) @binding(11) var worldPosTex : texture_storage_2d<rgba32float, write>;\n          @group(0) @binding(12) var paletteTex : texture_2d<f32>;\n          ${a}\n          ${c}\n          ${d}\n          ${f}\n          ${h}`}),entryPoint:"main"}});let m;return(e,t)=>{m||(m=(e=>Ga.createBindGroup({layout:u,entries:[{binding:0,resource:e.volumeAtlas.atlasTextureView},{binding:2,resource:{buffer:e.cameraPositionBuffer}},{binding:3,resource:{buffer:e.transformationMatrixBuffer}},{binding:4,resource:e.outputTextures.normalTexture.view},{binding:5,resource:e.outputTextures.albedoTexture.view},{binding:6,resource:e.outputTextures.depthTexture.view},{binding:7,resource:e.outputTextures.velocityTexture.view},{binding:8,resource:{buffer:e.viewProjectionMatricesBuffer}},{binding:10,resource:{buffer:e.bvhBuffer}},{binding:12,resource:e.volumeAtlas.paletteTextureView}]}))(t)),e.setPipeline(p),e.setBindGroup(0,m),e.dispatchWorkgroups(Math.ceil(Ba[0]/16/3),Math.ceil(Ba[1]/8/3))}})(),n=await(async()=>{const e=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},{binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},{binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:l,viewDimension:"2d"}},{binding:5,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"2d"}},{binding:6,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},{binding:7,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}}]}),t=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]}),n=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}}]}),r=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),i=await Ga.createComputePipelineAsync({label:"interpolate g-buffer",layout:Ga.createPipelineLayout({bindGroupLayouts:[e,t,n,r]}),compute:{module:Ga.createShaderModule({code:`${a}struct ViewProjectionMatrices {\n  viewProjection : mat4x4<f32>,\n  previousViewProjection : mat4x4<f32>,\n  inverseViewProjection : mat4x4<f32>,\n  previousInverseViewProjection : mat4x4<f32>,\n  projection : mat4x4<f32>,\n  inverseProjection: mat4x4<f32>\n};\n\nstruct VoxelObject {\n  transform: mat4x4<f32>,\n  inverseTransform: mat4x4<f32>,\n  previousTransform: mat4x4<f32>,\n  previousInverseTransform: mat4x4<f32>,\n  size : vec3<f32>,\n  atlasLocation : vec3<f32>,\n  paletteIndex : f32,\n}\n\n// Textures\n@group(0) @binding(0) var albedoTex : texture_storage_2d<rgba8unorm, write>;\n@group(0) @binding(1) var albedoCopyTex : texture_2d<f32>;\n@group(0) @binding(2) var velocityTex : texture_storage_2d<rgba16float, write>;\n@group(0) @binding(3) var velocityCopyTex : texture_2d<f32>;\n@group(0) @binding(4) var depthTex : texture_storage_2d<r32float, write>;\n@group(0) @binding(5) var depthCopyTex : texture_2d<f32>;\n@group(0) @binding(6) var normalTex : texture_storage_2d<rgba16float, write>;\n@group(0) @binding(7) var normalCopyTex : texture_2d<f32>;\n\n// Camera\n@group(1) @binding(0) var<uniform> cameraPosition : vec3<f32>;\n@group(1) @binding(1) var<uniform> viewProjections : ViewProjectionMatrices;\n\n// Voxels\n@group(2) @binding(0) var<storage> voxelObjects : array<VoxelObject>;\n@group(2) @binding(1) var volumeAtlasTex : texture_3d<f32>;\n@group(2) @binding(2) var paletteTex : texture_2d<f32>;\n\n// Screen Rays\nstruct ScreenRay {\n  pixel : vec2<u32>,\n};\n@group(3) @binding(0) var<storage, read_write> indirectArgs : array<atomic<u32>>;\n@group(3) @binding(1) var<storage, read_write> screenRays : array<ScreenRay>;\n@group(3) @binding(2) var<storage, read_write> counter : array<atomic<u32>>;\n\nconst neighborOffsets = array<vec2<i32>, 4>(\n  vec2<i32>(0, 0),\n  vec2<i32>(3, 0),\n  vec2<i32>(0, 3),\n  vec2<i32>(3, 3)\n);\n\n// Normal is in voxel (object) space, so will only have 1 or -1 values on one axis\nfn checkSharedPlane(\n  normal : vec3<f32>,\n  voxelPos : vec3<f32>,\n  neighborVoxelPos : vec3<f32>,\n  neighborNormal : vec3<f32>\n) -> bool {\n  if(any(normal != neighborNormal)){\n  return false;\n  }\n  if(abs(neighborNormal.x) > 0.0){\n    return voxelPos.x == neighborVoxelPos.x;\n  }\n  if(abs(neighborNormal.y) > 0.0){\n    return voxelPos.y == neighborVoxelPos.y;\n  }\n  if(abs(neighborNormal.z) > 0.0){\n    return voxelPos.z == neighborVoxelPos.z;\n  }\n  return false;\n}\n\nconst REMAINING_RAY_OFFSETS = array<vec2<u32>, 8>(\n  vec2<u32>(0,1),\n  vec2<u32>(1,0),\n  vec2<u32>(1,1),\n  vec2<u32>(2,0),\n  vec2<u32>(2,1),\n  vec2<u32>(0,2),\n  vec2<u32>(1,2),\n  vec2<u32>(2,2)\n);\n\n@compute @workgroup_size(16, 8, 1)\n fn main(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\n) {\n  let texSize = textureDimensions(albedoCopyTex);\n  let pixel = vec2<i32>(GlobalInvocationID.xy);\n  let nearestFilledPixel = (pixel / 3) * 3;\n  let isOriginPixel = all(pixel == nearestFilledPixel);\n  let isCornerPixel = all(pixel == nearestFilledPixel + vec2(2));\n\n  let nearestUV = vec2<f32>(nearestFilledPixel) / vec2<f32>(texSize);\n\n  let velocityRef = textureLoad(velocityCopyTex, nearestFilledPixel, 0);\n\n  var hasFoundObject = false;\n  // Check if each neightbor is the same object\n  for(var i = 1; i < 4; i = i + 1) {\n    let objectIndex = textureLoad(velocityCopyTex, nearestFilledPixel + neighborOffsets[i], 0).a;\n    if(objectIndex != velocityRef.a) {\n\n\n       if(isOriginPixel){\n         // Add to ray buffer\n         let count = atomicAdd(&counter[0], 1);\n         screenRays[count].pixel = vec2<u32>(pixel);\n         if(count % 8 == 0){\n          atomicAdd(&indirectArgs[0], 1);\n         }\n       }else{\n//        textureStore(albedoTex, pixel, vec4(0.0, 0.0, 1.0, 1.0));\n        textureStore(velocityTex, pixel, vec4(velocityRef.xyz, -1.0));\n         textureStore(depthTex, pixel, vec4(10000.0));\n         textureStore(normalTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\n       }\n       return;\n    }\n    if(objectIndex != -1.0) {\n      hasFoundObject = true;\n    }\n  }\n  if(!hasFoundObject) {\n    textureStore(velocityTex, pixel, vec4(velocityRef.xyz, -1.0));\n    // Dont march any more rays - we have hit the sky\n    textureStore(depthTex, pixel, vec4(10000.0));\n    textureStore(normalTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\n    textureStore(albedoTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\n    return;\n  }\n  let voxelObject = voxelObjects[i32(velocityRef.a)];\n  let depthRef = textureLoad(depthCopyTex, nearestFilledPixel, 0).r;\n  let normalRef = textureLoad(normalCopyTex, nearestFilledPixel, 0).xyz;\n  let localNormal = (voxelObject.inverseTransform * vec4(normalRef, 0.0)).xyz;\n  let rayDirection = calculateRayDirection(nearestUV, viewProjections.inverseViewProjection);\n  let worldPosRef = cameraPosition + rayDirection * depthRef;\n  let localPosRef = (voxelObject.inverseTransform * vec4(worldPosRef, 1.0)).xyz;\n  let voxelPosRef = floor(localPosRef);\n\n  // Check if each neightbor is the same voxel plane\n  for(var i = 1; i < 4; i = i + 1) {\n    let neighborPixel = nearestFilledPixel + neighborOffsets[i];\n    let neighborUV = vec2<f32>(neighborPixel) / vec2<f32>(texSize);\n    let neighborDepth = textureLoad(depthCopyTex, neighborPixel, 0).r;\n    let neighborNormal = textureLoad(normalCopyTex, neighborPixel, 0).xyz;\n    let neighborLocalNormal = (voxelObject.inverseTransform * vec4(neighborNormal, 0.0)).xyz;\n    let neighborRayDirection = calculateRayDirection(neighborUV, viewProjections.inverseViewProjection);\n    let neighborWorldPos = cameraPosition + neighborRayDirection * neighborDepth;\n    let neighborLocalPos = (voxelObject.inverseTransform * vec4(neighborWorldPos, 1.0)).xyz;\n    let neighborVoxelPos = floor(neighborLocalPos);\n\n    if(!checkSharedPlane(localNormal, voxelPosRef, neighborVoxelPos, neighborLocalNormal)) {\n      if(isOriginPixel){\n        // Add to ray buffer\n        let count = atomicAdd(&counter[0], 1);\n        screenRays[count].pixel = vec2<u32>(pixel);\n        if(count % 8 == 0){\n          atomicAdd(&indirectArgs[0], 1);\n        }\n      }else{\n        textureStore(albedoTex, pixel, vec4(0.0, 1.0, 0.0, 1.0));\n        textureStore(normalTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\n        textureStore(velocityTex, pixel, vec4(velocityRef.xyz, -1.0));\n        textureStore(depthTex, pixel, vec4(10000.0));\n      }\n\n      return;\n    }\n  }\n\n  textureStore(velocityTex, pixel, velocityRef);\n\n  // Interpolate\n  var depth = 0.0;\n  var uv = vec2(0.0);\n  var totalWeight = 0.0;\n  var normal = vec3(0.0);\n  for(var i = 0; i < 4; i = i + 1) {\n    let neighbor = nearestFilledPixel + neighborOffsets[i];\n    let neighborUV = vec2<f32>(neighbor) / vec2<f32>(texSize);\n    let distanceToPixel = vec2<f32>(pixel - neighbor);\n    let weight = 1.0 / (1.0 + dot(distanceToPixel, distanceToPixel));\n    normal += textureLoad(normalCopyTex, neighbor, 0).xyz * weight;\n    depth += textureLoad(depthCopyTex, neighbor, 0).r * weight;\n    uv += neighborUV * weight;\n    totalWeight += weight;\n  }\n  depth /= totalWeight;\n  normal /= totalWeight;\n  uv /= totalWeight;\n\n  textureStore(depthTex, pixel, vec4(depth));\n  textureStore(normalTex, pixel, vec4(normal, 1.0));\n\n  let worldPos = cameraPosition + calculateRayDirection(uv, viewProjections.inverseViewProjection) * depth;\n  let localPos = (voxelObject.inverseTransform * vec4(worldPos, 1.0)).xyz;\n  let voxelPos = floor(localPos);\n  let atlasSamplePos = vec3<i32>(voxelObject.atlasLocation + voxelPos);\n  let palettePos = textureLoad(volumeAtlasTex, atlasSamplePos, 0).r;\n  let paletteX = i32(palettePos* 255.0);\n  let paletteY = i32(voxelObject.paletteIndex);\n  let albedo = textureLoad(paletteTex, vec2(paletteX, paletteY), 0).rgb;\n\n  textureStore(albedoTex, pixel, vec4(albedo, 1));\n//  textureStore(albedoTex, pixel, vec4(voxelPos / voxelObject.size, 1));\n//  textureStore(albedoTex, pixel, vec4(localPos / voxelObject.size, 1));\n//  textureStore(albedoTex, pixel, vec4(fract(localPos), 1));\n}`}),entryPoint:"main"}});let o,s,u,c;return(a,l,d,f,h,p,m,g,v)=>{o||(o=((t,n,r,i,a)=>Ga.createBindGroup({layout:e,entries:[{binding:0,resource:t.outputTextures.albedoTexture.view},{binding:1,resource:n},{binding:2,resource:t.outputTextures.velocityTexture.view},{binding:3,resource:r},{binding:4,resource:t.outputTextures.depthTexture.view},{binding:5,resource:i},{binding:6,resource:t.outputTextures.normalTexture.view},{binding:7,resource:a}]}))(l,d,f,h,p)),s||(s=(e=>Ga.createBindGroup({layout:t,entries:[{binding:0,resource:{buffer:e.cameraPositionBuffer}},{binding:1,resource:{buffer:e.viewProjectionMatricesBuffer}}]}))(l)),u||(u=(e=>Ga.createBindGroup({layout:n,entries:[{binding:0,resource:{buffer:e.transformationMatrixBuffer}},{binding:1,resource:e.volumeAtlas.atlasTextureView},{binding:2,resource:e.volumeAtlas.paletteTextureView}]}))(l)),c||(c=((e,t,n)=>Ga.createBindGroup({layout:r,entries:[{binding:0,resource:{buffer:e}},{binding:1,resource:{buffer:t}},{binding:2,resource:{buffer:n}}]}))(m,g,v)),a.setPipeline(i),a.setBindGroup(0,o),a.setBindGroup(1,s),a.setBindGroup(2,u),a.setBindGroup(3,c),a.dispatchWorkgroups(Math.ceil(Ba[0]/16),Math.ceil(Ba[1]/8))}})(),r=await(async()=>{const e={binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},t={binding:5,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d"}},n={binding:7,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},r={binding:6,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:l,viewDimension:"2d"}},i={binding:10,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},o={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},s={binding:12,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},u=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},o,e,t,r,n,{binding:8,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},i,s]}),p=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}}]}),m=await Ga.createComputePipelineAsync({label:"raymarch g-buffer indirect",layout:Ga.createPipelineLayout({bindGroupLayouts:[u,p]}),compute:{module:Ga.createShaderModule({code:`\n          @group(0) @binding(0) var voxels : texture_3d<f32>;\n          @group(0) @binding(2) var<uniform> cameraPosition : vec3<f32>;\n          @group(0) @binding(3) var<storage> voxelObjects : array<VoxelObject>;\n          @group(0) @binding(4) var normalTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(5) var albedoTex : texture_storage_2d<rgba8unorm, write>;\n          @group(0) @binding(6) var depthWrite : texture_storage_2d<${l}, write>;\n          @group(0) @binding(7) var velocityTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(8) var<uniform> viewProjections : ViewProjectionMatrices;\n          @group(0) @binding(10) var<storage> bvhNodes: array<BVHNode>;\n          @group(0) @binding(11) var worldPosTex : texture_storage_2d<rgba32float, write>;\n          @group(0) @binding(12) var paletteTex : texture_2d<f32>;\n          ${a}\n          ${c}\n          ${d}\n          ${f}\n          ${h}`}),entryPoint:"bufferMarch"}});let g,v;return(e,t,n,r)=>{g||(g=(e=>Ga.createBindGroup({layout:u,entries:[{binding:0,resource:e.volumeAtlas.atlasTextureView},{binding:2,resource:{buffer:e.cameraPositionBuffer}},{binding:3,resource:{buffer:e.transformationMatrixBuffer}},{binding:4,resource:e.outputTextures.normalTexture.view},{binding:5,resource:e.outputTextures.albedoTexture.view},{binding:6,resource:e.outputTextures.depthTexture.view},{binding:7,resource:e.outputTextures.velocityTexture.view},{binding:8,resource:{buffer:e.viewProjectionMatricesBuffer}},{binding:10,resource:{buffer:e.bvhBuffer}},{binding:12,resource:e.volumeAtlas.paletteTextureView}]}))(t),v=(e=>Ga.createBindGroup({layout:p,entries:[{binding:0,resource:{buffer:e}}]}))(n)),e.setPipeline(m),e.setBindGroup(0,g),e.setBindGroup(1,v),e.dispatchWorkgroupsIndirect(r,0)}})();let i,o,s,u,p={albedoTexture:null,velocityTexture:null,depthTexture:null,normalTexture:null};return{render:a=>{if(!o){o=Ga.createBuffer({size:12,usage:GPUBufferUsage.INDIRECT|GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}),i=Ga.createBuffer({size:4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});const e=new Uint32Array(3);e[0]=1,e[1]=1,e[2]=1,Ga.queue.writeBuffer(o,0,e,0,e.length);const{width:t,height:n}=a.outputTextures.finalTexture,r=t/3*(n/3),c=(l=4*r,4,4*Math.ceil(l/4));console.log({maxScreenRays:r,bufferSizeBytes:c}),u=Ga.createBuffer({size:c,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC}),s=Ga.createBuffer({size:u.size,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ})}var l;Object.keys(p).forEach((e=>{const t=a.outputTextures[e];null===p[e]&&(p[e]=((e,t)=>new(v(`${t.label}-copy`,t.format,t.usage))(e,t.width,t.height))(Ga,t))}));const{commandEncoder:c,timestampWrites:d}=a;c.clearBuffer(o,0,4),c.clearBuffer(i,0,4),c.clearBuffer(u);let f=c.beginComputePass({timestampWrites:d});t(f,a),f.end(),Object.keys(p).forEach((e=>{const t=a.outputTextures[e],n=p[e];((e,t,n)=>{if(t.width!==n.width||t.height!==n.height)throw new Error("Source and destination textures must have the same dimensions");e.copyTextureToTexture({texture:t.texture},{texture:n.texture},{width:t.texture.width,height:t.texture.height,depthOrArrayLayers:1})})(c,t,n)})),f=c.beginComputePass({timestampWrites:d}),n(f,a,p.albedoTexture.view,p.velocityTexture.view,p.depthTexture.view,p.normalTexture.view,o,u,i),r(f,a,u,o),e(f,a),f.end()},label:"raymarched g-buffer"}};let P=1e-6,k=Float32Array;function O(e=0,t=0){const n=new k(2);return void 0!==e&&(n[0]=e,void 0!==t&&(n[1]=t)),n}let M=Float32Array;function E(e,t,n){const r=new M(3);return void 0!==e&&(r[0]=e,void 0!==t&&(r[1]=t,void 0!==n&&(r[2]=n))),r}const I=O;function U(e,t,n){return(n=n||new k(2))[0]=e[0]-t[0],n[1]=e[1]-t[1],n}const A=U;function C(e,t,n){return(n=n||new k(2))[0]=e[0]*t,n[1]=e[1]*t,n}const D=C;function G(e,t){return(t=t||new k(2))[0]=1/e[0],t[1]=1/e[1],t}const R=G;function L(e,t){return e[0]*t[0]+e[1]*t[1]}function z(e){const t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}const B=z;function N(e){const t=e[0],n=e[1];return t*t+n*n}const V=N;function j(e,t){const n=e[0]-t[0],r=e[1]-t[1];return Math.sqrt(n*n+r*r)}const F=j;function q(e,t){const n=e[0]-t[0],r=e[1]-t[1];return n*n+r*r}const H=q;function W(e,t){return(t=t||new k(2))[0]=e[0],t[1]=e[1],t}const Y=W;function $(e,t,n){return(n=n||new k(2))[0]=e[0]*t[0],n[1]=e[1]*t[1],n}const X=$;function Z(e,t,n){return(n=n||new k(2))[0]=e[0]/t[0],n[1]=e[1]/t[1],n}const Q=Z;var K=Object.freeze({__proto__:null,create:O,setDefaultType:function(e){const t=k;return k=e,t},fromValues:I,set:function(e,t,n){return(n=n||new k(2))[0]=e,n[1]=t,n},ceil:function(e,t){return(t=t||new k(2))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(e,t){return(t=t||new k(2))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},round:function(e,t){return(t=t||new k(2))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},clamp:function(e,t=0,n=1,r){return(r=r||new k(2))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r},add:function(e,t,n){return(n=n||new k(2))[0]=e[0]+t[0],n[1]=e[1]+t[1],n},addScaled:function(e,t,n,r){return(r=r||new k(2))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r},angle:function(e,t){const n=e[0],r=e[1],i=e[0],a=e[1],o=Math.sqrt(n*n+r*r)*Math.sqrt(i*i+a*a),s=o&&L(e,t)/o;return Math.acos(s)},subtract:U,sub:A,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<P&&Math.abs(e[1]-t[1])<P},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]},lerp:function(e,t,n,r){return(r=r||new k(2))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r},lerpV:function(e,t,n,r){return(r=r||new k(2))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r},max:function(e,t,n){return(n=n||new k(2))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n},min:function(e,t,n){return(n=n||new k(2))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n},mulScalar:C,scale:D,divScalar:function(e,t,n){return(n=n||new k(2))[0]=e[0]/t,n[1]=e[1]/t,n},inverse:G,invert:R,cross:function(e,t,n){n=n||new M(3);const r=e[0]*t[1]-e[1]*t[0];return n[0]=0,n[1]=0,n[2]=r,n},dot:L,length:z,len:B,lengthSq:N,lenSq:V,distance:j,dist:F,distanceSq:q,distSq:H,normalize:function(e,t){t=t||new k(2);const n=e[0],r=e[1],i=Math.sqrt(n*n+r*r);return i>1e-5?(t[0]=n/i,t[1]=r/i):(t[0]=0,t[1]=0),t},negate:function(e,t){return(t=t||new k(2))[0]=-e[0],t[1]=-e[1],t},copy:W,clone:Y,multiply:$,mul:X,divide:Z,div:Q,random:function(e=1,t){t=t||new k(2);const n=2*Math.random()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t},zero:function(e){return(e=e||new k(2))[0]=0,e[1]=0,e},transformMat4:function(e,t,n){n=n||new k(2);const r=e[0],i=e[1];return n[0]=r*t[0]+i*t[4]+t[12],n[1]=r*t[1]+i*t[5]+t[13],n},transformMat3:function(e,t,n){n=n||new k(2);const r=e[0],i=e[1];return n[0]=t[0]*r+t[4]*i+t[8],n[1]=t[1]*r+t[5]*i+t[9],n}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);const J=E;function ee(e,t,n){return(n=n||new M(3))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n}const te=ee;function ne(e,t,n){return(n=n||new M(3))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n}const re=ne;function ie(e,t){return(t=t||new M(3))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}const ae=ie;function oe(e,t,n){n=n||new M(3);const r=e[2]*t[0]-e[0]*t[2],i=e[0]*t[1]-e[1]*t[0];return n[0]=e[1]*t[2]-e[2]*t[1],n[1]=r,n[2]=i,n}function se(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function ue(e){const t=e[0],n=e[1],r=e[2];return Math.sqrt(t*t+n*n+r*r)}const le=ue;function ce(e){const t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r}const de=ce;function fe(e,t){const n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(n*n+r*r+i*i)}const he=fe;function pe(e,t){const n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return n*n+r*r+i*i}const me=pe;function ge(e,t){t=t||new M(3);const n=e[0],r=e[1],i=e[2],a=Math.sqrt(n*n+r*r+i*i);return a>1e-5?(t[0]=n/a,t[1]=r/a,t[2]=i/a):(t[0]=0,t[1]=0,t[2]=0),t}function ve(e,t){return(t=t||new M(3))[0]=e[0],t[1]=e[1],t[2]=e[2],t}const xe=ve;function ye(e,t,n){return(n=n||new M(3))[0]=e[0]*t[0],n[1]=e[1]*t[1],n[2]=e[2]*t[2],n}const be=ye;function _e(e,t,n){return(n=n||new M(3))[0]=e[0]/t[0],n[1]=e[1]/t[1],n[2]=e[2]/t[2],n}const we=_e;var Te=Object.freeze({__proto__:null,create:E,setDefaultType:function(e){const t=M;return M=e,t},fromValues:J,set:function(e,t,n,r){return(r=r||new M(3))[0]=e,r[1]=t,r[2]=n,r},ceil:function(e,t){return(t=t||new M(3))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(e,t){return(t=t||new M(3))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},round:function(e,t){return(t=t||new M(3))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},clamp:function(e,t=0,n=1,r){return(r=r||new M(3))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r[2]=Math.min(n,Math.max(t,e[2])),r},add:function(e,t,n){return(n=n||new M(3))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n},addScaled:function(e,t,n,r){return(r=r||new M(3))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r[2]=e[2]+t[2]*n,r},angle:function(e,t){const n=e[0],r=e[1],i=e[2],a=e[0],o=e[1],s=e[2],u=Math.sqrt(n*n+r*r+i*i)*Math.sqrt(a*a+o*o+s*s),l=u&&se(e,t)/u;return Math.acos(l)},subtract:ee,sub:te,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<P&&Math.abs(e[1]-t[1])<P&&Math.abs(e[2]-t[2])<P},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},lerp:function(e,t,n,r){return(r=r||new M(3))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r},lerpV:function(e,t,n,r){return(r=r||new M(3))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r[2]=e[2]+n[2]*(t[2]-e[2]),r},max:function(e,t,n){return(n=n||new M(3))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n[2]=Math.max(e[2],t[2]),n},min:function(e,t,n){return(n=n||new M(3))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n[2]=Math.min(e[2],t[2]),n},mulScalar:ne,scale:re,divScalar:function(e,t,n){return(n=n||new M(3))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n},inverse:ie,invert:ae,cross:oe,dot:se,length:ue,len:le,lengthSq:ce,lenSq:de,distance:fe,dist:he,distanceSq:pe,distSq:me,normalize:ge,negate:function(e,t){return(t=t||new M(3))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},copy:ve,clone:xe,multiply:ye,mul:be,divide:_e,div:we,random:function(e=1,t){t=t||new M(3);const n=2*Math.random()*Math.PI,r=2*Math.random()-1,i=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*i,t[1]=Math.sin(n)*i,t[2]=r*e,t},zero:function(e){return(e=e||new M(3))[0]=0,e[1]=0,e[2]=0,e},transformMat4:function(e,t,n){n=n||new M(3);const r=e[0],i=e[1],a=e[2],o=t[3]*r+t[7]*i+t[11]*a+t[15]||1;return n[0]=(t[0]*r+t[4]*i+t[8]*a+t[12])/o,n[1]=(t[1]*r+t[5]*i+t[9]*a+t[13])/o,n[2]=(t[2]*r+t[6]*i+t[10]*a+t[14])/o,n},transformMat4Upper3x3:function(e,t,n){n=n||new M(3);const r=e[0],i=e[1],a=e[2];return n[0]=r*t[0]+i*t[4]+a*t[8],n[1]=r*t[1]+i*t[5]+a*t[9],n[2]=r*t[2]+i*t[6]+a*t[10],n},transformMat3:function(e,t,n){n=n||new M(3);const r=e[0],i=e[1],a=e[2];return n[0]=r*t[0]+i*t[4]+a*t[8],n[1]=r*t[1]+i*t[5]+a*t[9],n[2]=r*t[2]+i*t[6]+a*t[10],n},transformQuat:function(e,t,n){n=n||new M(3);const r=t[0],i=t[1],a=t[2],o=2*t[3],s=e[0],u=e[1],l=e[2],c=i*l-a*u,d=a*s-r*l,f=r*u-i*s;return n[0]=s+c*o+2*(i*f-a*d),n[1]=u+d*o+2*(a*c-r*f),n[2]=l+f*o+2*(r*d-i*c),n},getTranslation:function(e,t){return(t=t||new M(3))[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,n){const r=4*t;return(n=n||new M(3))[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},getScaling:function(e,t){t=t||new M(3);const n=e[0],r=e[1],i=e[2],a=e[4],o=e[5],s=e[6],u=e[8],l=e[9],c=e[10];return t[0]=Math.sqrt(n*n+r*r+i*i),t[1]=Math.sqrt(a*a+o*o+s*s),t[2]=Math.sqrt(u*u+l*l+c*c),t}});let Se=Float32Array;function Pe(e,t){return(t=t||new Se(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}const ke=Pe;function Oe(e){return(e=e||new Se(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function Me(e,t){t=t||new Se(16);const n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],s=e[5],u=e[6],l=e[7],c=e[8],d=e[9],f=e[10],h=e[11],p=e[12],m=e[13],g=e[14],v=e[15],x=f*v,y=g*h,b=u*v,_=g*l,w=u*h,T=f*l,S=i*v,P=g*a,k=i*h,O=f*a,M=i*l,E=u*a,I=c*m,U=p*d,A=o*m,C=p*s,D=o*d,G=c*s,R=n*m,L=p*r,z=n*d,B=c*r,N=n*s,V=o*r,j=x*s+_*d+w*m-(y*s+b*d+T*m),F=y*r+S*d+O*m-(x*r+P*d+k*m),q=b*r+P*s+M*m-(_*r+S*s+E*m),H=T*r+k*s+E*d-(w*r+O*s+M*d),W=1/(n*j+o*F+c*q+p*H);return t[0]=W*j,t[1]=W*F,t[2]=W*q,t[3]=W*H,t[4]=W*(y*o+b*c+T*p-(x*o+_*c+w*p)),t[5]=W*(x*n+P*c+k*p-(y*n+S*c+O*p)),t[6]=W*(_*n+S*o+E*p-(b*n+P*o+M*p)),t[7]=W*(w*n+O*o+M*c-(T*n+k*o+E*c)),t[8]=W*(I*l+C*h+D*v-(U*l+A*h+G*v)),t[9]=W*(U*a+R*h+B*v-(I*a+L*h+z*v)),t[10]=W*(A*a+L*l+N*v-(C*a+R*l+V*v)),t[11]=W*(G*a+z*l+V*h-(D*a+B*l+N*h)),t[12]=W*(A*f+G*g+U*u-(D*g+I*u+C*f)),t[13]=W*(z*g+I*i+L*f-(R*f+B*g+U*i)),t[14]=W*(R*u+V*g+C*i-(N*g+A*i+L*u)),t[15]=W*(N*f+D*i+B*u-(z*u+V*f+G*i)),t}const Ee=Me;function Ie(e,t,n){n=n||new Se(16);const r=e[0],i=e[1],a=e[2],o=e[3],s=e[4],u=e[5],l=e[6],c=e[7],d=e[8],f=e[9],h=e[10],p=e[11],m=e[12],g=e[13],v=e[14],x=e[15],y=t[0],b=t[1],_=t[2],w=t[3],T=t[4],S=t[5],P=t[6],k=t[7],O=t[8],M=t[9],E=t[10],I=t[11],U=t[12],A=t[13],C=t[14],D=t[15];return n[0]=r*y+s*b+d*_+m*w,n[1]=i*y+u*b+f*_+g*w,n[2]=a*y+l*b+h*_+v*w,n[3]=o*y+c*b+p*_+x*w,n[4]=r*T+s*S+d*P+m*k,n[5]=i*T+u*S+f*P+g*k,n[6]=a*T+l*S+h*P+v*k,n[7]=o*T+c*S+p*P+x*k,n[8]=r*O+s*M+d*E+m*I,n[9]=i*O+u*M+f*E+g*I,n[10]=a*O+l*M+h*E+v*I,n[11]=o*O+c*M+p*E+x*I,n[12]=r*U+s*A+d*C+m*D,n[13]=i*U+u*A+f*C+g*D,n[14]=a*U+l*A+h*C+v*D,n[15]=o*U+c*A+p*C+x*D,n}const Ue=Ie;let Ae,Ce,De;function Ge(e,t,n){n=n||new Se(16);let r=e[0],i=e[1],a=e[2];const o=Math.sqrt(r*r+i*i+a*a);r/=o,i/=o,a/=o;const s=r*r,u=i*i,l=a*a,c=Math.cos(t),d=Math.sin(t),f=1-c;return n[0]=s+(1-s)*c,n[1]=r*i*f+a*d,n[2]=r*a*f-i*d,n[3]=0,n[4]=r*i*f-a*d,n[5]=u+(1-u)*c,n[6]=i*a*f+r*d,n[7]=0,n[8]=r*a*f+i*d,n[9]=i*a*f-r*d,n[10]=l+(1-l)*c,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}const Re=Ge;function Le(e,t,n,r){r=r||new Se(16);let i=t[0],a=t[1],o=t[2];const s=Math.sqrt(i*i+a*a+o*o);i/=s,a/=s,o/=s;const u=i*i,l=a*a,c=o*o,d=Math.cos(n),f=Math.sin(n),h=1-d,p=u+(1-u)*d,m=i*a*h+o*f,g=i*o*h-a*f,v=i*a*h-o*f,x=l+(1-l)*d,y=a*o*h+i*f,b=i*o*h+a*f,_=a*o*h-i*f,w=c+(1-c)*d,T=e[0],S=e[1],P=e[2],k=e[3],O=e[4],M=e[5],E=e[6],I=e[7],U=e[8],A=e[9],C=e[10],D=e[11];return r[0]=p*T+m*O+g*U,r[1]=p*S+m*M+g*A,r[2]=p*P+m*E+g*C,r[3]=p*k+m*I+g*D,r[4]=v*T+x*O+y*U,r[5]=v*S+x*M+y*A,r[6]=v*P+x*E+y*C,r[7]=v*k+x*I+y*D,r[8]=b*T+_*O+w*U,r[9]=b*S+_*M+w*A,r[10]=b*P+_*E+w*C,r[11]=b*k+_*I+w*D,e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r}const ze=Le;var Be=Object.freeze({__proto__:null,setDefaultType:function(e){const t=Se;return Se=e,t},create:function(e,t,n,r,i,a,o,s,u,l,c,d,f,h,p,m){const g=new Se(16);return void 0!==e&&(g[0]=e,void 0!==t&&(g[1]=t,void 0!==n&&(g[2]=n,void 0!==r&&(g[3]=r,void 0!==i&&(g[4]=i,void 0!==a&&(g[5]=a,void 0!==o&&(g[6]=o,void 0!==s&&(g[7]=s,void 0!==u&&(g[8]=u,void 0!==l&&(g[9]=l,void 0!==c&&(g[10]=c,void 0!==d&&(g[11]=d,void 0!==f&&(g[12]=f,void 0!==h&&(g[13]=h,void 0!==p&&(g[14]=p,void 0!==m&&(g[15]=m)))))))))))))))),g},set:function(e,t,n,r,i,a,o,s,u,l,c,d,f,h,p,m,g){return(g=g||new Se(16))[0]=e,g[1]=t,g[2]=n,g[3]=r,g[4]=i,g[5]=a,g[6]=o,g[7]=s,g[8]=u,g[9]=l,g[10]=c,g[11]=d,g[12]=f,g[13]=h,g[14]=p,g[15]=m,g},fromMat3:function(e,t){return(t=t||new Se(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=0,t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=0,t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromQuat:function(e,t){t=t||new Se(16);const n=e[0],r=e[1],i=e[2],a=e[3],o=n+n,s=r+r,u=i+i,l=n*o,c=r*o,d=r*s,f=i*o,h=i*s,p=i*u,m=a*o,g=a*s,v=a*u;return t[0]=1-d-p,t[1]=c+v,t[2]=f-g,t[3]=0,t[4]=c-v,t[5]=1-l-p,t[6]=h+m,t[7]=0,t[8]=f+g,t[9]=h-m,t[10]=1-l-d,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},negate:function(e,t){return(t=t||new Se(16))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=-e[7],t[8]=-e[8],t[9]=-e[9],t[10]=-e[10],t[11]=-e[11],t[12]=-e[12],t[13]=-e[13],t[14]=-e[14],t[15]=-e[15],t},copy:Pe,clone:ke,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<P&&Math.abs(e[1]-t[1])<P&&Math.abs(e[2]-t[2])<P&&Math.abs(e[3]-t[3])<P&&Math.abs(e[4]-t[4])<P&&Math.abs(e[5]-t[5])<P&&Math.abs(e[6]-t[6])<P&&Math.abs(e[7]-t[7])<P&&Math.abs(e[8]-t[8])<P&&Math.abs(e[9]-t[9])<P&&Math.abs(e[10]-t[10])<P&&Math.abs(e[11]-t[11])<P&&Math.abs(e[12]-t[12])<P&&Math.abs(e[13]-t[13])<P&&Math.abs(e[14]-t[14])<P&&Math.abs(e[15]-t[15])<P},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},identity:Oe,transpose:function(e,t){if((t=t||new Se(16))===e){let n;return n=e[1],e[1]=e[4],e[4]=n,n=e[2],e[2]=e[8],e[8]=n,n=e[3],e[3]=e[12],e[12]=n,n=e[6],e[6]=e[9],e[9]=n,n=e[7],e[7]=e[13],e[13]=n,n=e[11],e[11]=e[14],e[14]=n,t}const n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],s=e[5],u=e[6],l=e[7],c=e[8],d=e[9],f=e[10],h=e[11],p=e[12],m=e[13],g=e[14],v=e[15];return t[0]=n,t[1]=o,t[2]=c,t[3]=p,t[4]=r,t[5]=s,t[6]=d,t[7]=m,t[8]=i,t[9]=u,t[10]=f,t[11]=g,t[12]=a,t[13]=l,t[14]=h,t[15]=v,t},inverse:Me,determinant:function(e){const t=e[0],n=e[1],r=e[2],i=e[3],a=e[4],o=e[5],s=e[6],u=e[7],l=e[8],c=e[9],d=e[10],f=e[11],h=e[12],p=e[13],m=e[14],g=e[15],v=d*g,x=m*f,y=s*g,b=m*u,_=s*f,w=d*u,T=r*g,S=m*i,P=r*f,k=d*i,O=r*u,M=s*i;return t*(v*o+b*c+_*p-(x*o+y*c+w*p))+a*(x*n+T*c+k*p-(v*n+S*c+P*p))+l*(y*n+S*o+O*p-(b*n+T*o+M*p))+h*(w*n+P*o+M*c-(_*n+k*o+O*c))},invert:Ee,multiply:Ie,mul:Ue,setTranslation:function(e,t,n){return e!==(n=n||Oe())&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11]),n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},getTranslation:function(e,t){return(t=t||E())[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,n){const r=4*t;return(n=n||E())[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},setAxis:function(e,t,n,r){r!==e&&(r=Pe(e,r));const i=4*n;return r[i+0]=t[0],r[i+1]=t[1],r[i+2]=t[2],r},getScaling:function(e,t){t=t||E();const n=e[0],r=e[1],i=e[2],a=e[4],o=e[5],s=e[6],u=e[8],l=e[9],c=e[10];return t[0]=Math.sqrt(n*n+r*r+i*i),t[1]=Math.sqrt(a*a+o*o+s*s),t[2]=Math.sqrt(u*u+l*l+c*c),t},perspective:function(e,t,n,r,i){i=i||new Se(16);const a=Math.tan(.5*Math.PI-.5*e);if(i[0]=a/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=a,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,r===1/0)i[10]=-1,i[14]=-n;else{const e=1/(n-r);i[10]=r*e,i[14]=r*n*e}return i},ortho:function(e,t,n,r,i,a,o){return(o=o||new Se(16))[0]=2/(t-e),o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=2/(r-n),o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=1/(i-a),o[11]=0,o[12]=(t+e)/(e-t),o[13]=(r+n)/(n-r),o[14]=i/(i-a),o[15]=1,o},frustum:function(e,t,n,r,i,a,o){const s=t-e,u=r-n,l=i-a;return(o=o||new Se(16))[0]=2*i/s,o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=2*i/u,o[6]=0,o[7]=0,o[8]=(e+t)/s,o[9]=(r+n)/u,o[10]=a/l,o[11]=-1,o[12]=0,o[13]=0,o[14]=i*a/l,o[15]=0,o},aim:function(e,t,n,r){return r=r||new Se(16),Ae=Ae||E(),Ce=Ce||E(),De=De||E(),ge(ee(t,e,De),De),ge(oe(n,De,Ae),Ae),ge(oe(De,Ae,Ce),Ce),r[0]=Ae[0],r[1]=Ae[1],r[2]=Ae[2],r[3]=0,r[4]=Ce[0],r[5]=Ce[1],r[6]=Ce[2],r[7]=0,r[8]=De[0],r[9]=De[1],r[10]=De[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},cameraAim:function(e,t,n,r){return r=r||new Se(16),Ae=Ae||E(),Ce=Ce||E(),De=De||E(),ge(ee(e,t,De),De),ge(oe(n,De,Ae),Ae),ge(oe(De,Ae,Ce),Ce),r[0]=Ae[0],r[1]=Ae[1],r[2]=Ae[2],r[3]=0,r[4]=Ce[0],r[5]=Ce[1],r[6]=Ce[2],r[7]=0,r[8]=De[0],r[9]=De[1],r[10]=De[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},lookAt:function(e,t,n,r){return r=r||new Se(16),Ae=Ae||E(),Ce=Ce||E(),De=De||E(),ge(ee(e,t,De),De),ge(oe(n,De,Ae),Ae),ge(oe(De,Ae,Ce),Ce),r[0]=Ae[0],r[1]=Ce[0],r[2]=De[0],r[3]=0,r[4]=Ae[1],r[5]=Ce[1],r[6]=De[1],r[7]=0,r[8]=Ae[2],r[9]=Ce[2],r[10]=De[2],r[11]=0,r[12]=-(Ae[0]*e[0]+Ae[1]*e[1]+Ae[2]*e[2]),r[13]=-(Ce[0]*e[0]+Ce[1]*e[1]+Ce[2]*e[2]),r[14]=-(De[0]*e[0]+De[1]*e[1]+De[2]*e[2]),r[15]=1,r},translation:function(e,t){return(t=t||new Se(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},translate:function(e,t,n){n=n||new Se(16);const r=t[0],i=t[1],a=t[2],o=e[0],s=e[1],u=e[2],l=e[3],c=e[4],d=e[5],f=e[6],h=e[7],p=e[8],m=e[9],g=e[10],v=e[11],x=e[12],y=e[13],b=e[14],_=e[15];return e!==n&&(n[0]=o,n[1]=s,n[2]=u,n[3]=l,n[4]=c,n[5]=d,n[6]=f,n[7]=h,n[8]=p,n[9]=m,n[10]=g,n[11]=v),n[12]=o*r+c*i+p*a+x,n[13]=s*r+d*i+m*a+y,n[14]=u*r+f*i+g*a+b,n[15]=l*r+h*i+v*a+_,n},rotationX:function(e,t){t=t||new Se(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateX:function(e,t,n){n=n||new Se(16);const r=e[4],i=e[5],a=e[6],o=e[7],s=e[8],u=e[9],l=e[10],c=e[11],d=Math.cos(t),f=Math.sin(t);return n[4]=d*r+f*s,n[5]=d*i+f*u,n[6]=d*a+f*l,n[7]=d*o+f*c,n[8]=d*s-f*r,n[9]=d*u-f*i,n[10]=d*l-f*a,n[11]=d*c-f*o,e!==n&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotationY:function(e,t){t=t||new Se(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateY:function(e,t,n){n=n||new Se(16);const r=e[0],i=e[1],a=e[2],o=e[3],s=e[8],u=e[9],l=e[10],c=e[11],d=Math.cos(t),f=Math.sin(t);return n[0]=d*r-f*s,n[1]=d*i-f*u,n[2]=d*a-f*l,n[3]=d*o-f*c,n[8]=d*s+f*r,n[9]=d*u+f*i,n[10]=d*l+f*a,n[11]=d*c+f*o,e!==n&&(n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotationZ:function(e,t){t=t||new Se(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateZ:function(e,t,n){n=n||new Se(16);const r=e[0],i=e[1],a=e[2],o=e[3],s=e[4],u=e[5],l=e[6],c=e[7],d=Math.cos(t),f=Math.sin(t);return n[0]=d*r+f*s,n[1]=d*i+f*u,n[2]=d*a+f*l,n[3]=d*o+f*c,n[4]=d*s-f*r,n[5]=d*u-f*i,n[6]=d*l-f*a,n[7]=d*c-f*o,e!==n&&(n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},axisRotation:Ge,rotation:Re,axisRotate:Le,rotate:ze,scaling:function(e,t){return(t=t||new Se(16))[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},scale:function(e,t,n){n=n||new Se(16);const r=t[0],i=t[1],a=t[2];return n[0]=r*e[0],n[1]=r*e[1],n[2]=r*e[2],n[3]=r*e[3],n[4]=i*e[4],n[5]=i*e[5],n[6]=i*e[6],n[7]=i*e[7],n[8]=a*e[8],n[9]=a*e[9],n[10]=a*e[10],n[11]=a*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},uniformScaling:function(e,t){return(t=t||new Se(16))[0]=e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},uniformScale:function(e,t,n){return(n=n||new Se(16))[0]=t*e[0],n[1]=t*e[1],n[2]=t*e[2],n[3]=t*e[3],n[4]=t*e[4],n[5]=t*e[5],n[6]=t*e[6],n[7]=t*e[7],n[8]=t*e[8],n[9]=t*e[9],n[10]=t*e[10],n[11]=t*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n}});let Ne=Float32Array;function Ve(e,t,n,r){const i=new Ne(4);return void 0!==e&&(i[0]=e,void 0!==t&&(i[1]=t,void 0!==n&&(i[2]=n,void 0!==r&&(i[3]=r)))),i}const je=Ve;function Fe(e,t,n){n=n||new Ne(4);const r=.5*t,i=Math.sin(r);return n[0]=i*e[0],n[1]=i*e[1],n[2]=i*e[2],n[3]=Math.cos(r),n}function qe(e,t,n){n=n||new Ne(4);const r=e[0],i=e[1],a=e[2],o=e[3],s=t[0],u=t[1],l=t[2],c=t[3];return n[0]=r*c+o*s+i*l-a*u,n[1]=i*c+o*u+a*s-r*l,n[2]=a*c+o*l+r*u-i*s,n[3]=o*c-r*s-i*u-a*l,n}const He=qe;function We(e,t,n,r){r=r||new Ne(4);const i=e[0],a=e[1],o=e[2],s=e[3];let u,l,c=t[0],d=t[1],f=t[2],h=t[3],p=i*c+a*d+o*f+s*h;if(p<0&&(p=-p,c=-c,d=-d,f=-f,h=-h),1-p>P){const e=Math.acos(p),t=Math.sin(e);u=Math.sin((1-n)*e)/t,l=Math.sin(n*e)/t}else u=1-n,l=n;return r[0]=u*i+l*c,r[1]=u*a+l*d,r[2]=u*o+l*f,r[3]=u*s+l*h,r}function Ye(e,t){return(t=t||new Ne(4))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}const $e=Ye;function Xe(e,t,n){return(n=n||new Ne(4))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n[3]=e[3]-t[3],n}const Ze=Xe;function Qe(e,t,n){return(n=n||new Ne(4))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n[3]=e[3]*t,n}const Ke=Qe;function Je(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function et(e){const t=e[0],n=e[1],r=e[2],i=e[3];return Math.sqrt(t*t+n*n+r*r+i*i)}const tt=et;function nt(e){const t=e[0],n=e[1],r=e[2],i=e[3];return t*t+n*n+r*r+i*i}const rt=nt;function it(e,t){t=t||new Ne(4);const n=e[0],r=e[1],i=e[2],a=e[3],o=Math.sqrt(n*n+r*r+i*i+a*a);return o>1e-5?(t[0]=n/o,t[1]=r/o,t[2]=i/o,t[3]=a/o):(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}let at,ot,st,ut,lt;var ct,dt=Object.freeze({__proto__:null,create:Ve,setDefaultType:function(e){const t=Ne;return Ne=e,t},fromValues:je,set:function(e,t,n,r,i){return(i=i||new Ne(4))[0]=e,i[1]=t,i[2]=n,i[3]=r,i},fromAxisAngle:Fe,toAxisAngle:function(e,t){t=t||E(4);const n=2*Math.acos(e[3]),r=Math.sin(.5*n);return r>P?(t[0]=e[0]/r,t[1]=e[1]/r,t[2]=e[2]/r):(t[0]=1,t[1]=0,t[2]=0),{angle:n,axis:t}},angle:function(e,t){const n=Je(e,t);return Math.acos(2*n*n-1)},multiply:qe,mul:He,rotateX:function(e,t,n){n=n||new Ne(4);const r=.5*t,i=e[0],a=e[1],o=e[2],s=e[3],u=Math.sin(r),l=Math.cos(r);return n[0]=i*l+s*u,n[1]=a*l+o*u,n[2]=o*l-a*u,n[3]=s*l-i*u,n},rotateY:function(e,t,n){n=n||new Ne(4);const r=.5*t,i=e[0],a=e[1],o=e[2],s=e[3],u=Math.sin(r),l=Math.cos(r);return n[0]=i*l-o*u,n[1]=a*l+s*u,n[2]=o*l+i*u,n[3]=s*l-a*u,n},rotateZ:function(e,t,n){n=n||new Ne(4);const r=.5*t,i=e[0],a=e[1],o=e[2],s=e[3],u=Math.sin(r),l=Math.cos(r);return n[0]=i*l+a*u,n[1]=a*l-i*u,n[2]=o*l+s*u,n[3]=s*l-o*u,n},slerp:We,inverse:function(e,t){t=t||new Ne(4);const n=e[0],r=e[1],i=e[2],a=e[3],o=n*n+r*r+i*i+a*a,s=o?1/o:0;return t[0]=-n*s,t[1]=-r*s,t[2]=-i*s,t[3]=a*s,t},conjugate:function(e,t){return(t=t||new Ne(4))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t},fromMat:function(e,t){t=t||new Ne(4);const n=e[0]+e[5]+e[10];if(n>0){const r=Math.sqrt(n+1);t[3]=.5*r;const i=.5/r;t[0]=(e[6]-e[9])*i,t[1]=(e[8]-e[2])*i,t[2]=(e[1]-e[4])*i}else{let n=0;e[5]>e[0]&&(n=1),e[10]>e[4*n+n]&&(n=2);const r=(n+1)%3,i=(n+2)%3,a=Math.sqrt(e[4*n+n]-e[4*r+r]-e[4*i+i]+1);t[n]=.5*a;const o=.5/a;t[3]=(e[4*r+i]-e[4*i+r])*o,t[r]=(e[4*r+n]+e[4*n+r])*o,t[i]=(e[4*i+n]+e[4*n+i])*o}return t},fromEuler:function(e,t,n,r,i){i=i||new Ne(4);const a=.5*e,o=.5*t,s=.5*n,u=Math.sin(a),l=Math.cos(a),c=Math.sin(o),d=Math.cos(o),f=Math.sin(s),h=Math.cos(s);switch(r){case"xyz":i[0]=u*d*h+l*c*f,i[1]=l*c*h-u*d*f,i[2]=l*d*f+u*c*h,i[3]=l*d*h-u*c*f;break;case"xzy":i[0]=u*d*h-l*c*f,i[1]=l*c*h-u*d*f,i[2]=l*d*f+u*c*h,i[3]=l*d*h+u*c*f;break;case"yxz":i[0]=u*d*h+l*c*f,i[1]=l*c*h-u*d*f,i[2]=l*d*f-u*c*h,i[3]=l*d*h+u*c*f;break;case"yzx":i[0]=u*d*h+l*c*f,i[1]=l*c*h+u*d*f,i[2]=l*d*f-u*c*h,i[3]=l*d*h-u*c*f;break;case"zxy":i[0]=u*d*h-l*c*f,i[1]=l*c*h+u*d*f,i[2]=l*d*f+u*c*h,i[3]=l*d*h-u*c*f;break;case"zyx":i[0]=u*d*h-l*c*f,i[1]=l*c*h+u*d*f,i[2]=l*d*f-u*c*h,i[3]=l*d*h+u*c*f;break;default:throw new Error(`Unknown rotation order: ${r}`)}return i},copy:Ye,clone:$e,add:function(e,t,n){return(n=n||new Ne(4))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n[3]=e[3]+t[3],n},subtract:Xe,sub:Ze,mulScalar:Qe,scale:Ke,divScalar:function(e,t,n){return(n=n||new Ne(4))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n[3]=e[3]/t,n},dot:Je,lerp:function(e,t,n,r){return(r=r||new Ne(4))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r[3]=e[3]+n*(t[3]-e[3]),r},length:et,len:tt,lengthSq:nt,lenSq:rt,normalize:it,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<P&&Math.abs(e[1]-t[1])<P&&Math.abs(e[2]-t[2])<P&&Math.abs(e[3]-t[3])<P},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},identity:function(e){return(e=e||new Ne(4))[0]=0,e[1]=0,e[2]=0,e[3]=1,e},rotationTo:function(e,t,n){n=n||new Ne(4),at=at||E(),ot=ot||E(1,0,0),st=st||E(0,1,0);const r=se(e,t);return r<-.999999?(oe(ot,e,at),le(at)<1e-6&&oe(st,e,at),ge(at,at),Fe(at,Math.PI,n),n):r>.999999?(n[0]=0,n[1]=0,n[2]=0,n[3]=1,n):(oe(e,t,at),n[0]=at[0],n[1]=at[1],n[2]=at[2],n[3]=1+r,it(n,n))},sqlerp:function(e,t,n,r,i,a){return a=a||new Ne(4),ut=ut||new Ne(4),lt=lt||new Ne(4),We(e,r,i,ut),We(t,n,i,lt),We(ut,lt,2*i*(1-i),a),a}});Float32Array,function(e){const t=[];e.updateAll=e=>{for(const n of t)n.update(e)},e.register=e=>class extends e{constructor(...e){super(...e),t.push(this)}}}(ct||(ct={}));const ft={duration:.3,delay:0,endDelay:0,repeat:0,easing:"ease"},ht=e=>1e3*e,pt=e=>e/1e3,mt=()=>{},gt=e=>e;function vt(e,t=!0){if(e&&"finished"!==e.playState)try{e.stop?e.stop():(t&&e.commitStyles(),e.cancel())}catch(e){}}const xt=e=>e(),yt=(e,t,n=ft.duration)=>new Proxy({animations:e.map(xt).filter(Boolean),duration:n,options:t},bt),bt={get:(e,t)=>{const n=e.animations[0];switch(t){case"duration":return e.duration;case"currentTime":return pt((null==n?void 0:n[t])||0);case"playbackRate":case"playState":return null==n?void 0:n[t];case"finished":return e.finished||(e.finished=Promise.all(e.animations.map(_t)).catch(mt)),e.finished;case"stop":return()=>{e.animations.forEach((e=>vt(e)))};case"forEachNative":return t=>{e.animations.forEach((n=>t(n,e)))};default:return void 0===(null==n?void 0:n[t])?void 0:()=>e.animations.forEach((e=>e[t]()))}},set:(e,t,n)=>{switch(t){case"currentTime":n=ht(n);case"playbackRate":for(let r=0;r<e.animations.length;r++)e.animations[r][t]=n;return!0}return!1}},_t=e=>e.finished,wt=e=>"object"==typeof e&&Boolean(e.createAnimation),Tt=e=>"number"==typeof e,St=e=>Array.isArray(e)&&!Tt(e[0]),Pt=(e,t,n)=>-n*e+n*t+e,kt=(e,t,n)=>t-e==0?1:(n-e)/(t-e);function Ot(e,t){const n=e[e.length-1];for(let r=1;r<=t;r++){const i=kt(0,t,r);e.push(Pt(n,1,i))}}const Mt=(e,t,n)=>Math.min(Math.max(n,e),t);const Et=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e,It=1e-7,Ut=12;function At(e,t,n,r){if(e===t&&n===r)return gt;return i=>0===i||1===i?i:Et(function(e,t,n,r,i){let a,o,s=0;do{o=t+(n-t)/2,a=Et(o,r,i)-e,a>0?n=o:t=o}while(Math.abs(a)>It&&++s<Ut);return o}(i,0,1,e,n),t,r)}const Ct=e=>"function"==typeof e,Dt=e=>Array.isArray(e)&&Tt(e[0]),Gt={ease:At(.25,.1,.25,1),"ease-in":At(.42,0,1,1),"ease-in-out":At(.42,0,.58,1),"ease-out":At(0,0,.58,1)},Rt=/\((.*?)\)/;function Lt(e){if(Ct(e))return e;if(Dt(e))return At(...e);if(Gt[e])return Gt[e];if(e.startsWith("steps")){const t=Rt.exec(e);if(t){const e=t[1].split(",");return((e,t="end")=>n=>{const r=(n="end"===t?Math.min(n,.999):Math.max(n,.001))*e,i="end"===t?Math.floor(r):Math.ceil(r);return Mt(0,1,i/e)})(parseFloat(e[0]),e[1].trim())}}return gt}class zt{constructor(e,t=[0,1],{easing:n,duration:r=ft.duration,delay:i=ft.delay,endDelay:a=ft.endDelay,repeat:o=ft.repeat,offset:s,direction:u="normal",autoplay:l=!0}={}){if(this.startTime=null,this.rate=1,this.t=0,this.cancelTimestamp=null,this.easing=gt,this.duration=0,this.totalDuration=0,this.repeat=0,this.playState="idle",this.finished=new Promise(((e,t)=>{this.resolve=e,this.reject=t})),n=n||ft.easing,wt(n)){const e=n.createAnimation(t);n=e.easing,t=e.keyframes||t,r=e.duration||r}this.repeat=o,this.easing=St(n)?gt:Lt(n),this.updateDuration(r);const c=function(e,t=function(e){const t=[0];return Ot(t,e-1),t}(e.length),n=gt){const r=e.length,i=r-t.length;return i>0&&Ot(t,i),i=>{let a=0;for(;a<r-2&&!(i<t[a+1]);a++);let o=Mt(0,1,kt(t[a],t[a+1],i));const s=function(e,t){return St(e)?e[((e,t,n)=>{const r=t-e;return((n-e)%r+r)%r+e})(0,e.length,t)]:e}(n,a);return o=s(o),Pt(e[a],e[a+1],o)}}(t,s,St(n)?n.map(Lt):gt);this.tick=t=>{var n;let r=0;r=void 0!==this.pauseTime?this.pauseTime:(t-this.startTime)*this.rate,this.t=r,r/=1e3,r=Math.max(r-i,0),"finished"===this.playState&&void 0===this.pauseTime&&(r=this.totalDuration);const o=r/this.duration;let s=Math.floor(o),l=o%1;!l&&o>=1&&(l=1),1===l&&s--;const d=s%2;("reverse"===u||"alternate"===u&&d||"alternate-reverse"===u&&!d)&&(l=1-l);const f=r>=this.totalDuration?1:Math.min(l,1),h=c(this.easing(f));e(h),void 0===this.pauseTime&&("finished"===this.playState||r>=this.totalDuration+a)?(this.playState="finished",null===(n=this.resolve)||void 0===n||n.call(this,h)):"idle"!==this.playState&&(this.frameRequestId=requestAnimationFrame(this.tick))},l&&this.play()}play(){const e=performance.now();this.playState="running",void 0!==this.pauseTime?this.startTime=e-this.pauseTime:this.startTime||(this.startTime=e),this.cancelTimestamp=this.startTime,this.pauseTime=void 0,this.frameRequestId=requestAnimationFrame(this.tick)}pause(){this.playState="paused",this.pauseTime=this.t}finish(){this.playState="finished",this.tick(0)}stop(){var e;this.playState="idle",void 0!==this.frameRequestId&&cancelAnimationFrame(this.frameRequestId),null===(e=this.reject)||void 0===e||e.call(this,!1)}cancel(){this.stop(),this.tick(this.cancelTimestamp)}reverse(){this.rate*=-1}commitStyles(){}updateDuration(e){this.duration=e,this.totalDuration=e*(this.repeat+1)}get currentTime(){return this.t}set currentTime(e){void 0!==this.pauseTime||0===this.rate?this.pauseTime=e:this.startTime=performance.now()-e/this.rate}get playbackRate(){return this.rate}set playbackRate(e){this.rate=e}}class Bt{setAnimation(e){this.animation=e,null==e||e.finished.then((()=>this.clearAnimation())).catch((()=>{}))}clearAnimation(){this.animation=this.generator=void 0}}const Nt=new WeakMap;function Vt(e){return Nt.has(e)||Nt.set(e,{transforms:[],values:new Map}),Nt.get(e)}const jt=["","X","Y","Z"],Ft={x:"translateX",y:"translateY",z:"translateZ"},qt={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:e=>e+"deg"},Ht={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:e=>e+"px"},rotate:qt,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:gt},skew:qt},Wt=new Map,Yt=e=>`--motion-${e}`,$t=["x","y","z"];["translate","scale","rotate","skew"].forEach((e=>{jt.forEach((t=>{$t.push(e+t),Wt.set(Yt(e+t),Ht[e])}))}));const Xt=(e,t)=>$t.indexOf(e)-$t.indexOf(t),Zt=new Set($t),Qt=e=>Zt.has(e),Kt=e=>e.sort(Xt).reduce(Jt,"").trim(),Jt=(e,t)=>`${e} ${t}(var(${Yt(t)}))`,en=e=>e.startsWith("--"),tn=new Set,nn=(e,t)=>document.createElement("div").animate(e,t),rn={cssRegisterProperty:()=>"undefined"!=typeof CSS&&Object.hasOwnProperty.call(CSS,"registerProperty"),waapi:()=>Object.hasOwnProperty.call(Element.prototype,"animate"),partialKeyframes:()=>{try{nn({opacity:[1]})}catch(e){return!1}return!0},finished:()=>Boolean(nn({opacity:[0,1]},{duration:.001}).finished),linearEasing:()=>{try{nn({opacity:0},{easing:"linear(0, 1)"})}catch(e){return!1}return!0}},an={},on={};for(const e in rn)on[e]=()=>(void 0===an[e]&&(an[e]=rn[e]()),an[e]);const sn=(e,t)=>Ct(e)?on.linearEasing()?`linear(${((e,t)=>{let n="";const r=Math.round(t/.015);for(let t=0;t<r;t++)n+=e(kt(0,r-1,t))+", ";return n.substring(0,n.length-2)})(e,t)})`:ft.easing:Dt(e)?un(e):e,un=([e,t,n,r])=>`cubic-bezier(${e}, ${t}, ${n}, ${r})`;function ln(e){return Ft[e]&&(e=Ft[e]),Qt(e)?Yt(e):e}const cn=(e,t)=>{t=ln(t);let n=en(t)?e.style.getPropertyValue(t):getComputedStyle(e)[t];if(!n&&0!==n){const e=Wt.get(t);e&&(n=e.initialValue)}return n},dn=(e,t,n)=>{t=ln(t),en(t)?e.style.setProperty(t,n):e.style[t]=n},fn=e=>"string"==typeof e;function hn(e,t){var n;let r=(null==t?void 0:t.toDefaultUnit)||gt;const i=e[e.length-1];if(fn(i)){const e=(null===(n=i.match(/(-?[\d.]+)([a-z%]*)/))||void 0===n?void 0:n[2])||"";e&&(r=t=>t+e)}return r}function pn(e,t,n,r={},i){const a=window.__MOTION_DEV_TOOLS_RECORD,o=!1!==r.record&&a;let s,{duration:u=ft.duration,delay:l=ft.delay,endDelay:c=ft.endDelay,repeat:d=ft.repeat,easing:f=ft.easing,persist:h=!1,direction:p,offset:m,allowWebkitAcceleration:g=!1,autoplay:v=!0}=r;const x=Vt(e),y=Qt(t);let b=on.waapi();y&&((e,t)=>{Ft[t]&&(t=Ft[t]);const{transforms:n}=Vt(e);var r,i;i=t,-1===(r=n).indexOf(i)&&r.push(i),e.style.transform=Kt(n)})(e,t);const _=ln(t),w=function(e,t){return e.has(t)||e.set(t,new Bt),e.get(t)}(x.values,_),T=Wt.get(_);return vt(w.animation,!(wt(f)&&w.generator)&&!1!==r.record),()=>{const x=()=>{var t,n;return null!==(n=null!==(t=cn(e,_))&&void 0!==t?t:null==T?void 0:T.initialValue)&&void 0!==n?n:0};let S=function(e,t){for(let n=0;n<e.length;n++)null===e[n]&&(e[n]=n?e[n-1]:t());return e}((e=>Array.isArray(e)?e:[e])(n),x);const P=hn(S,T);if(wt(f)){const e=f.createAnimation(S,"opacity"!==t,x,_,w);f=e.easing,S=e.keyframes||S,u=e.duration||u}if(en(_)&&(on.cssRegisterProperty()?function(e){if(!tn.has(e)){tn.add(e);try{const{syntax:t,initialValue:n}=Wt.has(e)?Wt.get(e):{};CSS.registerProperty({name:e,inherits:!1,syntax:t,initialValue:n})}catch(e){}}}(_):b=!1),y&&!on.linearEasing()&&(Ct(f)||St(f)&&f.some(Ct))&&(b=!1),b){T&&(S=S.map((e=>Tt(e)?T.toDefaultUnit(e):e))),1!==S.length||on.partialKeyframes()&&!o||S.unshift(x());const t={delay:ht(l),duration:ht(u),endDelay:ht(c),easing:St(f)?void 0:sn(f,u),direction:p,iterations:d+1,fill:"both"};s=e.animate({[_]:S,offset:m,easing:St(f)?f.map((e=>sn(e,u))):void 0},t),s.finished||(s.finished=new Promise(((e,t)=>{s.onfinish=e,s.oncancel=t})));const n=S[S.length-1];s.finished.then((()=>{h||(dn(e,_,n),s.cancel())})).catch(mt),g||(s.playbackRate=1.000001)}else if(i&&y)S=S.map((e=>"string"==typeof e?parseFloat(e):e)),1===S.length&&S.unshift(parseFloat(x())),s=new i((t=>{dn(e,_,P?P(t):t)}),S,Object.assign(Object.assign({},r),{duration:u,easing:f}));else{const t=S[S.length-1];dn(e,_,T&&Tt(t)?T.toDefaultUnit(t):t)}return o&&a(e,t,S,{duration:u,delay:l,easing:f,repeat:d,offset:m},"motion-one"),w.setAnimation(s),s&&!v&&s.pause(),s}}const mn=(e,t)=>e[t]?Object.assign(Object.assign({},e),e[t]):Object.assign({},e);function gn(e,t,n){return Ct(e)?e(t,n):e}const vn=(xn=zt,function(e,t,n={}){const r=(e=function(e,t){return"string"==typeof e?e=document.querySelectorAll(e):e instanceof Element&&(e=[e]),Array.from(e||[])}(e)).length;Boolean(r),Boolean(t);const i=[];for(let a=0;a<r;a++){const o=e[a];for(const e in t){const s=mn(n,e);s.delay=gn(s.delay,a,r);const u=pn(o,e,t[e],s,xn);i.push(u)}}return yt(i,n,n.duration)});var xn;function yn(e,t={}){return yt([()=>{const n=new zt(e,[0,1],t);return n.finished.catch((()=>{})),n}],t,t.duration)}function bn(e,t,n){return(Ct(e)?yn:vn)(e,t,n)}function _n(e,t,n){const r=Math.max(t-5,0);return i=n-e(r),(a=t-r)?i*(1e3/a):0;var i,a}function wn(e){return Tt(e)&&!isNaN(e)}function Tn(e){return fn(e)?parseFloat(e):e}const Sn=function(e){const t=new WeakMap;return(e={})=>{const n=new Map,r=(t=0,r=100,i=0,a=!1)=>{const o=`${t}-${r}-${i}-${a}`;return n.has(o)||n.set(o,(({from:e=0,velocity:t=0,power:n=.8,decay:r=.325,bounceDamping:i,bounceStiffness:a,changeTarget:o,min:s,max:u,restDistance:l=.5,restSpeed:c})=>{r=ht(r);const d={hasReachedTarget:!1,done:!1,current:e,target:e},f=e=>void 0===s?u:void 0===u||Math.abs(s-e)<Math.abs(u-e)?s:u;let h=n*t;const p=e+h,m=void 0===o?p:o(p);d.target=m,m!==p&&(h=m-e);const g=e=>-h*Math.exp(-e/r),v=e=>m+g(e),x=e=>{const t=g(e),n=v(e);d.done=Math.abs(t)<=l,d.current=d.done?m:n};let y,b;const _=e=>{var t;t=d.current,(void 0!==s&&t<s||void 0!==u&&t>u)&&(y=e,b=(({stiffness:e=100,damping:t=10,mass:n=1,from:r=0,to:i=1,velocity:a=0,restSpeed:o,restDistance:s}={})=>{a=a?pt(a):0;const u={done:!1,hasReachedTarget:!1,current:r,target:i},l=i-r,c=Math.sqrt(e/n)/1e3,d=((e=100,t=10,n=1)=>t/(2*Math.sqrt(e*n)))(e,t,n),f=Math.abs(l)<5;let h;if(o||(o=f?.01:2),s||(s=f?.005:.5),d<1){const e=c*Math.sqrt(1-d*d);h=t=>i-Math.exp(-d*c*t)*((d*c*l-a)/e*Math.sin(e*t)+l*Math.cos(e*t))}else h=e=>i-Math.exp(-c*e)*(l+(c*l-a)*e);return e=>{u.current=h(e);const t=0===e?a:_n(h,e,u.current),n=Math.abs(t)<=o,l=Math.abs(i-u.current)<=s;var c,d,f;return u.done=n&&l,u.hasReachedTarget=(c=r,d=i,f=u.current,c<d&&f>=d||c>d&&f<=d),u}})({from:d.current,to:f(d.current),velocity:_n(v,e,d.current),damping:i,stiffness:a,restDistance:l,restSpeed:c}))};return _(0),e=>{let t=!1;return b||void 0!==y||(t=!0,x(e),_(e)),void 0!==y&&e>y?(d.hasReachedTarget=!0,b(e-y)):(d.hasReachedTarget=!1,!t&&x(e),d)}})(Object.assign({from:t,to:r,velocity:i},e))),n.get(o)},i=(e,n)=>(t.has(e)||t.set(e,function(e,t=gt){let n,r=10,i=e(0);const a=[t(i.current)];for(;!i.done&&r<1e4;)i=e(r),a.push(t(i.done?i.target:i.current)),void 0===n&&i.hasReachedTarget&&(n=r),r+=10;const o=r-10;return 1===a.length&&a.push(i.current),{keyframes:a,duration:o/1e3,overshootDuration:(null!=n?n:o)/1e3}}(e,n)),t.get(e));return{createAnimation:(e,t=!0,n,a,o)=>{let s,u,l,c=0,d=gt;const f=e.length;if(t)if(d=hn(e,a?Wt.get(ln(a)):void 0),l=Tn(e[f-1]),f>1&&null!==e[0])u=Tn(e[0]);else{const e=null==o?void 0:o.generator;if(e){const{animation:t,generatorStartTime:n}=o,r=(null==t?void 0:t.startTime)||n||0,i=(null==t?void 0:t.currentTime)||performance.now()-r,a=e(i).current;u=a,c=_n((t=>e(t).current),i,a)}else n&&(u=Tn(n()))}if(wn(u)&&wn(l)){const e=r(u,l,c,null==a?void 0:a.includes("scale"));s=Object.assign(Object.assign({},i(e,d)),{easing:"linear"}),o&&(o.generator=e,o.generatorStartTime=performance.now())}return s||(s={easing:"ease",duration:i(r(0,100)).overshootDuration}),s}}}}();var Pn=function(e,t,n,r){var i,a=arguments.length,o=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(o=(a<3?i(o):a>3?i(t,n,o):i(t,n))||o);return a>3&&o&&Object.defineProperty(t,n,o),o};let kn=class{value;target;constructor(e){this.value=e,this.target=e}update(){bn((e=>{this.value=Te.lerp(this.value,this.target,e)}),{easing:Sn({velocity:2e-4*ja})})}};kn=Pn([ct.register],kn);let On=class{value;target;constructor(e){this.value=e,this.target=e}update(){bn((e=>{this.value=this.value+(this.target-this.value)*e}),{easing:Sn({velocity:2e-4*ja})})}};On=Pn([ct.register],On);let Mn=class{value;target;constructor(e){this.value=e,this.target=e}update(){bn((e=>{this.value=dt.slerp(this.value,this.target,e)}),{easing:Sn({velocity:2e-4*ja})})}};Mn=Pn([ct.register],Mn);class En{#s;#u;#l;#c;constructor(e){this.#s=new kn(e.position),this.#u=new Mn(e.rotation),this.#l=new kn(e.scale??Te.create(1,1,1)),this.#c=this.transform}get transform(){let e=Be.identity();return Be.translate(e,this.#s.value,e),Be.scale(e,this.#l.value,e),Be.multiply(e,Be.fromQuat(this.#u.value),e),e}get previousTransform(){return this.#c}get inverseTransform(){return Be.invert(this.transform)}get previousInverseTransform(){return Be.invert(this.#c)}set targetPosition(e){this.#s.target=e}get targetPosition(){return this.#s.target}set targetRotation(e){this.#u.target=e}get targetRotation(){return this.#u.target}get direction(){return Te.transformQuat(Te.create(0,0,1),this.#u.value)}get right(){return Te.transformQuat(Te.create(1,0,0),this.#u.value)}get left(){return Te.transformQuat(Te.create(-1,0,0),this.#u.value)}get up(){return Te.transformQuat(Te.create(0,1,0),this.#u.value)}get down(){return Te.transformQuat(Te.create(0,-1,0),this.#u.value)}get viewMatrix(){const e=this.#s.value;return Be.lookAt(e,Te.add(e,this.direction),this.up)}get inverseViewMatrix(){return Be.invert(this.viewMatrix)}}const In=new class{pressed={w:!1,a:!1,s:!1,d:!1,q:!1,e:!1," ":!1,shift:!1};constructor(){window.addEventListener("keydown",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!0})),window.addEventListener("keyup",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!1})),window.addEventListener("blur",(()=>{Object.keys(this.pressed).forEach((e=>{this.pressed[e]=!1}))}))}};let Un=class extends En{fieldOfView;near=.5;far=1e4;constructor(e){super({position:e.position,rotation:dt.fromMat(Be.lookAt(Te.create(),e.direction,Te.create(0,1,0)))}),this.fieldOfView=e.fieldOfView}get projectionMatrix(){return Be.perspective(this.fieldOfView,Ba[0]/Ba[1],this.near,this.far)}get inverseProjectionMatrix(){return Be.invert(this.projectionMatrix)}get viewProjectionMatrix(){return Be.mul(this.projectionMatrix,this.viewMatrix)}get inverseViewProjectionMatrix(){return Be.invert(this.viewProjectionMatrix)}update(){const e=.005*ja,t=.03*ja;let n=Te.zero();In.pressed.a&&(n=Te.add(n,qa.left)),In.pressed.d&&(n=Te.add(n,qa.right)),In.pressed.w&&(n=Te.add(n,qa.direction)),In.pressed.s&&(n=Te.subtract(n,qa.direction)),In.pressed.e&&(qa.targetRotation=dt.rotateY(qa.targetRotation,e)),In.pressed.q&&(qa.targetRotation=dt.rotateY(qa.targetRotation,-e)),In.pressed[" "]&&(n=Te.add(n,qa.up)),In.pressed.shift&&(n=Te.add(n,qa.down)),n=Te.normalize(n),qa.targetPosition=Te.add(qa.targetPosition,Te.mulScalar(n,t))}};Un=function(e,t,n,r){var i,a=arguments.length,o=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(o=(a<3?i(o):a>3?i(t,n,o):i(t,n))||o);return a>3&&o&&Object.defineProperty(t,n,o),o}([ct.register],Un);const An="@group(0) @binding(0) var mySampler : sampler;\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\n//@group(0) @binding(2) var debugTexture : texture_2d<f32>;\n\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n}\n\n@vertex\nfn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  const pos = array(\n    vec2( 1.0,  1.0),\n    vec2( 1.0, -1.0),\n    vec2(-1.0, -1.0),\n    vec2( 1.0,  1.0),\n    vec2(-1.0, -1.0),\n    vec2(-1.0,  1.0),\n  );\n\n  const uv = array(\n    vec2(1.0, 0.0),\n    vec2(1.0, 1.0),\n    vec2(0.0, 1.0),\n    vec2(1.0, 0.0),\n    vec2(0.0, 1.0),\n    vec2(0.0, 0.0),\n  );\n\n  var output : VertexOutput;\n  output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n  output.fragUV = uv[VertexIndex];\n  return output;\n}\n\nfn get_debug_colour(index : i32) -> vec4<f32> {\n  if(index < 0){\n    return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  }\n\n  let colours = array(\n    vec4<f32>(1.0, 0.0, 0.0, 1.0),\n    vec4<f32>(0.0, 1.0, 0.0, 1.0),\n    vec4<f32>(0.0, 0.0, 1.0, 1.0),\n    vec4<f32>(1.0, 1.0, 0.0, 1.0),\n    vec4<f32>(1.0, 0.0, 1.0, 1.0),\n    vec4<f32>(0.0, 1.0, 1.0, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    vec4<f32>(0.0, 0.0, 0.0, 1.0),\n  );\n  return colours[index % 8];\n}\n\n@fragment\nfn fragment_main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\n    let pixel = fragUV * vec2<f32>(textureDimensions(myTexture));\n    var colour = textureLoad(myTexture, vec2<u32>(pixel),0);\n    return colour;\n//    return abs(colour) % 1.0;\n//    return get_debug_colour(i32(colour.a));\n}\n",Cn=async e=>{const t=e.createShaderModule({code:An}),n=e.createRenderPipeline({layout:"auto",vertex:{module:t,entryPoint:"vertex_main"},fragment:{module:t,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]}});return{render:t=>{const r=t.commandEncoder.beginRenderPass({timestampWrites:t.timestampWrites,colorAttachments:[{view:Ra.getCurrentTexture().createView(),loadOp:"clear",clearValue:[.3,.3,.3,1],storeOp:"store"}]}),i=e.createBindGroup({layout:n.getBindGroupLayout(0),entries:[{binding:1,resource:t.outputTextures.finalTexture.view}]});r.setPipeline(n),r.setBindGroup(0,i),r.draw(6),r.end()},label:"fullscreen quad"}},Dn=e=>e&&"number"==typeof e.length&&e.buffer instanceof ArrayBuffer&&"number"==typeof e.byteLength,Gn={i32:{numElements:1,align:4,size:4,type:"i32",View:Int32Array},u32:{numElements:1,align:4,size:4,type:"u32",View:Uint32Array},f32:{numElements:1,align:4,size:4,type:"f32",View:Float32Array},f16:{numElements:1,align:2,size:2,type:"u16",View:Uint16Array},vec2f:{numElements:2,align:8,size:8,type:"f32",View:Float32Array},vec2i:{numElements:2,align:8,size:8,type:"i32",View:Int32Array},vec2u:{numElements:2,align:8,size:8,type:"u32",View:Uint32Array},vec2h:{numElements:2,align:4,size:4,type:"u16",View:Uint16Array},vec3i:{numElements:3,align:16,size:12,type:"i32",View:Int32Array},vec3u:{numElements:3,align:16,size:12,type:"u32",View:Uint32Array},vec3f:{numElements:3,align:16,size:12,type:"f32",View:Float32Array},vec3h:{numElements:3,align:8,size:6,type:"u16",View:Uint16Array},vec4i:{numElements:4,align:16,size:16,type:"i32",View:Int32Array},vec4u:{numElements:4,align:16,size:16,type:"u32",View:Uint32Array},vec4f:{numElements:4,align:16,size:16,type:"f32",View:Float32Array},vec4h:{numElements:4,align:8,size:8,type:"u16",View:Uint16Array},mat2x2f:{numElements:4,align:8,size:16,type:"f32",View:Float32Array},mat2x2h:{numElements:4,align:4,size:8,type:"u16",View:Uint16Array},mat3x2f:{numElements:6,align:8,size:24,type:"f32",View:Float32Array},mat3x2h:{numElements:6,align:4,size:12,type:"u16",View:Uint16Array},mat4x2f:{numElements:8,align:8,size:32,type:"f32",View:Float32Array},mat4x2h:{numElements:8,align:4,size:16,type:"u16",View:Uint16Array},mat2x3f:{numElements:8,align:16,size:32,pad:[3,1],type:"f32",View:Float32Array},mat2x3h:{numElements:8,align:8,size:16,pad:[3,1],type:"u16",View:Uint16Array},mat3x3f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x3h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x3f:{numElements:16,align:16,size:64,pad:[3,1],type:"f32",View:Float32Array},mat4x3h:{numElements:16,align:8,size:32,pad:[3,1],type:"u16",View:Uint16Array},mat2x4f:{numElements:8,align:16,size:32,type:"f32",View:Float32Array},mat2x4h:{numElements:8,align:8,size:16,type:"u16",View:Uint16Array},mat3x4f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x4h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x4f:{numElements:16,align:16,size:64,type:"f32",View:Float32Array},mat4x4h:{numElements:16,align:8,size:32,type:"u16",View:Uint16Array},bool:{numElements:0,align:1,size:0,type:"bool",View:Uint32Array}},Rn={...Gn,"atomic<i32>":Gn.i32,"atomic<u32>":Gn.u32,"vec2<i32>":Gn.vec2i,"vec2<u32>":Gn.vec2u,"vec2<f32>":Gn.vec2f,"vec2<f16>":Gn.vec2h,"vec3<i32>":Gn.vec3i,"vec3<u32>":Gn.vec3u,"vec3<f32>":Gn.vec3f,"vec3<f16>":Gn.vec3h,"vec4<i32>":Gn.vec4i,"vec4<u32>":Gn.vec4u,"vec4<f32>":Gn.vec4f,"vec4<f16>":Gn.vec4h,"mat2x2<f32>":Gn.mat2x2f,"mat2x2<f16>":Gn.mat2x2h,"mat3x2<f32>":Gn.mat3x2f,"mat3x2<f16>":Gn.mat3x2h,"mat4x2<f32>":Gn.mat4x2f,"mat4x2<f16>":Gn.mat4x2h,"mat2x3<f32>":Gn.mat2x3f,"mat2x3<f16>":Gn.mat2x3h,"mat3x3<f32>":Gn.mat3x3f,"mat3x3<f16>":Gn.mat3x3h,"mat4x3<f32>":Gn.mat4x3f,"mat4x3<f16>":Gn.mat4x3h,"mat2x4<f32>":Gn.mat2x4f,"mat2x4<f16>":Gn.mat2x4h,"mat3x4<f32>":Gn.mat3x4f,"mat3x4<f16>":Gn.mat3x4h,"mat4x4<f32>":Gn.mat4x4f,"mat4x4<f16>":Gn.mat4x4h},Ln=(zn=Rn,Object.keys(zn));var zn,Bn,Nn,Vn,jn,Fn;!function(e=[],t){const n=new Set;for(const r of Ln){const i=Rn[r];n.has(i)||(n.add(i),i.flatten=e.includes(r)?t:!t)}}(),new WeakMap;class qn{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class Hn{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(e){throw new Error("Cannot evaluate node")}evaluateString(e){return this.evaluate(e).toString()}search(e){}searchBlock(e,t){if(e){t(Wn.instance);for(const n of e)n instanceof Array?this.searchBlock(n,t):n.search(t);t(Yn.instance)}}}class Wn extends Hn{}Wn.instance=new Wn;class Yn extends Hn{}Yn.instance=new Yn;class $n extends Hn{constructor(){super()}}class Xn extends $n{constructor(e,t,n,r){super(),this.name=e,this.args=t,this.returnType=n,this.body=r}get astNodeType(){return"function"}search(e){this.searchBlock(this.body,e)}}class Zn extends $n{constructor(e){super(),this.expression=e}get astNodeType(){return"staticAssert"}search(e){this.expression.search(e)}}class Qn extends $n{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"while"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class Kn extends $n{constructor(e){super(),this.body=e}get astNodeType(){return"continuing"}search(e){this.searchBlock(this.body,e)}}class Jn extends $n{constructor(e,t,n,r){super(),this.init=e,this.condition=t,this.increment=n,this.body=r}get astNodeType(){return"for"}search(e){var t,n,r;null===(t=this.init)||void 0===t||t.search(e),null===(n=this.condition)||void 0===n||n.search(e),null===(r=this.increment)||void 0===r||r.search(e),this.searchBlock(this.body,e)}}class er extends $n{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"var"}search(e){var t;e(this),null===(t=this.value)||void 0===t||t.search(e)}}class tr extends $n{constructor(e,t,n){super(),this.name=e,this.type=t,this.value=n}get astNodeType(){return"override"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class nr extends $n{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"let"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class rr extends $n{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"const"}evaluate(e){return this.value.evaluate(e)}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}!function(e){e.increment="++",e.decrement="--"}(Bn||(Bn={})),function(e){e.parse=function(t){const n=t;if("parse"==n)throw new Error("Invalid value for IncrementOperator");return e[n]}}(Bn||(Bn={}));class ir extends $n{constructor(e,t){super(),this.operator=e,this.variable=t}get astNodeType(){return"increment"}search(e){this.variable.search(e)}}!function(e){e.assign="=",e.addAssign="+=",e.subtractAssin="-=",e.multiplyAssign="*=",e.divideAssign="/=",e.moduloAssign="%=",e.andAssign="&=",e.orAssign="|=",e.xorAssign="^=",e.shiftLeftAssign="<<=",e.shiftRightAssign=">>="}(Nn||(Nn={})),function(e){e.parse=function(e){const t=e;if("parse"==t)throw new Error("Invalid value for AssignOperator");return t}}(Nn||(Nn={}));class ar extends $n{constructor(e,t,n){super(),this.operator=e,this.variable=t,this.value=n}get astNodeType(){return"assign"}search(e){this.value.search(e)}}class or extends $n{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"call"}}class sr extends $n{constructor(e,t){super(),this.body=e,this.continuing=t}get astNodeType(){return"loop"}}class ur extends $n{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"body"}}class lr extends $n{constructor(e,t,n,r){super(),this.condition=e,this.body=t,this.elseif=n,this.else=r}get astNodeType(){return"if"}search(e){this.condition.search(e),this.searchBlock(this.body,e),this.searchBlock(this.elseif,e),this.searchBlock(this.else,e)}}class cr extends $n{constructor(e){super(),this.value=e}get astNodeType(){return"return"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class dr extends $n{constructor(e){super(),this.name=e}get astNodeType(){return"enable"}}class fr extends $n{constructor(e,t){super(),this.name=e,this.type=t}get astNodeType(){return"alias"}}class hr extends $n{constructor(){super()}get astNodeType(){return"discard"}}class pr extends $n{constructor(){super()}get astNodeType(){return"break"}}class mr extends $n{constructor(){super()}get astNodeType(){return"continue"}}class gr extends $n{constructor(e){super(),this.name=e}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class vr extends gr{constructor(e,t){super(e),this.members=t}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(e){for(let t=0;t<this.members.length;t++)if(this.members[t].name==e)return t;return-1}}class xr extends gr{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"template"}}class yr extends gr{constructor(e,t,n,r){super(e),this.storage=t,this.type=n,this.access=r}get astNodeType(){return"pointer"}}class br extends gr{constructor(e,t,n,r){super(e),this.attributes=t,this.format=n,this.count=r}get astNodeType(){return"array"}get isArray(){return!0}}class _r extends gr{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"sampler"}}class wr extends Hn{constructor(){super()}}class Tr extends wr{constructor(e){super(),this.value=e}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class Sr extends wr{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"createExpr"}}class Pr extends wr{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"callExpr"}evaluate(e){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(e));case"acos":return Math.acos(this.args[0].evaluate(e));case"acosh":return Math.acosh(this.args[0].evaluate(e));case"asin":return Math.asin(this.args[0].evaluate(e));case"asinh":return Math.asinh(this.args[0].evaluate(e));case"atan":return Math.atan(this.args[0].evaluate(e));case"atan2":return Math.atan2(this.args[0].evaluate(e),this.args[1].evaluate(e));case"atanh":return Math.atanh(this.args[0].evaluate(e));case"ceil":return Math.ceil(this.args[0].evaluate(e));case"clamp":return Math.min(Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e)),this.args[2].evaluate(e));case"cos":return Math.cos(this.args[0].evaluate(e));case"degrees":return 180*this.args[0].evaluate(e)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(e)-this.args[1].evaluate(e),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(e));case"exp2":return Math.pow(2,this.args[0].evaluate(e));case"floor":return Math.floor(this.args[0].evaluate(e));case"fma":return this.args[0].evaluate(e)*this.args[1].evaluate(e)+this.args[2].evaluate(e);case"fract":case"modf":return this.args[0].evaluate(e)-Math.floor(this.args[0].evaluate(e));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(e));case"log":return Math.log(this.args[0].evaluate(e));case"log2":return Math.log2(this.args[0].evaluate(e));case"max":return Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e));case"min":return Math.min(this.args[0].evaluate(e),this.args[1].evaluate(e));case"mix":return this.args[0].evaluate(e)*(1-this.args[2].evaluate(e))+this.args[1].evaluate(e)*this.args[2].evaluate(e);case"pow":return Math.pow(this.args[0].evaluate(e),this.args[1].evaluate(e));case"radians":return this.args[0].evaluate(e)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(e));case"sign":return Math.sign(this.args[0].evaluate(e));case"sin":return Math.sin(this.args[0].evaluate(e));case"sinh":return Math.sinh(this.args[0].evaluate(e));case"saturate":return Math.min(Math.max(this.args[0].evaluate(e),0),1);case"smoothstep":return this.args[0].evaluate(e)*this.args[0].evaluate(e)*(3-2*this.args[0].evaluate(e));case"sqrt":return Math.sqrt(this.args[0].evaluate(e));case"step":return this.args[0].evaluate(e)<this.args[1].evaluate(e)?0:1;case"tan":return Math.tan(this.args[0].evaluate(e));case"tanh":return Math.tanh(this.args[0].evaluate(e));case"trunc":return Math.trunc(this.args[0].evaluate(e));default:throw new Error("Non const function: "+this.name)}}search(e){for(const t of this.args)t.search(e);e(this)}}class kr extends wr{constructor(e){super(),this.name=e}get astNodeType(){return"varExpr"}search(e){e(this)}}class Or extends wr{constructor(e,t){super(),this.name=e,this.initializer=t}get astNodeType(){return"constExpr"}evaluate(e){var t,n;if(this.initializer instanceof Sr){const r=null===(t=this.postfix)||void 0===t?void 0:t.evaluateString(e),i=null===(n=this.initializer.type)||void 0===n?void 0:n.name,a=e.structs.get(i),o=null==a?void 0:a.getMemberIndex(r);if(-1!=o)return this.initializer.args[o].evaluate(e);console.log(o)}return this.initializer.evaluate(e)}search(e){this.initializer.search(e)}}class Mr extends wr{constructor(e){super(),this.value=e}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class Er extends wr{constructor(e,t){super(),this.type=e,this.value=t}get astNodeType(){return"bitcastExpr"}search(e){this.value.search(e)}}class Ir extends wr{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"typecastExpr"}evaluate(e){return this.args[0].evaluate(e)}search(e){this.searchBlock(this.args,e)}}class Ur extends wr{constructor(e){super(),this.contents=e}get astNodeType(){return"groupExpr"}evaluate(e){return this.contents[0].evaluate(e)}search(e){this.searchBlock(this.contents,e)}}class Ar extends wr{constructor(){super()}}class Cr extends Ar{constructor(e,t){super(),this.operator=e,this.right=t}get astNodeType(){return"unaryOp"}evaluate(e){switch(this.operator){case"+":return this.right.evaluate(e);case"-":return-this.right.evaluate(e);case"!":return this.right.evaluate(e)?0:1;case"~":return~this.right.evaluate(e);default:throw new Error("Unknown unary operator: "+this.operator)}}search(e){this.right.search(e)}}class Dr extends Ar{constructor(e,t,n){super(),this.operator=e,this.left=t,this.right=n}get astNodeType(){return"binaryOp"}evaluate(e){switch(this.operator){case"+":return this.left.evaluate(e)+this.right.evaluate(e);case"-":return this.left.evaluate(e)-this.right.evaluate(e);case"*":return this.left.evaluate(e)*this.right.evaluate(e);case"/":return this.left.evaluate(e)/this.right.evaluate(e);case"%":return this.left.evaluate(e)%this.right.evaluate(e);case"==":return this.left.evaluate(e)==this.right.evaluate(e)?1:0;case"!=":return this.left.evaluate(e)!=this.right.evaluate(e)?1:0;case"<":return this.left.evaluate(e)<this.right.evaluate(e)?1:0;case">":return this.left.evaluate(e)>this.right.evaluate(e)?1:0;case"<=":return this.left.evaluate(e)<=this.right.evaluate(e)?1:0;case">=":return this.left.evaluate(e)>=this.right.evaluate(e)?1:0;case"&&":return this.left.evaluate(e)&&this.right.evaluate(e)?1:0;case"||":return this.left.evaluate(e)||this.right.evaluate(e)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}search(e){this.left.search(e),this.right.search(e)}}class Gr extends Hn{constructor(){super()}}class Rr extends Gr{constructor(e,t){super(),this.selector=e,this.body=t}get astNodeType(){return"case"}search(e){this.searchBlock(this.body,e)}}class Lr extends Gr{constructor(e){super(),this.body=e}get astNodeType(){return"default"}search(e){this.searchBlock(this.body,e)}}class zr extends Hn{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"argument"}}class Br extends Hn{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"elseif"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class Nr extends Hn{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"member"}}class Vr extends Hn{constructor(e,t){super(),this.name=e,this.value=t}get astNodeType(){return"attribute"}}!function(e){e[e.token=0]="token",e[e.keyword=1]="keyword",e[e.reserved=2]="reserved"}(jn||(jn={}));class jr{constructor(e,t,n){this.name=e,this.type=t,this.rule=n}toString(){return this.name}}class Fr{}Vn=Fr,Fr.none=new jr("",jn.reserved,""),Fr.eof=new jr("EOF",jn.token,""),Fr.reserved={asm:new jr("asm",jn.reserved,"asm"),bf16:new jr("bf16",jn.reserved,"bf16"),do:new jr("do",jn.reserved,"do"),enum:new jr("enum",jn.reserved,"enum"),f16:new jr("f16",jn.reserved,"f16"),f64:new jr("f64",jn.reserved,"f64"),handle:new jr("handle",jn.reserved,"handle"),i8:new jr("i8",jn.reserved,"i8"),i16:new jr("i16",jn.reserved,"i16"),i64:new jr("i64",jn.reserved,"i64"),mat:new jr("mat",jn.reserved,"mat"),premerge:new jr("premerge",jn.reserved,"premerge"),regardless:new jr("regardless",jn.reserved,"regardless"),typedef:new jr("typedef",jn.reserved,"typedef"),u8:new jr("u8",jn.reserved,"u8"),u16:new jr("u16",jn.reserved,"u16"),u64:new jr("u64",jn.reserved,"u64"),unless:new jr("unless",jn.reserved,"unless"),using:new jr("using",jn.reserved,"using"),vec:new jr("vec",jn.reserved,"vec"),void:new jr("void",jn.reserved,"void")},Fr.keywords={array:new jr("array",jn.keyword,"array"),atomic:new jr("atomic",jn.keyword,"atomic"),bool:new jr("bool",jn.keyword,"bool"),f32:new jr("f32",jn.keyword,"f32"),i32:new jr("i32",jn.keyword,"i32"),mat2x2:new jr("mat2x2",jn.keyword,"mat2x2"),mat2x3:new jr("mat2x3",jn.keyword,"mat2x3"),mat2x4:new jr("mat2x4",jn.keyword,"mat2x4"),mat3x2:new jr("mat3x2",jn.keyword,"mat3x2"),mat3x3:new jr("mat3x3",jn.keyword,"mat3x3"),mat3x4:new jr("mat3x4",jn.keyword,"mat3x4"),mat4x2:new jr("mat4x2",jn.keyword,"mat4x2"),mat4x3:new jr("mat4x3",jn.keyword,"mat4x3"),mat4x4:new jr("mat4x4",jn.keyword,"mat4x4"),ptr:new jr("ptr",jn.keyword,"ptr"),sampler:new jr("sampler",jn.keyword,"sampler"),sampler_comparison:new jr("sampler_comparison",jn.keyword,"sampler_comparison"),struct:new jr("struct",jn.keyword,"struct"),texture_1d:new jr("texture_1d",jn.keyword,"texture_1d"),texture_2d:new jr("texture_2d",jn.keyword,"texture_2d"),texture_2d_array:new jr("texture_2d_array",jn.keyword,"texture_2d_array"),texture_3d:new jr("texture_3d",jn.keyword,"texture_3d"),texture_cube:new jr("texture_cube",jn.keyword,"texture_cube"),texture_cube_array:new jr("texture_cube_array",jn.keyword,"texture_cube_array"),texture_multisampled_2d:new jr("texture_multisampled_2d",jn.keyword,"texture_multisampled_2d"),texture_storage_1d:new jr("texture_storage_1d",jn.keyword,"texture_storage_1d"),texture_storage_2d:new jr("texture_storage_2d",jn.keyword,"texture_storage_2d"),texture_storage_2d_array:new jr("texture_storage_2d_array",jn.keyword,"texture_storage_2d_array"),texture_storage_3d:new jr("texture_storage_3d",jn.keyword,"texture_storage_3d"),texture_depth_2d:new jr("texture_depth_2d",jn.keyword,"texture_depth_2d"),texture_depth_2d_array:new jr("texture_depth_2d_array",jn.keyword,"texture_depth_2d_array"),texture_depth_cube:new jr("texture_depth_cube",jn.keyword,"texture_depth_cube"),texture_depth_cube_array:new jr("texture_depth_cube_array",jn.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new jr("texture_depth_multisampled_2d",jn.keyword,"texture_depth_multisampled_2d"),texture_external:new jr("texture_external",jn.keyword,"texture_external"),u32:new jr("u32",jn.keyword,"u32"),vec2:new jr("vec2",jn.keyword,"vec2"),vec3:new jr("vec3",jn.keyword,"vec3"),vec4:new jr("vec4",jn.keyword,"vec4"),bitcast:new jr("bitcast",jn.keyword,"bitcast"),block:new jr("block",jn.keyword,"block"),break:new jr("break",jn.keyword,"break"),case:new jr("case",jn.keyword,"case"),continue:new jr("continue",jn.keyword,"continue"),continuing:new jr("continuing",jn.keyword,"continuing"),default:new jr("default",jn.keyword,"default"),discard:new jr("discard",jn.keyword,"discard"),else:new jr("else",jn.keyword,"else"),enable:new jr("enable",jn.keyword,"enable"),fallthrough:new jr("fallthrough",jn.keyword,"fallthrough"),false:new jr("false",jn.keyword,"false"),fn:new jr("fn",jn.keyword,"fn"),for:new jr("for",jn.keyword,"for"),function:new jr("function",jn.keyword,"function"),if:new jr("if",jn.keyword,"if"),let:new jr("let",jn.keyword,"let"),const:new jr("const",jn.keyword,"const"),loop:new jr("loop",jn.keyword,"loop"),while:new jr("while",jn.keyword,"while"),private:new jr("private",jn.keyword,"private"),read:new jr("read",jn.keyword,"read"),read_write:new jr("read_write",jn.keyword,"read_write"),return:new jr("return",jn.keyword,"return"),storage:new jr("storage",jn.keyword,"storage"),switch:new jr("switch",jn.keyword,"switch"),true:new jr("true",jn.keyword,"true"),alias:new jr("alias",jn.keyword,"alias"),type:new jr("type",jn.keyword,"type"),uniform:new jr("uniform",jn.keyword,"uniform"),var:new jr("var",jn.keyword,"var"),override:new jr("override",jn.keyword,"override"),workgroup:new jr("workgroup",jn.keyword,"workgroup"),write:new jr("write",jn.keyword,"write"),r8unorm:new jr("r8unorm",jn.keyword,"r8unorm"),r8snorm:new jr("r8snorm",jn.keyword,"r8snorm"),r8uint:new jr("r8uint",jn.keyword,"r8uint"),r8sint:new jr("r8sint",jn.keyword,"r8sint"),r16uint:new jr("r16uint",jn.keyword,"r16uint"),r16sint:new jr("r16sint",jn.keyword,"r16sint"),r16float:new jr("r16float",jn.keyword,"r16float"),rg8unorm:new jr("rg8unorm",jn.keyword,"rg8unorm"),rg8snorm:new jr("rg8snorm",jn.keyword,"rg8snorm"),rg8uint:new jr("rg8uint",jn.keyword,"rg8uint"),rg8sint:new jr("rg8sint",jn.keyword,"rg8sint"),r32uint:new jr("r32uint",jn.keyword,"r32uint"),r32sint:new jr("r32sint",jn.keyword,"r32sint"),r32float:new jr("r32float",jn.keyword,"r32float"),rg16uint:new jr("rg16uint",jn.keyword,"rg16uint"),rg16sint:new jr("rg16sint",jn.keyword,"rg16sint"),rg16float:new jr("rg16float",jn.keyword,"rg16float"),rgba8unorm:new jr("rgba8unorm",jn.keyword,"rgba8unorm"),rgba8unorm_srgb:new jr("rgba8unorm_srgb",jn.keyword,"rgba8unorm_srgb"),rgba8snorm:new jr("rgba8snorm",jn.keyword,"rgba8snorm"),rgba8uint:new jr("rgba8uint",jn.keyword,"rgba8uint"),rgba8sint:new jr("rgba8sint",jn.keyword,"rgba8sint"),bgra8unorm:new jr("bgra8unorm",jn.keyword,"bgra8unorm"),bgra8unorm_srgb:new jr("bgra8unorm_srgb",jn.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new jr("rgb10a2unorm",jn.keyword,"rgb10a2unorm"),rg11b10float:new jr("rg11b10float",jn.keyword,"rg11b10float"),rg32uint:new jr("rg32uint",jn.keyword,"rg32uint"),rg32sint:new jr("rg32sint",jn.keyword,"rg32sint"),rg32float:new jr("rg32float",jn.keyword,"rg32float"),rgba16uint:new jr("rgba16uint",jn.keyword,"rgba16uint"),rgba16sint:new jr("rgba16sint",jn.keyword,"rgba16sint"),rgba16float:new jr("rgba16float",jn.keyword,"rgba16float"),rgba32uint:new jr("rgba32uint",jn.keyword,"rgba32uint"),rgba32sint:new jr("rgba32sint",jn.keyword,"rgba32sint"),rgba32float:new jr("rgba32float",jn.keyword,"rgba32float"),static_assert:new jr("static_assert",jn.keyword,"static_assert")},Fr.tokens={decimal_float_literal:new jr("decimal_float_literal",jn.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new jr("hex_float_literal",jn.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new jr("int_literal",jn.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new jr("uint_literal",jn.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new jr("ident",jn.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new jr("and",jn.token,"&"),and_and:new jr("and_and",jn.token,"&&"),arrow:new jr("arrow ",jn.token,"->"),attr:new jr("attr",jn.token,"@"),attr_left:new jr("attr_left",jn.token,"[["),attr_right:new jr("attr_right",jn.token,"]]"),forward_slash:new jr("forward_slash",jn.token,"/"),bang:new jr("bang",jn.token,"!"),bracket_left:new jr("bracket_left",jn.token,"["),bracket_right:new jr("bracket_right",jn.token,"]"),brace_left:new jr("brace_left",jn.token,"{"),brace_right:new jr("brace_right",jn.token,"}"),colon:new jr("colon",jn.token,":"),comma:new jr("comma",jn.token,","),equal:new jr("equal",jn.token,"="),equal_equal:new jr("equal_equal",jn.token,"=="),not_equal:new jr("not_equal",jn.token,"!="),greater_than:new jr("greater_than",jn.token,">"),greater_than_equal:new jr("greater_than_equal",jn.token,">="),shift_right:new jr("shift_right",jn.token,">>"),less_than:new jr("less_than",jn.token,"<"),less_than_equal:new jr("less_than_equal",jn.token,"<="),shift_left:new jr("shift_left",jn.token,"<<"),modulo:new jr("modulo",jn.token,"%"),minus:new jr("minus",jn.token,"-"),minus_minus:new jr("minus_minus",jn.token,"--"),period:new jr("period",jn.token,"."),plus:new jr("plus",jn.token,"+"),plus_plus:new jr("plus_plus",jn.token,"++"),or:new jr("or",jn.token,"|"),or_or:new jr("or_or",jn.token,"||"),paren_left:new jr("paren_left",jn.token,"("),paren_right:new jr("paren_right",jn.token,")"),semicolon:new jr("semicolon",jn.token,";"),star:new jr("star",jn.token,"*"),tilde:new jr("tilde",jn.token,"~"),underscore:new jr("underscore",jn.token,"_"),xor:new jr("xor",jn.token,"^"),plus_equal:new jr("plus_equal",jn.token,"+="),minus_equal:new jr("minus_equal",jn.token,"-="),times_equal:new jr("times_equal",jn.token,"*="),division_equal:new jr("division_equal",jn.token,"/="),modulo_equal:new jr("modulo_equal",jn.token,"%="),and_equal:new jr("and_equal",jn.token,"&="),or_equal:new jr("or_equal",jn.token,"|="),xor_equal:new jr("xor_equal",jn.token,"^="),shift_right_equal:new jr("shift_right_equal",jn.token,">>="),shift_left_equal:new jr("shift_left_equal",jn.token,"<<=")},Fr.storage_class=[Vn.keywords.function,Vn.keywords.private,Vn.keywords.workgroup,Vn.keywords.uniform,Vn.keywords.storage],Fr.access_mode=[Vn.keywords.read,Vn.keywords.write,Vn.keywords.read_write],Fr.sampler_type=[Vn.keywords.sampler,Vn.keywords.sampler_comparison],Fr.sampled_texture_type=[Vn.keywords.texture_1d,Vn.keywords.texture_2d,Vn.keywords.texture_2d_array,Vn.keywords.texture_3d,Vn.keywords.texture_cube,Vn.keywords.texture_cube_array],Fr.multisampled_texture_type=[Vn.keywords.texture_multisampled_2d],Fr.storage_texture_type=[Vn.keywords.texture_storage_1d,Vn.keywords.texture_storage_2d,Vn.keywords.texture_storage_2d_array,Vn.keywords.texture_storage_3d],Fr.depth_texture_type=[Vn.keywords.texture_depth_2d,Vn.keywords.texture_depth_2d_array,Vn.keywords.texture_depth_cube,Vn.keywords.texture_depth_cube_array,Vn.keywords.texture_depth_multisampled_2d],Fr.texture_external_type=[Vn.keywords.texture_external],Fr.any_texture_type=[...Vn.sampled_texture_type,...Vn.multisampled_texture_type,...Vn.storage_texture_type,...Vn.depth_texture_type,...Vn.texture_external_type],Fr.texel_format=[Vn.keywords.r8unorm,Vn.keywords.r8snorm,Vn.keywords.r8uint,Vn.keywords.r8sint,Vn.keywords.r16uint,Vn.keywords.r16sint,Vn.keywords.r16float,Vn.keywords.rg8unorm,Vn.keywords.rg8snorm,Vn.keywords.rg8uint,Vn.keywords.rg8sint,Vn.keywords.r32uint,Vn.keywords.r32sint,Vn.keywords.r32float,Vn.keywords.rg16uint,Vn.keywords.rg16sint,Vn.keywords.rg16float,Vn.keywords.rgba8unorm,Vn.keywords.rgba8unorm_srgb,Vn.keywords.rgba8snorm,Vn.keywords.rgba8uint,Vn.keywords.rgba8sint,Vn.keywords.bgra8unorm,Vn.keywords.bgra8unorm_srgb,Vn.keywords.rgb10a2unorm,Vn.keywords.rg11b10float,Vn.keywords.rg32uint,Vn.keywords.rg32sint,Vn.keywords.rg32float,Vn.keywords.rgba16uint,Vn.keywords.rgba16sint,Vn.keywords.rgba16float,Vn.keywords.rgba32uint,Vn.keywords.rgba32sint,Vn.keywords.rgba32float],Fr.const_literal=[Vn.tokens.int_literal,Vn.tokens.uint_literal,Vn.tokens.decimal_float_literal,Vn.tokens.hex_float_literal,Vn.keywords.true,Vn.keywords.false],Fr.literal_or_ident=[Vn.tokens.ident,Vn.tokens.int_literal,Vn.tokens.uint_literal,Vn.tokens.decimal_float_literal,Vn.tokens.hex_float_literal],Fr.element_count_expression=[Vn.tokens.int_literal,Vn.tokens.uint_literal,Vn.tokens.ident],Fr.template_types=[Vn.keywords.vec2,Vn.keywords.vec3,Vn.keywords.vec4,Vn.keywords.mat2x2,Vn.keywords.mat2x3,Vn.keywords.mat2x4,Vn.keywords.mat3x2,Vn.keywords.mat3x3,Vn.keywords.mat3x4,Vn.keywords.mat4x2,Vn.keywords.mat4x3,Vn.keywords.mat4x4,Vn.keywords.atomic,Vn.keywords.bitcast,...Vn.any_texture_type],Fr.attribute_name=[Vn.tokens.ident,Vn.keywords.block],Fr.assignment_operators=[Vn.tokens.equal,Vn.tokens.plus_equal,Vn.tokens.minus_equal,Vn.tokens.times_equal,Vn.tokens.division_equal,Vn.tokens.modulo_equal,Vn.tokens.and_equal,Vn.tokens.or_equal,Vn.tokens.xor_equal,Vn.tokens.shift_right_equal,Vn.tokens.shift_left_equal],Fr.increment_operators=[Vn.tokens.plus_plus,Vn.tokens.minus_minus];class qr{constructor(e,t,n){this.type=e,this.lexeme=t,this.line=n}toString(){return this.lexeme}isTemplateType(){return-1!=Fr.template_types.indexOf(this.type)}isArrayType(){return this.type==Fr.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class Hr{constructor(e){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=e?e:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new qr(Fr.eof,"",this._line)),this._tokens}scanToken(){let e=this._advance();if("\n"==e)return this._line++,!0;if(this._isWhitespace(e))return!0;if("/"==e){if("/"==this._peekAhead()){for(;"\n"!=e;){if(this._isAtEnd())return!0;e=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let t=1;for(;t>0;){if(this._isAtEnd())return!0;if(e=this._advance(),"\n"==e)this._line++;else if("*"==e){if("/"==this._peekAhead()&&(this._advance(),t--,0==t))return!0}else"/"==e&&"*"==this._peekAhead()&&(this._advance(),t++)}return!0}}let t=Fr.none;for(;;){let n=this._findType(e);const r=this._peekAhead();if(">"==e&&(">"==r||"="==r)){let e=!1,t=this._tokens.length-1;for(let n=0;n<5&&t>=0;++n,--t)if(this._tokens[t].type===Fr.tokens.less_than){t>0&&this._tokens[t-1].isArrayOrTemplateType()&&(e=!0);break}if(e)return this._addToken(n),!0}if(n===Fr.none){let r=e,i=0;const a=2;for(let e=0;e<a;++e)if(r+=this._peekAhead(e),n=this._findType(r),n!==Fr.none){i=e;break}if(n===Fr.none)return t!==Fr.none&&(this._current--,this._addToken(t),!0);e=r,this._current+=i+1}if(t=n,this._isAtEnd())break;e+=this._advance()}return t!==Fr.none&&(this._addToken(t),!0)}_findType(e){for(const t in Fr.keywords){const n=Fr.keywords[t];if(this._match(e,n.rule))return n}for(const t in Fr.tokens){const n=Fr.tokens[t];if(this._match(e,n.rule))return n}return Fr.none}_match(e,t){if("string"==typeof t){if(t==e)return!0}else{const n=t.exec(e);if(n&&0==n.index&&n[0]==e)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(e){return" "==e||"\t"==e||"\r"==e}_advance(e=0){let t=this._source[this._current];return e=e||0,e++,this._current+=e,t}_peekAhead(e=0){return e=e||0,this._current+e>=this._source.length?"\0":this._source[this._current+e]}_addToken(e){const t=this._source.substring(this._start,this._current);this._tokens.push(new qr(e,t,this._line))}}class Wr{constructor(){this._tokens=[],this._current=0,this._context=new qn}parse(e){this._initialize(e);let t=[];for(;!this._isAtEnd();){const e=this._global_decl_or_directive();if(!e)break;t.push(e)}return t}_initialize(e){if(e)if("string"==typeof e){const t=new Hr(e);this._tokens=t.scanTokens()}else this._tokens=e;else this._tokens=[];this._current=0}_error(e,t){return console.error(e,t),{token:e,message:t,toString:function(){return`${t}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==Fr.eof}_match(e){if(e instanceof jr)return!!this._check(e)&&(this._advance(),!0);for(let t=0,n=e.length;t<n;++t){const n=e[t];if(this._check(n))return this._advance(),!0}return!1}_consume(e,t){if(this._check(e))return this._advance();throw this._error(this._peek(),t)}_check(e){if(this._isAtEnd())return!1;const t=this._peek();if(e instanceof Array){let n=t.type;return-1!=e.indexOf(n)}return t.type==e}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(Fr.tokens.semicolon)&&!this._isAtEnd(););if(this._match(Fr.keywords.alias)){const e=this._type_alias();return this._consume(Fr.tokens.semicolon,"Expected ';'"),e}if(this._match(Fr.keywords.enable)){const e=this._enable_directive();return this._consume(Fr.tokens.semicolon,"Expected ';'"),e}const e=this._attribute();if(this._check(Fr.keywords.var)){const t=this._global_variable_decl();return null!=t&&(t.attributes=e),this._consume(Fr.tokens.semicolon,"Expected ';'."),t}if(this._check(Fr.keywords.override)){const t=this._override_variable_decl();return null!=t&&(t.attributes=e),this._consume(Fr.tokens.semicolon,"Expected ';'."),t}if(this._check(Fr.keywords.let)){const t=this._global_let_decl();return null!=t&&(t.attributes=e),this._consume(Fr.tokens.semicolon,"Expected ';'."),t}if(this._check(Fr.keywords.const)){const t=this._global_const_decl();return null!=t&&(t.attributes=e),this._consume(Fr.tokens.semicolon,"Expected ';'."),t}if(this._check(Fr.keywords.struct)){const t=this._struct_decl();return null!=t&&(t.attributes=e),t}if(this._check(Fr.keywords.fn)){const t=this._function_decl();return null!=t&&(t.attributes=e),t}return null}_function_decl(){if(!this._match(Fr.keywords.fn))return null;const e=this._consume(Fr.tokens.ident,"Expected function name.").toString();this._consume(Fr.tokens.paren_left,"Expected '(' for function arguments.");const t=[];if(!this._check(Fr.tokens.paren_right))do{if(this._check(Fr.tokens.paren_right))break;const e=this._attribute(),n=this._consume(Fr.tokens.ident,"Expected argument name.").toString();this._consume(Fr.tokens.colon,"Expected ':' for argument type.");const r=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=r,t.push(new zr(n,i,e)))}while(this._match(Fr.tokens.comma));this._consume(Fr.tokens.paren_right,"Expected ')' after function arguments.");let n=null;if(this._match(Fr.tokens.arrow)){const e=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=e)}const r=this._compound_statement();return new Xn(e,t,n,r)}_compound_statement(){const e=[];for(this._consume(Fr.tokens.brace_left,"Expected '{' for block.");!this._check(Fr.tokens.brace_right);){const t=this._statement();null!==t&&e.push(t)}return this._consume(Fr.tokens.brace_right,"Expected '}' for block."),e}_statement(){for(;this._match(Fr.tokens.semicolon)&&!this._isAtEnd(););if(this._check(Fr.keywords.if))return this._if_statement();if(this._check(Fr.keywords.switch))return this._switch_statement();if(this._check(Fr.keywords.loop))return this._loop_statement();if(this._check(Fr.keywords.for))return this._for_statement();if(this._check(Fr.keywords.while))return this._while_statement();if(this._check(Fr.keywords.continuing))return this._continuing_statement();if(this._check(Fr.keywords.static_assert))return this._static_assert_statement();if(this._check(Fr.tokens.brace_left))return this._compound_statement();let e=null;return e=this._check(Fr.keywords.return)?this._return_statement():this._check([Fr.keywords.var,Fr.keywords.let,Fr.keywords.const])?this._variable_statement():this._match(Fr.keywords.discard)?new hr:this._match(Fr.keywords.break)?new pr:this._match(Fr.keywords.continue)?new mr:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=e&&this._consume(Fr.tokens.semicolon,"Expected ';' after statement."),e}_static_assert_statement(){if(!this._match(Fr.keywords.static_assert))return null;let e=this._optional_paren_expression();return new Zn(e)}_while_statement(){if(!this._match(Fr.keywords.while))return null;let e=this._optional_paren_expression();const t=this._compound_statement();return new Qn(e,t)}_continuing_statement(){if(!this._match(Fr.keywords.continuing))return null;const e=this._compound_statement();return new Kn(e)}_for_statement(){if(!this._match(Fr.keywords.for))return null;this._consume(Fr.tokens.paren_left,"Expected '('.");const e=this._check(Fr.tokens.semicolon)?null:this._for_init();this._consume(Fr.tokens.semicolon,"Expected ';'.");const t=this._check(Fr.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(Fr.tokens.semicolon,"Expected ';'.");const n=this._check(Fr.tokens.paren_right)?null:this._for_increment();this._consume(Fr.tokens.paren_right,"Expected ')'.");const r=this._compound_statement();return new Jn(e,t,n,r)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(Fr.keywords.var)){const e=this._variable_decl();if(null===e)throw this._error(this._peek(),"Variable declaration expected.");let t=null;return this._match(Fr.tokens.equal)&&(t=this._short_circuit_or_expression()),new er(e.name,e.type,e.storage,e.access,t)}if(this._match(Fr.keywords.let)){const e=this._consume(Fr.tokens.ident,"Expected name for let.").toString();let t=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(Fr.tokens.equal,"Expected '=' for let.");const n=this._short_circuit_or_expression();return new nr(e,t,null,null,n)}if(this._match(Fr.keywords.const)){const e=this._consume(Fr.tokens.ident,"Expected name for const.").toString();let t=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(Fr.tokens.equal,"Expected '=' for const.");const n=this._short_circuit_or_expression();return new rr(e,t,null,null,n)}return null}_increment_decrement_statement(){const e=this._current,t=this._unary_expression();if(null==t)return null;if(!this._check(Fr.increment_operators))return this._current=e,null;const n=this._consume(Fr.increment_operators,"Expected increment operator");return new ir(n.type===Fr.tokens.plus_plus?Bn.increment:Bn.decrement,t)}_assignment_statement(){let e=null;if(this._check(Fr.tokens.brace_right))return null;let t=this._match(Fr.tokens.underscore);if(t||(e=this._unary_expression()),!t&&null==e)return null;const n=this._consume(Fr.assignment_operators,"Expected assignment operator."),r=this._short_circuit_or_expression();return new ar(Nn.parse(n.lexeme),e,r)}_func_call_statement(){if(!this._check(Fr.tokens.ident))return null;const e=this._current,t=this._consume(Fr.tokens.ident,"Expected function name."),n=this._argument_expression_list();return null===n?(this._current=e,null):new or(t.lexeme,n)}_loop_statement(){if(!this._match(Fr.keywords.loop))return null;this._consume(Fr.tokens.brace_left,"Expected '{' for loop.");const e=[];let t=this._statement();for(;null!==t;){if(Array.isArray(t))for(let n of t)e.push(n);else e.push(t);t=this._statement()}let n=null;return this._match(Fr.keywords.continuing)&&(n=this._compound_statement()),this._consume(Fr.tokens.brace_right,"Expected '}' for loop."),new sr(e,n)}_switch_statement(){if(!this._match(Fr.keywords.switch))return null;const e=this._optional_paren_expression();this._consume(Fr.tokens.brace_left,"Expected '{' for switch.");const t=this._switch_body();if(null==t||0==t.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(Fr.tokens.brace_right,"Expected '}' for switch."),new ur(e,t)}_switch_body(){const e=[];if(this._match(Fr.keywords.case)){const t=this._case_selectors();this._match(Fr.tokens.colon),this._consume(Fr.tokens.brace_left,"Exected '{' for switch case.");const n=this._case_body();this._consume(Fr.tokens.brace_right,"Exected '}' for switch case."),e.push(new Rr(t,n))}if(this._match(Fr.keywords.default)){this._match(Fr.tokens.colon),this._consume(Fr.tokens.brace_left,"Exected '{' for switch default.");const t=this._case_body();this._consume(Fr.tokens.brace_right,"Exected '}' for switch default."),e.push(new Lr(t))}if(this._check([Fr.keywords.default,Fr.keywords.case])){const t=this._switch_body();e.push(t[0])}return e}_case_selectors(){var e,t,n,r;const i=[null!==(t=null===(e=this._shift_expression())||void 0===e?void 0:e.evaluate(this._context).toString())&&void 0!==t?t:""];for(;this._match(Fr.tokens.comma);)i.push(null!==(r=null===(n=this._shift_expression())||void 0===n?void 0:n.evaluate(this._context).toString())&&void 0!==r?r:"");return i}_case_body(){if(this._match(Fr.keywords.fallthrough))return this._consume(Fr.tokens.semicolon,"Expected ';'"),[];let e=this._statement();if(null==e)return[];e instanceof Array||(e=[e]);const t=this._case_body();return 0==t.length?e:[...e,t[0]]}_if_statement(){if(!this._match(Fr.keywords.if))return null;const e=this._optional_paren_expression(),t=this._compound_statement();let n=[];this._match_elseif()&&(n=this._elseif_statement(n));let r=null;return this._match(Fr.keywords.else)&&(r=this._compound_statement()),new lr(e,t,n,r)}_match_elseif(){return this._tokens[this._current].type===Fr.keywords.else&&this._tokens[this._current+1].type===Fr.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(e=[]){const t=this._optional_paren_expression(),n=this._compound_statement();return e.push(new Br(t,n)),this._match_elseif()&&this._elseif_statement(e),e}_return_statement(){if(!this._match(Fr.keywords.return))return null;const e=this._short_circuit_or_expression();return new cr(e)}_short_circuit_or_expression(){let e=this._short_circuit_and_expr();for(;this._match(Fr.tokens.or_or);)e=new Dr(this._previous().toString(),e,this._short_circuit_and_expr());return e}_short_circuit_and_expr(){let e=this._inclusive_or_expression();for(;this._match(Fr.tokens.and_and);)e=new Dr(this._previous().toString(),e,this._inclusive_or_expression());return e}_inclusive_or_expression(){let e=this._exclusive_or_expression();for(;this._match(Fr.tokens.or);)e=new Dr(this._previous().toString(),e,this._exclusive_or_expression());return e}_exclusive_or_expression(){let e=this._and_expression();for(;this._match(Fr.tokens.xor);)e=new Dr(this._previous().toString(),e,this._and_expression());return e}_and_expression(){let e=this._equality_expression();for(;this._match(Fr.tokens.and);)e=new Dr(this._previous().toString(),e,this._equality_expression());return e}_equality_expression(){const e=this._relational_expression();return this._match([Fr.tokens.equal_equal,Fr.tokens.not_equal])?new Dr(this._previous().toString(),e,this._relational_expression()):e}_relational_expression(){let e=this._shift_expression();for(;this._match([Fr.tokens.less_than,Fr.tokens.greater_than,Fr.tokens.less_than_equal,Fr.tokens.greater_than_equal]);)e=new Dr(this._previous().toString(),e,this._shift_expression());return e}_shift_expression(){let e=this._additive_expression();for(;this._match([Fr.tokens.shift_left,Fr.tokens.shift_right]);)e=new Dr(this._previous().toString(),e,this._additive_expression());return e}_additive_expression(){let e=this._multiplicative_expression();for(;this._match([Fr.tokens.plus,Fr.tokens.minus]);)e=new Dr(this._previous().toString(),e,this._multiplicative_expression());return e}_multiplicative_expression(){let e=this._unary_expression();for(;this._match([Fr.tokens.star,Fr.tokens.forward_slash,Fr.tokens.modulo]);)e=new Dr(this._previous().toString(),e,this._unary_expression());return e}_unary_expression(){return this._match([Fr.tokens.minus,Fr.tokens.bang,Fr.tokens.tilde,Fr.tokens.star,Fr.tokens.and])?new Cr(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const e=this._primary_expression(),t=this._postfix_expression();return t&&(e.postfix=t),e}_postfix_expression(){if(this._match(Fr.tokens.bracket_left)){const e=this._short_circuit_or_expression();this._consume(Fr.tokens.bracket_right,"Expected ']'.");const t=this._postfix_expression();return t&&(e.postfix=t),e}if(this._match(Fr.tokens.period)){const e=this._consume(Fr.tokens.ident,"Expected member name."),t=this._postfix_expression(),n=new Tr(e.lexeme);return t&&(n.postfix=t),n}return null}_getStruct(e){return this._context.aliases.has(e)?this._context.aliases.get(e).type:this._context.structs.has(e)?this._context.structs.get(e):null}_primary_expression(){if(this._match(Fr.tokens.ident)){const e=this._previous().toString();if(this._check(Fr.tokens.paren_left)){const t=this._argument_expression_list(),n=this._getStruct(e);return null!=n?new Sr(n,t):new Pr(e,t)}if(this._context.constants.has(e)){const t=this._context.constants.get(e);return new Or(e,t.value)}return new kr(e)}if(this._match(Fr.const_literal))return new Mr(parseFloat(this._previous().toString()));if(this._check(Fr.tokens.paren_left))return this._paren_expression();if(this._match(Fr.keywords.bitcast)){this._consume(Fr.tokens.less_than,"Expected '<'.");const e=this._type_decl();this._consume(Fr.tokens.greater_than,"Expected '>'.");const t=this._paren_expression();return new Er(e,t)}const e=this._type_decl(),t=this._argument_expression_list();return new Ir(e,t)}_argument_expression_list(){if(!this._match(Fr.tokens.paren_left))return null;const e=[];do{if(this._check(Fr.tokens.paren_right))break;const t=this._short_circuit_or_expression();e.push(t)}while(this._match(Fr.tokens.comma));return this._consume(Fr.tokens.paren_right,"Expected ')' for agument list"),e}_optional_paren_expression(){this._match(Fr.tokens.paren_left);const e=this._short_circuit_or_expression();return this._match(Fr.tokens.paren_right),new Ur([e])}_paren_expression(){this._consume(Fr.tokens.paren_left,"Expected '('.");const e=this._short_circuit_or_expression();return this._consume(Fr.tokens.paren_right,"Expected ')'."),new Ur([e])}_struct_decl(){if(!this._match(Fr.keywords.struct))return null;const e=this._consume(Fr.tokens.ident,"Expected name for struct.").toString();this._consume(Fr.tokens.brace_left,"Expected '{' for struct body.");const t=[];for(;!this._check(Fr.tokens.brace_right);){const e=this._attribute(),n=this._consume(Fr.tokens.ident,"Expected variable name.").toString();this._consume(Fr.tokens.colon,"Expected ':' for struct member type.");const r=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=r),this._check(Fr.tokens.brace_right)?this._match(Fr.tokens.comma):this._consume(Fr.tokens.comma,"Expected ',' for struct member."),t.push(new Nr(n,i,e))}this._consume(Fr.tokens.brace_right,"Expected '}' after struct body.");const n=new vr(e,t);return this._context.structs.set(e,n),n}_global_variable_decl(){const e=this._variable_decl();return e&&this._match(Fr.tokens.equal)&&(e.value=this._const_expression()),e}_override_variable_decl(){const e=this._override_decl();return e&&this._match(Fr.tokens.equal)&&(e.value=this._const_expression()),e}_global_const_decl(){if(!this._match(Fr.keywords.const))return null;const e=this._consume(Fr.tokens.ident,"Expected variable name");let t=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;if(this._match(Fr.tokens.equal)){const e=this._short_circuit_or_expression();if(e instanceof Sr)n=e;else if(e instanceof Or&&e.initializer instanceof Sr)n=e.initializer;else try{const t=e.evaluate(this._context);n=new Mr(t)}catch(t){n=e}}const r=new rr(e.toString(),t,"","",n);return this._context.constants.set(r.name,r),r}_global_let_decl(){if(!this._match(Fr.keywords.let))return null;const e=this._consume(Fr.tokens.ident,"Expected variable name");let t=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;return this._match(Fr.tokens.equal)&&(n=this._const_expression()),new nr(e.toString(),t,"","",n)}_const_expression(){if(this._match(Fr.const_literal))return new Tr(this._previous().toString());const e=this._type_decl();this._consume(Fr.tokens.paren_left,"Expected '('.");let t=[];for(;!this._check(Fr.tokens.paren_right)&&(t.push(this._const_expression()),this._check(Fr.tokens.comma));)this._advance();return this._consume(Fr.tokens.paren_right,"Expected ')'."),new Sr(e,t)}_variable_decl(){if(!this._match(Fr.keywords.var))return null;let e="",t="";this._match(Fr.tokens.less_than)&&(e=this._consume(Fr.storage_class,"Expected storage_class.").toString(),this._match(Fr.tokens.comma)&&(t=this._consume(Fr.access_mode,"Expected access_mode.").toString()),this._consume(Fr.tokens.greater_than,"Expected '>'."));const n=this._consume(Fr.tokens.ident,"Expected variable name");let r=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=e)}return new er(n.toString(),r,e,t,null)}_override_decl(){if(!this._match(Fr.keywords.override))return null;const e=this._consume(Fr.tokens.ident,"Expected variable name");let t=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}return new tr(e.toString(),t,null)}_enable_directive(){const e=this._consume(Fr.tokens.ident,"identity expected.");return new dr(e.toString())}_type_alias(){const e=this._consume(Fr.tokens.ident,"identity expected.");this._consume(Fr.tokens.equal,"Expected '=' for type alias.");let t=this._type_decl();if(null===t)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);const n=new fr(e.toString(),t);return this._context.aliases.set(n.name,n),n}_type_decl(){if(this._check([Fr.tokens.ident,...Fr.texel_format,Fr.keywords.bool,Fr.keywords.f32,Fr.keywords.i32,Fr.keywords.u32])){const e=this._advance(),t=e.toString();return this._context.structs.has(t)?this._context.structs.get(t):this._context.aliases.has(t)?this._context.aliases.get(t).type:new gr(e.toString())}let e=this._texture_sampler_types();if(e)return e;if(this._check(Fr.template_types)){let e=this._advance().toString(),t=null,n=null;return this._match(Fr.tokens.less_than)&&(t=this._type_decl(),n=null,this._match(Fr.tokens.comma)&&(n=this._consume(Fr.access_mode,"Expected access_mode for pointer").toString()),this._consume(Fr.tokens.greater_than,"Expected '>' for type.")),new xr(e,t,n)}if(this._match(Fr.keywords.ptr)){let e=this._previous().toString();this._consume(Fr.tokens.less_than,"Expected '<' for pointer.");const t=this._consume(Fr.storage_class,"Expected storage_class for pointer");this._consume(Fr.tokens.comma,"Expected ',' for pointer.");const n=this._type_decl();let r=null;return this._match(Fr.tokens.comma)&&(r=this._consume(Fr.access_mode,"Expected access_mode for pointer").toString()),this._consume(Fr.tokens.greater_than,"Expected '>' for pointer."),new yr(e,t.toString(),n,r)}const t=this._attribute();if(this._match(Fr.keywords.array)){let e=null,n=-1;const r=this._previous();if(this._match(Fr.tokens.less_than)){e=this._type_decl(),this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);let t="";this._match(Fr.tokens.comma)&&(t=this._shift_expression().evaluate(this._context).toString()),this._consume(Fr.tokens.greater_than,"Expected '>' for array."),n=t?parseInt(t):0}return new br(r.toString(),t,e,n)}return null}_texture_sampler_types(){if(this._match(Fr.sampler_type))return new _r(this._previous().toString(),null,null);if(this._match(Fr.depth_texture_type))return new _r(this._previous().toString(),null,null);if(this._match(Fr.sampled_texture_type)||this._match(Fr.multisampled_texture_type)){const e=this._previous();this._consume(Fr.tokens.less_than,"Expected '<' for sampler type.");const t=this._type_decl();return this._consume(Fr.tokens.greater_than,"Expected '>' for sampler type."),new _r(e.toString(),t,null)}if(this._match(Fr.storage_texture_type)){const e=this._previous();this._consume(Fr.tokens.less_than,"Expected '<' for sampler type.");const t=this._consume(Fr.texel_format,"Invalid texel format.").toString();this._consume(Fr.tokens.comma,"Expected ',' after texel format.");const n=this._consume(Fr.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(Fr.tokens.greater_than,"Expected '>' for sampler type."),new _r(e.toString(),t,n)}return null}_attribute(){let e=[];for(;this._match(Fr.tokens.attr);){const t=this._consume(Fr.attribute_name,"Expected attribute name"),n=new Vr(t.toString(),null);if(this._match(Fr.tokens.paren_left)){if(n.value=this._consume(Fr.literal_or_ident,"Expected attribute value").toString(),this._check(Fr.tokens.comma)){this._advance();do{const e=this._consume(Fr.literal_or_ident,"Expected attribute value").toString();n.value instanceof Array||(n.value=[n.value]),n.value.push(e)}while(this._match(Fr.tokens.comma))}this._consume(Fr.tokens.paren_right,"Expected ')'")}e.push(n)}for(;this._match(Fr.tokens.attr_left);){if(!this._check(Fr.tokens.attr_right))do{const t=this._consume(Fr.attribute_name,"Expected attribute name"),n=new Vr(t.toString(),null);if(this._match(Fr.tokens.paren_left)){if(n.value=[this._consume(Fr.literal_or_ident,"Expected attribute value").toString()],this._check(Fr.tokens.comma)){this._advance();do{const e=this._consume(Fr.literal_or_ident,"Expected attribute value").toString();n.value.push(e)}while(this._match(Fr.tokens.comma))}this._consume(Fr.tokens.paren_right,"Expected ')'")}e.push(n)}while(this._match(Fr.tokens.comma));this._consume(Fr.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==e.length?null:e}}class Yr{constructor(e,t){this.name=e,this.attributes=t,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class $r{constructor(e,t,n){this.name=e,this.type=t,this.attributes=n,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class Xr extends Yr{constructor(e,t){super(e,t),this.members=[],this.align=0}get isStruct(){return!0}}class Zr extends Yr{constructor(e,t){super(e,t),this.count=0,this.stride=0}get isArray(){return!0}}class Qr extends Yr{constructor(e,t,n,r){super(e,n),this.format=t,this.access=r}get isTemplate(){return!0}}!function(e){e[e.Uniform=0]="Uniform",e[e.Storage=1]="Storage",e[e.Texture=2]="Texture",e[e.Sampler=3]="Sampler",e[e.StorageTexture=4]="StorageTexture"}(Fn||(Fn={}));class Kr{constructor(e,t,n,r,i,a,o){this.name=e,this.type=t,this.group=n,this.binding=r,this.attributes=i,this.resourceType=a,this.access=o}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class Jr{constructor(e,t){this.name=e,this.type=t}}class ei{constructor(e,t){this.align=e,this.size=t}}class ti{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r,this.interpolation=null}}class ni{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r}}class ri{constructor(e,t=null){this.stage=null,this.inputs=[],this.outputs=[],this.resources=[],this.name=e,this.stage=t}}class ii{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class ai{constructor(e,t,n,r){this.name=e,this.type=t,this.attributes=n,this.id=r}}class oi{constructor(e){this.resources=null,this.node=e}}class si{constructor(e){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new ii,this._types=new Map,this._functions=new Map,e&&this.update(e)}_isStorageTexture(e){return"texture_storage_1d"==e.name||"texture_storage_2d"==e.name||"texture_storage_2d_array"==e.name||"texture_storage_3d"==e.name}update(e){const t=(new Wr).parse(e);for(const e of t)e instanceof Xn&&this._functions.set(e.name,new oi(e));for(const e of t)if(e instanceof vr){const t=this._getTypeInfo(e,null);t instanceof Xr&&this.structs.push(t)}else if(e instanceof fr)this.aliases.push(this._getAliasInfo(e));else if(e instanceof tr){const t=e,n=this._getAttributeNum(t.attributes,"id",0),r=null!=t.type?this._getTypeInfo(t.type,t.attributes):null;this.overrides.push(new ai(t.name,r,t.attributes,n))}else if(this._isUniformVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=new Kr(t.name,i,n,r,t.attributes,Fn.Uniform,t.access);this.uniforms.push(a)}else if(this._isStorageVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=this._isStorageTexture(i),o=new Kr(t.name,i,n,r,t.attributes,a?Fn.StorageTexture:Fn.Storage,t.access);this.storage.push(o)}else if(this._isTextureVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=this._isStorageTexture(i),o=new Kr(t.name,i,n,r,t.attributes,a?Fn.StorageTexture:Fn.Texture,t.access);a?this.storage.push(o):this.textures.push(o)}else if(this._isSamplerVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=new Kr(t.name,i,n,r,t.attributes,Fn.Sampler,t.access);this.samplers.push(a)}else if(e instanceof Xn){const t=this._getAttribute(e,"vertex"),n=this._getAttribute(e,"fragment"),r=this._getAttribute(e,"compute"),i=t||n||r;if(i){const t=new ri(e.name,null==i?void 0:i.name);t.inputs=this._getInputs(e.args),t.outputs=this._getOutputs(e.returnType),t.resources=this._findResources(e),this.entry[i.name].push(t)}}}_findResource(e){for(const t of this.uniforms)if(t.name==e)return t;for(const t of this.storage)if(t.name==e)return t;for(const t of this.textures)if(t.name==e)return t;for(const t of this.samplers)if(t.name==e)return t;return null}_findResources(e){const t=[],n=this,r=[];return e.search((e=>{if(e instanceof Wn)r.push({});else if(e instanceof Yn)r.pop();else if(e instanceof er){if(r.length>0){const t=e;r[r.length-1][t.name]=t}}else if(e instanceof nr){if(r.length>0){const t=e;r[r.length-1][t.name]=t}}else if(e instanceof kr){const i=e;if(r.length>0&&r[r.length-1][i.name])return;const a=n._findResource(i.name);a&&t.push(a)}else if(e instanceof Pr){const r=e,i=n._functions.get(r.name);i&&(null===i.resources&&(i.resources=n._findResources(i.node)),t.push(...i.resources))}})),[...new Map(t.map((e=>[e.name,e]))).values()]}getBindGroups(){const e=[];function t(t,n){t>=e.length&&(e.length=t+1),void 0===e[t]&&(e[t]=[]),n>=e[t].length&&(e[t].length=n+1)}for(const n of this.uniforms)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.storage)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.textures)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.samplers)t(n.group,n.binding),e[n.group][n.binding]=n;return e}_getOutputs(e,t=void 0){if(void 0===t&&(t=[]),e instanceof vr)this._getStructOutputs(e,t);else{const n=this._getOutputInfo(e);null!==n&&t.push(n)}return t}_getStructOutputs(e,t){for(const n of e.members)if(n.type instanceof vr)this._getStructOutputs(n.type,t);else{const e=this._getAttribute(n,"location")||this._getAttribute(n,"builtin");if(null!==e){const r=this._getTypeInfo(n.type,n.type.attributes),i=this._parseInt(e.value),a=new ni(n.name,r,e.name,i);t.push(a)}}}_getOutputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getTypeInfo(e,e.attributes),r=this._parseInt(t.value);return new ni("",n,t.name,r)}return null}_getInputs(e,t=void 0){void 0===t&&(t=[]);for(const n of e)if(n.type instanceof vr)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}return t}_getStructInputs(e,t){for(const n of e.members)if(n.type instanceof vr)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}}_getInputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getAttribute(e,"interpolation"),r=this._getTypeInfo(e.type,e.attributes),i=this._parseInt(t.value),a=new ti(e.name,r,t.name,i);return null!==n&&(a.interpolation=this._parseString(n.value)),a}return null}_parseString(e){return e instanceof Array&&(e=e[0]),e}_parseInt(e){e instanceof Array&&(e=e[0]);const t=parseInt(e);return isNaN(t)?e:t}_getAlias(e){for(const t of this.aliases)if(t.name==e)return t.type;return null}_getAliasInfo(e){return new Jr(e.name,this._getTypeInfo(e.type,null))}_getTypeInfo(e,t){if(this._types.has(e))return this._types.get(e);if(e instanceof br){const n=e,r=this._getTypeInfo(n.format,n.attributes),i=new Zr(n.name,t);return i.format=r,i.count=n.count,this._types.set(e,i),this._updateTypeInfo(i),i}if(e instanceof vr){const n=e,r=new Xr(n.name,t);for(const e of n.members){const t=this._getTypeInfo(e.type,e.attributes);r.members.push(new $r(e.name,t,e.attributes))}return this._types.set(e,r),this._updateTypeInfo(r),r}if(e instanceof _r){const n=e,r=n.format instanceof gr,i=n.format?r?this._getTypeInfo(n.format,null):new Yr(n.format,null):null,a=new Qr(n.name,i,t,n.access);return this._types.set(e,a),this._updateTypeInfo(a),a}if(e instanceof xr){const n=e,r=n.format?this._getTypeInfo(n.format,null):null,i=new Qr(n.name,r,t,n.access);return this._types.set(e,i),this._updateTypeInfo(i),i}const n=new Yr(e.name,t);return this._types.set(e,n),this._updateTypeInfo(n),n}_updateTypeInfo(e){var t,n;const r=this._getTypeSize(e);if(e.size=null!==(t=null==r?void 0:r.size)&&void 0!==t?t:0,e instanceof Zr){const t=this._getTypeSize(e.format);e.stride=null!==(n=null==t?void 0:t.size)&&void 0!==n?n:0,this._updateTypeInfo(e.format)}e instanceof Xr&&this._updateStructInfo(e)}_updateStructInfo(e){var t;let n=0,r=0,i=0,a=0;for(let o=0,s=e.members.length;o<s;++o){const s=e.members[o],u=this._getTypeSize(s);if(!u)continue;null!==(t=this._getAlias(s.type.name))&&void 0!==t||s.type;const l=u.align,c=u.size;n=this._roundUp(l,n+r),r=c,i=n,a=Math.max(a,l),s.offset=n,s.size=c,this._updateTypeInfo(s.type)}e.size=this._roundUp(a,i+r),e.align=a}_getTypeSize(e){var t;if(null==e)return null;const n=this._getAttributeNum(e.attributes,"size",0),r=this._getAttributeNum(e.attributes,"align",0);if(e instanceof $r&&(e=e.type),e instanceof Yr){const t=this._getAlias(e.name);null!==t&&(e=t)}{const t=si._typeInfo[e.name];if(void 0!==t){const i="f16"===e.format?2:1;return new ei(Math.max(r,t.align/i),Math.max(n,t.size/i))}}{const t=si._typeInfo[e.name.substring(0,e.name.length-1)];if(t){const i="h"===e.name[e.name.length-1]?2:1;return new ei(Math.max(r,t.align/i),Math.max(n,t.size/i))}}if(e instanceof Zr){let i=e,a=8,o=8;const s=this._getTypeSize(i.format);return null!==s&&(o=s.size,a=s.align),o=i.count*this._getAttributeNum(null!==(t=null==e?void 0:e.attributes)&&void 0!==t?t:null,"stride",this._roundUp(a,o)),n&&(o=n),new ei(Math.max(r,a),Math.max(n,o))}if(e instanceof Xr){let t=0,i=0,a=0,o=0,s=0;for(const n of e.members){const e=this._getTypeSize(n.type);null!==e&&(t=Math.max(e.align,t),a=this._roundUp(e.align,a+o),o=e.size,s=a)}return i=this._roundUp(t,s+o),new ei(Math.max(r,t),Math.max(n,i))}return null}_isUniformVar(e){return e instanceof er&&"uniform"==e.storage}_isStorageVar(e){return e instanceof er&&"storage"==e.storage}_isTextureVar(e){return e instanceof er&&null!==e.type&&-1!=si._textureTypes.indexOf(e.type.name)}_isSamplerVar(e){return e instanceof er&&null!==e.type&&-1!=si._samplerTypes.indexOf(e.type.name)}_getAttribute(e,t){const n=e;if(!n||!n.attributes)return null;const r=n.attributes;for(let e of r)if(e.name==t)return e;return null}_getAttributeNum(e,t,n){if(null===e)return n;for(let r of e)if(r.name==t){let e=null!==r&&null!==r.value?r.value:n;return e instanceof Array&&(e=e[0]),"number"==typeof e?e:"string"==typeof e?parseInt(e):n}return n}_roundUp(e,t){return Math.ceil(t/e)*e}}function ui(e,t){const n=function(e){return Array.isArray(e)||Dn(e)?[...e,1,1].slice(0,3):function(e){return[e.width,e.height||1,e.depthOrArrayLayers||1]}(e)}(e),r=Math.max(...n.slice(0,"3d"===t?3:2));return 1+Math.log2(r)|0}si._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},si._textureTypes=Fr.any_texture_type.map((e=>e.name)),si._samplerTypes=Fr.sampler_type.map((e=>e.name));const li=new WeakMap;const ci=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function di(e){return Dn(e)||Array.isArray(e)||function(e){const t=e;return Dn(t.data)||Array.isArray(t.data)}(e)}function fi(e){switch(e){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...ci.entries()].map((([e,{formats:[t,n]}])=>[[t,e],[n,e]])).flat());const hi={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},pi=/([a-z]+)(\d+)([a-z]+)/;function mi(e){const[,t,n,r]=pi.exec(e),i=t.length,a=parseInt(n)/8;return{channels:t,numChannels:i,bytesPerChannel:a,bytesPerElement:i*a,Type:hi[`${n}${r}`]}}function gi(e,t,n,r={}){n.forEach(((n,i)=>{const a=[0,0,i+(r.baseArrayLayer||0)];if(di(n))!function(e,t,n,r){const i=function(e,t){if(Dn(e))return e;const{Type:n}=mi(t);return new n(e)}(n.data||n,t.format),a=function(e,t){return[e.width,e.height,e.depthOrArrayLayers].map((e=>Math.max(1,Math.floor(e/1))))}(t),{bytesPerElement:o}=mi(t.format),s=r.origin||[0,0,0];e.queue.writeTexture({texture:t,origin:s},i,{bytesPerRow:o*a[0],rowsPerImage:a[1]},a)}(e,t,n,{origin:a});else{const i=n,{flipY:o,premultipliedAlpha:s,colorSpace:u}=r;e.queue.copyExternalImageToTexture({source:i,flipY:o},{texture:t,premultipliedAlpha:s,colorSpace:u,origin:a},vi(i,r))}})),t.mipLevelCount>1&&function(e,t,n){let r=li.get(e);r||(r={pipelineByFormatAndView:{},moduleByViewType:{}},li.set(e,r));let{sampler:i,uniformBuffer:a,uniformValues:o}=r;const{pipelineByFormatAndView:s,moduleByViewType:u}=r;n=n||function(e){switch(e.dimension){case"1d":return"1d";case"3d":return"3d";default:return e.depthOrArrayLayers>1?"2d-array":"2d"}}(t);let l=u[n];if(!l){const t=function(e){let t,n;switch(e){case"2d":t="texture_2d<f32>",n="textureSample(ourTexture, ourSampler, fsInput.texcoord)";break;case"2d-array":t="texture_2d_array<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              fsInput.texcoord,\n              uni.layer)";break;case"cube":t="texture_cube<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1))";break;case"cube-array":t="texture_cube_array<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1), uni.layer)";break;default:throw new Error(`unsupported view: ${e}`)}return`\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        struct Uniforms {\n          layer: u32,\n        };\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: ${t};\n        @group(0) @binding(2) var<uniform> uni: Uniforms;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          _ = uni.layer; // make sure this is used so all pipelines have the same bindings\n          return ${n};\n        }\n      `}(n);l=e.createShaderModule({label:`mip level generation for ${n}`,code:t}),u[n]=l}i||(i=e.createSampler({minFilter:"linear",magFilter:"linear"}),a=e.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),o=new Uint32Array(1),Object.assign(r,{sampler:i,uniformBuffer:a,uniformValues:o}));const c=`${t.format}.${n}`;s[c]||(s[c]=e.createRenderPipeline({label:`mip level generator pipeline for ${n}`,layout:"auto",vertex:{module:l,entryPoint:"vs"},fragment:{module:l,entryPoint:"fs",targets:[{format:t.format}]}}));const d=s[c];for(let r=1;r<t.mipLevelCount;++r)for(let s=0;s<t.depthOrArrayLayers;++s){o[0]=s,e.queue.writeBuffer(a,0,o);const u=e.createBindGroup({layout:d.getBindGroupLayout(0),entries:[{binding:0,resource:i},{binding:1,resource:t.createView({dimension:n,baseMipLevel:r-1,mipLevelCount:1})},{binding:2,resource:{buffer:a}}]}),l={label:"mip gen renderPass",colorAttachments:[{view:t.createView({dimension:"2d",baseMipLevel:r,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},c=e.createCommandEncoder({label:"mip gen encoder"}),f=c.beginRenderPass(l);f.setPipeline(d),f.setBindGroup(0,u),f.draw(3),f.end();const h=c.finish();e.queue.submit([h])}}(e,t)}function vi(e,t){if(e instanceof HTMLVideoElement)return[e.videoWidth,e.videoHeight,1];{const n=e,{width:r,height:i}=n;if(r>0&&i>0&&!di(e))return[r,i,1];const a=t.format||"rgba8unorm",{bytesPerElement:o,bytesPerChannel:s}=mi(a),u=Dn(e)||Array.isArray(e)?e:e.data;return function(e,t,n,r="2d"){if(n%1!=0)throw new Error("can't guess dimensions");if(e||t){if(t){if(!e&&(e=n/t)%1)throw new Error("can't guess dimensions")}else if((t=n/e)%1)throw new Error("can't guess dimensions")}else{const i=Math.sqrt(n/("cube"===r?6:1));i%1==0?(e=i,t=i):(e=n,t=1)}const i=n/e/t;if(i%1)throw new Error("can't guess dimensions");return[e,t,i]}(r,i,(Dn(u)?u.byteLength:u.length*s)/o)}}async function xi(e,t,n={}){const r=await Promise.all(t.map((e=>async function(e,t={}){const n=await fetch(e),r=await n.blob(),i={...t,...void 0!==t.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(r,i)}(e))));return function(e,t,n={}){const r=vi(t[0],n);r[2]=r[2]>1?r[2]:t.length;const i=e.createTexture({dimension:fi(n.dimension),format:n.format||"rgba8unorm",mipLevelCount:n.mipLevelCount?n.mipLevelCount:n.mips?ui(r):1,size:r,usage:(n.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return gi(e,i,t,n),i}(e,r,n)}async function yi(e,t,n={}){return xi(e,[t],n)}const bi=async(e,t,n)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");const r=await(async(e,t)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");const n=e.createTexture({size:{width:t.width,height:t.height,depthOrArrayLayers:t.depthOrArrayLayers},format:t.format,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:t.mipLevelCount}),r=e.createCommandEncoder();for(let e=0;e<t.mipLevelCount;e++)for(let i=0;i<t.depthOrArrayLayers>>e;i++)r.copyTextureToTexture({texture:t,mipLevel:e,origin:{x:0,y:0,z:i}},{texture:n,mipLevel:e,origin:{x:0,y:0,z:i}},{width:t.width>>e,height:t.height>>e,depthOrArrayLayers:1});return e.queue.submit([r.finish()]),await e.queue.onSubmittedWorkDone(),n})(e,t),i=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),a=e.createBuffer({size:256*t.depthOrArrayLayers,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.UNIFORM,label:"z indices buffer"}),o=Array.from({length:t.depthOrArrayLayers},((e,t)=>t));for(let t=0;t<o.length;t++)e.queue.writeBuffer(a,256*t,new Uint32Array([o[t]]).buffer);const s=e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[i]}),vertex:{module:e.createShaderModule({code:"\n          struct VertexOutput {\n            @builtin(position) Position : vec4<f32>,\n          }\n          const pos = array(\n              vec2( 1.0,  1.0),\n              vec2( 1.0, -1.0),\n              vec2(-1.0, -1.0),\n              vec2( 1.0,  1.0),\n              vec2(-1.0, -1.0),\n              vec2(-1.0,  1.0),\n            );\n          @vertex\n          fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n            var output : VertexOutput;\n            output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n            return output;\n          }"}),entryPoint:"vertex_main"},fragment:{module:e.createShaderModule({code:"\n          @group(0) @binding(0) var voxels : texture_3d<f32>;\n          @group(0) @binding(1) var<uniform> zIndex: u32;\n          @fragment\nfn fragment_main(@builtin(position) position : vec4<f32>) -> @location(0) vec4<f32> {\n  let srcTexel = vec3(vec2<u32>(position.xy),zIndex);\n  var colours = array<f32, 8>();\n  var isOctantEmpty = true;\n  for(var x = u32(0); x < 2; x++){\n    for(var y = u32(0); y < 2; y++){\n      for(var z = u32(0); z < 2; z++){\n        let voxelX = srcTexel.x * 2 + x;\n        let voxelY = srcTexel.y * 2 + y;\n        let voxelZ = srcTexel.z * 2 + z;\n        var voxelId = vec3<u32>(voxelX,voxelY,voxelZ);\n        var voxel = textureLoad(voxels,voxelId,0).r;\n        if(voxel > 0){\n          var index = x + y * 2 + z * 4;\n          colours[index] = voxel;\n          isOctantEmpty = false;\n        }\n      }\n    }\n  }\n\n  // If all voxels in the octant are empty, keep it blank\n  if(isOctantEmpty){\n    discard;\n  }\n\n  // Get the most common colour in the octant\n  var mostCommonColour = f32(0);\n  var mostCommonColourCount = u32(0);\n  for(var i = u32(0); i < 8; i = i + 1u){\n    var colour = colours[i];\n    var count = u32(0);\n    for(var j = u32(0); j < 8; j = j + 1u){\n      if(colour > 0 && colour == colours[j]){\n        count++;\n      }\n    }\n    if(count > mostCommonColourCount){\n      mostCommonColour = colour;\n      mostCommonColourCount = count;\n    }\n  }\n\n  return vec4(mostCommonColour, 0,0,0);\n}\n\n\n        "}),entryPoint:"fragment_main",targets:[{format:t.format}]}}),u=e.createCommandEncoder(),l=Math.max(1,t.depthOrArrayLayers>>n);for(let o=0;o<l;o++){const l=e.createBindGroup({layout:i,entries:[{binding:0,resource:t.createView({label:`${n} mip level of volume texture`,dimension:"3d",baseMipLevel:n-1,mipLevelCount:1})},{binding:1,resource:{buffer:a,offset:256*o,size:4}}]}),c=u.beginRenderPass({colorAttachments:[{view:r.createView({label:"volume slice for rendering mips",baseArrayLayer:o,arrayLayerCount:1,baseMipLevel:n,mipLevelCount:1,dimension:"2d-array"}),loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});c.setPipeline(s),c.setBindGroup(0,l),c.draw(6),c.end()}return e.queue.submit([u.finish()]),await e.queue.onSubmittedWorkDone(),await(async(e,t)=>{if("2d"!==t.dimension)throw new Error("Input texture should be a 2D texture");const n=e.createTexture({size:{width:t.width,height:t.height,depthOrArrayLayers:t.depthOrArrayLayers},format:t.format,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d",mipLevelCount:t.mipLevelCount}),r=e.createCommandEncoder();for(let e=0;e<t.mipLevelCount;e++)for(let i=0;i<t.depthOrArrayLayers>>e;i++)r.copyTextureToTexture({texture:t,mipLevel:e,origin:{x:0,y:0,z:i}},{texture:n,mipLevel:e,origin:{x:0,y:0,z:i}},{width:t.width>>e,height:t.height>>e,depthOrArrayLayers:1});return e.queue.submit([r.finish()]),await e.queue.onSubmittedWorkDone(),n})(e,r)},_i={format:o,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d"},wi=(e,t)=>Math.ceil(e/t)*t,Ti=Math.pow(2,3),Si=Ti,Pi=256;class ki{#d={};#f;#h;#p;#m;#g;constructor(e){this.#p=e,this.#f=e.createTexture({size:{width:Si,height:Si,depthOrArrayLayers:Si},..._i,label:"Volume atlas containing ",mipLevelCount:4}),this.#h=e.createTexture({size:{width:Pi,height:1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,label:"Palette texture",mipLevelCount:1}),this.#m=this.#f.createView(),this.#g=this.#h.createView()}get dictionary(){return this.#d}addVolume=async(e,t,n)=>{if(this.#d[n])throw new Error(`Error adding volume to atlas: volume with label ${n} already exists`);const r=this.#p.createCommandEncoder(),{width:i,height:a,depthOrArrayLayers:o}=e,s=wi(i,Ti),u=wi(a,Ti),l=wi(o,Ti),c=this.#f.width+s;if(c>this.#p.limits.maxTextureDimension3D)throw new Error(`Error adding volume to atlas: adding volume would exceed device max texture dimension of ${this.#p.limits.maxTextureDimension3D}`);const d=Math.max(this.#f.height,u),f=Math.max(this.#f.depthOrArrayLayers,l),h=this.#p.createTexture({size:{width:c,height:d,depthOrArrayLayers:f},mipLevelCount:this.#f.mipLevelCount,..._i,label:`${this.#f.label}, ${e.label||"unnamed volume"}`}),p=this.#f.width;r.copyTextureToTexture({texture:this.#f},{texture:h},{width:this.#f.width,height:this.#f.height,depthOrArrayLayers:this.#f.depthOrArrayLayers}),r.copyTextureToTexture({texture:e,mipLevel:0,origin:{x:0,y:0,z:0}},{texture:h,mipLevel:0,origin:{x:p,y:0,z:0}},{width:e.width,height:e.height,depthOrArrayLayers:e.depthOrArrayLayers}),this.#f=h;const m=this.#h.height;this.#d[n]={location:[p,0,0],size:[i,a,o],paletteIndex:m};const g=this.#p.createTexture({size:{width:Pi,height:this.#h.height+1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,label:"Palette texture",mipLevelCount:1});r.copyTextureToTexture({texture:this.#h},{texture:g},{width:Pi,height:this.#h.height,depthOrArrayLayers:1}),r.copyTextureToTexture({texture:t},{texture:g,origin:{x:0,y:m,z:0}},{width:Pi,height:1,depthOrArrayLayers:1}),this.#h=g,this.#p.queue.submit([r.finish()]),await this.#p.queue.onSubmittedWorkDone(),this.#f=await(async(e,t)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");let n=t;for(let r=1;r<t.mipLevelCount;r++)n=await bi(e,n,r);return n})(this.#p,this.#f),this.#m=this.#f.createView(),this.#g=this.#h.createView()};get atlasTextureView(){return this.#m}get paletteTextureView(){return this.#g}}const Oi="const MAX_COARSE_RAY_STEPS = 64;\n\nfn rayMarchCoarse(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>) -> bool {\n    let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\n    var voxelSize = vec3<f32>(1.0);\n    var objectPos = objectRayOrigin;\n    var currentIndex = vec3<i32>(round(objectPos));\n    var tDelta = voxelSize / abs(objectRayDirection);\n    var tIncrement = min(tDelta.x, min(tDelta.y, tDelta.z));\n\n    for(var i = 0; i < MAX_COARSE_RAY_STEPS; i++)\n    {\n      let samplePosition = objectPos + voxelObject.atlasLocation;\n      let uv = samplePosition / vec3<f32>(textureDimensions(voxels));\n      let mipSample0 = textureSampleLevel(voxels, nearestSampler, uv, 0.0);\n\n      if(mipSample0.a > 0.0){\n          return true;\n      }\n\n      objectPos += objectRayDirection * tIncrement;\n      currentIndex = vec3<i32>(round(objectPos));\n//      if(!isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\n//          break;\n//      }\n    }\n    return false;\n}\n\nfn rayMarchTransformedCoarse(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> bool {\n    var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\n    let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\n    return rayMarchCoarse(voxelObject, objectRayDirection, objectRayOrigin);\n}\n\n// Used for shadows, return first hit\nfn rayMarchBVHCoarse(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, maxDistance: f32) -> bool {\n  // Create a stack to store the nodes to visit\n      var stack = stack_new();\n      stack_push(&stack, 0);\n\n      var iterations = 0;\n      var nodeIndex = 0;\n\n      while (stack.head > 0u && iterations < 32) {\n        let node = bvhNodes[nodeIndex];\n        if(node.objectCount == 0){\n          nodeIndex = stack_pop(&stack);\n        }\n        // valid leaf, raymarch it\n        else if(node.objectCount == 1){\n            // Raymarch the voxel object if it's a leaf node\n            let voxelObject = voxelObjects[node.leftIndex]; // left index represents the voxel object index for leaf nodes\n            let AABBDist = getDistanceToNode(rayOrigin, rayDirection, node);\n            if(rayMarchTransformedCoarse(voxelObject, rayDirection, rayOrigin + rayDirection * AABBDist)){\n              return true;\n            }\n            // Pop the stack and continue\n            nodeIndex = stack_pop(&stack);\n        }\n        else{\n          let leftDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.leftIndex]);\n          let rightDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.rightIndex]);\n          let hitLeft = leftDist >= 0.0 && leftDist < maxDistance;\n          let hitRight = rightDist >= 0.0 && rightDist < maxDistance;\n          if(hitLeft){\n            var nearIndex = node.leftIndex;\n            // We hit both left and right, choose the closest one\n            if(hitRight){\n              if(leftDist < rightDist){\n                // left is closer, push right to stack\n                stack_push(&stack, node.rightIndex);\n              } else {\n                // right is closer, push left to stack\n                stack_push(&stack, node.leftIndex);\n                nearIndex = node.rightIndex;\n              }\n            }\n            nodeIndex = nearIndex;\n          }\n          // We only hit the right Node\n          else if(hitRight){\n            nodeIndex = node.rightIndex;\n          }\n          // We didn't hit any node, pop the stack\n          else{\n            nodeIndex = stack_pop(&stack);\n          }\n        }\n\n        iterations += 1;\n      }\n\n      return false;\n}",Mi="// Constants\nconst infinity : f32 = 99999999.0;\n\n// Utility functions\nfn degreesToRadians(degrees : f32) -> f32 {\n    return degrees * (3.1415926535897932385 / 180.0);\n}\n\nfn unitVector(v : vec3<f32>) -> vec3<f32> {\n    return v / length(v);\n}\n\nfn lengthSquared(v : vec3<f32>) -> f32 {\n    return v.x * v.x + v.y * v.y + v.z * v.z;\n}\n\nfn random(co : vec2<f32>) -> f32 {\n    return fract(sin(dot(co, vec2<f32>(12.9898, 78.233))) * 43758.5453);\n}\n\nfn randomMinMax(co : vec2<f32>, min : f32, max : f32) -> f32 {\n    return min + (max - min) * random(co);\n}\n\nfn randomFloat3(co : vec2<f32>) -> vec3<f32> {\n    return vec3<f32>(random(co), random(co * 2.0), random(co * 3.0));\n}\n\nfn randomFloat3MinMax(co : vec2<f32>, min : f32, max : f32) -> vec3<f32> {\n    return vec3<f32>(randomMinMax(co, min, max), randomMinMax(co * 2.0, min, max), randomMinMax(co * 3.0, min, max));\n}\n\nfn randomInUnitSphere(co : vec2<f32>) -> vec3<f32> {\n    var p : vec3<f32> = randomFloat3MinMax(co, -1.0, 1.0);\n    while (lengthSquared(p) < 1.0) {\n        p = randomFloat3MinMax(co, -1.0, 1.0);\n    }\n    return p;\n}\n\nfn randomInUnitDisk(seed : vec2<f32>) -> vec2<f32> {\n    let r = sqrt(random(seed));\n    let theta = 2.0 * 3.14159265359 * random(vec2<f32>(seed.y, seed.x));\n    return vec2<f32>(cos(theta), sin(theta)) * r;\n}\n\nfn randomInPlanarUnitDisk(seed : vec2<f32>, normal: vec3<f32>) -> vec3<f32> {\n    let disk = randomInUnitDisk(seed);\n    var diskNormal = cross(normal, vec3<f32>(0.0, 1.0, 0.0));\n    if (length(diskNormal) < 0.01) {\n        diskNormal = cross(normal, vec3<f32>(1.0, 0.0, 0.0));\n    }\n    diskNormal = normalize(diskNormal);\n    let diskTangent = cross(diskNormal, normal);\n    return disk.x * diskTangent + disk.y * diskNormal;\n}\n\nfn reflect(v : vec3<f32>, n : vec3<f32>) -> vec3<f32> {\n    return v - 2.0 * dot(v, n) * n;\n}\n\nfn randomUnitVector(co : vec2<f32>) -> vec3<f32> {\n    return unitVector(randomInUnitSphere(co));\n}\n\nfn nearZero(e : vec3<f32>) -> bool {\n    const s : f32 = 1e-8;\n    return (abs(e.x) < s) && (abs(e.y) < s) && (abs(e.z) < s);\n}\n\nfn randomInHemisphere(co : vec2<f32>, normal : vec3<f32>) -> vec3<f32> {\n    let inUnitSphere = randomUnitVector(co);\n    if (dot(inUnitSphere, normal) > 0.0) {\n        return inUnitSphere;\n    }\n    return -inUnitSphere;\n}\n\nfn randomAlongVector(co : vec2<f32>, direction : vec3<f32>) -> vec3<f32> {\n    return normalize(direction) * random(co);\n}\n\n// Function to perturb the normal vector within the hemisphere\nfn perturbDirection(normal: vec3<f32>, scatterAmount: f32, co: vec2<f32>) -> vec3<f32> {\n    // Generate a random vector in a hemisphere\n    let hemisphereVector : vec3<f32> = randomInHemisphere(co, normal);\n\n    // Combine the perturbation with the original normal\n    let perturbedDir : vec3<f32> = normalize(normal + scatterAmount * hemisphereVector);\n\n    return perturbedDir;\n}\n\nfn permute4(x: vec4<f32>) -> vec4<f32> { return ((x * 34. + 1.) * x) % vec4<f32>(289.); }\nfn taylorInvSqrt4(r: vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r; }\nfn fade3(t: vec3<f32>) -> vec3<f32> { return t * t * t * (t * (t * 6. - 15.) + 10.); }\n\nfn perlinNoise3(P: vec3<f32>) -> f32 {\n    var Pi0 : vec3<f32> = floor(P); // Integer part for indexing\n    var Pi1 : vec3<f32> = Pi0 + vec3<f32>(1.); // Integer part + 1\n    Pi0 = Pi0 % vec3<f32>(289.);\n    Pi1 = Pi1 % vec3<f32>(289.);\n    let Pf0 = fract(P); // Fractional part for interpolation\n    let Pf1 = Pf0 - vec3<f32>(1.); // Fractional part - 1.\n    let ix = vec4<f32>(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    let iy = vec4<f32>(Pi0.yy, Pi1.yy);\n    let iz0 = Pi0.zzzz;\n    let iz1 = Pi1.zzzz;\n\n    let ixy = permute4(permute4(ix) + iy);\n    let ixy0 = permute4(ixy + iz0);\n    let ixy1 = permute4(ixy + iz1);\n\n    var gx0: vec4<f32> = ixy0 / 7.;\n    var gy0: vec4<f32> = fract(floor(gx0) / 7.) - 0.5;\n    gx0 = fract(gx0);\n    var gz0: vec4<f32> = vec4<f32>(0.5) - abs(gx0) - abs(gy0);\n    var sz0: vec4<f32> = step(gz0, vec4<f32>(0.));\n    gx0 = gx0 + sz0 * (step(vec4<f32>(0.), gx0) - 0.5);\n    gy0 = gy0 + sz0 * (step(vec4<f32>(0.), gy0) - 0.5);\n\n    var gx1: vec4<f32> = ixy1 / 7.;\n    var gy1: vec4<f32> = fract(floor(gx1) / 7.) - 0.5;\n    gx1 = fract(gx1);\n    var gz1: vec4<f32> = vec4<f32>(0.5) - abs(gx1) - abs(gy1);\n    var sz1: vec4<f32> = step(gz1, vec4<f32>(0.));\n    gx1 = gx1 - sz1 * (step(vec4<f32>(0.), gx1) - 0.5);\n    gy1 = gy1 - sz1 * (step(vec4<f32>(0.), gy1) - 0.5);\n\n    var g000: vec3<f32> = vec3<f32>(gx0.x, gy0.x, gz0.x);\n    var g100: vec3<f32> = vec3<f32>(gx0.y, gy0.y, gz0.y);\n    var g010: vec3<f32> = vec3<f32>(gx0.z, gy0.z, gz0.z);\n    var g110: vec3<f32> = vec3<f32>(gx0.w, gy0.w, gz0.w);\n    var g001: vec3<f32> = vec3<f32>(gx1.x, gy1.x, gz1.x);\n    var g101: vec3<f32> = vec3<f32>(gx1.y, gy1.y, gz1.y);\n    var g011: vec3<f32> = vec3<f32>(gx1.z, gy1.z, gz1.z);\n    var g111: vec3<f32> = vec3<f32>(gx1.w, gy1.w, gz1.w);\n\n    let norm0 = taylorInvSqrt4(\n        vec4<f32>(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 = g000 * norm0.x;\n    g010 = g010 * norm0.y;\n    g100 = g100 * norm0.z;\n    g110 = g110 * norm0.w;\n    let norm1 = taylorInvSqrt4(\n        vec4<f32>(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 = g001 * norm1.x;\n    g011 = g011 * norm1.y;\n    g101 = g101 * norm1.z;\n    g111 = g111 * norm1.w;\n\n    let n000 = dot(g000, Pf0);\n    let n100 = dot(g100, vec3<f32>(Pf1.x, Pf0.yz));\n    let n010 = dot(g010, vec3<f32>(Pf0.x, Pf1.y, Pf0.z));\n    let n110 = dot(g110, vec3<f32>(Pf1.xy, Pf0.z));\n    let n001 = dot(g001, vec3<f32>(Pf0.xy, Pf1.z));\n    let n101 = dot(g101, vec3<f32>(Pf1.x, Pf0.y, Pf1.z));\n    let n011 = dot(g011, vec3<f32>(Pf0.x, Pf1.yz));\n    let n111 = dot(g111, Pf1);\n\n    var fade_xyz: vec3<f32> = fade3(Pf0);\n    let temp = vec4<f32>(f32(fade_xyz.z)); // simplify after chrome bug fix\n    let n_z = mix(vec4<f32>(n000, n100, n010, n110), vec4<f32>(n001, n101, n011, n111), temp);\n    let n_yz = mix(n_z.xy, n_z.zw, vec2f(f32(fade_xyz.y))); // simplify after chrome bug fix\n    let n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n    return 2.2 * n_xyz;\n}",Ei="struct ViewProjectionMatrices {\n  viewProjection : mat4x4<f32>,\n  previousViewProjection : mat4x4<f32>,\n  inverseViewProjection : mat4x4<f32>,\n  previousInverseViewProjection : mat4x4<f32>,\n  projection : mat4x4<f32>,\n  inverseProjection: mat4x4<f32>\n};",Ii={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},Ui={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},Ai={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:s}},Ci={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},Di={binding:4,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},Gi={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},Ri={binding:6,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},Li={binding:7,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},zi={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},Bi={binding:9,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},Ni={binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},Vi={binding:11,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},ji={binding:12,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},Fi={binding:13,visibility:GPUShaderStage.COMPUTE,sampler:{}},qi={binding:14,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},Hi={binding:15,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},Wi={binding:16,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},Yi={binding:17,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},$i={binding:18,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}},Xi={binding:19,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},Zi="diffuse",Qi=[Ii,Ui,Ai,Ci,Di,Gi,Ri,Li,zi,Ni,Vi,ji,Fi,qi,Hi,Wi,Yi,$i,Xi],Ki=async()=>{const e=Ga.createBindGroupLayout({entries:Qi}),t=Ga.createBindGroupLayout({entries:[...Qi,Bi]}),n=`\nstruct Time {\n  frame: u32,\n  deltaTime: f32,\n  elapsed: f32\n};\n\n@group(0) @binding(0) var depthTex : texture_2d<f32>;\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\n@group(0) @binding(2) var outputTex : texture_storage_2d<${s}, write>;\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(4) var voxels : texture_3d<f32>;\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(6) var<storage> voxelObjects : array<VoxelObject>;\n@group(0) @binding(7) var<uniform> sunDirection : vec3<f32>;\n@group(0) @binding(8) var linearSampler : sampler;\n@group(0) @binding(9) var intermediaryTexture : texture_2d<f32>;\n@group(0) @binding(10) var normalTex : texture_2d<f32>;\n@group(0) @binding(11) var blueNoiseTex : texture_2d<f32>;\n@group(0) @binding(12) var<uniform> time : Time;\n@group(0) @binding(13) var nearestSampler : sampler;\n@group(0) @binding(14) var velocityAndWaterTex : texture_2d<f32>;\n@group(0) @binding(15) var<storage> bvhNodes: array<BVHNode>;\n@group(0) @binding(16) var worldPosTex : texture_2d<f32>;\n@group(0) @binding(17) var albedoTex : texture_2d<f32>;\n@group(0) @binding(18) var skyCube : texture_cube<f32>;\n@group(0) @binding(19) var previousTex : texture_2d<f32>;\n\nconst DOWNSCALE = 1;\n${Ei}\n${Mi}\n${a}\n${c}\n${d}\n${f}\n${Oi}\n\n\nfn diffuseRay(worldPos: vec3<f32>, shadowRayDirection: vec3<f32>, normal: vec3<f32>) -> bool {\n  let rayOrigin = worldPos + shadowRayDirection * 0.33; // To adccount for self occlusion of higher mip\n  return rayMarchBVHShadows(rayOrigin, shadowRayDirection, 1).hit;\n}\n\nfn shadowRay(worldPos: vec3<f32>, shadowRayDirection: vec3<f32>, normal: vec3<f32>) -> bool {\n  let rayOrigin = worldPos + normal * 0.33; // To adccount for self occlusion of higher mip\n  return rayMarchBVHShadows(rayOrigin, shadowRayDirection, 1).hit;\n}\n\n\nconst SUN_COLOR = vec3(0.6,0.5,0.4) * 200.0;\nconst MOON_COLOR = vec3<f32>(0.5, 0.5, 1.0);\nconst SUBPIXEL_SAMPLE_POSITIONS: array<vec2<f32>, 8> = array<vec2<f32>, 8>(\n  vec2<f32>(0.25, 0.25),\n  vec2<f32>(0.75, 0.25),\n  vec2<f32>(0.25, 0.75),\n  vec2<f32>(0.75, 0.75),\n  vec2<f32>(0.125, 0.125),\n  vec2<f32>(0.375, 0.125),\n  vec2<f32>(0.625, 0.125),\n  vec2<f32>(0.875, 0.125)\n);\nconst BLUE_NOISE_SIZE = 511;\nconst SUN_DIRECTION: vec3<f32> = vec3<f32>(1.0,-1.0,-1.0);\nconst SKY_COLOUR: vec3<f32> = vec3<f32>(0.6, 0.8, 0.9);\nconst SHADOW_ACNE_OFFSET: f32 = 0.005;\nconst SCATTER_AMOUNT: f32 = 0.05;\nconst POSITION_SCATTER_AMOUNT: f32 = 0.25;\n\nfn blinnPhong(normal: vec3<f32>, lightDirection: vec3<f32>, viewDirection: vec3<f32>, specularStrength: f32, shininess: f32, lightColour: vec3<f32>) -> vec3<f32> {\n  let halfDirection = normalize(lightDirection + viewDirection);\n  let diffuse = max(dot(normal, lightDirection), 0.0);\n  let specular = pow(max(dot(normal, halfDirection), 0.0), shininess);\n  return (diffuse + specular * specularStrength) * lightColour;\n}\n\nstruct Light {\n  direction: vec3<f32>,\n  colour: vec3<f32>,\n};\n\n// Function to remap the blue noise value to a sample index\nfn remapToSampleIndex(blueNoiseValue: f32, numSamples: u32) -> u32 {\n    // Map blue noise value to the index range [0, numSamples)\n    return u32(blueNoiseValue * f32(numSamples));\n}\n\nfn randomInCosineWeightedHemisphere(r: vec2<f32>, normal: vec3<f32>) -> vec3<f32> {\n  let r1 = 2.0 * PI * r.x;\n  let r2 = r.y;\n  let r2s = sqrt(r2);\n  let w = normal;\n  let u = normalize(cross((select(vec3<f32>(1.0, 0.0, 0.0), vec3<f32>(0.0, 1.0, 0.0),abs(w.x) > 0.1)), w));\n  let v = cross(w, u);\n  return normalize(u * cos(r1) * r2s + v * sin(r1) * r2s + w * sqrt(1.0 - r2));\n}\n\nconst SAMPLES_PER_PIXEL = 1u;\nconst SAMPLE_OFFSETS: array<vec2<i32>, 4> = array<vec2<i32>, 4>(\n  vec2<i32>(0, 0),\n  vec2<i32>(1, 1),\n  vec2<i32>(0, 1),\n  vec2<i32>(1, 0),\n);\n\n/** alternate frame checkerboard pattern\n  0,1\n  1,0\n\n  then\n  1,0\n  0,1\n*/\n@compute @workgroup_size(8, 8, 1)\nfn main(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n) {\n  let pixel = vec2<i32>(GlobalInvocationID.xy);\n  let outputPixel = pixel;\n  var normalSample = textureLoad(normalTex, pixel, 0).rgb;\n  var worldPos = textureLoad(worldPosTex, pixel, 0).rgb + normalSample * SHADOW_ACNE_OFFSET;\n  var samplePixel = outputPixel;\n  samplePixel.x += i32(time.frame) * 32;\n  samplePixel.y += i32(time.frame) * 16;\n  var blueNoisePixel = samplePixel % BLUE_NOISE_SIZE;\n  if(time.frame % 2 == 0){\n    blueNoisePixel.y = BLUE_NOISE_SIZE - blueNoisePixel.y;\n  }\n  if(time.frame % 3 == 0){\n    blueNoisePixel.x = BLUE_NOISE_SIZE - blueNoisePixel.x;\n  }\n  var r = textureLoad(blueNoiseTex, blueNoisePixel, 0).rg;\n  let sampleWorldPos = worldPos + randomInPlanarUnitDisk(r, normalSample) * POSITION_SCATTER_AMOUNT;\n\n  var radiance = vec3(0.1);\n\n  // Calculate the probability of sampling the sun\n  let sunProbability = max(dot(normalSample, sunDirection), 0.0);\n  // Calculate the probability of sampling the diffuse light\n  let diffuseProbability = 1.0 - sunProbability;\n\n  if(r.x < sunProbability){\n    let shadowRayDirection = sunDirection + randomInCosineWeightedHemisphere(r, sunDirection) * SCATTER_AMOUNT;\n    if(!shadowRay(sampleWorldPos, shadowRayDirection, normalSample)){\n      let viewDirection = normalize(cameraPosition - worldPos);\n      let diffuse = max(dot(normalSample, sunDirection), 0.0);\n      let specular = pow(max(dot(normalSample, normalize(sunDirection + viewDirection)), 0.0), 32.0);\n      let lightIntensity = SUN_COLOR * (diffuse + specular);\n      radiance += lightIntensity;\n    }\n  } else{\n     var diffuseDirection = randomInCosineWeightedHemisphere(r, normalSample);\n     if(!diffuseRay(sampleWorldPos, diffuseDirection, normalSample)){\n          let sky = textureSampleLevel(skyCube, linearSampler, diffuseDirection, 0.0);\n          radiance += clamp(vec3(sky.rgb), vec3(0.0), vec3(32.0));\n      }\n  }\n\n  textureStore(outputTex, outputPixel, vec4(radiance, 1.0));\n}\n\nconst PI = 3.1415926535897932384626433832795;\n\nfn polarToCartesian(angle: f32, radius: f32) -> vec2<f32> {\n  let radians = angle * PI / 180.0;\n  let x = radius * cos(radians);\n  let y = radius * sin(radians);\n  return vec2<f32>(x, y);\n}\n\nfn calculateVariance(neighborhood: array<vec3<f32>, 9>) -> f32 {\n    var mean: vec3<f32> = vec3<f32>(0.0);\n    var variance: f32 = 0.0;\n\n    // Calculate the mean\n    for (var i = 0; i < 9; i = i + 1) {\n        mean = mean + neighborhood[i];\n    }\n    mean = mean / 9.0;\n\n    // Calculate the variance\n    for (var i = 0; i < 9; i = i + 1) {\n        var diff = length(neighborhood[i] - mean);\n        variance = variance + diff * diff;\n    }\n\n    return variance / 9.0;\n}\n\nconst NEAR = 0.5;\nconst FAR = 10000.0;\n\nfn normaliseDepth(depth:f32) -> f32 {\n    return normaliseValue(NEAR, FAR, depth);\n}\n\nfn calculateVarianceDepth(neighborhood: array<f32, 9>) -> f32 {\n    var mean: f32 = 0.0;\n    var variance: f32 = 0.0;\n\n    // Calculate the mean\n    for (var i = 0; i < 9; i = i + 1) {\n        mean = mean + normaliseDepth(neighborhood[i]);\n    }\n    mean = mean / 9.0;\n\n    // Calculate the variance\n    for (var i = 0; i < 9; i = i + 1) {\n        let diff: f32 = neighborhood[i] - mean;\n        variance = variance + diff * diff;\n    }\n\n    return variance / 9.0;\n}\n\nconst NEIGHBORHOOD_SAMPLE_POSITIONS = array<vec2<i32>, 8>(\n    vec2<i32>(-1, -1),\n    vec2<i32>(0, -1),\n    vec2<i32>(1, -1),\n    vec2<i32>(-1, 0),\n    vec2<i32>(1, 0),\n    vec2<i32>(-1, 1),\n    vec2<i32>(0, 1),\n    vec2<i32>(1, 1)\n);\n\nconst DEPTH_SENSITIVITY = 100000.0;\nconst BLUR_RADIUS = 2.0;\nconst GOLDEN_RATIO = 1.61803398875;\n\n@compute @workgroup_size(8, 8, 1)\nfn denoise(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n) {\n  let texSize = textureDimensions(outputTex);\n  let texelSize = 1.0 / vec2<f32>(texSize);\n  let pixel = vec2<i32>(GlobalInvocationID.xy);\n  let uv = (vec2<f32>(pixel) + vec2(0.5)) / vec2<f32>(texSize);\n  let albedoSample = textureLoad(albedoTex, pixel, 0);\n  let normalRef = textureLoad(normalTex, pixel, 0).rgb;\n  let depthRef = normaliseDepth(textureLoad(depthTex, pixel, 0).r);\n  let shadowRef = textureLoad(intermediaryTexture, pixel, 0);\n\n  // Temporal sampling\n  let uvVelocity: vec2<f32> = textureLoad(velocityAndWaterTex, pixel, 0).xy;\n  let previousUv = uv - uvVelocity;\n  let previousPixel = vec2<i32>(previousUv * vec2<f32>(texSize));\n  var previousShadow = textureSampleLevel(previousTex, linearSampler, previousUv, 0);\n\n  var previousWeight = 0.7;\n\n  // Clamp the history sample to the min and max of the 3x3 neighborhood\n  var minCol = shadowRef;\n  var maxCol = shadowRef;\n  for (var x: i32 = -1; x <= 1; x = x + 1) {\n      for (var y: i32 = -1; y <= 1; y = y + 1) {\n          let neighbourPixel = clamp(vec2(i32(pixel.x) + x, i32(pixel.y) + y), vec2(0), vec2(i32(texSize.x - 1), i32(texSize.y - 1)));\n          let s = textureLoad(intermediaryTexture, neighbourPixel, 0);\n          minCol = min(minCol, s);\n          maxCol = max(maxCol, s);\n      }\n  }\n  previousShadow = clamp(previousShadow, minCol, maxCol);\n\n  // Get variance of the 3x3 neighborhood\n  let normalNeighbourhood = array<vec3<f32>, 9>(\n    normalRef,\n    textureLoad(normalTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[0], 0).rgb,\n    textureLoad(normalTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[1], 0).rgb,\n    textureLoad(normalTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[2], 0).rgb,\n    textureLoad(normalTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[3], 0).rgb,\n    textureLoad(normalTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[4], 0).rgb,\n    textureLoad(normalTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[5], 0).rgb,\n    textureLoad(normalTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[6], 0).rgb,\n    textureLoad(normalTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[7], 0).rgb\n  );\n\n  let depthNeighbourhood = array<f32, 9>(\n    depthRef,\n    textureLoad(depthTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[0], 0).r,\n    textureLoad(depthTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[1], 0).r,\n    textureLoad(depthTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[2], 0).r,\n    textureLoad(depthTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[3], 0).r,\n    textureLoad(depthTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[4], 0).r,\n    textureLoad(depthTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[5], 0).r,\n    textureLoad(depthTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[6], 0).r,\n    textureLoad(depthTex, vec2<i32>(pixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[7], 0).r\n  );\n\n  let previousShadowNeighbourhood = array<vec3<f32>, 9>(\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel), 0).rgb,\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[0], 0).rgb,\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[1], 0).rgb,\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[2], 0).rgb,\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[3], 0).rgb,\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[4], 0).rgb,\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[5], 0).rgb,\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[6], 0).rgb,\n    textureLoad(intermediaryTexture, vec2<i32>(previousPixel) + NEIGHBORHOOD_SAMPLE_POSITIONS[7], 0).rgb\n  );\n\n  let depthVariance = calculateVarianceDepth(depthNeighbourhood);\n  let normalVariance = calculateVariance(normalNeighbourhood);\n  let shadowVariance = clamp(calculateVariance(previousShadowNeighbourhood), 0.0, 1.0);\n\n  let normalisedNormalVariance = normalVariance * 0.5 + 0.5;\n\n  let normalisedDepthVariance = normaliseDepth(depthVariance);\n  let variance = normalisedNormalVariance * normalisedDepthVariance * shadowVariance;\n\n  // Bilateral blur\n  var outputColour = shadowRef;\n  var totalWeight = 1.0;\n  let golden_angle = 137.5; // The golden angle in degrees\n  let taps = clamp(i32(1.0 / sqrt(variance)), 0, 24);\n//  let taps = 64;\n\n  for(var i = 0; i <= taps; i++){\n      let angle = (golden_angle * f32(i)) % 360.0;\n      let radius = f32(i);\n      let sampleUV = polarToCartesian(angle, radius) * texelSize + uv;\n      let samplePixel = vec2<i32>(sampleUV * vec2<f32>(texSize));\n      let normalSample = textureSampleLevel(normalTex, nearestSampler, sampleUV, 0.0).rgb;\n      let depthLoad = normaliseDepth(textureLoad(depthTex, samplePixel, 0).r);\n      let shadowSample = textureSampleLevel(intermediaryTexture, linearSampler, sampleUV, 0.0);\n      let normalWeight = dot(normalSample, normalRef);\n      let depthWeight = clamp(1.0 - abs(depthRef - depthLoad) * DEPTH_SENSITIVITY, 0.0, 1.0);\n      let weight = depthWeight * normalWeight;\n      totalWeight += weight;\n      outputColour += shadowSample * weight;\n  }\n  outputColour /= totalWeight;\n  textureStore(outputTex, pixel, mix(outputColour, previousShadow, 0.5));\n//  textureStore(outputTex, pixel, vec4(f32(taps)));\n//  textureStore(outputTex, pixel, vec4(totalWeight / f32(taps)));\n//  textureStore(outputTex, pixel, vec4(shadowVariance * 64.0));\n}\n\n@compute @workgroup_size(8, 8, 1)\nfn composite(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n) {\n  let texSize = textureDimensions(outputTex);\n  let texelSize = 1.0 / vec2<f32>(texSize);\n  let pixel = vec2<i32>(GlobalInvocationID.xy);\n  let shadowRef = textureLoad(intermediaryTexture, pixel, 0);\n  let depthRef = normaliseDepth(textureLoad(depthTex, pixel, 0).r);\n  let normalRef = textureLoad(normalTex, pixel, 0).rgb;\n  let uv = (vec2<f32>(pixel) + vec2(0.5)) / vec2<f32>(texSize);\n\n  // Bilateral blur\n  var outputColour = shadowRef;\n  var totalWeight = 1.0;\n  let golden_angle = 137.5; // The golden angle in degrees\n  let taps = 8;\n\n   for(var i = 0; i <= taps; i++){\n       let angle = (golden_angle * f32(i)) % 360.0;\n       let radius = f32(i);\n       let sampleUV = polarToCartesian(angle, radius) * texelSize + uv;\n       let samplePixel = vec2<i32>(sampleUV * vec2<f32>(texSize));\n       let normalSample = textureSampleLevel(normalTex, nearestSampler, sampleUV, 0.0).rgb;\n       let depthLoad = normaliseDepth(textureLoad(depthTex, samplePixel, 0).r);\n       let shadowSample = textureSampleLevel(intermediaryTexture, linearSampler, sampleUV, 0.0);\n       let normalWeight = dot(normalSample, normalRef);\n       let depthWeight = clamp(1.0 - abs(depthRef - depthLoad) * DEPTH_SENSITIVITY, 0.0, 1.0);\n       let weight = depthWeight * normalWeight;\n       totalWeight += weight;\n       outputColour += shadowSample * weight;\n    }\n    outputColour /= totalWeight;\n\n  let albedoRef = textureLoad(albedoTex, pixel, 0);\n  textureStore(outputTex, pixel,outputColour * albedoRef);\n}\n`,r=Ga.createComputePipeline({label:Zi,layout:Ga.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:Ga.createShaderModule({code:n}),entryPoint:"main"}}),i=Ga.createComputePipeline({label:`${Zi} - composite`,layout:Ga.createPipelineLayout({bindGroupLayouts:[t]}),compute:{module:Ga.createShaderModule({code:n}),entryPoint:"composite"}}),o=Ga.createComputePipeline({label:`${Zi} - denoise`,layout:Ga.createPipelineLayout({bindGroupLayouts:[t]}),compute:{module:Ga.createShaderModule({code:n}),entryPoint:"denoise"}});let u,l,h,p,m,g,v,x,y=Ga.createSampler({magFilter:"nearest",minFilter:"nearest"}),b=Ga.createSampler({magFilter:"linear",minFilter:"linear"});return{render:({outputTextures:n,timestampWrites:a,viewProjectionMatricesBuffer:s,volumeAtlas:c,cameraPositionBuffer:d,transformationMatrixBuffer:f,sunDirectionBuffer:_,blueNoiseTextureView:w,timeBuffer:T,bvhBuffer:S,commandEncoder:P})=>{if(u||(u=Ga.createTexture({size:[n.finalTexture.width,n.finalTexture.height,1],format:n.finalTexture.format,usage:n.finalTexture.usage}),l=u.createView()),!h){const e={size:[n.finalTexture.width,n.finalTexture.height,1],format:n.finalTexture.format,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST};h=Ga.createTexture(e),m=Ga.createTexture(e),v=Ga.createTexture(e),g=m.createView(),p=h.createView(),x=v.createView()}P.copyTextureToTexture({texture:n.finalTexture.texture},{texture:u},{width:n.finalTexture.width,height:n.finalTexture.height,depthOrArrayLayers:1});const k=[{binding:0,resource:n.depthTexture.view},{binding:1,resource:l},{binding:3,resource:{buffer:s}},{binding:4,resource:c.atlasTextureView},{binding:5,resource:{buffer:d}},{binding:6,resource:{buffer:f}},{binding:7,resource:{buffer:_}},{binding:8,resource:b},{binding:10,resource:n.normalTexture.view},{binding:11,resource:w},{binding:12,resource:{buffer:T}},{binding:13,resource:y},{binding:14,resource:n.velocityTexture.view},{binding:15,resource:{buffer:S}},{binding:16,resource:n.worldPositionTexture.view},{binding:17,resource:n.albedoTexture.view},{binding:18,resource:n.skyTexture.createView({dimension:"cube"})},{binding:19,resource:x}],O={layout:e,entries:[...k,{binding:2,resource:p}]},M={layout:t,entries:[...k,{binding:2,resource:g},{binding:9,resource:p}]},E={layout:t,entries:[...k,{binding:2,resource:n.finalTexture.view},{binding:9,resource:g}]},I=Ga.createBindGroup(O),U=Ga.createBindGroup(E),A=Ga.createBindGroup(M),C=P.beginComputePass({timestampWrites:a});C.setPipeline(r),C.setBindGroup(0,I),C.dispatchWorkgroups(Math.ceil(h.width/8),Math.ceil(h.height/8)),C.setPipeline(o),C.setBindGroup(0,A),C.dispatchWorkgroups(Math.ceil(h.width/8),Math.ceil(h.height/8)),C.setPipeline(i),C.setBindGroup(0,U),C.dispatchWorkgroups(Math.ceil(n.finalTexture.width/8),Math.ceil(n.finalTexture.height/8)),C.end(),P.copyTextureToTexture({texture:m},{texture:v},{width:h.width,height:h.height,depthOrArrayLayers:1})},label:Zi}},Ji="const PI\t \t= 3.141592;\nconst EPSILON_NRM = 0.0001; // TODO: use resolution to normalize\n\nstruct Time {\n  frame: u32,\n  deltaTime: f32,\n  elapsed: f32\n};\n\n// Cloud parameters\nconst EARTH_RADIUS = 6300e3;\nconst CLOUD_START = 600.0;\nconst CLOUD_HEIGHT = 600.0;\nconst SUN_POWER = vec3(0.6,0.5,0.4) * 800.0;\nconst LOW_SCATTER = vec3(0.6,0.4,0.3)  * 10.0;\nconst MAX_DISTANCE = 10000.0;\n\n@group(0) @binding(0) var depth : texture_2d<f32>;\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\n@group(0) @binding(2) var outputTex : texture_storage_2d<rgba16float, write>;\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(4) var<uniform> sunDirection : vec3<f32>;\n@group(0) @binding(5) var<uniform> time : Time;\n@group(0) @binding(6) var blueNoiseTex : texture_2d<f32>;\n@group(0) @binding(7) var pebbleTex : texture_2d<f32>;\n@group(0) @binding(8) var linearSampler : sampler;\n@group(0) @binding(9) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(10) var worldPosTex : texture_2d<f32>;\n@group(1) @binding(1) var skyCube : texture_cube<f32>;\n@group(1) @binding(2) var skyCubeWrite : texture_storage_2d_array<rgba16float, write>;\n@group(1) @binding(3) var lastSkyCube : texture_2d_array<f32>;\n\n\n\n// Noise generation functions (by iq)\nfn hash( n: f32 ) -> f32\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfn hash2( p: vec2<f32> ) -> f32 {\n    return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123);\n}\n\nfn sampleBlueNoise( uv: vec2<f32> ) -> vec2<f32>\n{\n    return textureSampleLevel(blueNoiseTex, linearSampler, uv, 0.0).rg;\n}\n\nfn samplePebbles( uv: vec2<f32> ) -> f32\n{\n  return textureSampleLevel(pebbleTex, linearSampler, uv, 0.0).r;\n}\n\nfn noise3( x:vec3<f32> ) -> f32\n{\n  var p = floor(x);\n  var f = fract(x);\n  f = f*f*(3.0 - 2.0 *f);\n\tlet uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tlet rg = sampleBlueNoise((uv+0.5)/256.0).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nfn noise2( p:vec2<f32> ) -> f32\n{\n  let i = floor( p );\n  var f = fract( p );\n\tf = f*f*(3.0 - 2.0*f);\n  return -1.0+2.0*mix( mix( hash2( i + vec2(0.0,0.0) ),\n                     hash2( i + vec2(1.0,0.0) ), f.x),\n                mix( hash2( i + vec2(0.0,1.0) ),\n                     hash2( i + vec2(1.0,1.0) ), f.x), f.y);\n}\n\nfn fbm( p: vec3<f32> ) -> f32\n{\n    var pCopy = p;\n    let m = mat3x3<f32>( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\n    var f = 0.5000*noise3( pCopy );\n    pCopy = m*pCopy*2.02;\n    f += 0.2500*noise3( pCopy );\n    pCopy = m*pCopy*2.03;\n    f += 0.1250*noise3( pCopy );\n    return f;\n}\n\nfn intersectSphere(origin: vec3<f32>, dir: vec3<f32>, spherePos: vec3<f32>, sphereRad: f32) -> f32\n{\n\tlet oc = origin - spherePos;\n\tlet b = 2.0 * dot(dir, oc);\n\tlet c = dot(oc, oc) - sphereRad*sphereRad;\n\tlet disc = b * b - 4.0 * c;\n\tif (disc < 0.0)\n\t{\n\t  return -1.0;\n\t}\n\n//    float q = (-b + ((b < 0.0) ? -sqrt(disc) : sqrt(disc))) / 2.0;\n  let q = (-b + select(sqrt(disc), -sqrt(disc), b < 0.0)) / 2.0;\n\tvar t0 = q;\n\tvar t1 = c / q;\n\tif (t0 > t1) {\n\t\tvar temp = t0;\n\t\tt0 = t1;\n\t\tt1 = temp;\n\t}\n\tif (t1 < 0.0){\n\t  return -1.0;\n\t}\n\n  return select(t0, t1, t0 < 0.0);\n}\n\n// TODO: pass time buffer\n\n// return the density of clouds at a given point, and height\nfn clouds(p: vec3<f32>, t: f32) -> vec2<f32>\n{\n    var pCopy = p;\n    let atmoHeight = length(p - vec3(0.0, -EARTH_RADIUS, 0.0)) - EARTH_RADIUS;\n    let cloudHeight = clamp((atmoHeight-CLOUD_START)/(CLOUD_HEIGHT), 0.0, 1.0);\n    pCopy.z += t*40;\n    let largeWeather = clamp((samplePebbles(-0.00005*pCopy.zx) - 0.18)*5.0, 0.0, 2.0);\n    //let largeWeather = 1.0;\n    pCopy.x += t*32;\n    var weather = largeWeather*max(0.0,samplePebbles(0.0002*pCopy.zx) - 0.28)/0.72;\n    weather *= smoothstep(0.0, 0.5, cloudHeight) * smoothstep(1.0, 0.5, cloudHeight);\n    let cloudShape = pow(weather, 0.3+1.5*smoothstep(0.2, 0.5, cloudHeight));\n    if(cloudShape <= 0.0){\n        return vec2(0.0, cloudHeight);\n    }\n    pCopy.x += t*48;\n\t  var den= max(0.0, cloudShape - 0.7*fbm(p*.01));\n    if(den <= 0.0){\n        return vec2(0.0, cloudHeight);\n    }\n    pCopy.y += t*60;\n    den= max(0.0, den - 0.2*fbm(p*0.05));\n    return vec2(largeWeather*0.2*min(1.0, 5.0*den), cloudHeight);\n}\n\n// From https://www.shadertoy.com/view/4sjBDG\nfn numericalMieFit( costh: f32) -> f32\n{\n    // This function was optimized to minimize (delta*delta)/reference in order to capture\n    // the low intensity behavior.\n    var bestParams = array<f32, 10>();\n    bestParams[0]=9.805233e-06;\n    bestParams[1]=-6.500000e+01;\n    bestParams[2]=-5.500000e+01;\n    bestParams[3]=8.194068e-01;\n    bestParams[4]=1.388198e-01;\n    bestParams[5]=-8.370334e+01;\n    bestParams[6]=7.810083e+00;\n    bestParams[7]=2.054747e-03;\n    bestParams[8]=2.600563e-02;\n    bestParams[9]=-4.552125e-12;\n\n    var p1 = costh + bestParams[3];\n    let expValues = exp(vec4(bestParams[1] *costh+bestParams[2], bestParams[5] *p1*p1, bestParams[6] *costh, bestParams[9] *costh));\n    let expValWeight= vec4(bestParams[0], bestParams[4], bestParams[7], bestParams[8]);\n    return dot(expValues, expValWeight);\n}\n\nfn lightRay(p: vec3<f32>, phaseFunction: f32, dC: f32, mu: f32, sun_direction: vec3<f32>, cloudHeight: f32, t: f32) -> f32\n{\n    let nbSampleLight = 6;\n\t  let zMaxl         = 200.;\n    let stepL         = zMaxl/f32(nbSampleLight);\n    var pCopy = p;\n    var cloudHeightCopy = 0.0;\n\n    var lighRayDen = 0.0;\n    pCopy += sun_direction*stepL*hash(dot(pCopy, vec3(12.256, 2.646, 6.356)) + t * 4);\n    for(var j=0; j<nbSampleLight; j++)\n    {\n        let cloudsResult = clouds( pCopy + sun_direction*f32(j)*stepL, time.elapsed);\n        lighRayDen += cloudsResult.x;\n        cloudHeightCopy = cloudsResult.y;\n    }\n    let scatterAmount = mix(0.008, 1.0, smoothstep(0.96, 0.0, mu));\n    let beersLaw = exp(-stepL*lighRayDen)+0.5*scatterAmount*exp(-0.1*stepL*lighRayDen)+scatterAmount*0.4*exp(-0.02*stepL*lighRayDen);\n    return beersLaw * phaseFunction * mix(0.05 + 1.5*pow(min(1.0, dC*8.5), 0.3+5.5*cloudHeightCopy), 1.0, clamp(lighRayDen*0.4, 0.0, 1.0));\n}\n\n\nfn Schlick (f0: f32, VoH: f32 ) -> f32\n{\n\treturn f0+(1.-f0)*pow(1.0-VoH,5.0);\n}\n\nfn skyRay(org: vec3<f32>, dir: vec3<f32>,sun_direction: vec3<f32>) -> vec3<f32>\n{\n\n  let ATM_START = EARTH_RADIUS+CLOUD_START;\n\tlet ATM_END = ATM_START+CLOUD_HEIGHT;\n\n  let nbSample = 8;\n  var color = vec3(0.0);\n  let distToAtmStart = intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_START);\n  let distToAtmEnd = intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_END);\n  var p = org + distToAtmStart * dir;\n\n  let stepS = (distToAtmEnd-distToAtmStart) / f32(nbSample);\n  var T = 1.;\n  let mu = dot(sun_direction, dir);\n  let phaseFunction = numericalMieFit(mu);\n  p += dir*stepS*hash(dot(dir, vec3(12.256, 2.646, 6.356)) + time.elapsed * 4);\n  if(dir.y > 0.01){\n    for(var i=0; i<nbSample; i++)\n    {\n      if(distance(p, org) > MAX_DISTANCE){\n        break;\n      }\n      let cloudResult = clouds(p, time.elapsed);\n      let cloudHeight = cloudResult.y;\n      let density = cloudResult.x;\n      if(density>0.)\n      {\n        let intensity = lightRay(p, phaseFunction, density, mu, sun_direction, cloudHeight, time.elapsed);\n        let ambient = (0.5 + 0.6*cloudHeight)*vec3(0.2, 0.5, 1.0)*6.5 + vec3(0.8) * max(0.0, 1.0 - 2.0*cloudHeight);\n        var radiance = ambient + SUN_POWER*intensity;\n        radiance*=density;\n        color += T*(radiance - radiance * exp(-density * stepS)) / density;   // By Seb Hillaire\n        T *= exp(-density*stepS);\n        if( T <= 0.05){\n          break;\n        }\n      }\n      p += dir*stepS;\n    }\n  }\n\n  let pC = org + intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_END+1000.0)*dir;\n  // high clouds\n  color += T*vec3(3.0)*max(0.0, fbm(vec3(1.0, 1.0, 1.8)*pC*0.002) - 0.4);\n\n\tvar background = 6.0*mix(vec3(0.2, 0.52, 1.0), vec3(0.8, 0.95, 1.0), pow(0.5+0.5*mu, 15.0))+mix(vec3(3.5), vec3(0.0), min(1.0, 2.3*dir.y));\n  background += T*vec3(1e4*smoothstep(0.9998, 1.0, mu));\n  color += background * T;\n\n  return color;\n}\n\nfn D_GGX(r: f32,  NoH: f32, h: vec3<f32>) -> f32\n{\n    let a = NoH * r;\n    let k = r / ((1.0 - NoH * NoH) + a * a);\n    return k * k * (1.0 / PI);\n}\n\nfn HenyeyGreenstein(mu: f32, inG: f32) -> f32\n{\n\treturn (1.-inG * inG)/(pow(1.+inG*inG - 2.0 * inG*mu, 1.5)*4.0* PI);\n}\n\nfn tonemapACES( x: vec3<f32> ) -> vec3<f32>\n{\n    let a = 2.51;\n    let b = 0.03;\n    let c = 2.43;\n    let d = 0.59;\n    let e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\n\nfn sample_sky(rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> vec3<f32> {\n    return skyRay(rayOrigin, rayDirection,sunDirection);\n}\n\nstruct ViewProjectionMatrices {\n  viewProjection : mat4x4<f32>,\n  previousViewProjection : mat4x4<f32>,\n  inverseViewProjection : mat4x4<f32>,\n  previousInverseViewProjection : mat4x4<f32>,\n  projection : mat4x4<f32>,\n  inverseProjection: mat4x4<f32>\n};\n\n// Function to mimic the ease_out_expo function\nfn ease_out_expo(x: f32) -> f32 {\n    let t: f32 = x;\n    let b: f32 = 0.0;\n    let c: f32 = 1.0;\n    let d: f32 = 1.0; // Set the duration within the function\n    let intermediate_result: f32 = c * (-pow(2.0, -10.0 * t / d) + 1.0) + b;\n    return select(intermediate_result, b + c, t == d);\n}\n\nconst SKY_COLOUR: vec3<f32> = vec3<f32>(0.6, 0.8, 0.9);\nconst START_DISTANCE: f32 = 0.0;\nconst FOG_DENSITY: f32 = 0.01;\nconst NEAR: f32 = 0.5;\nconst FAR: f32 = 10000.0;\n\nfn rotateY(v: vec3<f32>, angle: f32) -> vec3<f32> {\n    let s = sin(angle);\n    let c = cos(angle);\n    return vec3<f32>(\n        v.x * c - v.z * s,\n        v.y,\n        v.x * s + v.z * c\n    );\n}\n\nfn rotateX(v: vec3<f32>, angle: f32) -> vec3<f32> {\n    let s = sin(angle);\n    let c = cos(angle);\n    return vec3<f32>(\n        v.x,\n        v.y * c - v.z * s,\n        v.y * s + v.z * c\n    );\n}\n\n// Rotate ray around the y axis, incrementally increasing the x rotation to form a spiral patttern\nfn spiralBlurCubeSample(rayDirection: vec3<f32>) -> vec4<f32>\n{\n  var weights = 0.0;\n  var output = vec4(0.0);\n  for(var i = 0; i < 6; i++){\n    var r = rayDirection.xy + vec2(f32(i) * 0.0001);\n    var sampleRayDirection = mix(rayDirection,randomInHemisphere(r, rayDirection),0.003);\n    output += textureSampleLevel(skyCube, linearSampler, sampleRayDirection, 0.0);\n    weights += 1.0;\n  }\n  return output / weights;\n}\n\n@compute @workgroup_size(8, 8, 1)\nfn main(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n) {\n    let resolution = textureDimensions(depth);\n    let pixel = GlobalInvocationID.xy;\n    var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\n    let rayDirection = calculateRayDirection(uv,viewProjections.inverseViewProjection);\n    let rayOrigin = cameraPosition;\n//    let sky = textureSampleLevel(skyCube, linearSampler, rayDirection, 0.0).rgb;\n    let sky = spiralBlurCubeSample(rayDirection).rgb;\n\n    var color = sky;\n    let distanceToCamera = textureLoad(depth, pixel, 0).r;\n\n    if(distanceToCamera > 9999.0){\n      let output = vec4(color, 1);\n      textureStore(outputTex, pixel, output);\n      return;\n    }\n\n}\n\nfn getDebugColor(index: u32) -> vec4<f32> {\n  let colors = array<vec4<f32>, 8>(\n    vec4<f32>(1.0, 0.0, 0.0, 1.0),\n    vec4<f32>(0.0, 1.0, 0.0, 1.0),\n    vec4<f32>(0.0, 0.0, 1.0, 1.0),\n    vec4<f32>(1.0, 1.0, 0.0, 1.0),\n    vec4<f32>(1.0, 0.0, 1.0, 1.0),\n    vec4<f32>(0.0, 1.0, 1.0, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    vec4<f32>(0.5, 0.5, 0.5, 1.0)\n  );\n  return colors[index % 8];\n}\n\nfn getCubeRayDirection(uv: vec2<f32>, faceIndex: u32) -> vec3<f32>\n{\n  let uMapped = uv.x * 2.0 - 1.0;\n  let vMapped = uv.y * 2.0 - 1.0;\n\n  switch(faceIndex)\n  {\n    case 0{return vec3<f32>(1.0, -vMapped, -uMapped);}\n    case 1{return vec3<f32>(-1.0, -vMapped, uMapped);}\n    case 2{return vec3<f32>(uMapped, 1.0, vMapped);}\n    case 3{return vec3<f32>(uMapped, -1.0, -vMapped);}\n    case 4{return vec3<f32>(uMapped, -vMapped, 1.0);}\n    case 5{return vec3<f32>(-uMapped, -vMapped, -1.0);}\n    default{return vec3<f32>(0.0);}\n  }\n}\n\nfn getFramePixelOffset() -> vec2<u32>\n{\n  let frameIndex = time.frame % 4;\n  let x = frameIndex % 2;\n  let y = frameIndex / 2;\n  return vec2<u32>(x, y);\n}\n\nconst offsets = array<vec2<i32>,8>(\n  vec2(-1,-1), vec2(-1, 1),\n\tvec2(1, -1), vec2(1, 1),\n\tvec2(1, 0), vec2(0, -1),\n\tvec2(0, 1), vec2(-1, 0)\n);\n\nfn RGBToYCoCg( RGB: vec3<f32> ) -> vec3<f32>\n{\n\tlet Y = dot(RGB, vec3(  1, 2,  1 )) * 0.25;\n\tlet Co= dot(RGB, vec3(  2, 0, -2 )) * 0.25 + ( 0.5 * 256.0/255.0 );\n\tlet Cg= dot(RGB, vec3( -1, 2, -1 )) * 0.25 + ( 0.5 * 256.0/255.0 );\n\treturn vec3(Y, Co, Cg);\n}\n\nfn YCoCgToRGB( YCoCg: vec3<f32> ) -> vec3<f32>\n{\n\tlet Y= YCoCg.x;\n\tlet Co= YCoCg.y - ( 0.5 * 256.0 / 255.0 );\n\tlet Cg= YCoCg.z - ( 0.5 * 256.0 / 255.0 );\n\tlet R= Y + Co-Cg;\n\tlet G= Y + Cg;\n\tlet B= Y - Co-Cg;\n\treturn vec3(R,G,B);\n}\n\nconst gaussianWeights = array<f32, 25>(\n  0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n  0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n  0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n  0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n  0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n);\n\n\nconst gaussianOffsets = array<vec2<i32>, 25>(\n  vec2(-2, -2), vec2(-1, -2), vec2(0, -2), vec2(1, -2), vec2(2, -2),\n  vec2(-2, -1), vec2(-1, -1), vec2(0, -1), vec2(1, -1), vec2(2, -1),\n  vec2(-2, 0), vec2(-1, 0), vec2(0, 0), vec2(1, 0), vec2(2, 0),\n  vec2(-2, 1), vec2(-1, 1), vec2(0, 1), vec2(1, 1), vec2(2, 1),\n  vec2(-2, 2), vec2(-1, 2), vec2(0, 2), vec2(1, 2), vec2(2, 2)\n);\n\nfn gaussianBlurHistorySample( pixel: vec2<u32>, cubeFaceIndex: u32 ) -> vec3<f32>\n{\n  let textureSize = textureDimensions(lastSkyCube).xy;\n  var color = vec3<f32>(0.0);\n  var weights = 0.0;\n  for(var i = 0; i < 25; i++)\n  {\n    let samplePixel = vec2<i32>(pixel) + gaussianOffsets[i];\n    if(any(samplePixel < vec2(0)) || any(samplePixel >= vec2<i32>(textureSize))){\n      continue;\n    }\n    color += RGBToYCoCg(textureLoad(lastSkyCube, samplePixel, cubeFaceIndex, 0).rgb) * gaussianWeights[i];\n    weights += gaussianWeights[i];\n  }\n\n  return color / weights;\n}\n\nfn polarToCartesian(angle: f32, radius: f32) -> vec2<f32> {\n  let radians = angle * PI / 180.0;\n  let x = radius * cos(radians);\n  let y = radius * sin(radians);\n  return vec2<f32>(x, y);\n}\n\nfn spiralBlurHistorySample( pixel: vec2<u32>, cubeFaceIndex: u32 ) -> vec3<f32>\n{\n  var weights = 0.0;\n  var output = vec3<f32>(0.0);\n   let textureSize = textureDimensions(lastSkyCube).xy;\n  for(var i = 0; i <= 6; i++){\n      let angle = (i % 6) * 60; // 0, 90, 180, 270\n      let radius = (i + 1) / 2;\n      let samplePixel = vec2<i32>(pixel) + vec2<i32>(polarToCartesian(f32(angle), f32(radius)));\n      if(any(samplePixel < vec2(0)) || any(samplePixel >= vec2<i32>(textureSize))){\n        continue;\n      }\n      output += RGBToYCoCg(textureLoad(lastSkyCube, samplePixel, cubeFaceIndex, 0).rgb);\n      weights += 1.0;\n    }\n\n    return output / weights;\n}\n\nconst HISTORY_BLEND = 0.8;\n\n@compute @workgroup_size(8, 8, 1)\nfn writeToCube(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n) {\n  let cubeFaceIndex = GlobalInvocationID.z;\n  var pixel = GlobalInvocationID.xy;\n  pixel *= 2;\n  pixel += getFramePixelOffset();\n  var rayDirection = getCubeRayDirection(vec2<f32>(pixel) / vec2<f32>(textureDimensions(skyCubeWrite).xy), cubeFaceIndex);\n  rayDirection = normalize(rayDirection);\n  let sky = sample_sky(rayDirection, cameraPosition);\n  let mu = dot(sunDirection, rayDirection);\n  let fogDistance = intersectSphere(cameraPosition, rayDirection, vec3(0.0, -EARTH_RADIUS, 0.0), EARTH_RADIUS+160.0);\n  let fogPhase = 0.5*HenyeyGreenstein(mu, 0.7)+0.5*HenyeyGreenstein(mu, -0.6);\n  var colour = sky;\n  colour = mix(fogPhase*0.1*LOW_SCATTER*SUN_POWER+10.0*vec3(0.55, 0.8, 1.0), colour, exp(-0.0003*fogDistance));\n  let newSample = colour;\n  var history = textureLoad(lastSkyCube, pixel, cubeFaceIndex, 0).rgb;\n  colour = mix(newSample, history, HISTORY_BLEND);\n  textureStore(skyCubeWrite, pixel, cubeFaceIndex, vec4(colour,1));\n}",ea=async()=>{const e={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},t={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},n={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:s}},r={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},i={binding:4,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},o={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},l={binding:6,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},c={binding:7,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},d={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},f={binding:9,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},h={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}},p={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:u,viewDimension:"2d-array"}},m={binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d-array"}},v={binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},x=Ga.createBindGroupLayout({entries:[e,t,n,r,i,o,l,c,d,f,v]}),y=Ga.createBindGroupLayout({entries:[h]}),b=Ga.createBindGroupLayout({entries:[p,m]}),_=Ga.createComputePipeline({layout:Ga.createPipelineLayout({bindGroupLayouts:[x,y]}),compute:{module:Ga.createShaderModule({code:`${Mi}${a}${Ji}`}),entryPoint:"main"}}),w=Ga.createComputePipeline({layout:Ga.createPipelineLayout({bindGroupLayouts:[x,b]}),compute:{module:Ga.createShaderModule({code:`${Mi}${a}${Ji}`}),entryPoint:"writeToCube"}});let T;const S=Ga.createSampler({minFilter:"linear",magFilter:"linear",addressModeU:"repeat",addressModeV:"repeat"}),P=await yi(Ga,"pebbles.png",{usage:GPUTextureUsage.COPY_SRC}),k=await yi(Ga,"rgba-noise.png",{usage:GPUTextureUsage.COPY_SRC}),O=Ga.createTexture({size:[640,640,6],format:u,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING});return{render:({commandEncoder:e,outputTextures:t,timestampWrites:n,viewProjectionMatricesBuffer:r,sunDirectionBuffer:i,timeBuffer:a,cameraPositionBuffer:o})=>{T||(T=Ga.createTexture({size:[t.finalTexture.width,t.finalTexture.height,1],format:s,usage:g})),e.copyTextureToTexture({texture:t.finalTexture.texture},{texture:T},{width:t.finalTexture.width,height:t.finalTexture.height,depthOrArrayLayers:1});const u=Ga.createBindGroup({layout:x,entries:[{binding:0,resource:t.depthTexture.view},{binding:1,resource:T.createView()},{binding:2,resource:t.finalTexture.view},{binding:3,resource:{buffer:r}},{binding:4,resource:{buffer:i}},{binding:5,resource:{buffer:a}},{binding:6,resource:k.createView()},{binding:7,resource:P.createView()},{binding:8,resource:S},{binding:9,resource:{buffer:o}},{binding:10,resource:t.worldPositionTexture.view}]}),l=e.beginComputePass({timestampWrites:n});l.setPipeline(w),l.setBindGroup(0,u),l.setBindGroup(1,Ga.createBindGroup({layout:b,entries:[{binding:2,resource:t.skyTexture.createView({dimension:"2d-array"})},{binding:3,resource:O.createView({dimension:"2d-array"})}]})),l.dispatchWorkgroups(t.skyTexture.width/16,t.skyTexture.height/16,6),l.setPipeline(_),l.setBindGroup(0,u),l.setBindGroup(1,Ga.createBindGroup({layout:y,entries:[{binding:1,resource:t.skyTexture.createView({dimension:"cube"})}]}));const c=t.depthTexture.width,d=t.depthTexture.height,f=Math.ceil(c/8),h=Math.ceil(d/8);l.dispatchWorkgroups(f,h),l.end(),e.copyTextureToTexture({texture:t.skyTexture},{texture:O},{width:t.skyTexture.width,height:t.skyTexture.height,depthOrArrayLayers:t.skyTexture.depthOrArrayLayers})},label:"sky"}};class ta extends En{#v;#x;#y;#b;#_;constructor({position:e,rotation:t,scale:n,size:r,atlasLocation:i,name:a="unnamed",paletteIndex:o}){super({position:e,rotation:t,scale:n}),this.#v=Symbol(),this.#x=a,this.#y=r,this.#b=i,this.#_=o}get objectSpaceCorners(){return[Te.create(0,0,0),Te.create(0,0,this.#y[2]),Te.create(0,this.#y[1],0),Te.create(0,this.#y[1],this.#y[2]),Te.create(this.#y[0],0,0),Te.create(this.#y[0],0,this.#y[2]),Te.create(this.#y[0],this.#y[1],0),Te.create(this.#y[0],this.#y[1],this.#y[2])]}get worldSpaceCorners(){return this.objectSpaceCorners.map((e=>Te.transformMat4(e,this.transform)))}get AABB(){return(e=>{let t=Te.create(1/0,1/0,1/0),n=Te.create(-1/0,-1/0,-1/0);for(const r of e)t=Te.min(t,r),n=Te.max(n,r);return{min:t,max:n}})(this.worldSpaceCorners)}get size(){return this.#y}toArray(){return[...this.transform,...this.inverseTransform,...this.previousTransform,...this.previousInverseTransform,...this.#y,0,...this.#b,this.#_]}}class na{index;dataView;constructor(e){this.dataView=new DataView(e),this.index=0}readUint8(){const e=this.dataView.getUint8(this.index);return this.index++,e}readUint32(){const e=this.dataView.getUint32(this.index,!0);return this.index+=4,e}readFloat32(){const e=this.dataView.getFloat32(this.index,!0);return this.index+=4,e}skip(e){this.index+=e}}const ra=e=>0===e;let ia=[];const aa=["street-scene","Dragon","monu10","teapot"],oa=e=>{let t=Te.create(1/0,1/0,1/0),n=Te.create(-1/0,-1/0,-1/0);for(const{AABB:r}of e)t=Te.min(r.min,t),n=Te.max(r.max,n);return{min:t,max:n}},sa=e=>{const t=oa(e),n=(t.max[0]-t.min[0])*(t.max[1]-t.min[1])*(t.max[2]-t.min[2]);return e.length*n},ua=(44,16,16*Math.ceil(2.75));class la{#p;#w;#T;#S;#P;constructor(e,t){this.#p=e,this.#T=t.map(((e,t)=>({AABB:e.AABB,objectIndex:t}))),this.#S=0,this.#w=new Array(2*t.length-1),this.#k(this.#T,0),this.#P=e.createBuffer({size:this.#w.length*ua,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1,label:"bvh buffer"}),this.#O()}get gpuBuffer(){return this.#P}update(e){this.#T=e.map(((e,t)=>({AABB:e.AABB,objectIndex:t}))),this.#S=0,this.#k(this.#T,0),this.#O()}#k(e,t){if(0===this.#T.length)return;if(1===e.length)return void(this.#w[t]={leftChildIndex:this.#T.indexOf(e[0]),rightChildIndex:-1,objectCount:1,AABBMax:e[0].AABB.max,AABBMin:e[0].AABB.min});const n=oa(e);let r=-1,i=-1;const{left:a,right:o}=(e=>{let t=1/0,n=-1;const r=Math.floor(e.length/2);for(let i=1;i<e.length;i++){const a=e.slice(0,i),o=e.slice(i),s=sa(a)+sa(o),u=1e3*Math.abs(i-r)+1*s;u<t&&(t=u,n=i)}return{left:e.slice(0,n),right:e.slice(n)}})(e);a.length>0&&(r=++this.#S,this.#k(a,r)),o.length>0&&(i=++this.#S,this.#k(o,i)),this.#w[t]={leftChildIndex:r,rightChildIndex:i,objectCount:e.length,AABBMax:n.max,AABBMin:n.min}}#O(){return this.#w.forEach(((e,t)=>{const n=t*ua,r=new ArrayBuffer(ua),i=new DataView(r);i.setInt32(0,e.leftChildIndex,!0),i.setInt32(4,e.rightChildIndex,!0),i.setUint32(8,e.objectCount,!0),i.setFloat32(16,e.AABBMin[0],!0),i.setFloat32(20,e.AABBMin[1],!0),i.setFloat32(24,e.AABBMin[2],!0),i.setFloat32(32,e.AABBMax[0],!0),i.setFloat32(36,e.AABBMax[1],!0),i.setFloat32(40,e.AABBMax[2],!0),this.#p.queue.writeBuffer(this.#P,n,r,0,ua)})),this.#P}}const ca={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},da={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},fa={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:s}},ha={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},pa={binding:4,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},ma={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},ga={binding:6,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},va={binding:7,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},xa={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},ya={binding:9,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},ba=[ca,da,fa,ha,pa,ma,ga,va,xa,{binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:11,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:12,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:13,visibility:GPUShaderStage.COMPUTE,sampler:{}},{binding:14,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},{binding:15,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:16,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},{binding:17,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:18,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}}],_a=async()=>(async({shaderCode:e,effectEntryPoint:t,compositeEntryPoint:n,downscale:r,label:i,workgroupSizeFactor:o=[1,1,1]})=>{if(!Number.isInteger(r))throw new Error("Downscale must be an integer");const u=Ga.createBindGroupLayout({entries:ba}),l=Ga.createBindGroupLayout({entries:[...ba,ya]}),h=`\nstruct Time {\n  frame: u32,\n  deltaTime: f32,\n  elapsed: f32\n};\n\n@group(0) @binding(0) var depthTex : texture_2d<f32>;\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\n@group(0) @binding(2) var outputTex : texture_storage_2d<${s}, write>;\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(4) var voxels : texture_3d<f32>;\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(6) var<storage> voxelObjects : array<VoxelObject>;\n@group(0) @binding(7) var<uniform> sunDirection : vec3<f32>;\n@group(0) @binding(8) var linearSampler : sampler;\n@group(0) @binding(9) var intermediaryTexture : texture_2d<f32>;\n@group(0) @binding(10) var normalTex : texture_2d<f32>;\n@group(0) @binding(11) var blueNoiseTex : texture_2d<f32>;\n@group(0) @binding(12) var<uniform> time : Time;\n@group(0) @binding(13) var nearestSampler : sampler;\n@group(0) @binding(14) var velocityAndWaterTex : texture_2d<f32>;\n@group(0) @binding(15) var<storage> bvhNodes: array<BVHNode>;\n@group(0) @binding(16) var worldPosTex : texture_2d<f32>;\n@group(0) @binding(17) var albedoTex : texture_2d<f32>;\n@group(0) @binding(18) var skyCube : texture_cube<f32>;\n\nconst DOWNSCALE = ${r};\n${Ei}\n${Mi}\n${a}\n${c}\n${d}\n${f}\n${Oi}\n${e}`,p=Ga.createComputePipeline({label:i,layout:Ga.createPipelineLayout({bindGroupLayouts:[u]}),compute:{module:Ga.createShaderModule({code:h}),entryPoint:t}}),m=Ga.createComputePipeline({label:`${i} - composite`,layout:Ga.createPipelineLayout({bindGroupLayouts:[l]}),compute:{module:Ga.createShaderModule({code:h}),entryPoint:n}});let g,v,x,y,b,_,w=Ga.createSampler({magFilter:"nearest",minFilter:"nearest"}),T=Ga.createSampler({magFilter:"linear",minFilter:"linear"});return{render:({outputTextures:e,timestampWrites:t,viewProjectionMatricesBuffer:n,volumeAtlas:i,cameraPositionBuffer:a,transformationMatrixBuffer:s,sunDirectionBuffer:c,blueNoiseTextureView:d,timeBuffer:f,bvhBuffer:h,commandEncoder:S})=>{if(g||(g=Ga.createTexture({size:[e.finalTexture.width,e.finalTexture.height,1],format:e.finalTexture.format,usage:e.finalTexture.usage}),v=g.createView()),x||(x=Ga.createTexture({size:[e.finalTexture.width/r,e.finalTexture.height/r,1],format:e.finalTexture.format,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING}),y=x.createView()),S.copyTextureToTexture({texture:e.finalTexture.texture},{texture:g},{width:e.finalTexture.width,height:e.finalTexture.height,depthOrArrayLayers:1}),!b){const t=[{binding:0,resource:e.depthTexture.view},{binding:1,resource:v},{binding:3,resource:{buffer:n}},{binding:4,resource:i.atlasTextureView},{binding:5,resource:{buffer:a}},{binding:6,resource:{buffer:s}},{binding:7,resource:{buffer:c}},{binding:8,resource:T},{binding:10,resource:e.normalTexture.view},{binding:11,resource:d},{binding:12,resource:{buffer:f}},{binding:13,resource:w},{binding:14,resource:e.velocityTexture.view},{binding:15,resource:{buffer:h}},{binding:16,resource:e.worldPositionTexture.view},{binding:17,resource:e.albedoTexture.view},{binding:18,resource:e.skyTexture.createView({dimension:"cube"})}],r={layout:u,entries:[...t,{binding:2,resource:y}]},o={layout:l,entries:[...t,{binding:2,resource:e.finalTexture.view},{binding:9,resource:y}]};b=Ga.createBindGroup(r),_=Ga.createBindGroup(o)}const P=S.beginComputePass({timestampWrites:t});P.setPipeline(p),P.setBindGroup(0,b),P.dispatchWorkgroups(Math.ceil(x.width/8/o[0]),Math.ceil(x.height/8/o[1])),P.setPipeline(m),P.setBindGroup(0,_),P.dispatchWorkgroups(Math.ceil(e.finalTexture.width/8),Math.ceil(e.finalTexture.height/8)),P.end()},label:i}})({shaderCode:"\nconst BLUE_NOISE_SIZE = 511;\nconst MAX_DISTANCE = 40.0;\nconst START_DISTANCE = 0.0;\nconst EXTINCTION = vec3(.06, .03, .02);\nconst FORWARD_SCATTER = 0.25;\nconst STEPS = 8.0;\nconst NEAR  = 0.5;\nconst FAR = 10000.0;\nconst LIGHT_INTENSITY = 48.0;\n\nfn henyeyGreenstein(cosTheta: f32, g: f32) -> f32 {\n  let g2 = g * g;\n  return (1.0 - g2) / pow(1.0 + g2 - 2.0 * g * cosTheta, 1.5) / 4.0;\n}\n\nfn beerLambertLaw(distance: f32, extinction: f32) -> f32 {\n  return exp(-distance * extinction);\n}\n\nfn screenBlend(base: vec4<f32>, blend: vec4<f32>) -> vec4<f32> {\n  return vec4<f32>(1.0) - (vec4<f32>(1.0) - blend) * (vec4<f32>(1.0) - base);\n}\n\n\n@compute @workgroup_size(8, 8, 1)\nfn main(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n) {\n  var pixel = GlobalInvocationID.xy;\n  let uv = vec2<f32>(pixel) / vec2<f32>(textureDimensions(outputTex));\n  let gBufferPixel = pixel * DOWNSCALE;\n  let depthSample = textureLoad(depthTex, gBufferPixel, 0).r;\n  let normalSample = textureLoad(normalTex, gBufferPixel, 0).xyz;\n  let distanceFromCamera = min(depthSample, MAX_DISTANCE);\n  var stepLength = distanceFromCamera / STEPS;\n  let rayDir = calculateRayDirection(uv,viewProjections.inverseViewProjection);\n  var blueNoisePixel = (vec2<i32>(pixel)) % BLUE_NOISE_SIZE;\n  let blueNoiseSample = textureLoad(blueNoiseTex, blueNoisePixel, 0).rg;\n  let startDistance = START_DISTANCE + random(blueNoiseSample) * stepLength;\n  let rayOrigin = cameraPosition + rayDir * startDistance;\n  var inScattering = vec3<f32>(0.0);\n  var volColour = vec3(0.0);\n  var absorption = vec3(1.0);\n  var stepAbsorption = exp(-EXTINCTION * stepLength);\n  var stepColour = vec3(1.0 - stepAbsorption) * henyeyGreenstein(dot(rayDir, sunDirection), FORWARD_SCATTER);\n  var positionAlongRay = rayOrigin;\n  for(var i = 0; i < i32(STEPS); i++){\n   positionAlongRay += rayDir * stepLength;\n   absorption *= stepAbsorption;\n   var directLight = LIGHT_INTENSITY;\n   if(rayMarchBVHShadows(positionAlongRay, sunDirection,1).hit){\n      directLight = 0.0;\n    }\n    volColour += stepColour * absorption * directLight;\n  }\n  textureStore(outputTex, pixel, vec4<f32>(volColour, 1.0));\n}\n\nconst BLUR_SAMPLE_POSITIONS_AND_GAUSSIAN_WEIGHTS: array<vec3<f32>, 9> = array<vec3<f32>, 9>(\n  vec3<f32>(0.0, 0.0, 4.0 / 16.0),\n  vec3<f32>(1.0, 0.0, 2.0 / 16.0),\n  vec3<f32>(-1.0, 0.0, 2.0 / 16.0),\n  vec3<f32>(0.0, 1.0, 2.0 / 16.0),\n  vec3<f32>(0.0, -1.0, 2.0 / 16.0),\n  vec3<f32>(1.0, 1.0, 1.0 / 16.0),\n  vec3<f32>(-1.0, 1.0, 1.0 / 16.0),\n  vec3<f32>(1.0, -1.0, 1.0 / 16.0),\n  vec3<f32>(-1.0, -1.0, 1.0 / 16.0),\n);\n\n@compute @workgroup_size(8, 8, 1)\nfn composite(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n) {\n  let texSize = textureDimensions(outputTex);\n  let fogTexelSize = 1.0 / vec2<f32>(textureDimensions(intermediaryTexture));\n  let fogSampleUV = vec2<f32>(GlobalInvocationID.xy) / vec2<f32>(texSize);\n  let colourSample = textureLoad(inputTex, GlobalInvocationID.xy, 0).rgb;\n  var totalFog = vec3(0.0);\n  for(var i = 0; i < 9; i++){\n    let fogAmount = textureSampleLevel(intermediaryTexture, linearSampler, fogSampleUV + BLUR_SAMPLE_POSITIONS_AND_GAUSSIAN_WEIGHTS[i].xy * fogTexelSize, 0.0);\n    totalFog += fogAmount.rgb * BLUR_SAMPLE_POSITIONS_AND_GAUSSIAN_WEIGHTS[i].z;\n  }\n  let output = (totalFog + colourSample).rgb;\n  textureStore(outputTex, GlobalInvocationID.xy, vec4(output, 1));\n}",effectEntryPoint:"main",compositeEntryPoint:"composite",downscale:4,label:"fog"}),wa=async()=>{let e,t,n;const r=Ga.createComputePipeline({layout:"auto",compute:{module:Ga.createShaderModule({code:"// Helper function to compute luminance\nfn Luminance(color: vec3<f32>) -> f32 {\n    return dot(color, vec3<f32>(0.299, 0.587, 0.114));\n}\n\nfn rcp(x: f32) -> f32 {\n    return 1.0 / x;\n}\n\nfn mitchell_netravali_weight(x: f32) -> f32 {\n    let B = 1.0 / 3.0;\n    let C = 1.0 / 3.0;\n    let absX = abs(x);\n    if (absX < 1.0) {\n        return ((12.0 - 9.0 * B - 6.0 * C) * absX * absX * absX +\n                (-18.0 + 12.0 * B + 6.0 * C) * absX * absX +\n                (6.0 - 2.0 * B)) / 6.0;\n    } else if (absX < 2.0) {\n        return ((-B - 6.0 * C) * absX * absX * absX +\n                (6.0 * B + 30.0 * C) * absX * absX +\n                (-12.0 * B - 48.0 * C) * absX +\n                (8.0 * B + 24.0 * C)) / 6.0;\n    } else {\n        return 0.0;\n    }\n}\n\nfn mitchell_netravali_sample(tex: texture_2d<f32>, samp: sampler, uv: vec2<f32>, texelSize: vec2<f32>) -> vec4<f32> {\n    var color: vec4<f32> = vec4<f32>(0.0);\n    var totalWeight: f32 = 0.0;\n\n    for (var dy: i32 = -1; dy <= 2; dy = dy + 1) {\n        for (var dx: i32 = -1; dx <= 2; dx = dx + 1) {\n            let offset = vec2<f32>(f32(dx), f32(dy));\n            let sampleCoord = uv + offset * texelSize;\n            let weight = mitchell_netravali_weight(offset.x) * mitchell_netravali_weight(offset.y);\n\n            // Use nearest-neighbor sampling\n            color = color + textureSampleLevel(tex, samp, sampleCoord, 0) * weight;\n            totalWeight = totalWeight + weight;\n        }\n    }\n\n    // Normalize the final color\n    return color / totalWeight;\n}\n\nstruct ViewProjectionMatrices {\n  viewProjection : mat4x4<f32>,\n  previousViewProjection : mat4x4<f32>,\n  inverseViewProjection : mat4x4<f32>,\n  projection : mat4x4<f32>,\n  inverseProjection: mat4x4<f32>\n};\n\n//fn calculateWorldDisplacementFromVelocity(velocity: vec2<f32>, depth: f32) -> vec3<f32> {\n//    let worldDisplacement = vec3<f32>(velocity, depth);\n//    return worldDisplacement;\n//}\n\nfn calculateUvFromWorldPostion(worldPos: vec3<f32>, matrices: ViewProjectionMatrices) -> vec2<f32> {\n  let clipPos = matrices.viewProjection * vec4<f32>(worldPos, 1.0);\n  let uv = (matrices.inverseProjection * clipPos).xy;\n  return uv * 0.5 + 0.5;\n}\n\nconst NEIGHBORHOOD_SAMPLE_POSITIONS = array<vec2<i32>, 8>(\n    vec2<i32>(-1, -1),\n    vec2<i32>(0, -1),\n    vec2<i32>(1, -1),\n    vec2<i32>(-1, 0),\n    vec2<i32>(1, 0),\n    vec2<i32>(-1, 1),\n    vec2<i32>(0, 1),\n    vec2<i32>(1, 1)\n);\n\n@group(0) @binding(0) var CurrentColor : texture_2d<f32>;\n@group(0) @binding(1) var Velocity : texture_2d<f32>;\n@group(0) @binding(2) var HistoryWrite : texture_storage_2d<rgba16float, write>;\n@group(0) @binding(3) var HistoryRead : texture_2d<f32>;\n@group(0) @binding(5) var Depth : texture_2d<f32>;\n@group(0) @binding(6) var linearSampler : sampler;\n@group(0) @binding(7) var nearestSampler : sampler;\n@group(0) @binding(8) var worldPosTex : texture_2d<f32>;\n//@group(0) @binding(9) var<uniform> viewProjectionMatrices : ViewProjectionMatrices;\n\nconst DEPTH_THRESHOLD : f32 = 4.0;\nconst MIN_SOURCE_BLEND = 0.05;\n\n@compute @workgroup_size(8, 8, 1)\nfn main(\n    @builtin(global_invocation_id) id : vec3<u32>\n) {\n    let texSize = vec2<f32>(textureDimensions(CurrentColor));\n    let uv = (vec2<f32>(id.xy) + vec2(0.5)) / texSize;\n    let depthSample: f32 = textureLoad(Depth, id.xy, 0).r;\n\n    // Get velocity from pixel with closest depth value in 3x3 neighborhood\n    var closestDepthPixel = vec2<i32>(id.xy);\n    var closestDepth = 999999999.0;\n    for (var i = 0; i < 8; i = i + 1) {\n        let neighbourPixel = clamp(vec2<i32>(id.xy) + NEIGHBORHOOD_SAMPLE_POSITIONS[i], vec2<i32>(0), vec2<i32>(texSize - 1));\n        let neighbourDepth = textureLoad(Depth, neighbourPixel, 0).r;\n        if (abs(neighbourDepth - depthSample) < abs(closestDepth - depthSample)) {\n            closestDepth = neighbourDepth;\n            closestDepthPixel = neighbourPixel;\n        }\n    }\n\n    let velocity = textureLoad(Velocity, closestDepthPixel, 0).xy;\n    let pixelVelocity: vec2<f32> = velocity * texSize;\n    let previousPixel: vec2<i32> = vec2<i32>(id.xy) -  vec2<i32>(pixelVelocity);\n    let previousUv = uv - velocity;\n\n    let worldPos = textureLoad(worldPosTex, id.xy, 0).xyz;\n    let worldPosPrev = textureLoad(worldPosTex, previousPixel, 0).xyz;\n\n\n    var depthAtPreviousPixel: f32 = textureLoad(Depth, previousPixel, 0).r;\n\n    var sourceSample: vec3<f32> = textureSampleLevel(CurrentColor, nearestSampler, uv, 0).rgb;\n    var historySample: vec3<f32> = textureSampleLevel(HistoryRead, linearSampler, previousUv, 0).rgb;\n\n    // Calculate depth difference between source and history samples\n    let depthDifference: f32 = abs(depthSample - depthAtPreviousPixel);\n\n    // Apply depth clamping\n    if (depthDifference > DEPTH_THRESHOLD) {\n        return;\n    }\n//\n    // Clamp the history sample to the min and max of the 3x3 neighborhood\n    var minCol: vec3<f32> = sourceSample;\n    var maxCol: vec3<f32> = sourceSample;\n    for (var x: i32 = -1; x <= 1; x = x + 1) {\n        for (var y: i32 = -1; y <= 1; y = y + 1) {\n            let neighbourPixel = clamp(vec2(i32(id.x) + x, i32(id.y) + y), vec2(0), vec2(i32(texSize.x - 1), i32(texSize.y - 1)));\n            let s: vec3<f32> = textureLoad(CurrentColor, neighbourPixel, 0).rgb;\n            minCol = min(minCol, s);\n            maxCol = max(maxCol, s);\n        }\n    }\n    historySample = clamp(historySample, minCol, maxCol);\n\n    var sourceWeight: f32 = clamp(length(velocity), MIN_SOURCE_BLEND, 1.0);\n    var historyWeight: f32 = 1.0 - sourceWeight;\n    let compressedSource: vec3<f32> = sourceSample * rcp(max(max(sourceSample.r, sourceSample.g), sourceSample.b) + 1.0);\n    let compressedHistory: vec3<f32> = historySample * rcp(max(max(historySample.r, historySample.g), historySample.b) + 1.0);\n    let luminanceSource: f32 = Luminance(compressedSource);\n    let luminanceHistory: f32 = Luminance(compressedHistory);\n    sourceWeight *= 1.0 / (1.0 + luminanceSource);\n    historyWeight *= 1.0 / (1.0 + luminanceHistory);\n    let result: vec3<f32> = (sourceSample * sourceWeight + historySample * historyWeight) / max(sourceWeight + historyWeight, 0.0001);\n\n    textureStore(HistoryWrite, id.xy, vec4<f32>(result, 1.0));\n\n}\n"}),entryPoint:"main"}});let i;return{render:({commandEncoder:a,timestampWrites:o,outputTextures:u,viewProjectionMatricesBuffer:l})=>{e||(e=Ga.createTexture({label:"TAA History Texture",size:[Ba[0],Ba[1],1],format:s,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST}),i=e.createView()),t||(t=Ga.createTexture({size:[Ba[0],Ba[1],1],format:s,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST}),n=t.createView()),a.copyTextureToTexture({texture:u.finalTexture.texture},{texture:t},{width:t.width,height:t.height,depthOrArrayLayers:1});const c=a.beginComputePass({timestampWrites:o});c.setPipeline(r);const d=Ga.createBindGroup({layout:r.getBindGroupLayout(0),entries:[{binding:0,resource:n},{binding:1,resource:u.velocityTexture.view},{binding:2,resource:u.finalTexture.view},{binding:3,resource:i},{binding:5,resource:u.depthTexture.view},{binding:6,resource:Ga.createSampler({magFilter:"linear",minFilter:"linear",mipmapFilter:"linear"})},{binding:7,resource:Ga.createSampler({magFilter:"nearest",minFilter:"nearest",mipmapFilter:"nearest"})},{binding:8,resource:u.worldPositionTexture.view}]});c.setBindGroup(0,d),c.dispatchWorkgroups(Ba[0]/8,Ba[1]/8),c.end(),a.copyTextureToTexture({texture:u.finalTexture.texture},{texture:e},{width:e.width,height:e.height,depthOrArrayLayers:1})},label:"taa"}},Ta="clear",Sa=async()=>{const e=Ga.createShaderModule({code:"\n    struct VertexOutput {\n      @builtin(position) position : vec4f,\n    }\n    @vertex\n    fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n      var output : VertexOutput;\n      return output;\n    }\n    @fragment\n    fn fragment_main(@builtin(position) position : vec4f) -> @location(0) vec4<f32> {\n        return vec4(0.0);\n    }"}),t=Ga.createRenderPipeline({label:Ta,layout:"auto",vertex:{module:e,entryPoint:"vertex_main"},fragment:{module:e,entryPoint:"fragment_main",targets:[{format:s}]}});return{render:e=>{const n=e.commandEncoder.beginRenderPass({label:Ta,timestampWrites:e.timestampWrites,colorAttachments:[{view:e.outputTextures.finalTexture.view,loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});n.setPipeline(t),n.draw(6),n.end()},label:Ta}},Pa=async({shaderCode:e,entryPoint:t,label:n})=>{const r=Ga.createBindGroupLayout({entries:ba}),i=`\nstruct Time {\n  frame: u32,\n  deltaTime: f32\n};\n\n@group(0) @binding(0) var depthTex : texture_2d<f32>;\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\n@group(0) @binding(2) var outputTex : texture_storage_2d<${s}, write>;\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(4) var voxels : texture_3d<f32>;\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(6) var<storage> voxelObjects : array<VoxelObject>;\n@group(0) @binding(7) var<uniform> sunDirection : vec3<f32>;\n@group(0) @binding(8) var linearSampler : sampler;\n@group(0) @binding(10) var normalTex : texture_2d<f32>;\n@group(0) @binding(11) var blueNoiseTex : texture_2d<f32>;\n@group(0) @binding(12) var<uniform> time : Time;\n@group(0) @binding(13) var nearestSampler : sampler;\n@group(0) @binding(14) var velocityAndWaterTex : texture_2d<f32>;\n@group(0) @binding(15) var<storage> bvhNodes: array<BVHNode>;\n@group(0) @binding(16) var worldPosTex : texture_2d<f32>;\n@group(0) @binding(17) var albedoTex : texture_2d<f32>;\n@group(0) @binding(18) var skyCube : texture_cube<f32>;\n\n${Ei}\n${Mi}\n${a}\n${c}\n${d}\n${f}\n${Oi}\n${e}`,o=Ga.createComputePipeline({layout:Ga.createPipelineLayout({bindGroupLayouts:[r]}),compute:{module:Ga.createShaderModule({code:i}),entryPoint:t}});let u,l,h,p=Ga.createSampler({magFilter:"nearest",minFilter:"nearest"}),m=Ga.createSampler({magFilter:"linear",minFilter:"linear"});return{render:({commandEncoder:e,outputTextures:t,timestampWrites:n,viewProjectionMatricesBuffer:i,volumeAtlas:a,cameraPositionBuffer:s,transformationMatrixBuffer:c,sunDirectionBuffer:d,blueNoiseTextureView:f,timeBuffer:g,bvhBuffer:v})=>{if(u||(u=Ga.createTexture({size:[t.finalTexture.width,t.finalTexture.height,1],format:t.finalTexture.format,usage:t.finalTexture.usage}),l=u.createView()),e.copyTextureToTexture({texture:t.finalTexture.texture},{texture:u},{width:t.finalTexture.width,height:t.finalTexture.height,depthOrArrayLayers:1}),!h){const e=[{binding:0,resource:t.depthTexture.view},{binding:1,resource:l},{binding:2,resource:t.finalTexture.view},{binding:3,resource:{buffer:i}},{binding:4,resource:a.atlasTextureView},{binding:5,resource:{buffer:s}},{binding:6,resource:{buffer:c}},{binding:7,resource:{buffer:d}},{binding:8,resource:m},{binding:10,resource:t.normalTexture.view},{binding:11,resource:f},{binding:12,resource:{buffer:g}},{binding:13,resource:p},{binding:14,resource:t.velocityTexture.view},{binding:15,resource:{buffer:v}},{binding:16,resource:t.worldPositionTexture.view},{binding:17,resource:t.albedoTexture.view},{binding:18,resource:t.skyTexture.createView({dimension:"cube"})}],n={layout:r,entries:e};h=Ga.createBindGroup(n)}const x=e.beginComputePass({timestampWrites:n});x.setPipeline(o),x.setBindGroup(0,h),x.dispatchWorkgroups(Math.ceil(t.finalTexture.width/8),Math.ceil(t.finalTexture.height/8)),x.end()},label:n}},ka=async()=>Pa({shaderCode:"fn uncharted2_tonemap_partial(x: vec3<f32>) -> vec3<f32>\n{\n    let A = 0.15f;\n    let B = 0.50f;\n    let C = 0.10f;\n    let D = 0.20f;\n    let E = 0.02f;\n    let F = 0.30f;\n    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\n\nfn luminance(v: vec3<f32>) -> f32\n{\n    return dot(v, vec3(0.2126f, 0.7152f, 0.0722f));\n}\n\nfn aces(v: vec3<f32>) -> vec3<f32>\n{\n    let a = 2.51f;\n    let b = 0.03f;\n    let c = 2.43f;\n    let d = 0.59f;\n    let e = 0.14f;\n    return clamp((v*(a*v+b))/(v*(c*v+d)+e), vec3(0.0), vec3(1.0f));\n}\n\nfn uncharted2_filmic(v: vec3<f32>) -> vec3<f32>\n{\n    let exposure_bias = 0.15f;\n    let curr = uncharted2_tonemap_partial(v * exposure_bias);\n\n    let W = vec3(11.2f);\n    let white_scale = vec3(1.0f) / uncharted2_tonemap_partial(W);\n    return curr * white_scale;\n}\n\nfn reinhard_jodie(v: vec3<f32>) -> vec3<f32>\n{\n    let l = luminance(v);\n    let tv = v / (1.0f + v);\n    return mix(v / (1.0f + l), tv, tv);\n}\n\n@compute @workgroup_size(8, 8, 1)\nfn main(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n) {\n  let pixel = GlobalInvocationID.xy;\n  let inputSample = textureLoad(inputTex, pixel, 0);\n  let toneMapped = uncharted2_filmic(inputSample.rgb);\n//  let gammaCorrected = pow(toneMapped, vec3(1.0f / 0.3f));\n  textureStore(outputTex,pixel,vec4(toneMapped,1));\n}",entryPoint:"main",label:"tonemap"}),Oa=async()=>{const e=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:s}}]}),t=Ga.createComputePipeline({label:"bloom threshold",layout:Ga.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:Ga.createShaderModule({code:`\n        @group(0) @binding(0) var inputTex : texture_2d<f32>;\n        @group(0) @binding(1) var outputTex : texture_storage_2d<${s}, write>;\n        \n        const DOWNSCALE_FACTOR = 2;\n        \n        @compute @workgroup_size(8, 8, 1)\n        fn main(\n          @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n        ) {\n            let gBufferPixel = vec2<i32>(GlobalInvocationID.xy) * DOWNSCALE_FACTOR;\n            let bloomPixel = vec2<i32>(GlobalInvocationID.xy);\n            let color = textureLoad(inputTex, gBufferPixel, 0);\n            let luminance = dot(color.rgb, vec3<f32>(0.2126, 0.7152, 0.0722));\n            let threshold = 64.0;\n            let smoothedLuminance = smoothstep(threshold - 1.0, threshold, luminance);\n            let thresholded = mix(vec4<f32>(0.0), color, smoothedLuminance);\n            textureStore(outputTex,bloomPixel, thresholded);\n        }\n        `}),entryPoint:"main"}});let n,r,i,a,o,u,l;const c=(e=>{const t=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:s}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{}}]}),n=Ga.createComputePipeline({label:"horizontal blur",layout:Ga.createPipelineLayout({bindGroupLayouts:[t]}),compute:{module:Ga.createShaderModule({code:`\n        @group(0) @binding(0) var inputTex : texture_2d<f32>;\n        @group(0) @binding(1) var outputTex : texture_storage_2d<${s}, write>;\n        @group(0) @binding(2) var linearSampler : sampler;\n        @compute @workgroup_size(8, 8, 1)\n        fn main(\n          @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n        ) {\n            var sum = vec4<f32>(0.0);\n            let uv = vec2<f32>(GlobalInvocationID.xy) / vec2<f32>(textureDimensions(inputTex));\n            for(var i = -1; i <= 1; i++) {\n                let offset = vec2<f32>(f32(i) / f32(textureDimensions(inputTex).x), 0.0);\n                sum += textureSampleLevel(inputTex, linearSampler, uv + offset, 0.0);\n            }\n            textureStore(outputTex, GlobalInvocationID.xy, sum / f32(3));\n        }\n        `}),entryPoint:"main"}}),r=Ga.createSampler({magFilter:"linear",minFilter:"linear"});let i;return e=>{const{computePass:a}=e;i||(i=Ga.createBindGroup({layout:t,entries:[{binding:0,resource:e.inputTextureView},{binding:1,resource:e.outputTextureView},{binding:2,resource:r}]})),a.setPipeline(n),a.setBindGroup(0,i),a.dispatchWorkgroups(Math.ceil(e.inputTexture.width/8),Math.ceil(e.inputTexture.height/8),1)}})(),d=(e=>{const t=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:s}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{}}]}),n=Ga.createComputePipeline({label:"vertical blur",layout:Ga.createPipelineLayout({bindGroupLayouts:[t]}),compute:{module:Ga.createShaderModule({code:`\n        @group(0) @binding(0) var inputTex : texture_2d<f32>;\n        @group(0) @binding(1) var outputTex : texture_storage_2d<${s}, write>;\n        @group(0) @binding(2) var linearSampler : sampler;\n        @compute @workgroup_size(8, 8, 1)\n        fn main(\n          @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n        ) {\n           var sum = vec4<f32>(0.0);\n            let uv = vec2<f32>(GlobalInvocationID.xy) / vec2<f32>(textureDimensions(inputTex));\n            for(var i = -1; i <= 1; i++) {\n                let offset = vec2<f32>(0.0, f32(i) / f32(textureDimensions(inputTex).x) );\n                sum += textureSampleLevel(inputTex, linearSampler, uv + offset, 0.0);\n            }\n            textureStore(outputTex, GlobalInvocationID.xy, sum / f32(3));\n        }\n        `}),entryPoint:"main"}}),r=Ga.createSampler({magFilter:"linear",minFilter:"linear"});let i;return e=>{const{computePass:a}=e;i||(i=Ga.createBindGroup({layout:t,entries:[{binding:0,resource:e.inputTextureView},{binding:1,resource:e.outputTextureView},{binding:2,resource:r}]})),a.setPipeline(n),a.setBindGroup(0,i),a.dispatchWorkgroups(Math.ceil(e.inputTexture.width/8),Math.ceil(e.inputTexture.height/8),1)}})(),f=(()=>{const e=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:s}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{}}]}),t=Ga.createComputePipeline({label:"downscale",layout:Ga.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:Ga.createShaderModule({code:`\n        @group(0) @binding(0) var inputTex : texture_2d<f32>;\n        @group(0) @binding(1) var outputTex : texture_storage_2d<${s}, write>;\n        @group(0) @binding(2) var linearSampler : sampler;\n        @compute @workgroup_size(8, 8, 1)\n        fn main(\n          @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n        ) {\n            var sum = vec4<f32>(0.0);\n            let pixel = vec2<i32>(GlobalInvocationID.xy) * 2;\n            for(var i = 0; i < 2; i++) {\n                for(var j = 0; j < 2; j++) {\n                    sum += textureLoad(inputTex, vec2<i32>(pixel + vec2(i, j)), 0);\n                }\n            }\n            textureStore(outputTex, GlobalInvocationID.xy, sum / 4.0);\n        }\n        `}),entryPoint:"main"}}),n=Ga.createSampler({magFilter:"linear",minFilter:"linear"});let r;return i=>{const{computePass:a}=i;r||(r=Ga.createBindGroup({layout:e,entries:[{binding:0,resource:i.inputTextureView},{binding:1,resource:i.outputTextureView},{binding:2,resource:n}]})),a.setPipeline(t),a.setBindGroup(0,r),a.dispatchWorkgroups(Math.ceil(i.outputTexture.width/8),Math.ceil(i.outputTexture.height/8),1)}})(),h=((e=1)=>{const t=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:s}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{}},{binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}}]}),n=Ga.createComputePipeline({label:"blend",layout:Ga.createPipelineLayout({bindGroupLayouts:[t]}),compute:{module:Ga.createShaderModule({code:`\n        @group(0) @binding(0) var inputTex : texture_2d<f32>;\n        @group(0) @binding(1) var outputTex : texture_storage_2d<${s}, write>;\n        @group(0) @binding(2) var linearSampler : sampler;\n        @group(0) @binding(3) var outputTexCopy : texture_2d<f32>;\n        @compute @workgroup_size(8, 8, 1)\n        fn main(\n          @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n        ) {\n            var uv = vec2<f32>(GlobalInvocationID.xy) / vec2<f32>(textureDimensions(outputTex));\n            var total = vec4<f32>(0.0);\n            for(var mip = 6; mip >= 0; mip--) {\n                let mipTexelSize = 1.0 / vec2<f32>(textureDimensions(inputTex, mip));\n                // TODO: understand why i need two texels offset?\n                total += textureSampleLevel(inputTex, linearSampler, uv + mipTexelSize * 2, f32(mip));\n            }\n            total /= 7.0;\n            total *= ${e};\n            let current = textureLoad(outputTexCopy, GlobalInvocationID.xy, 0);\n            textureStore(outputTex, GlobalInvocationID.xy, total + current);\n        }\n        `}),entryPoint:"main"}}),r=Ga.createSampler({magFilter:"linear",minFilter:"linear"});let i;return e=>{const{computePass:a}=e;i||(i=Ga.createBindGroup({layout:t,entries:[{binding:0,resource:e.inputTextureView},{binding:1,resource:e.outputTextureView},{binding:2,resource:r},{binding:3,resource:e.outputTextureCopyView}]})),a.setPipeline(n),a.setBindGroup(0,i),a.dispatchWorkgroups(Math.ceil(e.outputTexture.width/8),Math.ceil(e.outputTexture.height/8),1)}})(.5);let p;return{render:m=>{if(!i){const e={size:{width:m.outputTextures.finalTexture.width/2,height:m.outputTextures.finalTexture.height/2},format:s,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,mipLevelCount:8};i=Ga.createTexture(e),a=Ga.createTexture(e),o=Array.from({length:8},((e,t)=>i.createView({baseMipLevel:t,mipLevelCount:1}))),u=Array.from({length:7},((e,t)=>a.createView({baseMipLevel:t,mipLevelCount:1}))),l=i.createView(),n=Ga.createTexture({label:"output copy texture",size:{width:m.outputTextures.finalTexture.width,height:m.outputTextures.finalTexture.height},format:s,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING}),r=n.createView()}const{commandEncoder:g}=m;g.copyTextureToTexture({texture:m.outputTextures.finalTexture.texture,mipLevel:0,origin:{x:0,y:0,z:0}},{texture:n,mipLevel:0,origin:{x:0,y:0,z:0}},{width:m.outputTextures.finalTexture.width,height:m.outputTextures.finalTexture.height,depthOrArrayLayers:1});const v=g.beginComputePass({timestampWrites:m.timestampWrites});p||(p=Ga.createBindGroup({layout:e,entries:[{binding:0,resource:m.outputTextures.finalTexture.view},{binding:1,resource:o[0]}]})),v.setPipeline(t),v.setBindGroup(0,p),v.dispatchWorkgroups(Math.ceil(m.outputTextures.finalTexture.width/8),Math.ceil(m.outputTextures.finalTexture.height/8),1),Array.from({length:7},((e,t)=>[c({computePass:v,inputTexture:i,inputTextureView:o[t],outputTexture:a,outputTextureView:u[t]}),d({computePass:v,inputTexture:a,inputTextureView:u[t],outputTexture:i,outputTextureView:o[t]}),f({computePass:v,inputTexture:i,inputTextureView:o[t],outputTexture:i,outputTextureView:o[t+1]})])).flat(),h({computePass:v,inputTexture:i,inputTextureView:l,outputTexture:m.outputTextures.finalTexture.texture,outputTextureView:m.outputTextures.finalTexture.view,outputTextureCopyView:r}),v.end()},label:"bloom"}},Ma=async()=>Pa({shaderCode:"const TARGET_DELTA_TIME: f32 = 16.66;\nconst MAX_SAMPLES: i32 = 8;\n\n@compute @workgroup_size(8, 8, 1)\nfn main(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n) {\n  let pixel = GlobalInvocationID.xy;\n  var velocity = textureLoad(velocityAndWaterTex, pixel, 0).xy;\n  let resolution = textureDimensions(inputTex);\n  let centerOfPixel = vec2<f32>(GlobalInvocationID.xy) + vec2<f32>(0.5);\n  var uv = centerOfPixel / vec2<f32>(resolution);\n  let blurScale = (TARGET_DELTA_TIME / time.deltaTime); // less blur when framerate is high\n  let scaledVelocity = velocity * blurScale;\n  var samples = MAX_SAMPLES;\n  var validSamples = 0.0;\n  var result = vec4<f32>(0.0);\n  for (var i = 0; i < samples; i++) {\n    var offset = scaledVelocity * (f32(i) / f32(samples - 1) - 0.5);\n    let offsetUv = uv + offset;\n    let textureSample = textureSampleLevel(inputTex, nearestSampler, offsetUv, 0.0);\n    result += textureSample;\n    validSamples += 1.0;\n  }\n  result /= validSamples;\n  textureStore(outputTex, pixel, result);\n}",entryPoint:"main",label:"motion blur"}),Ea=e=>{const[t,n,r]=e.split(" ").map(parseFloat);return[255*t,255*n,255*r,0]},Ia=async e=>{const t=(await(async(e,t)=>{const n=await fetch(t),r=(await n.text()).split("#LUT data points")[1].split("\n").slice(1,-1).map(Ea),i=e.createBuffer({label:"LUT buffer",size:4*r.length,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC}),a=Math.ceil(Math.cbrt(r.length)),o=Math.ceil(r.length/a),s=e.createTexture({size:{width:o,height:a},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,dimension:"2d",mipLevelCount:1}),u=e.createTexture({size:{width:a,height:a,depthOrArrayLayers:a},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d",mipLevelCount:1});r.forEach((([t,n,r,a],o)=>{const s=new Uint8Array([t,n,r,a]);e.queue.writeBuffer(i,4*o,s)}));const l=e.createCommandEncoder();l.copyBufferToTexture({buffer:i,bytesPerRow:4*o},{texture:s},[o,a,1]);for(let e=0;e<u.depthOrArrayLayers;e++)l.copyTextureToTexture({texture:s,mipLevel:0,origin:{x:e*u.width,y:0}},{texture:u,mipLevel:0,origin:{x:0,y:0,z:e}},{width:u.width,height:u.height});return e.queue.submit([l.finish()]),await e.queue.onSubmittedWorkDone(),(async(e,t,n,r)=>{const i=document.getElementById("debug-canvas");i.style.imageRendering="pixelated",i.width=n.width,i.height=n.height;const a=i.getContext("webgpu");a.configure({device:e,format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT});const o=e.createCommandEncoder(),s=e.createShaderModule({code:An}),u=e.createRenderPipeline({label:"write texture to canvas",layout:"auto",vertex:{module:s,entryPoint:"vertex_main"},fragment:{module:s,entryPoint:"fragment_main",targets:[{format:"rgba8unorm"}]}}),l=o.beginRenderPass({label:"write texture to canvas",colorAttachments:[{view:a.getCurrentTexture().createView(),loadOp:"clear",clearValue:[.3,.3,.3,.3],storeOp:"store"}]}),c=e.createBindGroup({layout:u.getBindGroupLayout(0),entries:[{binding:1,resource:n.createView({label:"texture being written to canvas"})}]});l.setPipeline(u),l.setBindGroup(0,c),l.draw(6),l.end(),e.queue.submit([o.finish()])})(e,0,s,s.createView()),u})(Ga,e)).createView();let n,r;const i=Ga.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:s}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{}},{binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}}]}),a=Ga.createComputePipeline({label:"horizontal blur",layout:Ga.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:Ga.createShaderModule({code:`\n        @group(0) @binding(0) var lutTex : texture_3d<f32>;\n        @group(0) @binding(1) var outputTex : texture_storage_2d<${s}, write>;\n        @group(0) @binding(2) var linearSampler : sampler;\n        @group(0) @binding(3) var inputTex : texture_2d<f32>;\n        @compute @workgroup_size(8, 8, 1)\n        fn main(\n          @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n        ) {\n           let pixel = GlobalInvocationID.xy;\n           let inputColour = textureLoad(inputTex, pixel, 0);\n           // x = r, y = b, z = g\n           let lutUV = vec3<f32>(inputColour.r, inputColour.b, inputColour.g);\n           var lutColour = textureSampleLevel(lutTex, linearSampler, lutUV, 0).rgb;\n           let strength = 0.5;\n           lutColour = mix(inputColour.rgb, lutColour, strength);\n           textureStore(outputTex, GlobalInvocationID.xy, vec4(lutColour, 1.));\n        }\n        `}),entryPoint:"main"}}),o=Ga.createSampler({minFilter:"linear",magFilter:"linear"});let u;return{render:({commandEncoder:e,outputTextures:l})=>{n||(n=Ga.createTexture({size:{width:l.finalTexture.width,height:l.finalTexture.height},format:s,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING}),r=n.createView()),e.copyTextureToTexture({texture:l.finalTexture.texture},{texture:n},{width:n.width,height:n.height,depthOrArrayLayers:1}),u||(u=Ga.createBindGroup({layout:i,entries:[{binding:0,resource:t},{binding:1,resource:l.finalTexture.view},{binding:2,resource:o},{binding:3,resource:r}]}));const c=e.beginComputePass();c.setPipeline(a),c.setBindGroup(0,u),c.dispatchWorkgroups(l.finalTexture.width/8,l.finalTexture.height/8,1),c.end()},label:"LUT"}};function Ua(e,t){let n=0,r=1/t,i=e;for(;i>0;)n+=r*(i%t),i=Math.floor(i/t),r/=t;return n}const Aa=(e=15,t=.25)=>Pa({shaderCode:`\n      @compute @workgroup_size(8, 8, 1)\n      fn main(\n        @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\n      ) {\n        var uv = vec2<f32>(GlobalInvocationID.xy) / vec2<f32>(textureDimensions(inputTex));\n        uv *=  1.0 - uv.yx;\n        var vig = uv.x * uv.y * ${e};\n        vig = pow(vig, ${t});\n        let blended = textureLoad(inputTex, GlobalInvocationID.xy, 0) * vig;\n        textureStore(outputTex, GlobalInvocationID.xy, blended);\n      }\n    `,entryPoint:"main",label:"vignette"}),Ca=new class{#l;#M;#E;#I;constructor(){this.#l=new On(1),this.#M=new On(0),this.#E=new On(0),this.#I=new On(-3)}set targetScale(e){this.#l.target=e}set targetTranslateX(e){this.#M.target=e}set targetRotateY(e){this.#E.target=e}set targetSunRotateY(e){this.#I.target=e}get targetScale(){return this.#l.target}get targetTranslateX(){return this.#M.target}get targetRotateY(){return this.#E.target}get targetSunRotateY(){return this.#I.target}get sunRotateY(){return this.#I.value}get scale(){return this.#l.value}get translateX(){return this.#M.value}};let Da,Ga,Ra,La,za,Ba=K.create(4,4),Na=0,Va=Na,ja=0,Fa=0,qa=new Un({fieldOfView:Math.PI/180*90,position:Te.create(-31,6,-50),direction:Te.create(0,0,-.5)});const Ha=new class{logElement;isMouseDown=!1;constructor(){document.getElementById("reset").addEventListener("click",(e=>{window.dispatchEvent(new CustomEvent("resetcamera")),document.getElementById("captures").innerHTML=""})),document.getElementById("capture").addEventListener("click",(e=>{const t=new Image;t.id=performance.now().toString(),t.src=La.toDataURL(),document.getElementById("captures").appendChild(t).addEventListener("click",(e=>{e.target,console.log(e.target)}))})),document.addEventListener("wheel",(e=>{qa.fieldOfView+=.001*e.deltaY,qa.fieldOfView=Math.max(Math.min(qa.fieldOfView,2),.1)})),["fov","scale","translate","sun"].forEach((e=>{document.getElementById(e).addEventListener("input",(t=>{const n=t.target;window.dispatchEvent(new CustomEvent(`change${e}`,{detail:n.value}))}))})),this.logElement=document.getElementById("log"),window.addEventListener("changefov",(e=>{qa.fieldOfView=parseFloat(e.detail)})),window.addEventListener("changetranslate",(e=>{Ca.targetTranslateX=.01*parseFloat(e.detail)})),window.addEventListener("changesun",(e=>{Ca.targetSunRotateY=parseFloat(e.detail)})),window.addEventListener("changescale",(e=>{Ca.targetScale=parseFloat(e.detail)})),window.addEventListener("resetcamera",(()=>{Ca.targetTranslateX=0,Ca.targetScale=1,Ca.targetRotateY=0})),document.getElementById("webgpu-canvas").addEventListener("mousedown",(()=>{this.isMouseDown=!0})),document.getElementById("webgpu-canvas").addEventListener("mouseup",(()=>{this.isMouseDown=!1})),document.getElementById("webgpu-canvas").addEventListener("mouseleave",(()=>{this.isMouseDown=!1})),window.addEventListener("mousemove",(e=>{this.isMouseDown&&(Ca.targetRotateY-=.005*e.movementX)}))}log(e){this.logElement.innerHTML=e}},Wa=(()=>{let e={};const t=t=>{const n=e[t];return n?n.reduce(((e,t)=>e+t))/n.length:0};return{addSample:(t,n)=>{e[t]||(e[t]=[]),e[t].push(n)>50&&e[t].shift()},clearEntry:t=>{e[t]&&(e[t]=[0])},toString:()=>Object.keys(e).map((e=>`${e}: ${t(e).toFixed(2)}ms`)).join("\n"),toHTML:()=>Object.keys(e).map((e=>`<div class="debug-row">\n                    <div>\n                        ${e}\n                    </div>\n                   <div>${t(e).toFixed(2)}ms</div>\n                </div>`)).join("\n")}})();let Ya,$a;Wa.addSample("frame time",0);const Xa=async(e,t,n,r)=>{const i=Ga.createCommandEncoder();i.resolveQuerySet(t,0,t.count,n,0),r.push(i.finish());const a=n.size,o=Ga.createBuffer({size:a,label:"gpu read buffer",usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),s=Ga.createCommandEncoder();s.copyBufferToBuffer(n,0,o,0,a);const u=s.finish();Ga.queue.submit([u]),o.mapAsync(GPUMapMode.READ).then((()=>o.getMappedRange())).then((t=>{const n=new BigInt64Array(t),r=[];n.forEach((e=>{r.push(Number(e)/1e6)})),r.reduce(((e,t,n)=>(n%2==0&&e.push(r[n+1]-t),e)),[]).forEach(((t,n)=>{const r=e[n].label,i=`flag-${r}`,a=document.getElementById(i)?.checked;r&&a?Wa.addSample(r,t):Wa.clearEntry(r)})),o.destroy()}))};let Za=Array.from({length:200}).map((()=>({position:[-80*Math.random(),50*Math.random(),-200*Math.random()],size:4,color:Te.normalize(Te.create(Math.random(),Math.random(),Math.random()))})));Za=[{position:[-43.8,5.5,-36],size:2.2,color:Te.create(800,20,20)},{position:[-36,5.5,-36],size:2.2,color:Te.create(20,800,20)},{position:[-25,5.5,-36],size:2.2,color:Te.create(20,20,800)}];const Qa=(e,a)=>{let o,s,u,l,c,d,f,h,p,m,g,v,S,P,k;La=document.getElementById("webgpu-canvas"),La.style.imageRendering="pixelated",Ra=La.getContext("webgpu"),Ra.configure({device:e,format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT});let O,M,E,I=Be.create(),U=Be.create(),A=Be.create(),C=Be.create();const D=e.createSampler({magFilter:"linear",minFilter:"linear"}),G=e.createSampler({magFilter:"nearest",minFilter:"nearest"});e.features.has("timestamp-query")&&(O=e.createQuerySet({type:"timestamp",count:2*a.length}),M=e.createBuffer({label:"timestamp query",size:8*O.count,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}),E=e.createBuffer({size:M.size,label:"gpu read buffer",usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}));const R=()=>{const{clientWidth:e,clientHeight:t}=La.parentElement,n=K.create(1*e,1*t);Ba=K.mulScalar(n,1),La.width=n[0],La.height=n[1],La.style.transform="scale(1)"};(async()=>{const t=await yi(e,"blue-noise-rg.png",{usage:GPUTextureUsage.COPY_SRC});f=t.createView()})(),k=new la(e,ia);const L=i(e,[0,0,0,0],"camera position");setInterval((()=>{Ha.log(Wa.toHTML())}),500);const z=E=>{const R=e.createCommandEncoder();0===Na&&(Na=E),R.pushDebugGroup("frame");const B=E-Na;if(ja=B-Va,Wa.addSample("frame time",ja),Va=B,Fa++,(()=>{const t=function(e,t,n,r,i,a){const o=2*Math.tan(r/2)*.1,s=o*i,u=2/t,l=2/n;return[(Ua(e,2)-.5)*u*s,(Ua(e,3)-.5)*l*o]}(Fa,Ba[0],Ba[1],qa.fieldOfView,Ba[0]/Ba[1]),n=function(e,t){const n=new Float32Array(e);return n[8]+=t[0],n[9]+=t[1],n}(qa.projectionMatrix,t),r=Be.mul(n,qa.viewMatrix);S=new Float32Array([...r,...C,...Be.invert(r),...Be.invert(C),...n,...Be.invert(n)]),g||(g=e.createBuffer({size:S.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"view matrices buffer"})),e.queue.writeBuffer(g,0,S.buffer,0,S.length*Float32Array.BYTES_PER_ELEMENT);const i=Be.mul(qa.inverseProjectionMatrix,r),a=Be.invert(i);P=new Float32Array(Be.getTranslation(a)),e.queue.writeBuffer(L,0,P.buffer,0,P.length*Float32Array.BYTES_PER_ELEMENT),C=r})(),(()=>{const t=ia;document.getElementById("objectcount").innerHTML=`Objects: ${t.length} / ${ia.length} in view`;const n=t.flatMap((e=>e.toArray()));m?r(m,n):(m=i(e,n,"voxel object"),m=e.createBuffer({size:new Float32Array(n).byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1,label:"voxel objects transforms buffer"}))})(),!m||!f)return void(Da=requestAnimationFrame(z));if(ct.updateAll(Fa),k.update(ia),document.getElementById("resolution").innerHTML=Ba.join(" x "),h||(h=n([Fa,0,0],"time buffer")),e.queue.writeBuffer(h,4,new Float32Array([ja])),e.queue.writeBuffer(h,0,new Uint32Array([Fa])),e.queue.writeBuffer(h,8,new Float32Array([Va/1e3])),p?t(p,[Ba[0],Ba[1]]):p=n([Ba[0],Ba[1]]),(()=>{const e=Be.identity();Be.rotateY(e,Ca.sunRotateY,e);const t=Te.normalize(Te.transformMat4(Te.create(0,.9,-.8),e));v?r(v,[t[0],t[1],t[2]]):v=n([t[0],t[1],t[2]],"sun buffer")})(),s=new x(e,Ba[0],Ba[1]),o=new y(e,Ba[0],Ba[1]),l=new b(e,Ba[0],Ba[1]),c=new _(e,Ba[0],Ba[1]),u=new T(e,Ba[0],Ba[1]),d=new w(e,Ba[0],Ba[1]),Ya=za.atlasTextureView,!Ya)return void(Da=requestAnimationFrame(z));a.forEach(((t,n)=>{const{render:r,label:i}=t;if(!1===document.getElementById(`flag-${i}`)?.checked)return;let a;e.features.has("timestamp-query")&&R.clearBuffer(M),e.features.has("timestamp-query")&&(a={querySet:O,beginningOfPassWriteIndex:2*n,endOfPassWriteIndex:2*n+1}),k.update(ia),i&&R.pushDebugGroup(i),r({commandEncoder:R,resolutionBuffer:p,timeBuffer:h,outputTextures:{finalTexture:u,albedoTexture:s,normalTexture:o,depthTexture:l,skyTexture:$a,velocityTexture:c,worldPositionTexture:d},cameraPositionBuffer:L,volumeAtlas:za,transformationMatrixBuffer:m,viewProjectionMatricesArray:S,viewProjectionMatricesBuffer:g,timestampWrites:a,sunDirectionBuffer:v,blueNoiseTextureView:f,bvhBuffer:k.gpuBuffer,lights:Za,linearSampler:D,nearestSampler:G}),i&&R.popDebugGroup()})),R.popDebugGroup();const N=[R.finish()];e.features.has("timestamp-query")&&Xa(a,O,M,N),e.queue.submit(N),Da=requestAnimationFrame(z),U=qa.viewMatrix,I=qa.inverseViewProjectionMatrix,A=qa.viewProjectionMatrix};R(),window.onresize=R,Da=requestAnimationFrame(z)};(async()=>{if(!navigator.gpu)return void console.error("WebGPU not supported");const e=await navigator.gpu.requestAdapter();if(!Ga)try{Ga=await e.requestDevice({requiredFeatures:["timestamp-query"],requiredLimits:{maxColorAttachmentBytesPerSample:64}}),console.log(Ga.limits)}catch(t){console.warn("Timestamp query or 64 byte colour attachment not supported, falling back"),Ga=await e.requestDevice()}$a=Ga.createTexture({label:"sky texture",dimension:"2d",size:[640,640,6],format:u,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING}),za=new ki(Ga),await(async(e,t)=>{const n=await fetch("./Tavern.json"),r=(await n.json()).children.filter((e=>aa.includes(e.name))),i=new Set(r.map((e=>e.name))),a=Array.from(i);let s=e.createCommandEncoder();console.time("Load all volumes");{let n=await Promise.all(a.map((t=>(async(e,t,n)=>{console.time(`Fetch ${t}`);const r=await fetch(`./Tavern/${t}.vxm`);console.timeEnd(`Fetch ${t}`);const i=(e=>{console.time("convert vxm");const t=new na(e);let n,r=[],i="",a=[];if(i=String.fromCodePoint(t.readUint8(),t.readUint8(),t.readUint8(),t.readUint8()),"VXMC"!==i&&"VXMA"!==i)throw new Error(`Incorrect magic: ${i}`);if(i[3].charCodeAt(0)>="0".charCodeAt(0)&&i[3].charCodeAt(0)<="9".charCodeAt(0))n=i[3].charCodeAt(0)-"0".charCodeAt(0);else{if(!(i[3].charCodeAt(0)>="A".charCodeAt(0)&&i[3].charCodeAt(0)<="C".charCodeAt(0)))throw new Error("Unsupported version found");n=10+i[3].charCodeAt(0)-"A".charCodeAt(0)}if(n<11||n>12)throw new Error(`Could not load vxm file: Unsupported version found (${n})`);let o=[0,0,0];o[0]=t.readUint32(),o[1]=t.readUint32(),o[2]=t.readUint32();let s=[.5,0,.5];if(s[0]=t.readFloat32(),s[1]=t.readFloat32(),s[2]=t.readFloat32(),t.readUint8()>0){let e=0,n=0;t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),e=t.readUint32(),n=t.readUint32();let r=e*n;t.skip(4*r)}n>=8&&t.skip(16);let u=t.readUint32();for(let e=0;e<u;++e){let e=t.readUint32(),n=t.readUint32();if(e>2048||n>2048)throw new Error("Size of texture exceeds the max allowed value");let r=t.readUint32();t.skip(r);for(let e=0;e<6;++e){let e=t.readUint32();e>262144&&console.warn(`Size of quads exceeds the max allowed value: ${e}`);let n=4*e*20;t.skip(n)}}t.skip(1024),t.skip(1024);let l=t.readUint8();for(let e=0;e<l;++e)t.skip(1024),t.readUint8(),t.readUint8();let c=t.readUint8();for(let e=0;e<c;++e){let n=t.readUint8(),i=t.readUint8(),a=t.readUint8(),o=t.readUint8();o=1===t.readUint8()?2:255,r[e]={r:a,g:i,b:n,a:o}}let d=1;n>=12&&(d=t.readUint8());let f={min:Te.create(9999,9999,9999),max:Te.create(0,0,0)};for(let e=0;e<d;++e){let r=0,i=!0,s="";if(n>=12){for(;;){const e=t.readUint8();if(ra(e))break;s=`${s}${String.fromCharCode(e)}`}i=t.readUint8()>0}else s=`Layer ${e}`;for(;;){let e=t.readUint8();if(0===e)break;let n=t.readUint8();if(255!==n)if(n>=c)r+=e;else{for(let t=r;t<r+e;t++){let e=Math.floor(t/(o[1]*o[2])),r=Math.floor(t/o[2]%o[1]),i=Math.floor(t%o[2]);f.min=Te.min(f.min,[e,r,i]),f.max=Te.max(f.max,[e,r,i]),a.push({x:e,y:r,z:i,c:n})}r+=e}else r+=e}}a=a.map((({x:e,y:t,z:n,c:r})=>({x:e-f.min[0],y:t-f.min[1],z:n-f.min[2],c:r})));const h=Te.sub(f.max,f.min);return console.timeEnd("convert vxm"),{VOX:a.length,SIZE:[h[0]+1,h[1]+1,h[2]+1],XYZI:a,RGBA:r}})(await r.arrayBuffer());console.time(`Create texture from voxels for ${t}`);let a=await(async(e,t)=>{const n=e.createTexture({size:{width:t.SIZE[0],height:t.SIZE[1],depthOrArrayLayers:t.SIZE[2]},format:o,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:4}),r=n.width*n.height*n.depthOrArrayLayers,i=e.createBuffer({size:4*r*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE}),a=e.createBuffer({size:256*t.SIZE[2],usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.UNIFORM,label:"voxels buffer"}),s=Array.from({length:t.SIZE[2]},((e,t)=>t));for(let t=0;t<s.length;t++)e.queue.writeBuffer(a,256*t,new Uint32Array([s[t]]).buffer);for(let n=0;n<t.XYZI.length;n++){const{x:r,y:a,z:o,c:s}=t.XYZI[n],c=(u=t.SIZE,(l=[r,a,o])[0]+l[1]*u[0]+l[2]*(u[0]*u[1]));e.queue.writeBuffer(i,16*c,new Uint32Array([r,a,o,s]).buffer)}var u,l;const c=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"storage"}}]}),d=e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[c]}),vertex:{module:e.createShaderModule({code:"\n          struct VertexOutput {\n            @builtin(position) Position : vec4<f32>,\n          }\n          \n          @vertex\n          fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n            const pos = array(\n              vec2( 1.0,  1.0),\n              vec2( 1.0, -1.0),\n              vec2(-1.0, -1.0),\n              vec2( 1.0,  1.0),\n              vec2(-1.0, -1.0),\n              vec2(-1.0,  1.0),\n            );\n            var output : VertexOutput;\n            output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n            return output;\n          }"}),entryPoint:"vertex_main"},fragment:{module:e.createShaderModule({code:"\n          @group(0) @binding(0) var<uniform> zIndex: u32;\n          @group(0) @binding(1) var<storage, read_write> voxelBuffer: array<vec4<u32>>;\n          \n          override sizeX: u32;\n          override sizeY: u32;\n          override sizeZ: u32;\n           \n          fn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\n            return position.x + position.y * size.x + position.z * (size.x * size.y);\n          }\n          \n          @fragment\n          fn fragment_main(@builtin(position) position : vec4<f32>) -> @location(0) vec4<f32> { \n            let voxelPosition = vec3(position.xy, f32(zIndex));\n            let voxelIndex = convert3DTo1D(vec3<u32>(sizeX, sizeY, sizeZ), vec3<u32>(voxelPosition));\n            let voxel = voxelBuffer[voxelIndex];\n            let normalisedPaletteIndex = f32(voxel.a) / 255.0;\n            return vec4(normalisedPaletteIndex,0,0,0);\n          }\n        "}),entryPoint:"fragment_main",targets:[{format:o}],constants:{sizeX:t.SIZE[0],sizeY:t.SIZE[1],sizeZ:t.SIZE[2]}}}),f=e.createCommandEncoder();for(let t=0;t<n.depthOrArrayLayers;t++){const r=e.createBindGroup({label:"create-texture-from-voxels",layout:c,entries:[{binding:0,resource:{buffer:a,offset:256*t,size:4}},{binding:1,resource:{buffer:i}}]}),o=f.beginRenderPass({colorAttachments:[{view:n.createView({baseArrayLayer:t,arrayLayerCount:1,mipLevelCount:1,dimension:"2d"}),loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});o.setPipeline(d),o.setBindGroup(0,r),o.draw(6),o.end()}return e.queue.submit([f.finish()]),await e.queue.onSubmittedWorkDone(),n})(n,i);console.timeEnd(`Create texture from voxels for ${t}`),console.time(`Create palette texture for ${t}`);const s=await(async(e,t)=>{const n=e.createTexture({size:{width:256,height:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC,dimension:"2d",mipLevelCount:1}),r=e.createBuffer({label:"palette buffer",size:1024,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC});t.RGBA.forEach((({r:t,g:n,b:i,a},o)=>{const s=new Uint8Array([t,n,i,a]);e.queue.writeBuffer(r,4*o,s)}));const i=e.createCommandEncoder();return i.copyBufferToTexture({buffer:r},{texture:n},[255,1,1]),e.queue.submit([i.finish()]),await e.queue.onSubmittedWorkDone(),n})(n,i);return console.timeEnd(`Create palette texture for ${t}`),{name:t,texture:a,palette:s}})(0,t,e))));for(const{name:r,texture:i,palette:a}of n)console.time(`Add volume for ${r}`),await t.addVolume(i,a,r),s=e.createCommandEncoder(),console.timeEnd(`Add volume for ${r}`)}console.timeEnd("Load all volumes");const u=t.dictionary;let l=[];for(const e of r){const t=u[e.name];if(!t)return void console.warn(`Volume not found for child ${e.name}, skipping...`);"Candle"===e.name&&l.push(e.position);const{position:n,rotation:r,scale:i,name:a}=e,{size:o,location:s,paletteIndex:c}=t;ia.push(new ta({position:n,rotation:r,scale:i,size:o,atlasLocation:s,name:a,paletteIndex:c}))}console.log({volumes:u}),console.debug(`Tavern created with ${ia.length} items`)})(Ga,za);const t=[Sa(),S(),Ki(),ea(),wa(),_a(),Oa(),Ma(),ka(),Ia("luts/Reeve 38.CUBE"),Aa(15),Cn(Ga)],n=await Promise.all(t);Qa(Ga,await Promise.all(n)),document.getElementById("flags").innerHTML=n.reduce(((e,t)=>{if(!t.label)return e;const n=`flag-${t.label}`;return`${e}<div class="debug-row">\n                    <label for="${n}">\n                        ${t.label}\n                    </label>\n                    <div>\n                        <input id="${n}" type="checkbox" checked>\n                   </div>\n                </div>`}),"")})()})();