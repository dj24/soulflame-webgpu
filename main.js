(()=>{"use strict";class e{}class t{ecs}class n{map=new Map;add(e){this.map.set(e.constructor,e)}get(e){return this.map.get(e)}has(e){return this.map.has(e)}hasAll(e){for(let t of e)if(!this.map.has(t))return!1;return!0}delete(e){this.map.delete(e)}}let r=1e-6,i=Float32Array;function s(e=0,t=0){const n=new i(2);return void 0!==e&&(n[0]=e,void 0!==t&&(n[1]=t)),n}let o=Float32Array;function a(e,t,n){const r=new o(3);return void 0!==e&&(r[0]=e,void 0!==t&&(r[1]=t,void 0!==n&&(r[2]=n))),r}const l=s;function c(e,t,n){return(n=n||new i(2))[0]=e[0]-t[0],n[1]=e[1]-t[1],n}const u=c;function h(e,t,n){return(n=n||new i(2))[0]=e[0]*t,n[1]=e[1]*t,n}const d=h;function p(e,t){return(t=t||new i(2))[0]=1/e[0],t[1]=1/e[1],t}const f=p;function m(e,t){return e[0]*t[0]+e[1]*t[1]}function y(e){const t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}const g=y;function v(e){const t=e[0],n=e[1];return t*t+n*n}const x=v;function w(e,t){const n=e[0]-t[0],r=e[1]-t[1];return Math.sqrt(n*n+r*r)}const b=w;function _(e,t){const n=e[0]-t[0],r=e[1]-t[1];return n*n+r*r}const k=_;function T(e,t){return(t=t||new i(2))[0]=e[0],t[1]=e[1],t}const S=T;function P(e,t,n){return(n=n||new i(2))[0]=e[0]*t[0],n[1]=e[1]*t[1],n}const E=P;function A(e,t,n){return(n=n||new i(2))[0]=e[0]/t[0],n[1]=e[1]/t[1],n}const M=A;var z=Object.freeze({__proto__:null,create:s,setDefaultType:function(e){const t=i;return i=e,t},fromValues:l,set:function(e,t,n){return(n=n||new i(2))[0]=e,n[1]=t,n},ceil:function(e,t){return(t=t||new i(2))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(e,t){return(t=t||new i(2))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},round:function(e,t){return(t=t||new i(2))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},clamp:function(e,t=0,n=1,r){return(r=r||new i(2))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r},add:function(e,t,n){return(n=n||new i(2))[0]=e[0]+t[0],n[1]=e[1]+t[1],n},addScaled:function(e,t,n,r){return(r=r||new i(2))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r},angle:function(e,t){const n=e[0],r=e[1],i=e[0],s=e[1],o=Math.sqrt(n*n+r*r)*Math.sqrt(i*i+s*s),a=o&&m(e,t)/o;return Math.acos(a)},subtract:c,sub:u,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]},lerp:function(e,t,n,r){return(r=r||new i(2))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r},lerpV:function(e,t,n,r){return(r=r||new i(2))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r},max:function(e,t,n){return(n=n||new i(2))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n},min:function(e,t,n){return(n=n||new i(2))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n},mulScalar:h,scale:d,divScalar:function(e,t,n){return(n=n||new i(2))[0]=e[0]/t,n[1]=e[1]/t,n},inverse:p,invert:f,cross:function(e,t,n){n=n||new o(3);const r=e[0]*t[1]-e[1]*t[0];return n[0]=0,n[1]=0,n[2]=r,n},dot:m,length:y,len:g,lengthSq:v,lenSq:x,distance:w,dist:b,distanceSq:_,distSq:k,normalize:function(e,t){t=t||new i(2);const n=e[0],r=e[1],s=Math.sqrt(n*n+r*r);return s>1e-5?(t[0]=n/s,t[1]=r/s):(t[0]=0,t[1]=0),t},negate:function(e,t){return(t=t||new i(2))[0]=-e[0],t[1]=-e[1],t},copy:T,clone:S,multiply:P,mul:E,divide:A,div:M,random:function(e=1,t){t=t||new i(2);const n=2*Math.random()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t},zero:function(e){return(e=e||new i(2))[0]=0,e[1]=0,e},transformMat4:function(e,t,n){n=n||new i(2);const r=e[0],s=e[1];return n[0]=r*t[0]+s*t[4]+t[12],n[1]=r*t[1]+s*t[5]+t[13],n},transformMat3:function(e,t,n){n=n||new i(2);const r=e[0],s=e[1];return n[0]=t[0]*r+t[4]*s+t[8],n[1]=t[1]*r+t[5]*s+t[9],n}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);const I=a;function C(e,t,n){return(n=n||new o(3))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n}const B=C;function O(e,t,n){return(n=n||new o(3))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n}const R=O;function N(e,t){return(t=t||new o(3))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}const U=N;function j(e,t,n){n=n||new o(3);const r=e[2]*t[0]-e[0]*t[2],i=e[0]*t[1]-e[1]*t[0];return n[0]=e[1]*t[2]-e[2]*t[1],n[1]=r,n[2]=i,n}function D(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function F(e){const t=e[0],n=e[1],r=e[2];return Math.sqrt(t*t+n*n+r*r)}const q=F;function L(e){const t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r}const V=L;function G(e,t){const n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(n*n+r*r+i*i)}const W=G;function Y(e,t){const n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return n*n+r*r+i*i}const $=Y;function H(e,t){t=t||new o(3);const n=e[0],r=e[1],i=e[2],s=Math.sqrt(n*n+r*r+i*i);return s>1e-5?(t[0]=n/s,t[1]=r/s,t[2]=i/s):(t[0]=0,t[1]=0,t[2]=0),t}function X(e,t){return(t=t||new o(3))[0]=e[0],t[1]=e[1],t[2]=e[2],t}const Z=X;function K(e,t,n){return(n=n||new o(3))[0]=e[0]*t[0],n[1]=e[1]*t[1],n[2]=e[2]*t[2],n}const Q=K;function J(e,t,n){return(n=n||new o(3))[0]=e[0]/t[0],n[1]=e[1]/t[1],n[2]=e[2]/t[2],n}const ee=J;var te=Object.freeze({__proto__:null,create:a,setDefaultType:function(e){const t=o;return o=e,t},fromValues:I,set:function(e,t,n,r){return(r=r||new o(3))[0]=e,r[1]=t,r[2]=n,r},ceil:function(e,t){return(t=t||new o(3))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(e,t){return(t=t||new o(3))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},round:function(e,t){return(t=t||new o(3))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},clamp:function(e,t=0,n=1,r){return(r=r||new o(3))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r[2]=Math.min(n,Math.max(t,e[2])),r},add:function(e,t,n){return(n=n||new o(3))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n},addScaled:function(e,t,n,r){return(r=r||new o(3))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r[2]=e[2]+t[2]*n,r},angle:function(e,t){const n=e[0],r=e[1],i=e[2],s=e[0],o=e[1],a=e[2],l=Math.sqrt(n*n+r*r+i*i)*Math.sqrt(s*s+o*o+a*a),c=l&&D(e,t)/l;return Math.acos(c)},subtract:C,sub:B,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},lerp:function(e,t,n,r){return(r=r||new o(3))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r},lerpV:function(e,t,n,r){return(r=r||new o(3))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r[2]=e[2]+n[2]*(t[2]-e[2]),r},max:function(e,t,n){return(n=n||new o(3))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n[2]=Math.max(e[2],t[2]),n},min:function(e,t,n){return(n=n||new o(3))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n[2]=Math.min(e[2],t[2]),n},mulScalar:O,scale:R,divScalar:function(e,t,n){return(n=n||new o(3))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n},inverse:N,invert:U,cross:j,dot:D,length:F,len:q,lengthSq:L,lenSq:V,distance:G,dist:W,distanceSq:Y,distSq:$,normalize:H,negate:function(e,t){return(t=t||new o(3))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},copy:X,clone:Z,multiply:K,mul:Q,divide:J,div:ee,random:function(e=1,t){t=t||new o(3);const n=2*Math.random()*Math.PI,r=2*Math.random()-1,i=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*i,t[1]=Math.sin(n)*i,t[2]=r*e,t},zero:function(e){return(e=e||new o(3))[0]=0,e[1]=0,e[2]=0,e},transformMat4:function(e,t,n){n=n||new o(3);const r=e[0],i=e[1],s=e[2],a=t[3]*r+t[7]*i+t[11]*s+t[15]||1;return n[0]=(t[0]*r+t[4]*i+t[8]*s+t[12])/a,n[1]=(t[1]*r+t[5]*i+t[9]*s+t[13])/a,n[2]=(t[2]*r+t[6]*i+t[10]*s+t[14])/a,n},transformMat4Upper3x3:function(e,t,n){n=n||new o(3);const r=e[0],i=e[1],s=e[2];return n[0]=r*t[0]+i*t[4]+s*t[8],n[1]=r*t[1]+i*t[5]+s*t[9],n[2]=r*t[2]+i*t[6]+s*t[10],n},transformMat3:function(e,t,n){n=n||new o(3);const r=e[0],i=e[1],s=e[2];return n[0]=r*t[0]+i*t[4]+s*t[8],n[1]=r*t[1]+i*t[5]+s*t[9],n[2]=r*t[2]+i*t[6]+s*t[10],n},transformQuat:function(e,t,n){n=n||new o(3);const r=t[0],i=t[1],s=t[2],a=2*t[3],l=e[0],c=e[1],u=e[2],h=i*u-s*c,d=s*l-r*u,p=r*c-i*l;return n[0]=l+h*a+2*(i*p-s*d),n[1]=c+d*a+2*(s*h-r*p),n[2]=u+p*a+2*(r*d-i*h),n},getTranslation:function(e,t){return(t=t||new o(3))[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,n){const r=4*t;return(n=n||new o(3))[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},getScaling:function(e,t){t=t||new o(3);const n=e[0],r=e[1],i=e[2],s=e[4],a=e[5],l=e[6],c=e[8],u=e[9],h=e[10];return t[0]=Math.sqrt(n*n+r*r+i*i),t[1]=Math.sqrt(s*s+a*a+l*l),t[2]=Math.sqrt(c*c+u*u+h*h),t}});let ne=Float32Array;function re(e,t){return(t=t||new ne(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}const ie=re;function se(e){return(e=e||new ne(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function oe(e,t){t=t||new ne(16);const n=e[0],r=e[1],i=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],u=e[8],h=e[9],d=e[10],p=e[11],f=e[12],m=e[13],y=e[14],g=e[15],v=d*g,x=y*p,w=l*g,b=y*c,_=l*p,k=d*c,T=i*g,S=y*s,P=i*p,E=d*s,A=i*c,M=l*s,z=u*m,I=f*h,C=o*m,B=f*a,O=o*h,R=u*a,N=n*m,U=f*r,j=n*h,D=u*r,F=n*a,q=o*r,L=v*a+b*h+_*m-(x*a+w*h+k*m),V=x*r+T*h+E*m-(v*r+S*h+P*m),G=w*r+S*a+A*m-(b*r+T*a+M*m),W=k*r+P*a+M*h-(_*r+E*a+A*h),Y=1/(n*L+o*V+u*G+f*W);return t[0]=Y*L,t[1]=Y*V,t[2]=Y*G,t[3]=Y*W,t[4]=Y*(x*o+w*u+k*f-(v*o+b*u+_*f)),t[5]=Y*(v*n+S*u+P*f-(x*n+T*u+E*f)),t[6]=Y*(b*n+T*o+M*f-(w*n+S*o+A*f)),t[7]=Y*(_*n+E*o+A*u-(k*n+P*o+M*u)),t[8]=Y*(z*c+B*p+O*g-(I*c+C*p+R*g)),t[9]=Y*(I*s+N*p+D*g-(z*s+U*p+j*g)),t[10]=Y*(C*s+U*c+F*g-(B*s+N*c+q*g)),t[11]=Y*(R*s+j*c+q*p-(O*s+D*c+F*p)),t[12]=Y*(C*d+R*y+I*l-(O*y+z*l+B*d)),t[13]=Y*(j*y+z*i+U*d-(N*d+D*y+I*i)),t[14]=Y*(N*l+q*y+B*i-(F*y+C*i+U*l)),t[15]=Y*(F*d+O*i+D*l-(j*l+q*d+R*i)),t}const ae=oe;function le(e,t,n){n=n||new ne(16);const r=e[0],i=e[1],s=e[2],o=e[3],a=e[4],l=e[5],c=e[6],u=e[7],h=e[8],d=e[9],p=e[10],f=e[11],m=e[12],y=e[13],g=e[14],v=e[15],x=t[0],w=t[1],b=t[2],_=t[3],k=t[4],T=t[5],S=t[6],P=t[7],E=t[8],A=t[9],M=t[10],z=t[11],I=t[12],C=t[13],B=t[14],O=t[15];return n[0]=r*x+a*w+h*b+m*_,n[1]=i*x+l*w+d*b+y*_,n[2]=s*x+c*w+p*b+g*_,n[3]=o*x+u*w+f*b+v*_,n[4]=r*k+a*T+h*S+m*P,n[5]=i*k+l*T+d*S+y*P,n[6]=s*k+c*T+p*S+g*P,n[7]=o*k+u*T+f*S+v*P,n[8]=r*E+a*A+h*M+m*z,n[9]=i*E+l*A+d*M+y*z,n[10]=s*E+c*A+p*M+g*z,n[11]=o*E+u*A+f*M+v*z,n[12]=r*I+a*C+h*B+m*O,n[13]=i*I+l*C+d*B+y*O,n[14]=s*I+c*C+p*B+g*O,n[15]=o*I+u*C+f*B+v*O,n}const ce=le;let ue,he,de;function pe(e,t,n){n=n||new ne(16);let r=e[0],i=e[1],s=e[2];const o=Math.sqrt(r*r+i*i+s*s);r/=o,i/=o,s/=o;const a=r*r,l=i*i,c=s*s,u=Math.cos(t),h=Math.sin(t),d=1-u;return n[0]=a+(1-a)*u,n[1]=r*i*d+s*h,n[2]=r*s*d-i*h,n[3]=0,n[4]=r*i*d-s*h,n[5]=l+(1-l)*u,n[6]=i*s*d+r*h,n[7]=0,n[8]=r*s*d+i*h,n[9]=i*s*d-r*h,n[10]=c+(1-c)*u,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}const fe=pe;function me(e,t,n,r){r=r||new ne(16);let i=t[0],s=t[1],o=t[2];const a=Math.sqrt(i*i+s*s+o*o);i/=a,s/=a,o/=a;const l=i*i,c=s*s,u=o*o,h=Math.cos(n),d=Math.sin(n),p=1-h,f=l+(1-l)*h,m=i*s*p+o*d,y=i*o*p-s*d,g=i*s*p-o*d,v=c+(1-c)*h,x=s*o*p+i*d,w=i*o*p+s*d,b=s*o*p-i*d,_=u+(1-u)*h,k=e[0],T=e[1],S=e[2],P=e[3],E=e[4],A=e[5],M=e[6],z=e[7],I=e[8],C=e[9],B=e[10],O=e[11];return r[0]=f*k+m*E+y*I,r[1]=f*T+m*A+y*C,r[2]=f*S+m*M+y*B,r[3]=f*P+m*z+y*O,r[4]=g*k+v*E+x*I,r[5]=g*T+v*A+x*C,r[6]=g*S+v*M+x*B,r[7]=g*P+v*z+x*O,r[8]=w*k+b*E+_*I,r[9]=w*T+b*A+_*C,r[10]=w*S+b*M+_*B,r[11]=w*P+b*z+_*O,e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r}const ye=me;var ge=Object.freeze({__proto__:null,setDefaultType:function(e){const t=ne;return ne=e,t},create:function(e,t,n,r,i,s,o,a,l,c,u,h,d,p,f,m){const y=new ne(16);return void 0!==e&&(y[0]=e,void 0!==t&&(y[1]=t,void 0!==n&&(y[2]=n,void 0!==r&&(y[3]=r,void 0!==i&&(y[4]=i,void 0!==s&&(y[5]=s,void 0!==o&&(y[6]=o,void 0!==a&&(y[7]=a,void 0!==l&&(y[8]=l,void 0!==c&&(y[9]=c,void 0!==u&&(y[10]=u,void 0!==h&&(y[11]=h,void 0!==d&&(y[12]=d,void 0!==p&&(y[13]=p,void 0!==f&&(y[14]=f,void 0!==m&&(y[15]=m)))))))))))))))),y},set:function(e,t,n,r,i,s,o,a,l,c,u,h,d,p,f,m,y){return(y=y||new ne(16))[0]=e,y[1]=t,y[2]=n,y[3]=r,y[4]=i,y[5]=s,y[6]=o,y[7]=a,y[8]=l,y[9]=c,y[10]=u,y[11]=h,y[12]=d,y[13]=p,y[14]=f,y[15]=m,y},fromMat3:function(e,t){return(t=t||new ne(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=0,t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=0,t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromQuat:function(e,t){t=t||new ne(16);const n=e[0],r=e[1],i=e[2],s=e[3],o=n+n,a=r+r,l=i+i,c=n*o,u=r*o,h=r*a,d=i*o,p=i*a,f=i*l,m=s*o,y=s*a,g=s*l;return t[0]=1-h-f,t[1]=u+g,t[2]=d-y,t[3]=0,t[4]=u-g,t[5]=1-c-f,t[6]=p+m,t[7]=0,t[8]=d+y,t[9]=p-m,t[10]=1-c-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},negate:function(e,t){return(t=t||new ne(16))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=-e[7],t[8]=-e[8],t[9]=-e[9],t[10]=-e[10],t[11]=-e[11],t[12]=-e[12],t[13]=-e[13],t[14]=-e[14],t[15]=-e[15],t},copy:re,clone:ie,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r&&Math.abs(e[3]-t[3])<r&&Math.abs(e[4]-t[4])<r&&Math.abs(e[5]-t[5])<r&&Math.abs(e[6]-t[6])<r&&Math.abs(e[7]-t[7])<r&&Math.abs(e[8]-t[8])<r&&Math.abs(e[9]-t[9])<r&&Math.abs(e[10]-t[10])<r&&Math.abs(e[11]-t[11])<r&&Math.abs(e[12]-t[12])<r&&Math.abs(e[13]-t[13])<r&&Math.abs(e[14]-t[14])<r&&Math.abs(e[15]-t[15])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},identity:se,transpose:function(e,t){if((t=t||new ne(16))===e){let n;return n=e[1],e[1]=e[4],e[4]=n,n=e[2],e[2]=e[8],e[8]=n,n=e[3],e[3]=e[12],e[12]=n,n=e[6],e[6]=e[9],e[9]=n,n=e[7],e[7]=e[13],e[13]=n,n=e[11],e[11]=e[14],e[14]=n,t}const n=e[0],r=e[1],i=e[2],s=e[3],o=e[4],a=e[5],l=e[6],c=e[7],u=e[8],h=e[9],d=e[10],p=e[11],f=e[12],m=e[13],y=e[14],g=e[15];return t[0]=n,t[1]=o,t[2]=u,t[3]=f,t[4]=r,t[5]=a,t[6]=h,t[7]=m,t[8]=i,t[9]=l,t[10]=d,t[11]=y,t[12]=s,t[13]=c,t[14]=p,t[15]=g,t},inverse:oe,determinant:function(e){const t=e[0],n=e[1],r=e[2],i=e[3],s=e[4],o=e[5],a=e[6],l=e[7],c=e[8],u=e[9],h=e[10],d=e[11],p=e[12],f=e[13],m=e[14],y=e[15],g=h*y,v=m*d,x=a*y,w=m*l,b=a*d,_=h*l,k=r*y,T=m*i,S=r*d,P=h*i,E=r*l,A=a*i;return t*(g*o+w*u+b*f-(v*o+x*u+_*f))+s*(v*n+k*u+P*f-(g*n+T*u+S*f))+c*(x*n+T*o+E*f-(w*n+k*o+A*f))+p*(_*n+S*o+A*u-(b*n+P*o+E*u))},invert:ae,multiply:le,mul:ce,setTranslation:function(e,t,n){return e!==(n=n||se())&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11]),n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},getTranslation:function(e,t){return(t=t||a())[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,n){const r=4*t;return(n=n||a())[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},setAxis:function(e,t,n,r){r!==e&&(r=re(e,r));const i=4*n;return r[i+0]=t[0],r[i+1]=t[1],r[i+2]=t[2],r},getScaling:function(e,t){t=t||a();const n=e[0],r=e[1],i=e[2],s=e[4],o=e[5],l=e[6],c=e[8],u=e[9],h=e[10];return t[0]=Math.sqrt(n*n+r*r+i*i),t[1]=Math.sqrt(s*s+o*o+l*l),t[2]=Math.sqrt(c*c+u*u+h*h),t},perspective:function(e,t,n,r,i){i=i||new ne(16);const s=Math.tan(.5*Math.PI-.5*e);if(i[0]=s/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=s,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,r===1/0)i[10]=-1,i[14]=-n;else{const e=1/(n-r);i[10]=r*e,i[14]=r*n*e}return i},ortho:function(e,t,n,r,i,s,o){return(o=o||new ne(16))[0]=2/(t-e),o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=2/(r-n),o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=1/(i-s),o[11]=0,o[12]=(t+e)/(e-t),o[13]=(r+n)/(n-r),o[14]=i/(i-s),o[15]=1,o},frustum:function(e,t,n,r,i,s,o){const a=t-e,l=r-n,c=i-s;return(o=o||new ne(16))[0]=2*i/a,o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=2*i/l,o[6]=0,o[7]=0,o[8]=(e+t)/a,o[9]=(r+n)/l,o[10]=s/c,o[11]=-1,o[12]=0,o[13]=0,o[14]=i*s/c,o[15]=0,o},aim:function(e,t,n,r){return r=r||new ne(16),ue=ue||a(),he=he||a(),de=de||a(),H(C(t,e,de),de),H(j(n,de,ue),ue),H(j(de,ue,he),he),r[0]=ue[0],r[1]=ue[1],r[2]=ue[2],r[3]=0,r[4]=he[0],r[5]=he[1],r[6]=he[2],r[7]=0,r[8]=de[0],r[9]=de[1],r[10]=de[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},cameraAim:function(e,t,n,r){return r=r||new ne(16),ue=ue||a(),he=he||a(),de=de||a(),H(C(e,t,de),de),H(j(n,de,ue),ue),H(j(de,ue,he),he),r[0]=ue[0],r[1]=ue[1],r[2]=ue[2],r[3]=0,r[4]=he[0],r[5]=he[1],r[6]=he[2],r[7]=0,r[8]=de[0],r[9]=de[1],r[10]=de[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},lookAt:function(e,t,n,r){return r=r||new ne(16),ue=ue||a(),he=he||a(),de=de||a(),H(C(e,t,de),de),H(j(n,de,ue),ue),H(j(de,ue,he),he),r[0]=ue[0],r[1]=he[0],r[2]=de[0],r[3]=0,r[4]=ue[1],r[5]=he[1],r[6]=de[1],r[7]=0,r[8]=ue[2],r[9]=he[2],r[10]=de[2],r[11]=0,r[12]=-(ue[0]*e[0]+ue[1]*e[1]+ue[2]*e[2]),r[13]=-(he[0]*e[0]+he[1]*e[1]+he[2]*e[2]),r[14]=-(de[0]*e[0]+de[1]*e[1]+de[2]*e[2]),r[15]=1,r},translation:function(e,t){return(t=t||new ne(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},translate:function(e,t,n){n=n||new ne(16);const r=t[0],i=t[1],s=t[2],o=e[0],a=e[1],l=e[2],c=e[3],u=e[4],h=e[5],d=e[6],p=e[7],f=e[8],m=e[9],y=e[10],g=e[11],v=e[12],x=e[13],w=e[14],b=e[15];return e!==n&&(n[0]=o,n[1]=a,n[2]=l,n[3]=c,n[4]=u,n[5]=h,n[6]=d,n[7]=p,n[8]=f,n[9]=m,n[10]=y,n[11]=g),n[12]=o*r+u*i+f*s+v,n[13]=a*r+h*i+m*s+x,n[14]=l*r+d*i+y*s+w,n[15]=c*r+p*i+g*s+b,n},rotationX:function(e,t){t=t||new ne(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateX:function(e,t,n){n=n||new ne(16);const r=e[4],i=e[5],s=e[6],o=e[7],a=e[8],l=e[9],c=e[10],u=e[11],h=Math.cos(t),d=Math.sin(t);return n[4]=h*r+d*a,n[5]=h*i+d*l,n[6]=h*s+d*c,n[7]=h*o+d*u,n[8]=h*a-d*r,n[9]=h*l-d*i,n[10]=h*c-d*s,n[11]=h*u-d*o,e!==n&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotationY:function(e,t){t=t||new ne(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateY:function(e,t,n){n=n||new ne(16);const r=e[0],i=e[1],s=e[2],o=e[3],a=e[8],l=e[9],c=e[10],u=e[11],h=Math.cos(t),d=Math.sin(t);return n[0]=h*r-d*a,n[1]=h*i-d*l,n[2]=h*s-d*c,n[3]=h*o-d*u,n[8]=h*a+d*r,n[9]=h*l+d*i,n[10]=h*c+d*s,n[11]=h*u+d*o,e!==n&&(n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotationZ:function(e,t){t=t||new ne(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateZ:function(e,t,n){n=n||new ne(16);const r=e[0],i=e[1],s=e[2],o=e[3],a=e[4],l=e[5],c=e[6],u=e[7],h=Math.cos(t),d=Math.sin(t);return n[0]=h*r+d*a,n[1]=h*i+d*l,n[2]=h*s+d*c,n[3]=h*o+d*u,n[4]=h*a-d*r,n[5]=h*l-d*i,n[6]=h*c-d*s,n[7]=h*u-d*o,e!==n&&(n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},axisRotation:pe,rotation:fe,axisRotate:me,rotate:ye,scaling:function(e,t){return(t=t||new ne(16))[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},scale:function(e,t,n){n=n||new ne(16);const r=t[0],i=t[1],s=t[2];return n[0]=r*e[0],n[1]=r*e[1],n[2]=r*e[2],n[3]=r*e[3],n[4]=i*e[4],n[5]=i*e[5],n[6]=i*e[6],n[7]=i*e[7],n[8]=s*e[8],n[9]=s*e[9],n[10]=s*e[10],n[11]=s*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},uniformScaling:function(e,t){return(t=t||new ne(16))[0]=e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},uniformScale:function(e,t,n){return(n=n||new ne(16))[0]=t*e[0],n[1]=t*e[1],n[2]=t*e[2],n[3]=t*e[3],n[4]=t*e[4],n[5]=t*e[5],n[6]=t*e[6],n[7]=t*e[7],n[8]=t*e[8],n[9]=t*e[9],n[10]=t*e[10],n[11]=t*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n}});let ve=Float32Array;function xe(e,t,n,r){const i=new ve(4);return void 0!==e&&(i[0]=e,void 0!==t&&(i[1]=t,void 0!==n&&(i[2]=n,void 0!==r&&(i[3]=r)))),i}const we=xe;function be(e,t,n){n=n||new ve(4);const r=.5*t,i=Math.sin(r);return n[0]=i*e[0],n[1]=i*e[1],n[2]=i*e[2],n[3]=Math.cos(r),n}function _e(e,t,n){n=n||new ve(4);const r=e[0],i=e[1],s=e[2],o=e[3],a=t[0],l=t[1],c=t[2],u=t[3];return n[0]=r*u+o*a+i*c-s*l,n[1]=i*u+o*l+s*a-r*c,n[2]=s*u+o*c+r*l-i*a,n[3]=o*u-r*a-i*l-s*c,n}const ke=_e;function Te(e,t,n,i){i=i||new ve(4);const s=e[0],o=e[1],a=e[2],l=e[3];let c,u,h=t[0],d=t[1],p=t[2],f=t[3],m=s*h+o*d+a*p+l*f;if(m<0&&(m=-m,h=-h,d=-d,p=-p,f=-f),1-m>r){const e=Math.acos(m),t=Math.sin(e);c=Math.sin((1-n)*e)/t,u=Math.sin(n*e)/t}else c=1-n,u=n;return i[0]=c*s+u*h,i[1]=c*o+u*d,i[2]=c*a+u*p,i[3]=c*l+u*f,i}function Se(e,t){return(t=t||new ve(4))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}const Pe=Se;function Ee(e,t,n){return(n=n||new ve(4))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n[3]=e[3]-t[3],n}const Ae=Ee;function Me(e,t,n){return(n=n||new ve(4))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n[3]=e[3]*t,n}const ze=Me;function Ie(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function Ce(e){const t=e[0],n=e[1],r=e[2],i=e[3];return Math.sqrt(t*t+n*n+r*r+i*i)}const Be=Ce;function Oe(e){const t=e[0],n=e[1],r=e[2],i=e[3];return t*t+n*n+r*r+i*i}const Re=Oe;function Ne(e,t){t=t||new ve(4);const n=e[0],r=e[1],i=e[2],s=e[3],o=Math.sqrt(n*n+r*r+i*i+s*s);return o>1e-5?(t[0]=n/o,t[1]=r/o,t[2]=i/o,t[3]=s/o):(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}let Ue,je,De,Fe,qe;var Le=Object.freeze({__proto__:null,create:xe,setDefaultType:function(e){const t=ve;return ve=e,t},fromValues:we,set:function(e,t,n,r,i){return(i=i||new ve(4))[0]=e,i[1]=t,i[2]=n,i[3]=r,i},fromAxisAngle:be,toAxisAngle:function(e,t){t=t||a(4);const n=2*Math.acos(e[3]),i=Math.sin(.5*n);return i>r?(t[0]=e[0]/i,t[1]=e[1]/i,t[2]=e[2]/i):(t[0]=1,t[1]=0,t[2]=0),{angle:n,axis:t}},angle:function(e,t){const n=Ie(e,t);return Math.acos(2*n*n-1)},multiply:_e,mul:ke,rotateX:function(e,t,n){n=n||new ve(4);const r=.5*t,i=e[0],s=e[1],o=e[2],a=e[3],l=Math.sin(r),c=Math.cos(r);return n[0]=i*c+a*l,n[1]=s*c+o*l,n[2]=o*c-s*l,n[3]=a*c-i*l,n},rotateY:function(e,t,n){n=n||new ve(4);const r=.5*t,i=e[0],s=e[1],o=e[2],a=e[3],l=Math.sin(r),c=Math.cos(r);return n[0]=i*c-o*l,n[1]=s*c+a*l,n[2]=o*c+i*l,n[3]=a*c-s*l,n},rotateZ:function(e,t,n){n=n||new ve(4);const r=.5*t,i=e[0],s=e[1],o=e[2],a=e[3],l=Math.sin(r),c=Math.cos(r);return n[0]=i*c+s*l,n[1]=s*c-i*l,n[2]=o*c+a*l,n[3]=a*c-o*l,n},slerp:Te,inverse:function(e,t){t=t||new ve(4);const n=e[0],r=e[1],i=e[2],s=e[3],o=n*n+r*r+i*i+s*s,a=o?1/o:0;return t[0]=-n*a,t[1]=-r*a,t[2]=-i*a,t[3]=s*a,t},conjugate:function(e,t){return(t=t||new ve(4))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t},fromMat:function(e,t){t=t||new ve(4);const n=e[0]+e[5]+e[10];if(n>0){const r=Math.sqrt(n+1);t[3]=.5*r;const i=.5/r;t[0]=(e[6]-e[9])*i,t[1]=(e[8]-e[2])*i,t[2]=(e[1]-e[4])*i}else{let n=0;e[5]>e[0]&&(n=1),e[10]>e[4*n+n]&&(n=2);const r=(n+1)%3,i=(n+2)%3,s=Math.sqrt(e[4*n+n]-e[4*r+r]-e[4*i+i]+1);t[n]=.5*s;const o=.5/s;t[3]=(e[4*r+i]-e[4*i+r])*o,t[r]=(e[4*r+n]+e[4*n+r])*o,t[i]=(e[4*i+n]+e[4*n+i])*o}return t},fromEuler:function(e,t,n,r,i){i=i||new ve(4);const s=.5*e,o=.5*t,a=.5*n,l=Math.sin(s),c=Math.cos(s),u=Math.sin(o),h=Math.cos(o),d=Math.sin(a),p=Math.cos(a);switch(r){case"xyz":i[0]=l*h*p+c*u*d,i[1]=c*u*p-l*h*d,i[2]=c*h*d+l*u*p,i[3]=c*h*p-l*u*d;break;case"xzy":i[0]=l*h*p-c*u*d,i[1]=c*u*p-l*h*d,i[2]=c*h*d+l*u*p,i[3]=c*h*p+l*u*d;break;case"yxz":i[0]=l*h*p+c*u*d,i[1]=c*u*p-l*h*d,i[2]=c*h*d-l*u*p,i[3]=c*h*p+l*u*d;break;case"yzx":i[0]=l*h*p+c*u*d,i[1]=c*u*p+l*h*d,i[2]=c*h*d-l*u*p,i[3]=c*h*p-l*u*d;break;case"zxy":i[0]=l*h*p-c*u*d,i[1]=c*u*p+l*h*d,i[2]=c*h*d+l*u*p,i[3]=c*h*p-l*u*d;break;case"zyx":i[0]=l*h*p-c*u*d,i[1]=c*u*p+l*h*d,i[2]=c*h*d-l*u*p,i[3]=c*h*p+l*u*d;break;default:throw new Error(`Unknown rotation order: ${r}`)}return i},copy:Se,clone:Pe,add:function(e,t,n){return(n=n||new ve(4))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n[3]=e[3]+t[3],n},subtract:Ee,sub:Ae,mulScalar:Me,scale:ze,divScalar:function(e,t,n){return(n=n||new ve(4))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n[3]=e[3]/t,n},dot:Ie,lerp:function(e,t,n,r){return(r=r||new ve(4))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r[3]=e[3]+n*(t[3]-e[3]),r},length:Ce,len:Be,lengthSq:Oe,lenSq:Re,normalize:Ne,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<r&&Math.abs(e[1]-t[1])<r&&Math.abs(e[2]-t[2])<r&&Math.abs(e[3]-t[3])<r},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},identity:function(e){return(e=e||new ve(4))[0]=0,e[1]=0,e[2]=0,e[3]=1,e},rotationTo:function(e,t,n){n=n||new ve(4),Ue=Ue||a(),je=je||a(1,0,0),De=De||a(0,1,0);const r=D(e,t);return r<-.999999?(j(je,e,Ue),q(Ue)<1e-6&&j(De,e,Ue),H(Ue,Ue),be(Ue,Math.PI,n),n):r>.999999?(n[0]=0,n[1]=0,n[2]=0,n[3]=1,n):(j(e,t,Ue),n[0]=Ue[0],n[1]=Ue[1],n[2]=Ue[2],n[3]=1+r,Ne(n,n))},sqlerp:function(e,t,n,r,i,s){return s=s||new ve(4),Fe=Fe||new ve(4),qe=qe||new ve(4),Te(e,r,i,Fe),Te(t,n,i,qe),Te(Fe,qe,2*i*(1-i),s),s}});Float32Array;const Ve=(e,t)=>{const n=new Uint32Array(t);Ci.queue.writeBuffer(e,0,n.buffer,0,t.length*Uint32Array.BYTES_PER_ELEMENT)},Ge=(e,t)=>{const n=new Uint32Array(e),r=Ci.createBuffer({size:n.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:t});return Ve(r,e),r},We=(e,t)=>{if(t instanceof Float32Array)Ci.queue.writeBuffer(e,0,t.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT);else{const n=new Float32Array(t);Ci.queue.writeBuffer(e,0,n.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT)}},Ye="fn calculateRayDirection(uv: vec2<f32>, inverseProjection: mat4x4<f32>) -> vec3<f32> {\n  let clipSpace = vec2(1.0 - uv.x, 1.0 - uv.y) * 2.0 - 1.0;\n  let viewRay = vec3<f32>(clipSpace, 1.0);\n  let viewRayView = inverseProjection * vec4(viewRay, 1.0);\n  return normalize(viewRayView.xyz);\n}\n\nfn normaliseValue(min: f32, max: f32, value: f32) -> f32 {\n  return (value - min) / (max - min);\n}",$e="// TODO: actually make linear\nfn distanceToReversedLinearDepth(cameraDistance: f32, near: f32, far: f32) -> f32 {\n  return (far - cameraDistance) / (far - near);//Reversed\n}\n\nfn reversedLinearDepthToDistance(linearDepth: f32, near: f32, far: f32) -> f32 {\n    return far - linearDepth * (far - near); //Reversed\n}\n\nfn distanceToLogarithmicDepth(cameraDistance: f32, near: f32, far: f32) -> f32 {\n    return log2(cameraDistance / near + 1.0) / log2(far / near + 1.0);\n}\n\nfn logarithmicDepthToDistance(logDepth: f32, near: f32, far: f32) -> f32 {\n    let base = far / near + 1.0;\n    return near * (pow(base, logDepth) - 1.0);\n}",He="r8unorm",Xe="rgba16float",Ze="r32float",Ke="struct BoxIntersectionResult {\n    tNear: f32,\n    tFar: f32,\n    normal: vec3<f32>,\n    isHit: bool,\n}\n\nfn boxIntersection(\n    ro: vec3<f32>,\n    rd: vec3<f32>,\n    boxSize: vec3<f32>,\n) -> BoxIntersectionResult {\n    var result = BoxIntersectionResult();\n    result.isHit = false;\n    result.tNear = -1.0;\n    result.tFar = -1.0;\n\n    let offsetRayOrigin = ro - boxSize;\n    let m: vec3<f32> = 1.0 / rd;\n    let n: vec3<f32> = m * offsetRayOrigin;\n    let k: vec3<f32> = abs(m) * boxSize;\n    let t1: vec3<f32> = -n - k;\n    let t2: vec3<f32> = -n + k;\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\n    if (tN > tF || tF < 0.0) {\n        return result;\n    }\n    // Check if the ray starts inside the volume\n    let insideVolume = tN < 0.0;\n    var normal = select(\n        step(vec3<f32>(tN), t1),\n        step(t2, vec3<f32>(tF)),\n        tN < 0.0,\n    );\n    normal *= -sign(rd);\n    // Check if the intersection is in the correct direction, only if inside the volume\n    if (insideVolume && dot(normal, rd) < 0.0) {\n        return result;\n    }\n    result.tNear = tN;\n    result.tFar = tF;\n    result.normal = normal;\n    result.isHit = true;\n    return result;\n}\n\nfn get3x3From4x4(m: mat4x4<f32>) -> mat3x3<f32> {\n    return mat3x3<f32>(\n        m[0].xyz,\n        m[1].xyz,\n        m[2].xyz,\n    );\n}\n\n\nfn intersectOBB(\n    ro: vec3<f32>,\n    rd: vec3<f32>,\n    boxSize: vec3<f32>,\n    boxOrientation: mat3x3<f32>,\n) -> BoxIntersectionResult {\n    var result = BoxIntersectionResult();\n    result.isHit = false;\n    result.tNear = -1.0;\n    result.tFar = -1.0;\n\n    let offsetRayOrigin = ro - boxSize;\n    let m: vec3<f32> = 1.0 / rd;\n    let n: vec3<f32> = m * offsetRayOrigin;\n    let k: vec3<f32> = abs(m) * boxSize;\n    let t1: vec3<f32> = -n - k;\n    let t2: vec3<f32> = -n + k;\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\n    if (tN > tF || tF < 0.0) {\n        return result;\n    }\n    // Check if the ray starts inside the volume\n    let insideVolume = tN < 0.0;\n    var normal = select(\n        step(vec3<f32>(tN), t1),\n        step(t2, vec3<f32>(tF)),\n        tN < 0.0,\n    );\n    normal *= -sign(rd);\n    // Check if the intersection is in the correct direction, only if inside the volume\n    if (insideVolume && dot(normal, rd) < 0.0) {\n        return result;\n    }\n    result.tNear = tN;\n    result.tFar = tF;\n    result.normal = normal;\n    result.isHit = true;\n    return result;\n}",Qe='const EPSILON = 0.001;\nconst MAX_RAY_STEPS = 256;\nconst FAR_PLANE = 10000.0;\nconst NEAR_PLANE = 0.5;\nconst STACK_LEN: u32 = 32u;\n\n// Function to transform a normal vector from object to world space\nfn transformNormal(inverseTransform: mat4x4<f32>, normal: vec3<f32>) -> vec3<f32> {\n    let worldNormal = normalize((vec4<f32>(normal, 0.0) * inverseTransform).xyz);\n    return worldNormal;\n}\n\n// Function to transform an object space position to world space\nfn transformPosition(transform: mat4x4<f32>, position: vec3<f32>) -> vec3<f32> {\n    let worldPosition = (transform * vec4<f32>(position, 1.0)).xyz;\n    return worldPosition;\n}\n\n\nstruct VoxelObject {\n  transform: mat4x4<f32>,\n  inverseTransform: mat4x4<f32>,\n  previousTransform: mat4x4<f32>,\n  previousInverseTransform: mat4x4<f32>,\n  size : vec3<f32>,\n  atlasLocation : vec3<f32>,\n  paletteIndex : f32,\n  octreeBufferIndex: u32\n}\n\nstruct RayMarchResult {\n  voxelObjectIndex: i32,\n  colour: vec3<f32>,\n  normal: vec3<f32>,\n  hit: bool,\n  t: f32,\n  iterations: u32,\n}\n\nfn isInBounds(position: vec3<i32>, size: vec3<i32>) -> bool {\n  return all(position >= vec3(0)) && all(position <= size - vec3(1));\n}\n\nfn getBit(value: u32, bitIndex: u32) -> bool {\n  return (value & (1u << bitIndex)) != 0;\n}\n\nfn getScaleFromMatrix(transform: mat4x4<f32>) -> vec3<f32> {\n  return vec3<f32>(length(transform[0].xyz), length(transform[1].xyz), length(transform[2].xyz));\n}\n\nfn rayMarchAtMip(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\n  var output = RayMarchResult();\n\n//  var intersect = boxIntersection(objectRayOrigin, objectRayDirection,voxelObject.size * 0.5);\n//\n//  if(intersect.isHit){\n//    output.hit = true;\n//    output.t = intersect.tNear;\n//    output.normal = intersect.normal;\n//    output.colour = vec3<f32>(0.0, 1.0, 0.0);\n//    return output;\n//  }\n\n  let rayDirSign = sign(objectRayDirection);\n  let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\n  var voxelSize = vec3(f32(1 << mipLevel));\n  var shiftedRayOrigin = objectRayOrigin - objectRayDirection * EPSILON;\n  var objectPos = shiftedRayOrigin;\n  var currentIndex = vec3<i32>(floor(objectPos));\n  var scaledRayOrigin =  objectRayOrigin / voxelSize;\n  var scaledObjectPos = floor(objectPos / voxelSize);\n  var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\n  var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\n  let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\n  var objectNormal = mask * -rayDirSign;\n  var tCurrent = min(tMax.x, min(tMax.y, tMax.z));\n\n  // RAYMARCH\n  for(var i = 0; i < MAX_RAY_STEPS; i++)\n  {\n    let samplePosition = vec3<u32>(currentIndex) + atlasLocation;\n    let mipSample0 = textureLoad(voxels, samplePosition / vec3((1u << mipLevel)), mipLevel);\n\n    if(mipSample0.r > 0.0 && isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\n        output.normal = objectNormal;\n        output.hit = true;\n        output.t = tCurrent + EPSILON;\n//        output.colour = vec3<f32>(mipSample0.r, 0,0);\n        // palette system no longer used in shader, precomputed in octree\n        output.colour = vec3(1,0,0);\n        output.iterations = u32(i);\n        return output;\n    }\n\n    var scaledRayOrigin = shiftedRayOrigin / voxelSize;\n    var scaledObjectPos = floor(objectPos / voxelSize);\n    var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\n    var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\n    let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\n\n    tCurrent = min(tMax.x, min(tMax.y, tMax.z));\n    objectPos = objectRayOrigin + objectRayDirection * tCurrent;\n    currentIndex = vec3<i32>(floor(objectPos / voxelSize) * voxelSize);\n    objectNormal = mask * -rayDirSign;\n\n//    if(!isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\n//        break;\n//    }\n  }\n  return output;\n}\n\nfn rayMarchTransformed(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\n      let halfExtents = voxelObject.size * 0.5;\n      var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz + halfExtents;\n      let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\n      return  rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\n}\n\nstruct Stack {\n  arr: array<i32, STACK_LEN>,\n\thead: u32,\n}\n\nfn stack_new() -> Stack {\n    var arr: array<i32, STACK_LEN>;\n    return Stack(arr, 0u);\n}\n\nfn stack_push(stack: ptr<function, Stack>, val: i32) {\n    (*stack).arr[(*stack).head] = val;\n    (*stack).head += 1u;\n}\n\nfn stack_pop(stack: ptr<function, Stack>) -> i32 {\n    (*stack).head -= 1u;\n    return (*stack).arr[(*stack).head];\n}\n\nstruct StackU32 {\n  arr: array<u32, STACK_LEN>,\n  head: u32,\n}\n\nfn stacku32_new() -> StackU32 {\n    var arr: array<u32, STACK_LEN>;\n    return StackU32(arr, 0u);\n}\n\nfn stacku32_push(stack: ptr<function, StackU32>, val: u32) {\n    (*stack).arr[(*stack).head] = val;\n    (*stack).head += 1u;\n}\n\nfn stacku32_pop(stack: ptr<function, StackU32>) -> u32 {\n    (*stack).head -= 1u;\n    return (*stack).arr[(*stack).head];\n}\n\n\nstruct InternalNode {\n  firstChildOffset: u32,\n  childMask: u32,\n  position: vec3<u32>,\n  size: u32,\n}\n\nstruct LeafNode {\n  colour: vec3<u32>,\n  position: vec3<u32>,\n}\n\nconst mask8 = 0xFFu;\nconst mask16 = 0xFFFFu;\nconst mask24 = 0xFFFFFFu;\n\n// if first child offset is 0, then it is a leaf\nfn isLeaf(node:vec2<u32>) -> bool {\n  return (node[0] & mask16) == 0;\n}\n\n/**\n  * Unpacks a leaf node from a 32 bit integer\n  * First 16 bits are the leaf flag (0)\n  * The next 8 bits are the red component\n  * The next 8 bits are the green component\n  * The next 8 bits are the blue component\n  * The next 8 bits are the x position\n  * The next 8 bits are the y position\n  * The next 8 bits are the z position\n  */\nfn unpackLeaf(node: vec2<u32>) -> LeafNode {\n  var output = LeafNode();\n  let first4Bytes = node.x;\n  let second4Bytes = node.y;\n  let r = (first4Bytes >> 16u) & mask8;\n  let g = (first4Bytes >> 24u) & mask8;\n  let b = second4Bytes & mask8;\n  let x = (second4Bytes >> 8u) & mask8;\n  let y = (second4Bytes >> 16u) & mask8;\n  let z = (second4Bytes >> 24u) & mask8;\n  output.colour = vec3<u32>(r, g, b);\n  output.position = vec3<u32>(x, y, z);\n  return output;\n}\n\n/**\n  * Unpacks an internal node from a 32 bit integer\n  * First 24 bits are the firstChildOffset\n  * The next 8 bits are the child mask\n  * The next 8 bits are the x position\n  * The next 8 bits are the y position\n  * The next 8 bits are the z position\n  * The next 8 bits are the size\n  */\nfn unpackInternal(node: vec2<u32>) -> InternalNode {\n  var output = InternalNode();\n  let first4Bytes = node.x;\n  let second4Bytes = node.y;\n  output.firstChildOffset = first4Bytes & mask24;\n  output.childMask = (first4Bytes >> 24u) & mask8;\n  let x = second4Bytes & mask8;\n  let y = (second4Bytes >> 8u) & mask8;\n  let z = (second4Bytes >> 16u) & mask8;\n  output.position = vec3<u32>(x, y, z);\n  output.size = (second4Bytes >> 24u) & mask8;\n  return output;\n}\n\nfn getNodeSizeAtDepth(rootSize: u32, depth: u32) -> u32 {\n  return rootSize >> depth;\n}\n\nfn octantIndexToOffset(index: u32) -> vec3<u32> {\n  return vec3<u32>(\n    select(0u, 1u, (index & 1u) != 0u),\n    select(0u, 1u, (index & 2u) != 0u),\n    select(0u, 1u, (index & 4u) != 0u)\n  );\n}\n\nfn octantOffsetToIndex(offset: vec3<u32>) -> u32 {\n  return offset.x + offset.y * 2u + offset.z * 4u;\n}\n\nfn ceilToPowerOfTwo(value: f32) -> f32 {\n  return pow(2.0, ceil(log2(value)));\n}\n\nfn max3(value: vec3<f32>) -> f32 {\n  return max(value.x, max(value.y, value.z));\n}\n\nfn planeIntersection(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, planeNormal: vec3<f32>, planeDistance: f32) -> f32 {\n  return -(dot(rayOrigin,planeNormal)+planeDistance)/dot(rayDirection,planeNormal);\n}\n\nstruct PlaneIntersection {\n  tNear: f32,\n  side: vec3<i32>\n}\n\n\nfn sort3Asc(a: f32, b: f32, c: f32) -> vec3<f32> {\n  return vec3<f32>(\n    min(a, min(b, c)),\n    min(max(a, b), max(min(a, b), c)),\n    max(a, max(b, c))\n  );\n}\n\nfn sort3Desc(a: f32, b: f32, c: f32) -> vec3<f32> {\n  return vec3<f32>(\n    max(a, max(b, c)),\n    max(min(a, b), min(max(a, b), c)),\n    min(a, min(b, c))\n  );\n}\n\nfn getPlaneIntersections(rayOrigin: vec3<f32>, rayDirection:vec3<f32>, nodeSize: f32) -> vec3<f32> {\n    let boxExtents = nodeSize * 0.5;\n\n    var yPlaneIntersectionTNear = planeIntersection(rayOrigin, rayDirection, vec3(0.0, -1, 0.0), boxExtents);\n    var xPlaneIntersectionTNear  = planeIntersection(rayOrigin, rayDirection, vec3(-1, 0.0, 0.0), boxExtents);\n    var zPlaneIntersectionTNear  = planeIntersection(rayOrigin, rayDirection, vec3(0.0, 0.0, -1), boxExtents);\n\n    // If the intersection is outside the bounds of the node, set it to a large value to ignore it\n    let yPlaneHitPosition = rayOrigin + rayDirection * yPlaneIntersectionTNear  - EPSILON;\n    if(any(yPlaneHitPosition < vec3(0.0)) || any(yPlaneHitPosition > vec3(f32(nodeSize)))){\n      yPlaneIntersectionTNear  = 10000.0;\n    }\n    let xPlaneHitPosition = rayOrigin + rayDirection * xPlaneIntersectionTNear  - EPSILON;\n    if(any(xPlaneHitPosition < vec3(0.0)) || any(xPlaneHitPosition > vec3(f32(nodeSize)))){\n      xPlaneIntersectionTNear  = 10000.0;\n    }\n    let zPlaneHitPosition = rayOrigin + rayDirection * zPlaneIntersectionTNear  - EPSILON;\n    if(any(zPlaneHitPosition < vec3(0.0)) || any(zPlaneHitPosition > vec3(f32(nodeSize)))){\n      zPlaneIntersectionTNear  = 10000.0;\n    }\n\n    return vec3(xPlaneIntersectionTNear, yPlaneIntersectionTNear, zPlaneIntersectionTNear);\n}\n\nfn rayMarchOctree(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> RayMarchResult {\n    let halfExtents = voxelObject.size * 0.5;\n    var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz + halfExtents;\n    let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\n    var output = RayMarchResult();\n    let distanceToRoot = boxIntersection(objectRayOrigin, objectRayDirection, voxelObject.size * 0.5).tNear;\n\n    // Set the initial t value to the far plane - essentially an out of bounds value\n    output.t = FAR_PLANE;\n\n    // Create a stack to hold the indices of the nodes we need to check\n    var stack = stacku32_new();\n\n    // Push the root node index onto the stack\n    stacku32_push(&stack, voxelObject.octreeBufferIndex);\n\n    // Main loop\n    while (stack.head > 0u && output.iterations < MAX_STEPS) {\n      output.iterations += 1u;\n      let nodeIndex = stacku32_pop(&stack);\n      let node = octreeBuffer[nodeIndex];\n\n      if(isLeaf(node)){\n        // TODO: find out how to get normal without extra intersection\n        let leafNode = unpackLeaf(node);\n        let nodeOrigin = vec3(f32(leafNode.position.x), f32(leafNode.position.y), f32(leafNode.position.z));\n        let nodeRayOrigin = objectRayOrigin - nodeOrigin;\n        let nodeIntersection = boxIntersection(nodeRayOrigin, objectRayDirection, vec3(0.5));\n        if(nodeIntersection.isHit){\n          output.hit = true;\n          output.t = nodeIntersection.tNear;\n          output.normal = nodeIntersection.normal;\n          output.colour = vec3<f32>(leafNode.colour) / 255.0;\n          return output;\n        }\n      }\n\n      // Get the current nodes data\n      let internalNode = unpackInternal(node);\n\n      // Get the size of the node to get the center for plane intersections\n      let nodeSize = f32(internalNode.size);\n\n\n\n      // Check if the ray intersects the node, if not, skip it\n      let nodeOrigin = vec3<f32>(internalNode.position);\n      let nodeRayOrigin = objectRayOrigin - nodeOrigin;\n      let nodeIntersection = boxIntersection(nodeRayOrigin, objectRayDirection, vec3(nodeSize * 0.5));\n      let isOriginInside = all(nodeRayOrigin >= vec3(0.0)) && all(nodeRayOrigin <= vec3(nodeSize));\n      if(!nodeIntersection.isHit && !isOriginInside){\n        continue;\n      }\n\n      /// TEMP LOD\n//      if(nodeSize <= 4.0 && distanceToRoot > 1000.0){\n//        output.hit = true;\n//        output.t = nodeIntersection.tNear;\n//        output.normal = nodeIntersection.normal;\n//        output.colour = vec3<f32>(1.0, 0.0, 0.0);\n//        return output;\n//    }\n//      if(nodeSize <= 2.0 && distanceToRoot > 500.0){\n//          output.hit = true;\n//          output.t = nodeIntersection.tNear;\n//          output.normal = nodeIntersection.normal;\n//          output.colour = vec3<f32>(0.0, 1.0, 0.0);\n//          return output;\n//      }\n\n      let centerOfChild = vec3(nodeSize* 0.5);\n\n      // Use planes to find the "inner" intersections\n      let planeIntersections = getPlaneIntersections(nodeRayOrigin, objectRayDirection, nodeSize);\n\n      // Get the closest plane intersection\n      let sortedIntersections = sort3Desc(planeIntersections[0], planeIntersections[1], planeIntersections[2]);\n\n      // Get the side of the planes that the ray is on\n      let sideOfPlanes = vec3<f32>(sign(nodeRayOrigin - centerOfChild));\n\n      // Push the children onto the stack, furthest first\n      for(var i = 0u; i < 3u; i++){\n        if(sortedIntersections[i] > 9999.0){\n          continue;\n        }\n\n        var hitPosition = nodeRayOrigin + objectRayDirection * sortedIntersections[i] - sideOfPlanes * EPSILON;\n        let hitOctant = vec3<u32>(hitPosition >= centerOfChild);\n        let hitIndex = octantOffsetToIndex(hitOctant);\n\n        // If the child is present, push it onto the stack\n        if(getBit(internalNode.childMask, hitIndex)){\n           let childIndex = nodeIndex + internalNode.firstChildOffset + hitIndex;\n           stacku32_push(&stack, childIndex);\n        }\n      }\n\n      // Get octant hit on the surface of the nodes bounding box\n      let intersectionPoint = nodeRayOrigin + objectRayDirection * nodeIntersection.tNear - EPSILON;\n      let hitOctant = vec3<u32>(intersectionPoint >= centerOfChild);\n      let hitIndex = octantOffsetToIndex(vec3<u32>(hitOctant));\n\n      // If the child is present, push it onto the stack\n      if(getBit(internalNode.childMask, hitIndex)){\n        let childIndex = nodeIndex + internalNode.firstChildOffset + hitIndex;\n        stacku32_push(&stack, childIndex);\n      }\n    }\n\n    return output;\n}\n\n\nconst colours = array<vec3<f32>, 8>(\n  vec3<f32>(0.5),\n  vec3<f32>(1.0, 0.0, 0.0),\n  vec3<f32>(0.0, 1.0, 0.0),\n  vec3<f32>(1.0, 1.0, 0.0),\n  vec3<f32>(0.0, 0.0, 1.0),\n  vec3<f32>(1.0, 0.0, 1.0),\n  vec3<f32>(0.0, 1.0, 1.0),\n  vec3<f32>(1.0, 1.0, 1.0)\n);\n\nfn debugColourFromIndex(index: i32) -> vec3<f32> {\n  return colours[index % 8];\n}\n',Je="const BRICK_SIZE = 8;\nconst MAX_STEPS = 256;\n\n\nstruct BVHNode {\n  leftIndex: i32,\n  rightIndex: i32,\n  objectCount: u32,\n  AABBMin: vec3<f32>,\n  AABBMax: vec3<f32>\n}\n\nfn getDistanceToNode(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, node: BVHNode) -> f32 {\n  if(all(rayOrigin >= node.AABBMin) && all(rayOrigin <= node.AABBMax)){\n    return 0.0;\n  }\n  let boxSize = (node.AABBMax - node.AABBMin) / 2;\n  let intersection = boxIntersection(rayOrigin - node.AABBMin, rayDirection, boxSize);\n  if(intersection.isHit){\n    return intersection.tNear;\n  }\n  return -1.0;\n\n}\n\n// Stack-based BVH traversal\nfn rayMarchBVH(rayOrigin: vec3<f32>, rayDirection: vec3<f32>) -> RayMarchResult {\n  var closestIntersection = RayMarchResult();\n closestIntersection.t = FAR_PLANE;\n\n  // Create a stack to store the nodes to visit\n  var stack = stack_new();\n  stack_push(&stack, 0);\n\n  var iterations = 0;\n  var nodeIndex = 0;\n  var closestRayMarchDistance = FAR_PLANE;\n\n  while (stack.head > 0u && iterations < MAX_STEPS) {\n    let node = bvhNodes[nodeIndex];\n    if(node.objectCount > 1){\n      let leftNode = bvhNodes[node.leftIndex];\n      let rightNode = bvhNodes[node.rightIndex];\n      let leftDist = getDistanceToNode(rayOrigin, rayDirection, leftNode);\n      let rightDist = getDistanceToNode(rayOrigin, rayDirection, rightNode);\n      let hitLeft = leftDist >= 0.0;\n      let hitRight = rightDist >= 0.0;\n      if(hitLeft){\n        var nearIndex = node.leftIndex;\n        // We hit both left and right, choose the closest one\n        if(hitRight){\n          if(leftDist < rightDist){\n            // left is closer, push right to stack\n            stack_push(&stack, node.rightIndex);\n          } else {\n            // right is closer, push left to stack\n            stack_push(&stack, node.leftIndex);\n            nearIndex = node.rightIndex;\n          }\n        }\n        nodeIndex = nearIndex;\n      }\n      // We only hit the right Node\n      else if(hitRight){\n        nodeIndex = node.rightIndex;\n      }\n      // We didn't hit any node, pop the stack\n      else{\n        nodeIndex = stack_pop(&stack);\n      }\n    }\n    // valid leaf, raymarch it\n    else if(node.objectCount == 1){\n        let distanceToLeaf = getDistanceToNode(rayOrigin, rayDirection, node);\n        if(distanceToLeaf > closestRayMarchDistance){\n          nodeIndex = stack_pop(&stack);\n          continue;\n        }\n        let worldPos = rayOrigin + rayDirection * distanceToLeaf;\n        let voxelObject = voxelObjects[node.leftIndex];\n//         var rayMarchResult = rayMarchTransformed(voxelObject, rayDirection, worldPos, 0);\n        var rayMarchResult = rayMarchOctree(voxelObject, rayDirection, rayOrigin);\n//        rayMarchResult.voxelObjectIndex = node.leftIndex;\n//               var rayMarchResult = RayMarchResult();\n\n        let totalDistance = rayMarchResult.t + distanceToLeaf;\n        if(rayMarchResult.hit){\n          closestIntersection = rayMarchResult;\n          closestRayMarchDistance = totalDistance;\n          break;\n        }\n\n        nodeIndex = stack_pop(&stack);\n    }\n\n    iterations += 1;\n    closestIntersection.colour += vec3<f32>(0.075);\n  }\n\n  return closestIntersection;\n}\n\nconst MAX_SHADOW_BVH_VISITS = 32;\n\nfn rayMarchBVHShadows(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, mipLevel: u32) -> RayMarchResult {\n   var closestIntersection = RayMarchResult();\n   closestIntersection.t = FAR_PLANE;\n\n   // Create a stack to store the nodes to visit\n   var stack = stack_new();\n   stack_push(&stack, 0);\n\n   var iterations = 0;\n   var nodeIndex = 0;\n\n   while (stack.head > 0u && iterations < MAX_SHADOW_BVH_VISITS) {\n     let node = bvhNodes[nodeIndex];\n     if(node.objectCount > 1){\n       let leftNode = bvhNodes[node.leftIndex];\n       let rightNode = bvhNodes[node.rightIndex];\n       let leftDist = getDistanceToNode(rayOrigin, rayDirection, leftNode);\n       let rightDist = getDistanceToNode(rayOrigin, rayDirection, rightNode);\n       let hitLeft = leftDist >= 0.0;\n       let hitRight = rightDist >= 0.0;\n       if(hitLeft){\n         var nearIndex = node.leftIndex;\n         // We hit both left and right, choose the closest one\n         if(hitRight){\n           if(leftDist < rightDist){\n             // left is closer, push right to stack\n             stack_push(&stack, node.rightIndex);\n           } else {\n             // right is closer, push left to stack\n             stack_push(&stack, node.leftIndex);\n             nearIndex = node.rightIndex;\n           }\n         }\n         nodeIndex = nearIndex;\n       }\n       // We only hit the right Node\n       else if(hitRight){\n         nodeIndex = node.rightIndex;\n       }\n       // We didn't hit any node, pop the stack\n       else{\n         nodeIndex = stack_pop(&stack);\n       }\n     }\n     // valid leaf, raymarch it\n     else if(node.objectCount == 1){\n         let distanceToLeaf = getDistanceToNode(rayOrigin, rayDirection, node);\n         if(distanceToLeaf < 0.0){\n           nodeIndex = stack_pop(&stack);\n           continue;\n         }\n         let worldPos = rayOrigin + rayDirection * distanceToLeaf;\n         let voxelObject = voxelObjects[node.leftIndex];\n//         var rayMarchResult = rayMarchOctree(voxelObject, rayDirection, worldPos);\n         var rayMarchResult = rayMarchTransformed(voxelObject, rayDirection, worldPos, mipLevel);\n         rayMarchResult.t += distanceToLeaf;\n//\n         rayMarchResult.voxelObjectIndex = node.leftIndex;\n         if(rayMarchResult.hit){\n           return rayMarchResult;\n         }\n\n         nodeIndex = stack_pop(&stack);\n     }\n\n     iterations += 1;\n //    closestIntersection.colour += vec3<f32>(0.0075);\n   }\n\n   return closestIntersection;\n }",et="struct ViewProjectionMatrices {\n  viewProjection : mat4x4<f32>,\n  previousViewProjection : mat4x4<f32>,\n  inverseViewProjection : mat4x4<f32>,\n  previousInverseViewProjection : mat4x4<f32>,\n  projection : mat4x4<f32>,\n  inverseProjection: mat4x4<f32>\n};\n\n\nfn plainIntersect(ro: vec3<f32>, rd: vec3<f32>, p: vec4<f32>) -> f32 {\n    return -(dot(ro, p.xyz) + p.w) / dot(rd, p.xyz);\n}\n\nfn getVelocityStatic(worldPos: vec3<f32>, viewProjections:ViewProjectionMatrices) -> vec2<f32>{\n  let vp = viewProjections.viewProjection;\n  let previousVp = viewProjections.previousViewProjection;\n\n  let clipSpace = vp * vec4(worldPos.xyz, 1.0);\n  let previousClipSpace = previousVp * vec4(worldPos.xyz, 1.0);\n\n  let ndc = clipSpace.xyz / clipSpace.w;\n  let previousNdc = previousClipSpace.xyz / previousClipSpace.w;\n\n  var uv = ndc.xy * 0.5 + 0.5;\n  var previousUv = previousNdc.xy * 0.5 + 0.5;\n\n  var velocity = previousUv - uv;\n  return velocity;\n}\n\nfn getVelocity(objectPos: vec3<f32>, modelMatrix: mat4x4<f32>, previousModelMatrix: mat4x4<f32>, viewProjections: ViewProjectionMatrices) -> vec2<f32> {\n  let vp = viewProjections.viewProjection;\n  let previousVp = viewProjections.previousViewProjection;\n\n  // Get current object space position of the current pixel\n  let objectClipSpace = vp * modelMatrix * vec4(objectPos.xyz, 1.0);\n  let objectNDC = objectClipSpace.xyz / objectClipSpace.w;\n\n  // Get previous position of the current object space position\n  let previousObjectClipSpace = previousVp * previousModelMatrix * vec4(objectPos.xyz, 1.0);\n  let previousObjectNDC = previousObjectClipSpace.xyz / previousObjectClipSpace.w;\n\n  // UV\n  var uv = objectNDC.xy * 0.5 + 0.5;\n  var previousUv = previousObjectNDC.xy * 0.5 + 0.5;\n  uv.y = 1.0 - uv.y;\n  previousUv.y = 1.0 - previousUv.y;\n\n  // Get velocity based on the difference between the current and previous positions\n  var velocity = previousUv - uv;\n  return velocity;\n}\n\nfn getLeftChildIndex(index: i32) -> i32 {\n  return index * 2 + 1;\n}\n\nfn getRightChildIndex(index: i32) -> i32 {\n  return index * 2 + 2;\n}\n\nfn getParentIndex(index: i32) -> i32 {\n  return (index - 1) / 2;\n}\n\n\nfn dirIsNegative(dir: vec3<f32>, axis: i32) -> bool {\n  return dir[axis] < 0.0;\n}\n\nfn getDebugColour(index: i32) -> vec3<f32> {\n  let colours = array<vec3<f32>, 6>(\n    vec3<f32>(1.0, 0.0, 0.0),\n    vec3<f32>(0.0, 1.0, 0.0),\n    vec3<f32>(0.0, 0.0, 1.0),\n    vec3<f32>(1.0, 1.0, 0.0),\n    vec3<f32>(1.0, 0.0, 1.0),\n    vec3<f32>(0.0, 1.0, 1.0)\n  );\n  return colours[index % 6];\n}\n\n\nfn customNormalize(value: f32, min: f32, max: f32) -> f32 {\n    return (value - min) / (max - min);\n}\n\nconst IDENTITY_MATRIX = mat4x4<f32>(\n  vec4<f32>(1.0, 0.0, 0.0, 0.0),\n  vec4<f32>(0.0, 1.0, 0.0, 0.0),\n  vec4<f32>(0.0, 0.0, 1.0, 0.0),\n  vec4<f32>(0.0, 0.0, 0.0, 1.0)\n);\n\nfn intersectSphere(origin: vec3<f32>, dir: vec3<f32>, spherePos: vec3<f32>, sphereRad: f32) -> f32\n{\n\tlet oc = origin - spherePos;\n\tlet b = 2.0 * dot(dir, oc);\n\tlet c = dot(oc, oc) - sphereRad*sphereRad;\n\tlet disc = b * b - 4.0 * c;\n\tif (disc < 0.0)\n\t{\n\t  return -1.0;\n\t}\n\n//    float q = (-b + ((b < 0.0) ? -sqrt(disc) : sqrt(disc))) / 2.0;\n  let q = (-b + select(sqrt(disc), -sqrt(disc), b < 0.0)) / 2.0;\n\tvar t0 = q;\n\tvar t1 = c / q;\n\tif (t0 > t1) {\n\t\tvar temp = t0;\n\t\tt0 = t1;\n\t\tt1 = temp;\n\t}\n\tif (t1 < 0.0){\n\t  return -1.0;\n\t}\n\n  return select(t0, t1, t0 < 0.0);\n}\n\nfn skyDomeIntersection(ro: vec3<f32>, rd: vec3<f32>) -> f32 {\n    return intersectSphere(ro, rd, vec3<f32>(0.0, 0.0, 0.0), 100.0);\n}\n\nfn reprojectWorldPos(worldPos: vec3<f32>, viewProjections: ViewProjectionMatrices) -> vec3<f32> {\n  let clipSpace = viewProjections.previousViewProjection * vec4(worldPos.xyz, 1.0);\n  return 0.5 * (clipSpace.xyz / clipSpace.w) + 0.5;\n}\n\nfn reprojectObjectWorldPos(worldPos: vec3<f32>, previousModelMatrix: mat4x4<f32>, viewProjections: ViewProjectionMatrices) -> vec3<f32> {\n  let clipSpace = viewProjections.previousViewProjection * previousModelMatrix * vec4(worldPos.xyz, 1.0);\n  return 0.5 * (clipSpace.xyz / clipSpace.w) + 0.5;\n}\n\nfn simplePhongShading(normal: vec3<f32>, lightDir: vec3<f32>, lightColour: vec3<f32>, ambient: vec3<f32>, diffuse: vec3<f32>, specular: vec3<f32>, shininess: f32) -> vec3<f32> {\n  let nDotL = max(dot(normal, lightDir), 0.0);\n  let diffuseComponent = lightColour * diffuse * nDotL;\n\n  let reflectDir = reflect(-lightDir, normal);\n  let viewDir = normalize(vec3<f32>(0.0, 0.0, 1.0));\n  let spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);\n  let specularComponent = lightColour * specular * spec;\n\n  return ambient + diffuseComponent + specularComponent;\n}\n\nfn tracePixel(pixel: vec2<u32>){\n   let resolution = textureDimensions(albedoTex);\n   var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\n   let rayDirection = calculateRayDirection(uv,viewProjections.inverseViewProjection);\n    var rayOrigin = cameraPosition;\n    var closestIntersection = RayMarchResult();\n\n    let bvhResult = rayMarchBVH(rayOrigin, rayDirection);\n//    if(!bvhResult.hit){\n//      textureStore(albedoTex, pixel, vec4(0));\n//      textureStore(normalTex, pixel, vec4(0));\n//      textureStore(depthWrite, pixel, vec4(0));\n//      let worldPos = rayOrigin + skyDomeIntersection(rayOrigin, rayDirection) * rayDirection;\n//      let velocity = getVelocityStatic(worldPos, viewProjections);\n//      textureStore(velocityTex, pixel, vec4(velocity,0, -1.0));\n//      return;\n//    }\n    closestIntersection = bvhResult;\n\n    let voxelObject = voxelObjects[closestIntersection.voxelObjectIndex];\n    let albedo = closestIntersection.colour;\n//\n//    var albedo = vec3<f32>(0.0);\n//    if(closestIntersection.hit){\n//        let paletteX = i32(closestIntersection.colour.r * 255.0);\n//        let paletteY = i32(voxelObject.paletteIndex);\n//        albedo = textureLoad(paletteTex, vec2(paletteX, paletteY), 0).rgb;\n//    }\n\n    let normal = transformNormal(voxelObject.inverseTransform,vec3<f32>(closestIntersection.normal));\n    let worldPos = rayOrigin + rayDirection * closestIntersection.t;\n    let velocity = getVelocityStatic(worldPos, viewProjections);\n    let cameraDistance = closestIntersection.t;\n//    let normalisedDepth = distanceToReversedLinearDepth(cameraDistance, NEAR_PLANE, FAR_PLANE);\nlet logDepth = distanceToLogarithmicDepth(cameraDistance, NEAR_PLANE, FAR_PLANE);\n\n//    textureStore(albedoTex, pixel, vec4(albedo, 1));\n    let lightDirection = normalize(vec3<f32>(0.0, 0.5, 0.5));\n    let lightColour = vec3<f32>(1.0);\n    let ambientColour = vec3<f32>(0.5);\n    let diffuseColour = vec3<f32>(0.2);\n    let specularColour = vec3<f32>(0.5);\n    let shininess = 1.0;\n    var shaded = simplePhongShading(normal, lightDirection, lightColour, ambientColour, diffuseColour, specularColour, shininess) * albedo;\n    if(all(shaded <= vec3(0.0))){\n      shaded = vec3<f32>(uv.y, uv.y * 0.5, 1.0);\n    }\n    textureStore(albedoTex, pixel, vec4(shaded, 1));\n//    if(!bvhResult.hit){\n//      var debugColour = vec4(closestIntersection.normal, 1);\n//      var debugColour = vec4(f32(closestIntersection.iterations)/ 64.0);\n//      textureStore(albedoTex, pixel, debugColour);\n//    }\n//    textureStore(albedoTex, pixel, vec4(albedo, 1));\n    textureStore(normalTex, pixel, vec4(normal,1));\n    textureStore(velocityTex, pixel, vec4(velocity,0,f32(closestIntersection.voxelObjectIndex)));\n    textureStore(depthWrite, pixel, vec4(logDepth));\n}\n\n@compute @workgroup_size(16, 8, 1)\nfn main(\n   @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\n) {\n  let pixel = GlobalInvocationID.xy;\n  tracePixel(pixel);\n}\n\n@group(1) @binding(0) var<storage, read> screenRayBuffer : array<vec2<u32>>;\n\nconst REMAINING_RAY_OFFSETS = array<vec2<u32>, 8>(\n  vec2<u32>(0,1),\n  vec2<u32>(1,0),\n  vec2<u32>(1,1),\n  vec2<u32>(2,0),\n  vec2<u32>(2,1),\n  vec2<u32>(0,2),\n  vec2<u32>(1,2),\n  vec2<u32>(2,2)\n);\n\n@compute @workgroup_size(64, 1, 1)\nfn bufferMarch(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\n  @builtin(local_invocation_id) LocalInvocationID : vec3<u32>,\n  @builtin(workgroup_id) WorkGroupID : vec3<u32>,\n) {\n  let bufferIndex = GlobalInvocationID.x / 8;\n  let localRayIndex = GlobalInvocationID.x % 8;\n  let pixel = screenRayBuffer[bufferIndex];\n  let offsetPixel = pixel + REMAINING_RAY_OFFSETS[localRayIndex];\n\n  tracePixel(offsetPixel);\n//  textureStore(depthWrite, offsetPixel, vec4(0,0,0,0));\n//   textureStore(albedoTex, offsetPixel, vec4(1,0,0,1));\n}",tt=Symbol(),nt=e=>new Proxy(e,{construct:(e,t,n)=>e.prototype!==n.prototype?Reflect.construct(e,t,n):(e[tt]||(e[tt]=Reflect.construct(e,t,n)),e[tt])});const rt=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,it=(e,t,n=rt)=>{let r=class{#e;#t;#n;#r;#i=t;#s=n;#o=e;constructor(r,i,s){this.#e=r.createTexture({label:e,size:[i,s,1],format:t,usage:n}),this.#t=this.#e.createView({label:e}),this.#n=i,this.#r=s}get texture(){return this.#e}get view(){return this.#t}get width(){return this.#n}get height(){return this.#r}get format(){return this.#i}get usage(){return this.#s}get label(){return this.#o}};return r=function(e,t,n,r){var i,s=arguments.length,o=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(o=(s<3?i(o):s>3?i(t,n,o):i(t,n))||o);return s>3&&o&&Object.defineProperty(t,n,o),o}([nt],r),r},st=it("albedo","rgba8unorm"),ot=it("normal","rgba16float"),at=it("depth",Ze,GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST),lt=it("velocity","rgba16float"),ct=it("world position","rgba32float"),ut=it("output",Xe),ht=async()=>{const e=await(async()=>{const e=Ci.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"2d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba32float",viewDimension:"2d"}},{binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}}]}),t=await Ci.createComputePipelineAsync({label:"reconstruct world pos",layout:Ci.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:Ci.createShaderModule({code:`\n          ${Ye}\n          ${$e}\n          struct ViewProjectionMatrices {\n            viewProjection : mat4x4<f32>,\n            previousViewProjection : mat4x4<f32>,\n            inverseViewProjection : mat4x4<f32>,\n            projection : mat4x4<f32>,\n            inverseProjection: mat4x4<f32>\n          };\n          \n          @group(0) @binding(0) var depthTex : texture_2d<f32>;\n          @group(0) @binding(1) var<uniform> viewProjections : ViewProjectionMatrices;\n          @group(0) @binding(2) var worldPosTex : texture_storage_2d<rgba32float, write>;\n          @group(0) @binding(3) var<uniform> cameraPosition : vec3<f32>;\n          @group(0) @binding(4) var normalTex : texture_storage_2d<rgba16float, write>;\n        \n          const NEAR_PLANE = 0.5;\n          const FAR_PLANE = 10000.0;\n         \n          \n          @compute @workgroup_size(8, 8, 1)\n          fn main(\n            @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\n          ) {\n            let resolution = textureDimensions(worldPosTex);\n            let pixel = GlobalInvocationID.xy;\n            var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\n            let depth = textureLoad(depthTex, pixel, 0).r;\n            let distanceToSurface = logarithmicDepthToDistance(depth, NEAR_PLANE, FAR_PLANE);\n            let rayDirection = calculateRayDirection(uv, viewProjections.inverseViewProjection);\n            var worldPos = cameraPosition + rayDirection * distanceToSurface;\n            \n            if(depth == 0.0) {\n              worldPos = vec3<f32>(0.0, 0.0, 0.0);\n            }\n            \n            //let normal = computeNormalImproved(vec2<i32>(pixel)); \n            //textureStore(normalTex, pixel, vec4(normal, 1));\n            textureStore(worldPosTex, pixel, vec4(worldPos, 1));\n          }\n`}),entryPoint:"main"}});let n;return(r,i)=>{n||(n=(t=>Ci.createBindGroup({layout:e,entries:[{binding:0,resource:t.outputTextures.depthTexture.view},{binding:1,resource:{buffer:t.viewProjectionMatricesBuffer}},{binding:2,resource:t.outputTextures.worldPositionTexture.view},{binding:3,resource:{buffer:t.cameraPositionBuffer}},{binding:4,resource:t.outputTextures.normalTexture.view}]}))(i)),r.setPipeline(t),r.setBindGroup(0,n),r.dispatchWorkgroups(Math.ceil(Bi[0]/8),Math.ceil(Bi[1]/8))}})(),t=await(async()=>{const e={binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},t={binding:5,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d"}},n={binding:7,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},r={binding:6,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:Ze,viewDimension:"2d"}},i={binding:10,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},s={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},o={binding:12,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},a={binding:13,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},l=Ci.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},s,e,t,r,n,{binding:8,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},i,o,a]}),c=await Ci.createComputePipelineAsync({label:"raymarch g-buffer",layout:Ci.createPipelineLayout({bindGroupLayouts:[l]}),compute:{module:Ci.createShaderModule({code:`\n          @group(0) @binding(0) var voxels : texture_3d<f32>;\n          @group(0) @binding(2) var<uniform> cameraPosition : vec3<f32>;\n          @group(0) @binding(3) var<storage> voxelObjects : array<VoxelObject>;\n          @group(0) @binding(4) var normalTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(5) var albedoTex : texture_storage_2d<rgba8unorm, write>;\n          @group(0) @binding(6) var depthWrite : texture_storage_2d<${Ze}, write>;\n          @group(0) @binding(7) var velocityTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(8) var<uniform> viewProjections : ViewProjectionMatrices;\n          @group(0) @binding(10) var<storage> bvhNodes: array<BVHNode>;\n          @group(0) @binding(11) var worldPosTex : texture_storage_2d<rgba32float, write>;\n          @group(0) @binding(12) var paletteTex : texture_2d<f32>;\n          @group(0) @binding(13) var<storage> octreeBuffer : array<vec2<u32>>;\n          ${Ye}\n          ${Ke}\n          ${Qe}\n          ${Je}\n          ${$e}\n          ${et}`}),entryPoint:"main"}});let u;return(e,t)=>{u=(e=>Ci.createBindGroup({layout:l,entries:[{binding:0,resource:e.volumeAtlas.atlasTextureView},{binding:2,resource:{buffer:e.cameraPositionBuffer}},{binding:3,resource:{buffer:e.transformationMatrixBuffer}},{binding:4,resource:e.outputTextures.normalTexture.view},{binding:5,resource:e.outputTextures.albedoTexture.view},{binding:6,resource:e.outputTextures.depthTexture.view},{binding:7,resource:e.outputTextures.velocityTexture.view},{binding:8,resource:{buffer:e.viewProjectionMatricesBuffer}},{binding:10,resource:{buffer:e.bvhBuffer}},{binding:12,resource:e.volumeAtlas.paletteTextureView},{binding:13,resource:{buffer:e.volumeAtlas.octreeBuffer}}]}))(t),e.setPipeline(c),e.setBindGroup(0,u),e.dispatchWorkgroups(Math.ceil(Bi[0]/16),Math.ceil(Bi[1]/8))}})(),n=(await(async()=>{const e=Ci.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},{binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},{binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:Ze,viewDimension:"2d"}},{binding:5,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float",viewDimension:"2d"}},{binding:6,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},{binding:7,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}}]}),t=Ci.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]}),n=Ci.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}}]}),r=Ci.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),i=await Ci.createComputePipelineAsync({label:"interpolate g-buffer",layout:Ci.createPipelineLayout({bindGroupLayouts:[e,t,n,r]}),compute:{module:Ci.createShaderModule({code:`${$e}${Ye}struct ViewProjectionMatrices {\n  viewProjection : mat4x4<f32>,\n  previousViewProjection : mat4x4<f32>,\n  inverseViewProjection : mat4x4<f32>,\n  previousInverseViewProjection : mat4x4<f32>,\n  projection : mat4x4<f32>,\n  inverseProjection: mat4x4<f32>\n};\n\nstruct VoxelObject {\n  transform: mat4x4<f32>,\n  inverseTransform: mat4x4<f32>,\n  previousTransform: mat4x4<f32>,\n  previousInverseTransform: mat4x4<f32>,\n  size : vec3<f32>,\n  atlasLocation : vec3<f32>,\n  paletteIndex : f32,\n  octreeBufferIndex: u32\n}\n\n// Textures\n@group(0) @binding(0) var albedoTex : texture_storage_2d<rgba8unorm, write>;\n@group(0) @binding(1) var albedoCopyTex : texture_2d<f32>;\n@group(0) @binding(2) var velocityTex : texture_storage_2d<rgba16float, write>;\n@group(0) @binding(3) var velocityCopyTex : texture_2d<f32>;\n@group(0) @binding(4) var depthTex : texture_storage_2d<r32float, write>;\n@group(0) @binding(5) var depthCopyTex : texture_2d<f32>;\n@group(0) @binding(6) var normalTex : texture_storage_2d<rgba16float, write>;\n@group(0) @binding(7) var normalCopyTex : texture_2d<f32>;\n\n// Camera\n@group(1) @binding(0) var<uniform> cameraPosition : vec3<f32>;\n@group(1) @binding(1) var<uniform> viewProjections : ViewProjectionMatrices;\n\n// Voxels\n@group(2) @binding(0) var<storage> voxelObjects : array<VoxelObject>;\n@group(2) @binding(1) var volumeAtlasTex : texture_3d<f32>;\n@group(2) @binding(2) var paletteTex : texture_2d<f32>;\n\n// Screen Rays\nstruct ScreenRay {\n  pixel : vec2<u32>,\n};\n@group(3) @binding(0) var<storage, read_write> indirectArgs : array<atomic<u32>>;\n@group(3) @binding(1) var<storage, read_write> screenRays : array<ScreenRay>;\n@group(3) @binding(2) var<storage, read_write> counter : array<atomic<u32>>;\n\nconst neighborOffsets = array<vec2<i32>, 4>(\n  vec2<i32>(0, 0),\n  vec2<i32>(3, 0),\n  vec2<i32>(0, 3),\n  vec2<i32>(3, 3)\n);\n\n// Normal is in voxel (object) space, so will only have 1 or -1 values on one axis\nfn isOnSharedPlane(\n  normal : vec3<f32>,\n  voxelPos : vec3<f32>,\n  neighborVoxelPos : vec3<f32>,\n  neighborNormal : vec3<f32>\n) -> bool {\n  let epsilon = 0.001;\n  if(abs(neighborNormal.y) > 0.0 && abs(normal.y) > 0.0){\n    return abs(voxelPos.y - neighborVoxelPos.y) < epsilon;\n  }\n  if(abs(neighborNormal.x) > 0.0 && abs(normal.x) > 0.0){\n    return abs(voxelPos.x - neighborVoxelPos.x) < epsilon;\n  }\n  if(abs(neighborNormal.z) > 0.0 && abs(normal.z) > 0.0){\n    return abs(voxelPos.z - neighborVoxelPos.z) < epsilon;\n  }\n  return false;\n}\n\nconst NEAR_PLANE = 0.5;\nconst FAR_PLANE = 10000.0;\n\nconst REMAINING_RAY_OFFSETS = array<vec2<u32>, 8>(\n  vec2<u32>(0,1),\n  vec2<u32>(1,0),\n  vec2<u32>(1,1),\n  vec2<u32>(2,0),\n  vec2<u32>(2,1),\n  vec2<u32>(0,2),\n  vec2<u32>(1,2),\n  vec2<u32>(2,2)\n);\n\n// Increment the count of the ray buffers, and only increment the dispatch indirect args every 8 rays, due to the 64x1x1 workgroup size (8 ray groups, 8 rays per group)\nfn incrementCounters() -> u32{\n  let count = atomicAdd(&counter[0], 1);\n  if(count % 8 == 0){\n   atomicAdd(&indirectArgs[0], 1);\n  }\n  return count;\n}\n\n/**\n  * Interpolate the depth, normal and uv of the pixel from the 4 nearest neighbors\n  * if not valid for interpolation, add to a ray buffer for use in the next pass\n  * Ray buffer is a list of pixel groups that need to be re-marched at full resolution\n  * The stored value is the origin of the group ([0,0] in a [3x3] kernel)\n  */\n@compute @workgroup_size(16, 16, 1)\n fn main(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\n) {\n  let texSize = textureDimensions(albedoCopyTex);\n  let pixel = vec2<i32>(GlobalInvocationID.xy);\n  let uv = vec2<f32>(pixel) / vec2<f32>(texSize);\n  let nearestFilledPixel = (pixel / 3) * 3;\n  let isOriginPixel = all(pixel == nearestFilledPixel);\n\n  let isCornerPixel = all(pixel == nearestFilledPixel + vec2(2));\n  let nearestUV = vec2<f32>(nearestFilledPixel) / vec2<f32>(texSize);\n  let velocityRef = textureLoad(velocityCopyTex, nearestFilledPixel, 0);\n  let depthRef = textureLoad(depthCopyTex, nearestFilledPixel, 0).r;\n  let distanceToSurface = logarithmicDepthToDistance(depthRef, NEAR_PLANE, FAR_PLANE);\n\n  // disable interpolation for distances greater than 1000, due to precision issues\n//  if(distanceToSurface > 9000){\n//    if(isOriginPixel){\n//      // Add to ray buffer\n//      let count = incrementCounters();\n//      screenRays[count].pixel = vec2<u32>(pixel);\n//    }else{\n//      textureStore(albedoTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\n//      textureStore(normalTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\n//      textureStore(velocityTex, pixel, vec4(velocityRef.xyz, -1.0));\n//      textureStore(depthTex, pixel, vec4(0.0));\n//    }\n//    return;\n//  }\n\n  var hasFoundObject = false;\n  // Check if each neightbor is the same object\n  for(var i = 1; i < 4; i = i + 1) {\n    let objectIndex = textureLoad(velocityCopyTex, nearestFilledPixel + neighborOffsets[i], 0).a;\n    if(objectIndex != velocityRef.a) {\n       if(isOriginPixel){\n         // Add to ray buffer\n         let count = incrementCounters();\n         screenRays[count].pixel = vec2<u32>(pixel);\n       }\n       return;\n    }\n    if(objectIndex != -1.0) {\n      hasFoundObject = true;\n    }\n  }\n  if(!hasFoundObject) {\n    // Dont march any more rays - we have hit the sky\n    textureStore(velocityTex, pixel, vec4(velocityRef.xyz, -1.0));\n    textureStore(depthTex, pixel, vec4(0.0));\n    textureStore(normalTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\n    textureStore(albedoTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\n    return;\n  }\n  let voxelObject = voxelObjects[i32(velocityRef.a)];\n\n  let normalRef = textureLoad(normalCopyTex, nearestFilledPixel, 0).xyz;\n  let localNormal = (voxelObject.inverseTransform * vec4(normalRef, 0.0)).xyz;\n  let rayDirection = calculateRayDirection(nearestUV, viewProjections.inverseViewProjection);\n  let worldPosRef = cameraPosition + rayDirection * distanceToSurface;\n  let localPosRef = (voxelObject.inverseTransform * vec4(worldPosRef, 1.0)).xyz;\n  let voxelPosRef = floor(localPosRef);\n\n  // Check if each neightbor is the same voxel plane\n  for(var i = 0; i < 4; i = i + 1) {\n    let neighborPixel = nearestFilledPixel + neighborOffsets[i];\n    let neighborUV = vec2<f32>(neighborPixel) / vec2<f32>(texSize);\n    let neighborDepth = textureLoad(depthCopyTex, neighborPixel, 0).r;\n    let neighborNormal = textureLoad(normalCopyTex, neighborPixel, 0).xyz;\n    let neighborLocalNormal = (voxelObject.inverseTransform * vec4(neighborNormal, 0.0)).xyz;\n    let neighborRayDirection = calculateRayDirection(neighborUV, viewProjections.inverseViewProjection);\n    let neighborWorldPos = cameraPosition + neighborRayDirection * logarithmicDepthToDistance(neighborDepth, NEAR_PLANE, FAR_PLANE);\n    let neighborLocalPos = (voxelObject.inverseTransform * vec4(neighborWorldPos, 1.0)).xyz;\n    let neighborVoxelPos = floor(neighborLocalPos);\n\n    if(!isOnSharedPlane(localNormal, voxelPosRef, neighborVoxelPos, neighborLocalNormal)) {\n      if(isOriginPixel){\n        // Add to ray buffer\n        let count = incrementCounters();\n        screenRays[count].pixel = vec2<u32>(pixel);\n      }else{\n        textureStore(albedoTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\n        textureStore(normalTex, pixel, vec4(0.0, 0.0, 0.0, 1.0));\n        textureStore(velocityTex, pixel, vec4(velocityRef.xyz, -1.0));\n        textureStore(depthTex, pixel, vec4(0.0));\n      }\n      return;\n    }\n  }\n\n  let pixel0 = nearestFilledPixel;\n  let pixel1 = nearestFilledPixel + vec2<i32>(3, 0);\n  let pixel2 = nearestFilledPixel + vec2<i32>(0, 3);\n  let pixel3 = nearestFilledPixel + vec2<i32>(3, 3);\n\n  // Interpolate\n  let normal0 = normalRef;\n  let normal1 = textureLoad(normalCopyTex, pixel1, 0).xyz;\n  let normal2 = textureLoad(normalCopyTex, pixel2, 0).xyz;\n  let normal3 = textureLoad(normalCopyTex, pixel3, 0).xyz;\n\n  let depth0 = depthRef;\n  let depth1 = textureLoad(depthCopyTex, pixel1, 0).r;\n  let depth2 = textureLoad(depthCopyTex, pixel2, 0).r;\n  let depth3 = textureLoad(depthCopyTex, pixel3, 0).r;\n\n  let xInterp = f32(pixel.x) % 3.0 / 3.0;\n  let yInterp = f32(pixel.y) % 3.0 / 3.0;\n\n  let depthBottom = mix(depth0, depth1, xInterp);\n  let depthTop = mix(depth2, depth3, xInterp);\n  let depth = mix(depthBottom, depthTop, yInterp);\n\n  let normalTop = mix(normal0, normal1, xInterp);\n  let normalBottom = mix(normal2, normal3, xInterp);\n  let normal = mix(normalTop, normalBottom, yInterp);\n\n  let worldPos =\n    cameraPosition\n    + calculateRayDirection(uv, viewProjections.inverseViewProjection)\n    * logarithmicDepthToDistance(depth, NEAR_PLANE, FAR_PLANE);\n\n  let localPos = (voxelObject.inverseTransform * vec4(worldPos, 1.0)).xyz;\n  let voxelPos = floor(localPos);\n  let atlasSamplePos = vec3<i32>(voxelObject.atlasLocation + voxelPos);\n  let palettePos = textureLoad(volumeAtlasTex, atlasSamplePos, 0).r;\n  let paletteX = i32(palettePos* 255.0);\n  let paletteY = i32(voxelObject.paletteIndex);\n  let albedo = textureLoad(paletteTex, vec2(paletteX, paletteY), 0).rgb;\n\n  textureStore(albedoTex, pixel, vec4(albedo, 1.0));\n  textureStore(velocityTex, pixel, velocityRef);\n  textureStore(depthTex, pixel, vec4(depth));\n  textureStore(normalTex, pixel, vec4(normal, 1.0));\n\n}`}),entryPoint:"main"}});let s,o,a,l;return(c,u,h,d,p,f,m,y,g)=>{s||(s=((t,n,r,i,s)=>Ci.createBindGroup({layout:e,entries:[{binding:0,resource:t.outputTextures.albedoTexture.view},{binding:1,resource:n},{binding:2,resource:t.outputTextures.velocityTexture.view},{binding:3,resource:r},{binding:4,resource:t.outputTextures.depthTexture.view},{binding:5,resource:i},{binding:6,resource:t.outputTextures.normalTexture.view},{binding:7,resource:s}]}))(u,h,d,p,f)),o||(o=(e=>Ci.createBindGroup({layout:t,entries:[{binding:0,resource:{buffer:e.cameraPositionBuffer}},{binding:1,resource:{buffer:e.viewProjectionMatricesBuffer}}]}))(u)),a||(a=(e=>Ci.createBindGroup({layout:n,entries:[{binding:0,resource:{buffer:e.transformationMatrixBuffer}},{binding:1,resource:e.volumeAtlas.atlasTextureView},{binding:2,resource:e.volumeAtlas.paletteTextureView}]}))(u)),l||(l=((e,t,n)=>Ci.createBindGroup({layout:r,entries:[{binding:0,resource:{buffer:e}},{binding:1,resource:{buffer:t}},{binding:2,resource:{buffer:n}}]}))(m,y,g)),c.setPipeline(i),c.setBindGroup(0,s),c.setBindGroup(1,o),c.setBindGroup(2,a),c.setBindGroup(3,l),c.dispatchWorkgroups(Math.ceil(Bi[0]/16),Math.ceil(Bi[1]/8))}})(),await(async()=>{const e={binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},t={binding:5,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d"}},n={binding:7,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},r={binding:6,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:Ze,viewDimension:"2d"}},i={binding:10,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},s={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},o={binding:12,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},a={binding:13,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},l=Ci.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},s,e,t,r,n,{binding:8,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},i,o,a]}),c=Ci.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}}]}),u=await Ci.createComputePipelineAsync({label:"raymarch g-buffer indirect",layout:Ci.createPipelineLayout({bindGroupLayouts:[l,c]}),compute:{module:Ci.createShaderModule({code:`\n          @group(0) @binding(0) var voxels : texture_3d<f32>;\n          @group(0) @binding(2) var<uniform> cameraPosition : vec3<f32>;\n          @group(0) @binding(3) var<storage> voxelObjects : array<VoxelObject>;\n          @group(0) @binding(4) var normalTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(5) var albedoTex : texture_storage_2d<rgba8unorm, write>;\n          @group(0) @binding(6) var depthWrite : texture_storage_2d<${Ze}, write>;\n          @group(0) @binding(7) var velocityTex : texture_storage_2d<rgba16float, write>;\n          @group(0) @binding(8) var<uniform> viewProjections : ViewProjectionMatrices;\n          @group(0) @binding(10) var<storage> bvhNodes: array<BVHNode>;\n          @group(0) @binding(11) var worldPosTex : texture_storage_2d<rgba32float, write>;\n          @group(0) @binding(12) var paletteTex : texture_2d<f32>;\n          @group(0) @binding(13) var<storage> octreeBuffer : array<vec2<u32>>;\n          ${Ye}\n          ${Ke}\n          ${Qe}\n          ${Je}\n          ${$e}\n          ${et}`}),entryPoint:"bufferMarch"}});let h,d;return(e,t,n,r)=>{h=(e=>Ci.createBindGroup({layout:l,entries:[{binding:0,resource:e.volumeAtlas.atlasTextureView},{binding:2,resource:{buffer:e.cameraPositionBuffer}},{binding:3,resource:{buffer:e.transformationMatrixBuffer}},{binding:4,resource:e.outputTextures.normalTexture.view},{binding:5,resource:e.outputTextures.albedoTexture.view},{binding:6,resource:e.outputTextures.depthTexture.view},{binding:7,resource:e.outputTextures.velocityTexture.view},{binding:8,resource:{buffer:e.viewProjectionMatricesBuffer}},{binding:10,resource:{buffer:e.bvhBuffer}},{binding:12,resource:e.volumeAtlas.paletteTextureView},{binding:13,resource:{buffer:e.volumeAtlas.octreeBuffer}}]}))(t),d=(e=>Ci.createBindGroup({layout:c,entries:[{binding:0,resource:{buffer:e}}]}))(n),e.setPipeline(u),e.setBindGroup(0,h),e.setBindGroup(1,d),e.dispatchWorkgroupsIndirect(r,0)}})());let r,i,s,o={albedoTexture:null,velocityTexture:null,depthTexture:null,normalTexture:null};return{render:a=>{if(!i){i=Ci.createBuffer({size:12,usage:GPUBufferUsage.INDIRECT|GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}),r=Ci.createBuffer({size:4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});const e=new Uint32Array(3);e[0]=1,e[1]=1,e[2]=1,Ci.queue.writeBuffer(i,0,e,0,e.length);const{width:t,height:n}=a.outputTextures.finalTexture,o=(l=t/3*(n/3)*4,4,4*Math.ceil(l/4));s=Ci.createBuffer({size:o,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC})}var l;Object.keys(o).forEach((e=>{const t=a.outputTextures[e];null===o[e]&&(o[e]=((e,t)=>new(it(`${t.label}-copy`,t.format,t.usage))(e,t.width,t.height))(Ci,t))}));const{commandEncoder:c,timestampWrites:u}=a;c.clearBuffer(i,0,4),c.clearBuffer(r,0,4),c.clearBuffer(s);let h=c.beginComputePass({timestampWrites:u});t(h,a),h.end(),Object.keys(o).forEach((e=>{const t=a.outputTextures[e],n=o[e];((e,t,n)=>{if(t.width!==n.width||t.height!==n.height)throw new Error("Source and destination textures must have the same dimensions");e.copyTextureToTexture({texture:t.texture},{texture:n.texture},{width:t.texture.width,height:t.texture.height,depthOrArrayLayers:1})})(c,t,n)})),h=c.beginComputePass({timestampWrites:{querySet:u.querySet,beginningOfPassWriteIndex:u.beginningOfPassWriteIndex+4,endOfPassWriteIndex:u.endOfPassWriteIndex+4}}),n(h,a,s,i),h.end(),h=c.beginComputePass({timestampWrites:{querySet:u.querySet,beginningOfPassWriteIndex:u.beginningOfPassWriteIndex+6,endOfPassWriteIndex:u.endOfPassWriteIndex+6}}),e(h,a),h.end()},label:"primary rays",timestampLabels:["sparse raymarch","interpolate","full raymarch","world pos reconstruct"]}},dt=async e=>{const t=e.createShaderModule({code:"@group(0) @binding(0) var mySampler : sampler;\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\n//@group(0) @binding(2) var debugTexture : texture_2d<f32>;\n\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n}\n\n@vertex\nfn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  const pos = array(\n    vec2( 1.0,  1.0),\n    vec2( 1.0, -1.0),\n    vec2(-1.0, -1.0),\n    vec2( 1.0,  1.0),\n    vec2(-1.0, -1.0),\n    vec2(-1.0,  1.0),\n  );\n\n  const uv = array(\n    vec2(1.0, 0.0),\n    vec2(1.0, 1.0),\n    vec2(0.0, 1.0),\n    vec2(1.0, 0.0),\n    vec2(0.0, 1.0),\n    vec2(0.0, 0.0),\n  );\n\n  var output : VertexOutput;\n  output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n  output.fragUV = uv[VertexIndex];\n  return output;\n}\n\nfn get_debug_colour(index : i32) -> vec4<f32> {\n  if(index < 0){\n    return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  }\n\n  let colours = array(\n    vec4<f32>(1.0, 0.0, 0.0, 1.0),\n    vec4<f32>(0.0, 1.0, 0.0, 1.0),\n    vec4<f32>(0.0, 0.0, 1.0, 1.0),\n    vec4<f32>(1.0, 1.0, 0.0, 1.0),\n    vec4<f32>(1.0, 0.0, 1.0, 1.0),\n    vec4<f32>(0.0, 1.0, 1.0, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    vec4<f32>(0.0, 0.0, 0.0, 1.0),\n  );\n  return colours[index % 8];\n}\n\n@fragment\nfn fragment_main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\n    let pixel = fragUV * vec2<f32>(textureDimensions(myTexture));\n    var colour = textureLoad(myTexture, vec2<u32>(pixel),0);\n    return colour;\n//    return colour;\n//    return abs(colour) % 8.0 * 0.125;\n//    return colour.gggg * 0.5;\n//    return (colour.rrrr * 500.0 % 1.0);\n//    return get_debug_colour(i32(colour.a));\n}\n"}),n=e.createRenderPipeline({layout:"auto",vertex:{module:t,entryPoint:"vertex_main"},fragment:{module:t,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]}});return{render:t=>{const r=t.commandEncoder.beginRenderPass({timestampWrites:t.timestampWrites,colorAttachments:[{view:Mi.getCurrentTexture().createView(),loadOp:"clear",clearValue:[.3,.3,.3,1],storeOp:"store"}]}),i=e.createBindGroup({layout:n.getBindGroupLayout(0),entries:[{binding:1,resource:t.outputTextures.albedoTexture.view}]});r.setPipeline(n),r.setBindGroup(0,i),r.draw(6),r.end()},label:"fullscreen quad"}};var pt;!function(e){const t=[];e.updateAll=e=>{for(const n of t)n.update(e)},e.register=e=>class extends e{constructor(...e){super(...e),t.push(this)}}}(pt||(pt={}));const ft={duration:.3,delay:0,endDelay:0,repeat:0,easing:"ease"},mt=e=>1e3*e,yt=e=>e/1e3,gt=()=>{},vt=e=>e;function xt(e,t=!0){if(e&&"finished"!==e.playState)try{e.stop?e.stop():(t&&e.commitStyles(),e.cancel())}catch(e){}}const wt=e=>e(),bt=(e,t,n=ft.duration)=>new Proxy({animations:e.map(wt).filter(Boolean),duration:n,options:t},_t),_t={get:(e,t)=>{const n=e.animations[0];switch(t){case"duration":return e.duration;case"currentTime":return yt((null==n?void 0:n[t])||0);case"playbackRate":case"playState":return null==n?void 0:n[t];case"finished":return e.finished||(e.finished=Promise.all(e.animations.map(kt)).catch(gt)),e.finished;case"stop":return()=>{e.animations.forEach((e=>xt(e)))};case"forEachNative":return t=>{e.animations.forEach((n=>t(n,e)))};default:return void 0===(null==n?void 0:n[t])?void 0:()=>e.animations.forEach((e=>e[t]()))}},set:(e,t,n)=>{switch(t){case"currentTime":n=mt(n);case"playbackRate":for(let r=0;r<e.animations.length;r++)e.animations[r][t]=n;return!0}return!1}},kt=e=>e.finished,Tt=e=>"object"==typeof e&&Boolean(e.createAnimation),St=e=>"number"==typeof e,Pt=e=>Array.isArray(e)&&!St(e[0]),Et=(e,t,n)=>-n*e+n*t+e,At=(e,t,n)=>t-e==0?1:(n-e)/(t-e);function Mt(e,t){const n=e[e.length-1];for(let r=1;r<=t;r++){const i=At(0,t,r);e.push(Et(n,1,i))}}const zt=(e,t,n)=>Math.min(Math.max(n,e),t);const It=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e,Ct=1e-7,Bt=12;function Ot(e,t,n,r){if(e===t&&n===r)return vt;return i=>0===i||1===i?i:It(function(e,t,n,r,i){let s,o,a=0;do{o=t+(n-t)/2,s=It(o,r,i)-e,s>0?n=o:t=o}while(Math.abs(s)>Ct&&++a<Bt);return o}(i,0,1,e,n),t,r)}const Rt=e=>"function"==typeof e,Nt=e=>Array.isArray(e)&&St(e[0]),Ut={ease:Ot(.25,.1,.25,1),"ease-in":Ot(.42,0,1,1),"ease-in-out":Ot(.42,0,.58,1),"ease-out":Ot(0,0,.58,1)},jt=/\((.*?)\)/;function Dt(e){if(Rt(e))return e;if(Nt(e))return Ot(...e);if(Ut[e])return Ut[e];if(e.startsWith("steps")){const t=jt.exec(e);if(t){const e=t[1].split(",");return((e,t="end")=>n=>{const r=(n="end"===t?Math.min(n,.999):Math.max(n,.001))*e,i="end"===t?Math.floor(r):Math.ceil(r);return zt(0,1,i/e)})(parseFloat(e[0]),e[1].trim())}}return vt}class Ft{constructor(e,t=[0,1],{easing:n,duration:r=ft.duration,delay:i=ft.delay,endDelay:s=ft.endDelay,repeat:o=ft.repeat,offset:a,direction:l="normal",autoplay:c=!0}={}){if(this.startTime=null,this.rate=1,this.t=0,this.cancelTimestamp=null,this.easing=vt,this.duration=0,this.totalDuration=0,this.repeat=0,this.playState="idle",this.finished=new Promise(((e,t)=>{this.resolve=e,this.reject=t})),n=n||ft.easing,Tt(n)){const e=n.createAnimation(t);n=e.easing,t=e.keyframes||t,r=e.duration||r}this.repeat=o,this.easing=Pt(n)?vt:Dt(n),this.updateDuration(r);const u=function(e,t=function(e){const t=[0];return Mt(t,e-1),t}(e.length),n=vt){const r=e.length,i=r-t.length;return i>0&&Mt(t,i),i=>{let s=0;for(;s<r-2&&!(i<t[s+1]);s++);let o=zt(0,1,At(t[s],t[s+1],i));const a=function(e,t){return Pt(e)?e[((e,t,n)=>{const r=t-e;return((n-e)%r+r)%r+e})(0,e.length,t)]:e}(n,s);return o=a(o),Et(e[s],e[s+1],o)}}(t,a,Pt(n)?n.map(Dt):vt);this.tick=t=>{var n;let r=0;r=void 0!==this.pauseTime?this.pauseTime:(t-this.startTime)*this.rate,this.t=r,r/=1e3,r=Math.max(r-i,0),"finished"===this.playState&&void 0===this.pauseTime&&(r=this.totalDuration);const o=r/this.duration;let a=Math.floor(o),c=o%1;!c&&o>=1&&(c=1),1===c&&a--;const h=a%2;("reverse"===l||"alternate"===l&&h||"alternate-reverse"===l&&!h)&&(c=1-c);const d=r>=this.totalDuration?1:Math.min(c,1),p=u(this.easing(d));e(p),void 0===this.pauseTime&&("finished"===this.playState||r>=this.totalDuration+s)?(this.playState="finished",null===(n=this.resolve)||void 0===n||n.call(this,p)):"idle"!==this.playState&&(this.frameRequestId=requestAnimationFrame(this.tick))},c&&this.play()}play(){const e=performance.now();this.playState="running",void 0!==this.pauseTime?this.startTime=e-this.pauseTime:this.startTime||(this.startTime=e),this.cancelTimestamp=this.startTime,this.pauseTime=void 0,this.frameRequestId=requestAnimationFrame(this.tick)}pause(){this.playState="paused",this.pauseTime=this.t}finish(){this.playState="finished",this.tick(0)}stop(){var e;this.playState="idle",void 0!==this.frameRequestId&&cancelAnimationFrame(this.frameRequestId),null===(e=this.reject)||void 0===e||e.call(this,!1)}cancel(){this.stop(),this.tick(this.cancelTimestamp)}reverse(){this.rate*=-1}commitStyles(){}updateDuration(e){this.duration=e,this.totalDuration=e*(this.repeat+1)}get currentTime(){return this.t}set currentTime(e){void 0!==this.pauseTime||0===this.rate?this.pauseTime=e:this.startTime=performance.now()-e/this.rate}get playbackRate(){return this.rate}set playbackRate(e){this.rate=e}}class qt{setAnimation(e){this.animation=e,null==e||e.finished.then((()=>this.clearAnimation())).catch((()=>{}))}clearAnimation(){this.animation=this.generator=void 0}}const Lt=new WeakMap;function Vt(e){return Lt.has(e)||Lt.set(e,{transforms:[],values:new Map}),Lt.get(e)}const Gt=["","X","Y","Z"],Wt={x:"translateX",y:"translateY",z:"translateZ"},Yt={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:e=>e+"deg"},$t={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:e=>e+"px"},rotate:Yt,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:vt},skew:Yt},Ht=new Map,Xt=e=>`--motion-${e}`,Zt=["x","y","z"];["translate","scale","rotate","skew"].forEach((e=>{Gt.forEach((t=>{Zt.push(e+t),Ht.set(Xt(e+t),$t[e])}))}));const Kt=(e,t)=>Zt.indexOf(e)-Zt.indexOf(t),Qt=new Set(Zt),Jt=e=>Qt.has(e),en=e=>e.sort(Kt).reduce(tn,"").trim(),tn=(e,t)=>`${e} ${t}(var(${Xt(t)}))`,nn=e=>e.startsWith("--"),rn=new Set,sn=(e,t)=>document.createElement("div").animate(e,t),on={cssRegisterProperty:()=>"undefined"!=typeof CSS&&Object.hasOwnProperty.call(CSS,"registerProperty"),waapi:()=>Object.hasOwnProperty.call(Element.prototype,"animate"),partialKeyframes:()=>{try{sn({opacity:[1]})}catch(e){return!1}return!0},finished:()=>Boolean(sn({opacity:[0,1]},{duration:.001}).finished),linearEasing:()=>{try{sn({opacity:0},{easing:"linear(0, 1)"})}catch(e){return!1}return!0}},an={},ln={};for(const e in on)ln[e]=()=>(void 0===an[e]&&(an[e]=on[e]()),an[e]);const cn=(e,t)=>Rt(e)?ln.linearEasing()?`linear(${((e,t)=>{let n="";const r=Math.round(t/.015);for(let t=0;t<r;t++)n+=e(At(0,r-1,t))+", ";return n.substring(0,n.length-2)})(e,t)})`:ft.easing:Nt(e)?un(e):e,un=([e,t,n,r])=>`cubic-bezier(${e}, ${t}, ${n}, ${r})`;function hn(e){return Wt[e]&&(e=Wt[e]),Jt(e)?Xt(e):e}const dn=(e,t)=>{t=hn(t);let n=nn(t)?e.style.getPropertyValue(t):getComputedStyle(e)[t];if(!n&&0!==n){const e=Ht.get(t);e&&(n=e.initialValue)}return n},pn=(e,t,n)=>{t=hn(t),nn(t)?e.style.setProperty(t,n):e.style[t]=n},fn=e=>"string"==typeof e;function mn(e,t){var n;let r=(null==t?void 0:t.toDefaultUnit)||vt;const i=e[e.length-1];if(fn(i)){const e=(null===(n=i.match(/(-?[\d.]+)([a-z%]*)/))||void 0===n?void 0:n[2])||"";e&&(r=t=>t+e)}return r}function yn(e,t,n,r={},i){const s=window.__MOTION_DEV_TOOLS_RECORD,o=!1!==r.record&&s;let a,{duration:l=ft.duration,delay:c=ft.delay,endDelay:u=ft.endDelay,repeat:h=ft.repeat,easing:d=ft.easing,persist:p=!1,direction:f,offset:m,allowWebkitAcceleration:y=!1,autoplay:g=!0}=r;const v=Vt(e),x=Jt(t);let w=ln.waapi();x&&((e,t)=>{Wt[t]&&(t=Wt[t]);const{transforms:n}=Vt(e);var r,i;i=t,-1===(r=n).indexOf(i)&&r.push(i),e.style.transform=en(n)})(e,t);const b=hn(t),_=function(e,t){return e.has(t)||e.set(t,new qt),e.get(t)}(v.values,b),k=Ht.get(b);return xt(_.animation,!(Tt(d)&&_.generator)&&!1!==r.record),()=>{const v=()=>{var t,n;return null!==(n=null!==(t=dn(e,b))&&void 0!==t?t:null==k?void 0:k.initialValue)&&void 0!==n?n:0};let T=function(e,t){for(let n=0;n<e.length;n++)null===e[n]&&(e[n]=n?e[n-1]:t());return e}((e=>Array.isArray(e)?e:[e])(n),v);const S=mn(T,k);if(Tt(d)){const e=d.createAnimation(T,"opacity"!==t,v,b,_);d=e.easing,T=e.keyframes||T,l=e.duration||l}if(nn(b)&&(ln.cssRegisterProperty()?function(e){if(!rn.has(e)){rn.add(e);try{const{syntax:t,initialValue:n}=Ht.has(e)?Ht.get(e):{};CSS.registerProperty({name:e,inherits:!1,syntax:t,initialValue:n})}catch(e){}}}(b):w=!1),x&&!ln.linearEasing()&&(Rt(d)||Pt(d)&&d.some(Rt))&&(w=!1),w){k&&(T=T.map((e=>St(e)?k.toDefaultUnit(e):e))),1!==T.length||ln.partialKeyframes()&&!o||T.unshift(v());const t={delay:mt(c),duration:mt(l),endDelay:mt(u),easing:Pt(d)?void 0:cn(d,l),direction:f,iterations:h+1,fill:"both"};a=e.animate({[b]:T,offset:m,easing:Pt(d)?d.map((e=>cn(e,l))):void 0},t),a.finished||(a.finished=new Promise(((e,t)=>{a.onfinish=e,a.oncancel=t})));const n=T[T.length-1];a.finished.then((()=>{p||(pn(e,b,n),a.cancel())})).catch(gt),y||(a.playbackRate=1.000001)}else if(i&&x)T=T.map((e=>"string"==typeof e?parseFloat(e):e)),1===T.length&&T.unshift(parseFloat(v())),a=new i((t=>{pn(e,b,S?S(t):t)}),T,Object.assign(Object.assign({},r),{duration:l,easing:d}));else{const t=T[T.length-1];pn(e,b,k&&St(t)?k.toDefaultUnit(t):t)}return o&&s(e,t,T,{duration:l,delay:c,easing:d,repeat:h,offset:m},"motion-one"),_.setAnimation(a),a&&!g&&a.pause(),a}}const gn=(e,t)=>e[t]?Object.assign(Object.assign({},e),e[t]):Object.assign({},e);function vn(e,t,n){return Rt(e)?e(t,n):e}const xn=(wn=Ft,function(e,t,n={}){const r=(e=function(e,t){return"string"==typeof e?e=document.querySelectorAll(e):e instanceof Element&&(e=[e]),Array.from(e||[])}(e)).length;Boolean(r),Boolean(t);const i=[];for(let s=0;s<r;s++){const o=e[s];for(const e in t){const a=gn(n,e);a.delay=vn(a.delay,s,r);const l=yn(o,e,t[e],a,wn);i.push(l)}}return bt(i,n,n.duration)});var wn;function bn(e,t={}){return bt([()=>{const n=new Ft(e,[0,1],t);return n.finished.catch((()=>{})),n}],t,t.duration)}function _n(e,t,n){return(Rt(e)?bn:xn)(e,t,n)}function kn(e,t,n){const r=Math.max(t-5,0);return i=n-e(r),(s=t-r)?i*(1e3/s):0;var i,s}function Tn(e){return St(e)&&!isNaN(e)}function Sn(e){return fn(e)?parseFloat(e):e}const Pn=function(e){const t=new WeakMap;return(e={})=>{const n=new Map,r=(t=0,r=100,i=0,s=!1)=>{const o=`${t}-${r}-${i}-${s}`;return n.has(o)||n.set(o,(({from:e=0,velocity:t=0,power:n=.8,decay:r=.325,bounceDamping:i,bounceStiffness:s,changeTarget:o,min:a,max:l,restDistance:c=.5,restSpeed:u})=>{r=mt(r);const h={hasReachedTarget:!1,done:!1,current:e,target:e},d=e=>void 0===a?l:void 0===l||Math.abs(a-e)<Math.abs(l-e)?a:l;let p=n*t;const f=e+p,m=void 0===o?f:o(f);h.target=m,m!==f&&(p=m-e);const y=e=>-p*Math.exp(-e/r),g=e=>m+y(e),v=e=>{const t=y(e),n=g(e);h.done=Math.abs(t)<=c,h.current=h.done?m:n};let x,w;const b=e=>{var t;t=h.current,(void 0!==a&&t<a||void 0!==l&&t>l)&&(x=e,w=(({stiffness:e=100,damping:t=10,mass:n=1,from:r=0,to:i=1,velocity:s=0,restSpeed:o,restDistance:a}={})=>{s=s?yt(s):0;const l={done:!1,hasReachedTarget:!1,current:r,target:i},c=i-r,u=Math.sqrt(e/n)/1e3,h=((e=100,t=10,n=1)=>t/(2*Math.sqrt(e*n)))(e,t,n),d=Math.abs(c)<5;let p;if(o||(o=d?.01:2),a||(a=d?.005:.5),h<1){const e=u*Math.sqrt(1-h*h);p=t=>i-Math.exp(-h*u*t)*((h*u*c-s)/e*Math.sin(e*t)+c*Math.cos(e*t))}else p=e=>i-Math.exp(-u*e)*(c+(u*c-s)*e);return e=>{l.current=p(e);const t=0===e?s:kn(p,e,l.current),n=Math.abs(t)<=o,c=Math.abs(i-l.current)<=a;var u,h,d;return l.done=n&&c,l.hasReachedTarget=(u=r,h=i,d=l.current,u<h&&d>=h||u>h&&d<=h),l}})({from:h.current,to:d(h.current),velocity:kn(g,e,h.current),damping:i,stiffness:s,restDistance:c,restSpeed:u}))};return b(0),e=>{let t=!1;return w||void 0!==x||(t=!0,v(e),b(e)),void 0!==x&&e>x?(h.hasReachedTarget=!0,w(e-x)):(h.hasReachedTarget=!1,!t&&v(e),h)}})(Object.assign({from:t,to:r,velocity:i},e))),n.get(o)},i=(e,n)=>(t.has(e)||t.set(e,function(e,t=vt){let n,r=10,i=e(0);const s=[t(i.current)];for(;!i.done&&r<1e4;)i=e(r),s.push(t(i.done?i.target:i.current)),void 0===n&&i.hasReachedTarget&&(n=r),r+=10;const o=r-10;return 1===s.length&&s.push(i.current),{keyframes:s,duration:o/1e3,overshootDuration:(null!=n?n:o)/1e3}}(e,n)),t.get(e));return{createAnimation:(e,t=!0,n,s,o)=>{let a,l,c,u=0,h=vt;const d=e.length;if(t)if(h=mn(e,s?Ht.get(hn(s)):void 0),c=Sn(e[d-1]),d>1&&null!==e[0])l=Sn(e[0]);else{const e=null==o?void 0:o.generator;if(e){const{animation:t,generatorStartTime:n}=o,r=(null==t?void 0:t.startTime)||n||0,i=(null==t?void 0:t.currentTime)||performance.now()-r,s=e(i).current;l=s,u=kn((t=>e(t).current),i,s)}else n&&(l=Sn(n()))}if(Tn(l)&&Tn(c)){const e=r(l,c,u,null==s?void 0:s.includes("scale"));a=Object.assign(Object.assign({},i(e,h)),{easing:"linear"}),o&&(o.generator=e,o.generatorStartTime=performance.now())}return a||(a={easing:"ease",duration:i(r(0,100)).overshootDuration}),a}}}}();var En=function(e,t,n,r){var i,s=arguments.length,o=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(i=e[a])&&(o=(s<3?i(o):s>3?i(t,n,o):i(t,n))||o);return s>3&&o&&Object.defineProperty(t,n,o),o};let An=class{value;target;constructor(e){this.value=e,this.target=e}update(){_n((e=>{this.value=te.lerp(this.value,this.target,e)}),{easing:Pn({velocity:2e-4*Ni})})}};An=En([pt.register],An);let Mn=class{value;target;constructor(e){this.value=e,this.target=e}update(){_n((e=>{this.value=this.value+(this.target-this.value)*e}),{easing:Pn({velocity:2e-4*Ni})})}};Mn=En([pt.register],Mn);let zn=class{value;target;constructor(e){this.value=e,this.target=e}update(){_n((e=>{this.value=Le.slerp(this.value,this.target,e)}),{easing:Pn({velocity:2e-4*Ni})})}};zn=En([pt.register],zn);const In=e=>e&&"number"==typeof e.length&&e.buffer instanceof ArrayBuffer&&"number"==typeof e.byteLength,Cn={i32:{numElements:1,align:4,size:4,type:"i32",View:Int32Array},u32:{numElements:1,align:4,size:4,type:"u32",View:Uint32Array},f32:{numElements:1,align:4,size:4,type:"f32",View:Float32Array},f16:{numElements:1,align:2,size:2,type:"u16",View:Uint16Array},vec2f:{numElements:2,align:8,size:8,type:"f32",View:Float32Array},vec2i:{numElements:2,align:8,size:8,type:"i32",View:Int32Array},vec2u:{numElements:2,align:8,size:8,type:"u32",View:Uint32Array},vec2h:{numElements:2,align:4,size:4,type:"u16",View:Uint16Array},vec3i:{numElements:3,align:16,size:12,type:"i32",View:Int32Array},vec3u:{numElements:3,align:16,size:12,type:"u32",View:Uint32Array},vec3f:{numElements:3,align:16,size:12,type:"f32",View:Float32Array},vec3h:{numElements:3,align:8,size:6,type:"u16",View:Uint16Array},vec4i:{numElements:4,align:16,size:16,type:"i32",View:Int32Array},vec4u:{numElements:4,align:16,size:16,type:"u32",View:Uint32Array},vec4f:{numElements:4,align:16,size:16,type:"f32",View:Float32Array},vec4h:{numElements:4,align:8,size:8,type:"u16",View:Uint16Array},mat2x2f:{numElements:4,align:8,size:16,type:"f32",View:Float32Array},mat2x2h:{numElements:4,align:4,size:8,type:"u16",View:Uint16Array},mat3x2f:{numElements:6,align:8,size:24,type:"f32",View:Float32Array},mat3x2h:{numElements:6,align:4,size:12,type:"u16",View:Uint16Array},mat4x2f:{numElements:8,align:8,size:32,type:"f32",View:Float32Array},mat4x2h:{numElements:8,align:4,size:16,type:"u16",View:Uint16Array},mat2x3f:{numElements:8,align:16,size:32,pad:[3,1],type:"f32",View:Float32Array},mat2x3h:{numElements:8,align:8,size:16,pad:[3,1],type:"u16",View:Uint16Array},mat3x3f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x3h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x3f:{numElements:16,align:16,size:64,pad:[3,1],type:"f32",View:Float32Array},mat4x3h:{numElements:16,align:8,size:32,pad:[3,1],type:"u16",View:Uint16Array},mat2x4f:{numElements:8,align:16,size:32,type:"f32",View:Float32Array},mat2x4h:{numElements:8,align:8,size:16,type:"u16",View:Uint16Array},mat3x4f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x4h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x4f:{numElements:16,align:16,size:64,type:"f32",View:Float32Array},mat4x4h:{numElements:16,align:8,size:32,type:"u16",View:Uint16Array},bool:{numElements:0,align:1,size:0,type:"bool",View:Uint32Array}},Bn={...Cn,"atomic<i32>":Cn.i32,"atomic<u32>":Cn.u32,"vec2<i32>":Cn.vec2i,"vec2<u32>":Cn.vec2u,"vec2<f32>":Cn.vec2f,"vec2<f16>":Cn.vec2h,"vec3<i32>":Cn.vec3i,"vec3<u32>":Cn.vec3u,"vec3<f32>":Cn.vec3f,"vec3<f16>":Cn.vec3h,"vec4<i32>":Cn.vec4i,"vec4<u32>":Cn.vec4u,"vec4<f32>":Cn.vec4f,"vec4<f16>":Cn.vec4h,"mat2x2<f32>":Cn.mat2x2f,"mat2x2<f16>":Cn.mat2x2h,"mat3x2<f32>":Cn.mat3x2f,"mat3x2<f16>":Cn.mat3x2h,"mat4x2<f32>":Cn.mat4x2f,"mat4x2<f16>":Cn.mat4x2h,"mat2x3<f32>":Cn.mat2x3f,"mat2x3<f16>":Cn.mat2x3h,"mat3x3<f32>":Cn.mat3x3f,"mat3x3<f16>":Cn.mat3x3h,"mat4x3<f32>":Cn.mat4x3f,"mat4x3<f16>":Cn.mat4x3h,"mat2x4<f32>":Cn.mat2x4f,"mat2x4<f16>":Cn.mat2x4h,"mat3x4<f32>":Cn.mat3x4f,"mat3x4<f16>":Cn.mat3x4h,"mat4x4<f32>":Cn.mat4x4f,"mat4x4<f16>":Cn.mat4x4h},On=(Rn=Bn,Object.keys(Rn));var Rn,Nn,Un,jn,Dn,Fn;!function(e=[],t){const n=new Set;for(const r of On){const i=Bn[r];n.has(i)||(n.add(i),i.flatten=e.includes(r)?t:!t)}}(),new WeakMap;class qn{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class Ln{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(e){throw new Error("Cannot evaluate node")}evaluateString(e){return this.evaluate(e).toString()}search(e){}searchBlock(e,t){if(e){t(Vn.instance);for(const n of e)n instanceof Array?this.searchBlock(n,t):n.search(t);t(Gn.instance)}}}class Vn extends Ln{}Vn.instance=new Vn;class Gn extends Ln{}Gn.instance=new Gn;class Wn extends Ln{constructor(){super()}}class Yn extends Wn{constructor(e,t,n,r){super(),this.name=e,this.args=t,this.returnType=n,this.body=r}get astNodeType(){return"function"}search(e){this.searchBlock(this.body,e)}}class $n extends Wn{constructor(e){super(),this.expression=e}get astNodeType(){return"staticAssert"}search(e){this.expression.search(e)}}class Hn extends Wn{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"while"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class Xn extends Wn{constructor(e){super(),this.body=e}get astNodeType(){return"continuing"}search(e){this.searchBlock(this.body,e)}}class Zn extends Wn{constructor(e,t,n,r){super(),this.init=e,this.condition=t,this.increment=n,this.body=r}get astNodeType(){return"for"}search(e){var t,n,r;null===(t=this.init)||void 0===t||t.search(e),null===(n=this.condition)||void 0===n||n.search(e),null===(r=this.increment)||void 0===r||r.search(e),this.searchBlock(this.body,e)}}class Kn extends Wn{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"var"}search(e){var t;e(this),null===(t=this.value)||void 0===t||t.search(e)}}class Qn extends Wn{constructor(e,t,n){super(),this.name=e,this.type=t,this.value=n}get astNodeType(){return"override"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class Jn extends Wn{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"let"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class er extends Wn{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"const"}evaluate(e){return this.value.evaluate(e)}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}!function(e){e.increment="++",e.decrement="--"}(Nn||(Nn={})),function(e){e.parse=function(t){const n=t;if("parse"==n)throw new Error("Invalid value for IncrementOperator");return e[n]}}(Nn||(Nn={}));class tr extends Wn{constructor(e,t){super(),this.operator=e,this.variable=t}get astNodeType(){return"increment"}search(e){this.variable.search(e)}}!function(e){e.assign="=",e.addAssign="+=",e.subtractAssin="-=",e.multiplyAssign="*=",e.divideAssign="/=",e.moduloAssign="%=",e.andAssign="&=",e.orAssign="|=",e.xorAssign="^=",e.shiftLeftAssign="<<=",e.shiftRightAssign=">>="}(Un||(Un={})),function(e){e.parse=function(e){const t=e;if("parse"==t)throw new Error("Invalid value for AssignOperator");return t}}(Un||(Un={}));class nr extends Wn{constructor(e,t,n){super(),this.operator=e,this.variable=t,this.value=n}get astNodeType(){return"assign"}search(e){this.value.search(e)}}class rr extends Wn{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"call"}}class ir extends Wn{constructor(e,t){super(),this.body=e,this.continuing=t}get astNodeType(){return"loop"}}class sr extends Wn{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"body"}}class or extends Wn{constructor(e,t,n,r){super(),this.condition=e,this.body=t,this.elseif=n,this.else=r}get astNodeType(){return"if"}search(e){this.condition.search(e),this.searchBlock(this.body,e),this.searchBlock(this.elseif,e),this.searchBlock(this.else,e)}}class ar extends Wn{constructor(e){super(),this.value=e}get astNodeType(){return"return"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class lr extends Wn{constructor(e){super(),this.name=e}get astNodeType(){return"enable"}}class cr extends Wn{constructor(e,t){super(),this.name=e,this.type=t}get astNodeType(){return"alias"}}class ur extends Wn{constructor(){super()}get astNodeType(){return"discard"}}class hr extends Wn{constructor(){super()}get astNodeType(){return"break"}}class dr extends Wn{constructor(){super()}get astNodeType(){return"continue"}}class pr extends Wn{constructor(e){super(),this.name=e}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class fr extends pr{constructor(e,t){super(e),this.members=t}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(e){for(let t=0;t<this.members.length;t++)if(this.members[t].name==e)return t;return-1}}class mr extends pr{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"template"}}class yr extends pr{constructor(e,t,n,r){super(e),this.storage=t,this.type=n,this.access=r}get astNodeType(){return"pointer"}}class gr extends pr{constructor(e,t,n,r){super(e),this.attributes=t,this.format=n,this.count=r}get astNodeType(){return"array"}get isArray(){return!0}}class vr extends pr{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"sampler"}}class xr extends Ln{constructor(){super()}}class wr extends xr{constructor(e){super(),this.value=e}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class br extends xr{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"createExpr"}}class _r extends xr{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"callExpr"}evaluate(e){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(e));case"acos":return Math.acos(this.args[0].evaluate(e));case"acosh":return Math.acosh(this.args[0].evaluate(e));case"asin":return Math.asin(this.args[0].evaluate(e));case"asinh":return Math.asinh(this.args[0].evaluate(e));case"atan":return Math.atan(this.args[0].evaluate(e));case"atan2":return Math.atan2(this.args[0].evaluate(e),this.args[1].evaluate(e));case"atanh":return Math.atanh(this.args[0].evaluate(e));case"ceil":return Math.ceil(this.args[0].evaluate(e));case"clamp":return Math.min(Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e)),this.args[2].evaluate(e));case"cos":return Math.cos(this.args[0].evaluate(e));case"degrees":return 180*this.args[0].evaluate(e)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(e)-this.args[1].evaluate(e),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(e));case"exp2":return Math.pow(2,this.args[0].evaluate(e));case"floor":return Math.floor(this.args[0].evaluate(e));case"fma":return this.args[0].evaluate(e)*this.args[1].evaluate(e)+this.args[2].evaluate(e);case"fract":case"modf":return this.args[0].evaluate(e)-Math.floor(this.args[0].evaluate(e));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(e));case"log":return Math.log(this.args[0].evaluate(e));case"log2":return Math.log2(this.args[0].evaluate(e));case"max":return Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e));case"min":return Math.min(this.args[0].evaluate(e),this.args[1].evaluate(e));case"mix":return this.args[0].evaluate(e)*(1-this.args[2].evaluate(e))+this.args[1].evaluate(e)*this.args[2].evaluate(e);case"pow":return Math.pow(this.args[0].evaluate(e),this.args[1].evaluate(e));case"radians":return this.args[0].evaluate(e)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(e));case"sign":return Math.sign(this.args[0].evaluate(e));case"sin":return Math.sin(this.args[0].evaluate(e));case"sinh":return Math.sinh(this.args[0].evaluate(e));case"saturate":return Math.min(Math.max(this.args[0].evaluate(e),0),1);case"smoothstep":return this.args[0].evaluate(e)*this.args[0].evaluate(e)*(3-2*this.args[0].evaluate(e));case"sqrt":return Math.sqrt(this.args[0].evaluate(e));case"step":return this.args[0].evaluate(e)<this.args[1].evaluate(e)?0:1;case"tan":return Math.tan(this.args[0].evaluate(e));case"tanh":return Math.tanh(this.args[0].evaluate(e));case"trunc":return Math.trunc(this.args[0].evaluate(e));default:throw new Error("Non const function: "+this.name)}}search(e){for(const t of this.args)t.search(e);e(this)}}class kr extends xr{constructor(e){super(),this.name=e}get astNodeType(){return"varExpr"}search(e){e(this)}}class Tr extends xr{constructor(e,t){super(),this.name=e,this.initializer=t}get astNodeType(){return"constExpr"}evaluate(e){var t,n;if(this.initializer instanceof br){const r=null===(t=this.postfix)||void 0===t?void 0:t.evaluateString(e),i=null===(n=this.initializer.type)||void 0===n?void 0:n.name,s=e.structs.get(i),o=null==s?void 0:s.getMemberIndex(r);if(-1!=o)return this.initializer.args[o].evaluate(e);console.log(o)}return this.initializer.evaluate(e)}search(e){this.initializer.search(e)}}class Sr extends xr{constructor(e){super(),this.value=e}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class Pr extends xr{constructor(e,t){super(),this.type=e,this.value=t}get astNodeType(){return"bitcastExpr"}search(e){this.value.search(e)}}class Er extends xr{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"typecastExpr"}evaluate(e){return this.args[0].evaluate(e)}search(e){this.searchBlock(this.args,e)}}class Ar extends xr{constructor(e){super(),this.contents=e}get astNodeType(){return"groupExpr"}evaluate(e){return this.contents[0].evaluate(e)}search(e){this.searchBlock(this.contents,e)}}class Mr extends xr{constructor(){super()}}class zr extends Mr{constructor(e,t){super(),this.operator=e,this.right=t}get astNodeType(){return"unaryOp"}evaluate(e){switch(this.operator){case"+":return this.right.evaluate(e);case"-":return-this.right.evaluate(e);case"!":return this.right.evaluate(e)?0:1;case"~":return~this.right.evaluate(e);default:throw new Error("Unknown unary operator: "+this.operator)}}search(e){this.right.search(e)}}class Ir extends Mr{constructor(e,t,n){super(),this.operator=e,this.left=t,this.right=n}get astNodeType(){return"binaryOp"}evaluate(e){switch(this.operator){case"+":return this.left.evaluate(e)+this.right.evaluate(e);case"-":return this.left.evaluate(e)-this.right.evaluate(e);case"*":return this.left.evaluate(e)*this.right.evaluate(e);case"/":return this.left.evaluate(e)/this.right.evaluate(e);case"%":return this.left.evaluate(e)%this.right.evaluate(e);case"==":return this.left.evaluate(e)==this.right.evaluate(e)?1:0;case"!=":return this.left.evaluate(e)!=this.right.evaluate(e)?1:0;case"<":return this.left.evaluate(e)<this.right.evaluate(e)?1:0;case">":return this.left.evaluate(e)>this.right.evaluate(e)?1:0;case"<=":return this.left.evaluate(e)<=this.right.evaluate(e)?1:0;case">=":return this.left.evaluate(e)>=this.right.evaluate(e)?1:0;case"&&":return this.left.evaluate(e)&&this.right.evaluate(e)?1:0;case"||":return this.left.evaluate(e)||this.right.evaluate(e)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}search(e){this.left.search(e),this.right.search(e)}}class Cr extends Ln{constructor(){super()}}class Br extends Cr{constructor(e,t){super(),this.selector=e,this.body=t}get astNodeType(){return"case"}search(e){this.searchBlock(this.body,e)}}class Or extends Cr{constructor(e){super(),this.body=e}get astNodeType(){return"default"}search(e){this.searchBlock(this.body,e)}}class Rr extends Ln{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"argument"}}class Nr extends Ln{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"elseif"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class Ur extends Ln{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"member"}}class jr extends Ln{constructor(e,t){super(),this.name=e,this.value=t}get astNodeType(){return"attribute"}}!function(e){e[e.token=0]="token",e[e.keyword=1]="keyword",e[e.reserved=2]="reserved"}(Dn||(Dn={}));class Dr{constructor(e,t,n){this.name=e,this.type=t,this.rule=n}toString(){return this.name}}class Fr{}jn=Fr,Fr.none=new Dr("",Dn.reserved,""),Fr.eof=new Dr("EOF",Dn.token,""),Fr.reserved={asm:new Dr("asm",Dn.reserved,"asm"),bf16:new Dr("bf16",Dn.reserved,"bf16"),do:new Dr("do",Dn.reserved,"do"),enum:new Dr("enum",Dn.reserved,"enum"),f16:new Dr("f16",Dn.reserved,"f16"),f64:new Dr("f64",Dn.reserved,"f64"),handle:new Dr("handle",Dn.reserved,"handle"),i8:new Dr("i8",Dn.reserved,"i8"),i16:new Dr("i16",Dn.reserved,"i16"),i64:new Dr("i64",Dn.reserved,"i64"),mat:new Dr("mat",Dn.reserved,"mat"),premerge:new Dr("premerge",Dn.reserved,"premerge"),regardless:new Dr("regardless",Dn.reserved,"regardless"),typedef:new Dr("typedef",Dn.reserved,"typedef"),u8:new Dr("u8",Dn.reserved,"u8"),u16:new Dr("u16",Dn.reserved,"u16"),u64:new Dr("u64",Dn.reserved,"u64"),unless:new Dr("unless",Dn.reserved,"unless"),using:new Dr("using",Dn.reserved,"using"),vec:new Dr("vec",Dn.reserved,"vec"),void:new Dr("void",Dn.reserved,"void")},Fr.keywords={array:new Dr("array",Dn.keyword,"array"),atomic:new Dr("atomic",Dn.keyword,"atomic"),bool:new Dr("bool",Dn.keyword,"bool"),f32:new Dr("f32",Dn.keyword,"f32"),i32:new Dr("i32",Dn.keyword,"i32"),mat2x2:new Dr("mat2x2",Dn.keyword,"mat2x2"),mat2x3:new Dr("mat2x3",Dn.keyword,"mat2x3"),mat2x4:new Dr("mat2x4",Dn.keyword,"mat2x4"),mat3x2:new Dr("mat3x2",Dn.keyword,"mat3x2"),mat3x3:new Dr("mat3x3",Dn.keyword,"mat3x3"),mat3x4:new Dr("mat3x4",Dn.keyword,"mat3x4"),mat4x2:new Dr("mat4x2",Dn.keyword,"mat4x2"),mat4x3:new Dr("mat4x3",Dn.keyword,"mat4x3"),mat4x4:new Dr("mat4x4",Dn.keyword,"mat4x4"),ptr:new Dr("ptr",Dn.keyword,"ptr"),sampler:new Dr("sampler",Dn.keyword,"sampler"),sampler_comparison:new Dr("sampler_comparison",Dn.keyword,"sampler_comparison"),struct:new Dr("struct",Dn.keyword,"struct"),texture_1d:new Dr("texture_1d",Dn.keyword,"texture_1d"),texture_2d:new Dr("texture_2d",Dn.keyword,"texture_2d"),texture_2d_array:new Dr("texture_2d_array",Dn.keyword,"texture_2d_array"),texture_3d:new Dr("texture_3d",Dn.keyword,"texture_3d"),texture_cube:new Dr("texture_cube",Dn.keyword,"texture_cube"),texture_cube_array:new Dr("texture_cube_array",Dn.keyword,"texture_cube_array"),texture_multisampled_2d:new Dr("texture_multisampled_2d",Dn.keyword,"texture_multisampled_2d"),texture_storage_1d:new Dr("texture_storage_1d",Dn.keyword,"texture_storage_1d"),texture_storage_2d:new Dr("texture_storage_2d",Dn.keyword,"texture_storage_2d"),texture_storage_2d_array:new Dr("texture_storage_2d_array",Dn.keyword,"texture_storage_2d_array"),texture_storage_3d:new Dr("texture_storage_3d",Dn.keyword,"texture_storage_3d"),texture_depth_2d:new Dr("texture_depth_2d",Dn.keyword,"texture_depth_2d"),texture_depth_2d_array:new Dr("texture_depth_2d_array",Dn.keyword,"texture_depth_2d_array"),texture_depth_cube:new Dr("texture_depth_cube",Dn.keyword,"texture_depth_cube"),texture_depth_cube_array:new Dr("texture_depth_cube_array",Dn.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new Dr("texture_depth_multisampled_2d",Dn.keyword,"texture_depth_multisampled_2d"),texture_external:new Dr("texture_external",Dn.keyword,"texture_external"),u32:new Dr("u32",Dn.keyword,"u32"),vec2:new Dr("vec2",Dn.keyword,"vec2"),vec3:new Dr("vec3",Dn.keyword,"vec3"),vec4:new Dr("vec4",Dn.keyword,"vec4"),bitcast:new Dr("bitcast",Dn.keyword,"bitcast"),block:new Dr("block",Dn.keyword,"block"),break:new Dr("break",Dn.keyword,"break"),case:new Dr("case",Dn.keyword,"case"),continue:new Dr("continue",Dn.keyword,"continue"),continuing:new Dr("continuing",Dn.keyword,"continuing"),default:new Dr("default",Dn.keyword,"default"),discard:new Dr("discard",Dn.keyword,"discard"),else:new Dr("else",Dn.keyword,"else"),enable:new Dr("enable",Dn.keyword,"enable"),fallthrough:new Dr("fallthrough",Dn.keyword,"fallthrough"),false:new Dr("false",Dn.keyword,"false"),fn:new Dr("fn",Dn.keyword,"fn"),for:new Dr("for",Dn.keyword,"for"),function:new Dr("function",Dn.keyword,"function"),if:new Dr("if",Dn.keyword,"if"),let:new Dr("let",Dn.keyword,"let"),const:new Dr("const",Dn.keyword,"const"),loop:new Dr("loop",Dn.keyword,"loop"),while:new Dr("while",Dn.keyword,"while"),private:new Dr("private",Dn.keyword,"private"),read:new Dr("read",Dn.keyword,"read"),read_write:new Dr("read_write",Dn.keyword,"read_write"),return:new Dr("return",Dn.keyword,"return"),storage:new Dr("storage",Dn.keyword,"storage"),switch:new Dr("switch",Dn.keyword,"switch"),true:new Dr("true",Dn.keyword,"true"),alias:new Dr("alias",Dn.keyword,"alias"),type:new Dr("type",Dn.keyword,"type"),uniform:new Dr("uniform",Dn.keyword,"uniform"),var:new Dr("var",Dn.keyword,"var"),override:new Dr("override",Dn.keyword,"override"),workgroup:new Dr("workgroup",Dn.keyword,"workgroup"),write:new Dr("write",Dn.keyword,"write"),r8unorm:new Dr("r8unorm",Dn.keyword,"r8unorm"),r8snorm:new Dr("r8snorm",Dn.keyword,"r8snorm"),r8uint:new Dr("r8uint",Dn.keyword,"r8uint"),r8sint:new Dr("r8sint",Dn.keyword,"r8sint"),r16uint:new Dr("r16uint",Dn.keyword,"r16uint"),r16sint:new Dr("r16sint",Dn.keyword,"r16sint"),r16float:new Dr("r16float",Dn.keyword,"r16float"),rg8unorm:new Dr("rg8unorm",Dn.keyword,"rg8unorm"),rg8snorm:new Dr("rg8snorm",Dn.keyword,"rg8snorm"),rg8uint:new Dr("rg8uint",Dn.keyword,"rg8uint"),rg8sint:new Dr("rg8sint",Dn.keyword,"rg8sint"),r32uint:new Dr("r32uint",Dn.keyword,"r32uint"),r32sint:new Dr("r32sint",Dn.keyword,"r32sint"),r32float:new Dr("r32float",Dn.keyword,"r32float"),rg16uint:new Dr("rg16uint",Dn.keyword,"rg16uint"),rg16sint:new Dr("rg16sint",Dn.keyword,"rg16sint"),rg16float:new Dr("rg16float",Dn.keyword,"rg16float"),rgba8unorm:new Dr("rgba8unorm",Dn.keyword,"rgba8unorm"),rgba8unorm_srgb:new Dr("rgba8unorm_srgb",Dn.keyword,"rgba8unorm_srgb"),rgba8snorm:new Dr("rgba8snorm",Dn.keyword,"rgba8snorm"),rgba8uint:new Dr("rgba8uint",Dn.keyword,"rgba8uint"),rgba8sint:new Dr("rgba8sint",Dn.keyword,"rgba8sint"),bgra8unorm:new Dr("bgra8unorm",Dn.keyword,"bgra8unorm"),bgra8unorm_srgb:new Dr("bgra8unorm_srgb",Dn.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new Dr("rgb10a2unorm",Dn.keyword,"rgb10a2unorm"),rg11b10float:new Dr("rg11b10float",Dn.keyword,"rg11b10float"),rg32uint:new Dr("rg32uint",Dn.keyword,"rg32uint"),rg32sint:new Dr("rg32sint",Dn.keyword,"rg32sint"),rg32float:new Dr("rg32float",Dn.keyword,"rg32float"),rgba16uint:new Dr("rgba16uint",Dn.keyword,"rgba16uint"),rgba16sint:new Dr("rgba16sint",Dn.keyword,"rgba16sint"),rgba16float:new Dr("rgba16float",Dn.keyword,"rgba16float"),rgba32uint:new Dr("rgba32uint",Dn.keyword,"rgba32uint"),rgba32sint:new Dr("rgba32sint",Dn.keyword,"rgba32sint"),rgba32float:new Dr("rgba32float",Dn.keyword,"rgba32float"),static_assert:new Dr("static_assert",Dn.keyword,"static_assert")},Fr.tokens={decimal_float_literal:new Dr("decimal_float_literal",Dn.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new Dr("hex_float_literal",Dn.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new Dr("int_literal",Dn.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new Dr("uint_literal",Dn.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new Dr("ident",Dn.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new Dr("and",Dn.token,"&"),and_and:new Dr("and_and",Dn.token,"&&"),arrow:new Dr("arrow ",Dn.token,"->"),attr:new Dr("attr",Dn.token,"@"),attr_left:new Dr("attr_left",Dn.token,"[["),attr_right:new Dr("attr_right",Dn.token,"]]"),forward_slash:new Dr("forward_slash",Dn.token,"/"),bang:new Dr("bang",Dn.token,"!"),bracket_left:new Dr("bracket_left",Dn.token,"["),bracket_right:new Dr("bracket_right",Dn.token,"]"),brace_left:new Dr("brace_left",Dn.token,"{"),brace_right:new Dr("brace_right",Dn.token,"}"),colon:new Dr("colon",Dn.token,":"),comma:new Dr("comma",Dn.token,","),equal:new Dr("equal",Dn.token,"="),equal_equal:new Dr("equal_equal",Dn.token,"=="),not_equal:new Dr("not_equal",Dn.token,"!="),greater_than:new Dr("greater_than",Dn.token,">"),greater_than_equal:new Dr("greater_than_equal",Dn.token,">="),shift_right:new Dr("shift_right",Dn.token,">>"),less_than:new Dr("less_than",Dn.token,"<"),less_than_equal:new Dr("less_than_equal",Dn.token,"<="),shift_left:new Dr("shift_left",Dn.token,"<<"),modulo:new Dr("modulo",Dn.token,"%"),minus:new Dr("minus",Dn.token,"-"),minus_minus:new Dr("minus_minus",Dn.token,"--"),period:new Dr("period",Dn.token,"."),plus:new Dr("plus",Dn.token,"+"),plus_plus:new Dr("plus_plus",Dn.token,"++"),or:new Dr("or",Dn.token,"|"),or_or:new Dr("or_or",Dn.token,"||"),paren_left:new Dr("paren_left",Dn.token,"("),paren_right:new Dr("paren_right",Dn.token,")"),semicolon:new Dr("semicolon",Dn.token,";"),star:new Dr("star",Dn.token,"*"),tilde:new Dr("tilde",Dn.token,"~"),underscore:new Dr("underscore",Dn.token,"_"),xor:new Dr("xor",Dn.token,"^"),plus_equal:new Dr("plus_equal",Dn.token,"+="),minus_equal:new Dr("minus_equal",Dn.token,"-="),times_equal:new Dr("times_equal",Dn.token,"*="),division_equal:new Dr("division_equal",Dn.token,"/="),modulo_equal:new Dr("modulo_equal",Dn.token,"%="),and_equal:new Dr("and_equal",Dn.token,"&="),or_equal:new Dr("or_equal",Dn.token,"|="),xor_equal:new Dr("xor_equal",Dn.token,"^="),shift_right_equal:new Dr("shift_right_equal",Dn.token,">>="),shift_left_equal:new Dr("shift_left_equal",Dn.token,"<<=")},Fr.storage_class=[jn.keywords.function,jn.keywords.private,jn.keywords.workgroup,jn.keywords.uniform,jn.keywords.storage],Fr.access_mode=[jn.keywords.read,jn.keywords.write,jn.keywords.read_write],Fr.sampler_type=[jn.keywords.sampler,jn.keywords.sampler_comparison],Fr.sampled_texture_type=[jn.keywords.texture_1d,jn.keywords.texture_2d,jn.keywords.texture_2d_array,jn.keywords.texture_3d,jn.keywords.texture_cube,jn.keywords.texture_cube_array],Fr.multisampled_texture_type=[jn.keywords.texture_multisampled_2d],Fr.storage_texture_type=[jn.keywords.texture_storage_1d,jn.keywords.texture_storage_2d,jn.keywords.texture_storage_2d_array,jn.keywords.texture_storage_3d],Fr.depth_texture_type=[jn.keywords.texture_depth_2d,jn.keywords.texture_depth_2d_array,jn.keywords.texture_depth_cube,jn.keywords.texture_depth_cube_array,jn.keywords.texture_depth_multisampled_2d],Fr.texture_external_type=[jn.keywords.texture_external],Fr.any_texture_type=[...jn.sampled_texture_type,...jn.multisampled_texture_type,...jn.storage_texture_type,...jn.depth_texture_type,...jn.texture_external_type],Fr.texel_format=[jn.keywords.r8unorm,jn.keywords.r8snorm,jn.keywords.r8uint,jn.keywords.r8sint,jn.keywords.r16uint,jn.keywords.r16sint,jn.keywords.r16float,jn.keywords.rg8unorm,jn.keywords.rg8snorm,jn.keywords.rg8uint,jn.keywords.rg8sint,jn.keywords.r32uint,jn.keywords.r32sint,jn.keywords.r32float,jn.keywords.rg16uint,jn.keywords.rg16sint,jn.keywords.rg16float,jn.keywords.rgba8unorm,jn.keywords.rgba8unorm_srgb,jn.keywords.rgba8snorm,jn.keywords.rgba8uint,jn.keywords.rgba8sint,jn.keywords.bgra8unorm,jn.keywords.bgra8unorm_srgb,jn.keywords.rgb10a2unorm,jn.keywords.rg11b10float,jn.keywords.rg32uint,jn.keywords.rg32sint,jn.keywords.rg32float,jn.keywords.rgba16uint,jn.keywords.rgba16sint,jn.keywords.rgba16float,jn.keywords.rgba32uint,jn.keywords.rgba32sint,jn.keywords.rgba32float],Fr.const_literal=[jn.tokens.int_literal,jn.tokens.uint_literal,jn.tokens.decimal_float_literal,jn.tokens.hex_float_literal,jn.keywords.true,jn.keywords.false],Fr.literal_or_ident=[jn.tokens.ident,jn.tokens.int_literal,jn.tokens.uint_literal,jn.tokens.decimal_float_literal,jn.tokens.hex_float_literal],Fr.element_count_expression=[jn.tokens.int_literal,jn.tokens.uint_literal,jn.tokens.ident],Fr.template_types=[jn.keywords.vec2,jn.keywords.vec3,jn.keywords.vec4,jn.keywords.mat2x2,jn.keywords.mat2x3,jn.keywords.mat2x4,jn.keywords.mat3x2,jn.keywords.mat3x3,jn.keywords.mat3x4,jn.keywords.mat4x2,jn.keywords.mat4x3,jn.keywords.mat4x4,jn.keywords.atomic,jn.keywords.bitcast,...jn.any_texture_type],Fr.attribute_name=[jn.tokens.ident,jn.keywords.block],Fr.assignment_operators=[jn.tokens.equal,jn.tokens.plus_equal,jn.tokens.minus_equal,jn.tokens.times_equal,jn.tokens.division_equal,jn.tokens.modulo_equal,jn.tokens.and_equal,jn.tokens.or_equal,jn.tokens.xor_equal,jn.tokens.shift_right_equal,jn.tokens.shift_left_equal],Fr.increment_operators=[jn.tokens.plus_plus,jn.tokens.minus_minus];class qr{constructor(e,t,n){this.type=e,this.lexeme=t,this.line=n}toString(){return this.lexeme}isTemplateType(){return-1!=Fr.template_types.indexOf(this.type)}isArrayType(){return this.type==Fr.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class Lr{constructor(e){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=e?e:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new qr(Fr.eof,"",this._line)),this._tokens}scanToken(){let e=this._advance();if("\n"==e)return this._line++,!0;if(this._isWhitespace(e))return!0;if("/"==e){if("/"==this._peekAhead()){for(;"\n"!=e;){if(this._isAtEnd())return!0;e=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let t=1;for(;t>0;){if(this._isAtEnd())return!0;if(e=this._advance(),"\n"==e)this._line++;else if("*"==e){if("/"==this._peekAhead()&&(this._advance(),t--,0==t))return!0}else"/"==e&&"*"==this._peekAhead()&&(this._advance(),t++)}return!0}}let t=Fr.none;for(;;){let n=this._findType(e);const r=this._peekAhead();if(">"==e&&(">"==r||"="==r)){let e=!1,t=this._tokens.length-1;for(let n=0;n<5&&t>=0;++n,--t)if(this._tokens[t].type===Fr.tokens.less_than){t>0&&this._tokens[t-1].isArrayOrTemplateType()&&(e=!0);break}if(e)return this._addToken(n),!0}if(n===Fr.none){let r=e,i=0;const s=2;for(let e=0;e<s;++e)if(r+=this._peekAhead(e),n=this._findType(r),n!==Fr.none){i=e;break}if(n===Fr.none)return t!==Fr.none&&(this._current--,this._addToken(t),!0);e=r,this._current+=i+1}if(t=n,this._isAtEnd())break;e+=this._advance()}return t!==Fr.none&&(this._addToken(t),!0)}_findType(e){for(const t in Fr.keywords){const n=Fr.keywords[t];if(this._match(e,n.rule))return n}for(const t in Fr.tokens){const n=Fr.tokens[t];if(this._match(e,n.rule))return n}return Fr.none}_match(e,t){if("string"==typeof t){if(t==e)return!0}else{const n=t.exec(e);if(n&&0==n.index&&n[0]==e)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(e){return" "==e||"\t"==e||"\r"==e}_advance(e=0){let t=this._source[this._current];return e=e||0,e++,this._current+=e,t}_peekAhead(e=0){return e=e||0,this._current+e>=this._source.length?"\0":this._source[this._current+e]}_addToken(e){const t=this._source.substring(this._start,this._current);this._tokens.push(new qr(e,t,this._line))}}class Vr{constructor(){this._tokens=[],this._current=0,this._context=new qn}parse(e){this._initialize(e);let t=[];for(;!this._isAtEnd();){const e=this._global_decl_or_directive();if(!e)break;t.push(e)}return t}_initialize(e){if(e)if("string"==typeof e){const t=new Lr(e);this._tokens=t.scanTokens()}else this._tokens=e;else this._tokens=[];this._current=0}_error(e,t){return console.error(e,t),{token:e,message:t,toString:function(){return`${t}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==Fr.eof}_match(e){if(e instanceof Dr)return!!this._check(e)&&(this._advance(),!0);for(let t=0,n=e.length;t<n;++t){const n=e[t];if(this._check(n))return this._advance(),!0}return!1}_consume(e,t){if(this._check(e))return this._advance();throw this._error(this._peek(),t)}_check(e){if(this._isAtEnd())return!1;const t=this._peek();if(e instanceof Array){let n=t.type;return-1!=e.indexOf(n)}return t.type==e}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(Fr.tokens.semicolon)&&!this._isAtEnd(););if(this._match(Fr.keywords.alias)){const e=this._type_alias();return this._consume(Fr.tokens.semicolon,"Expected ';'"),e}if(this._match(Fr.keywords.enable)){const e=this._enable_directive();return this._consume(Fr.tokens.semicolon,"Expected ';'"),e}const e=this._attribute();if(this._check(Fr.keywords.var)){const t=this._global_variable_decl();return null!=t&&(t.attributes=e),this._consume(Fr.tokens.semicolon,"Expected ';'."),t}if(this._check(Fr.keywords.override)){const t=this._override_variable_decl();return null!=t&&(t.attributes=e),this._consume(Fr.tokens.semicolon,"Expected ';'."),t}if(this._check(Fr.keywords.let)){const t=this._global_let_decl();return null!=t&&(t.attributes=e),this._consume(Fr.tokens.semicolon,"Expected ';'."),t}if(this._check(Fr.keywords.const)){const t=this._global_const_decl();return null!=t&&(t.attributes=e),this._consume(Fr.tokens.semicolon,"Expected ';'."),t}if(this._check(Fr.keywords.struct)){const t=this._struct_decl();return null!=t&&(t.attributes=e),t}if(this._check(Fr.keywords.fn)){const t=this._function_decl();return null!=t&&(t.attributes=e),t}return null}_function_decl(){if(!this._match(Fr.keywords.fn))return null;const e=this._consume(Fr.tokens.ident,"Expected function name.").toString();this._consume(Fr.tokens.paren_left,"Expected '(' for function arguments.");const t=[];if(!this._check(Fr.tokens.paren_right))do{if(this._check(Fr.tokens.paren_right))break;const e=this._attribute(),n=this._consume(Fr.tokens.ident,"Expected argument name.").toString();this._consume(Fr.tokens.colon,"Expected ':' for argument type.");const r=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=r,t.push(new Rr(n,i,e)))}while(this._match(Fr.tokens.comma));this._consume(Fr.tokens.paren_right,"Expected ')' after function arguments.");let n=null;if(this._match(Fr.tokens.arrow)){const e=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=e)}const r=this._compound_statement();return new Yn(e,t,n,r)}_compound_statement(){const e=[];for(this._consume(Fr.tokens.brace_left,"Expected '{' for block.");!this._check(Fr.tokens.brace_right);){const t=this._statement();null!==t&&e.push(t)}return this._consume(Fr.tokens.brace_right,"Expected '}' for block."),e}_statement(){for(;this._match(Fr.tokens.semicolon)&&!this._isAtEnd(););if(this._check(Fr.keywords.if))return this._if_statement();if(this._check(Fr.keywords.switch))return this._switch_statement();if(this._check(Fr.keywords.loop))return this._loop_statement();if(this._check(Fr.keywords.for))return this._for_statement();if(this._check(Fr.keywords.while))return this._while_statement();if(this._check(Fr.keywords.continuing))return this._continuing_statement();if(this._check(Fr.keywords.static_assert))return this._static_assert_statement();if(this._check(Fr.tokens.brace_left))return this._compound_statement();let e=null;return e=this._check(Fr.keywords.return)?this._return_statement():this._check([Fr.keywords.var,Fr.keywords.let,Fr.keywords.const])?this._variable_statement():this._match(Fr.keywords.discard)?new ur:this._match(Fr.keywords.break)?new hr:this._match(Fr.keywords.continue)?new dr:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=e&&this._consume(Fr.tokens.semicolon,"Expected ';' after statement."),e}_static_assert_statement(){if(!this._match(Fr.keywords.static_assert))return null;let e=this._optional_paren_expression();return new $n(e)}_while_statement(){if(!this._match(Fr.keywords.while))return null;let e=this._optional_paren_expression();const t=this._compound_statement();return new Hn(e,t)}_continuing_statement(){if(!this._match(Fr.keywords.continuing))return null;const e=this._compound_statement();return new Xn(e)}_for_statement(){if(!this._match(Fr.keywords.for))return null;this._consume(Fr.tokens.paren_left,"Expected '('.");const e=this._check(Fr.tokens.semicolon)?null:this._for_init();this._consume(Fr.tokens.semicolon,"Expected ';'.");const t=this._check(Fr.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(Fr.tokens.semicolon,"Expected ';'.");const n=this._check(Fr.tokens.paren_right)?null:this._for_increment();this._consume(Fr.tokens.paren_right,"Expected ')'.");const r=this._compound_statement();return new Zn(e,t,n,r)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(Fr.keywords.var)){const e=this._variable_decl();if(null===e)throw this._error(this._peek(),"Variable declaration expected.");let t=null;return this._match(Fr.tokens.equal)&&(t=this._short_circuit_or_expression()),new Kn(e.name,e.type,e.storage,e.access,t)}if(this._match(Fr.keywords.let)){const e=this._consume(Fr.tokens.ident,"Expected name for let.").toString();let t=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(Fr.tokens.equal,"Expected '=' for let.");const n=this._short_circuit_or_expression();return new Jn(e,t,null,null,n)}if(this._match(Fr.keywords.const)){const e=this._consume(Fr.tokens.ident,"Expected name for const.").toString();let t=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(Fr.tokens.equal,"Expected '=' for const.");const n=this._short_circuit_or_expression();return new er(e,t,null,null,n)}return null}_increment_decrement_statement(){const e=this._current,t=this._unary_expression();if(null==t)return null;if(!this._check(Fr.increment_operators))return this._current=e,null;const n=this._consume(Fr.increment_operators,"Expected increment operator");return new tr(n.type===Fr.tokens.plus_plus?Nn.increment:Nn.decrement,t)}_assignment_statement(){let e=null;if(this._check(Fr.tokens.brace_right))return null;let t=this._match(Fr.tokens.underscore);if(t||(e=this._unary_expression()),!t&&null==e)return null;const n=this._consume(Fr.assignment_operators,"Expected assignment operator."),r=this._short_circuit_or_expression();return new nr(Un.parse(n.lexeme),e,r)}_func_call_statement(){if(!this._check(Fr.tokens.ident))return null;const e=this._current,t=this._consume(Fr.tokens.ident,"Expected function name."),n=this._argument_expression_list();return null===n?(this._current=e,null):new rr(t.lexeme,n)}_loop_statement(){if(!this._match(Fr.keywords.loop))return null;this._consume(Fr.tokens.brace_left,"Expected '{' for loop.");const e=[];let t=this._statement();for(;null!==t;){if(Array.isArray(t))for(let n of t)e.push(n);else e.push(t);t=this._statement()}let n=null;return this._match(Fr.keywords.continuing)&&(n=this._compound_statement()),this._consume(Fr.tokens.brace_right,"Expected '}' for loop."),new ir(e,n)}_switch_statement(){if(!this._match(Fr.keywords.switch))return null;const e=this._optional_paren_expression();this._consume(Fr.tokens.brace_left,"Expected '{' for switch.");const t=this._switch_body();if(null==t||0==t.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(Fr.tokens.brace_right,"Expected '}' for switch."),new sr(e,t)}_switch_body(){const e=[];if(this._match(Fr.keywords.case)){const t=this._case_selectors();this._match(Fr.tokens.colon),this._consume(Fr.tokens.brace_left,"Exected '{' for switch case.");const n=this._case_body();this._consume(Fr.tokens.brace_right,"Exected '}' for switch case."),e.push(new Br(t,n))}if(this._match(Fr.keywords.default)){this._match(Fr.tokens.colon),this._consume(Fr.tokens.brace_left,"Exected '{' for switch default.");const t=this._case_body();this._consume(Fr.tokens.brace_right,"Exected '}' for switch default."),e.push(new Or(t))}if(this._check([Fr.keywords.default,Fr.keywords.case])){const t=this._switch_body();e.push(t[0])}return e}_case_selectors(){var e,t,n,r;const i=[null!==(t=null===(e=this._shift_expression())||void 0===e?void 0:e.evaluate(this._context).toString())&&void 0!==t?t:""];for(;this._match(Fr.tokens.comma);)i.push(null!==(r=null===(n=this._shift_expression())||void 0===n?void 0:n.evaluate(this._context).toString())&&void 0!==r?r:"");return i}_case_body(){if(this._match(Fr.keywords.fallthrough))return this._consume(Fr.tokens.semicolon,"Expected ';'"),[];let e=this._statement();if(null==e)return[];e instanceof Array||(e=[e]);const t=this._case_body();return 0==t.length?e:[...e,t[0]]}_if_statement(){if(!this._match(Fr.keywords.if))return null;const e=this._optional_paren_expression(),t=this._compound_statement();let n=[];this._match_elseif()&&(n=this._elseif_statement(n));let r=null;return this._match(Fr.keywords.else)&&(r=this._compound_statement()),new or(e,t,n,r)}_match_elseif(){return this._tokens[this._current].type===Fr.keywords.else&&this._tokens[this._current+1].type===Fr.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(e=[]){const t=this._optional_paren_expression(),n=this._compound_statement();return e.push(new Nr(t,n)),this._match_elseif()&&this._elseif_statement(e),e}_return_statement(){if(!this._match(Fr.keywords.return))return null;const e=this._short_circuit_or_expression();return new ar(e)}_short_circuit_or_expression(){let e=this._short_circuit_and_expr();for(;this._match(Fr.tokens.or_or);)e=new Ir(this._previous().toString(),e,this._short_circuit_and_expr());return e}_short_circuit_and_expr(){let e=this._inclusive_or_expression();for(;this._match(Fr.tokens.and_and);)e=new Ir(this._previous().toString(),e,this._inclusive_or_expression());return e}_inclusive_or_expression(){let e=this._exclusive_or_expression();for(;this._match(Fr.tokens.or);)e=new Ir(this._previous().toString(),e,this._exclusive_or_expression());return e}_exclusive_or_expression(){let e=this._and_expression();for(;this._match(Fr.tokens.xor);)e=new Ir(this._previous().toString(),e,this._and_expression());return e}_and_expression(){let e=this._equality_expression();for(;this._match(Fr.tokens.and);)e=new Ir(this._previous().toString(),e,this._equality_expression());return e}_equality_expression(){const e=this._relational_expression();return this._match([Fr.tokens.equal_equal,Fr.tokens.not_equal])?new Ir(this._previous().toString(),e,this._relational_expression()):e}_relational_expression(){let e=this._shift_expression();for(;this._match([Fr.tokens.less_than,Fr.tokens.greater_than,Fr.tokens.less_than_equal,Fr.tokens.greater_than_equal]);)e=new Ir(this._previous().toString(),e,this._shift_expression());return e}_shift_expression(){let e=this._additive_expression();for(;this._match([Fr.tokens.shift_left,Fr.tokens.shift_right]);)e=new Ir(this._previous().toString(),e,this._additive_expression());return e}_additive_expression(){let e=this._multiplicative_expression();for(;this._match([Fr.tokens.plus,Fr.tokens.minus]);)e=new Ir(this._previous().toString(),e,this._multiplicative_expression());return e}_multiplicative_expression(){let e=this._unary_expression();for(;this._match([Fr.tokens.star,Fr.tokens.forward_slash,Fr.tokens.modulo]);)e=new Ir(this._previous().toString(),e,this._unary_expression());return e}_unary_expression(){return this._match([Fr.tokens.minus,Fr.tokens.bang,Fr.tokens.tilde,Fr.tokens.star,Fr.tokens.and])?new zr(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const e=this._primary_expression(),t=this._postfix_expression();return t&&(e.postfix=t),e}_postfix_expression(){if(this._match(Fr.tokens.bracket_left)){const e=this._short_circuit_or_expression();this._consume(Fr.tokens.bracket_right,"Expected ']'.");const t=this._postfix_expression();return t&&(e.postfix=t),e}if(this._match(Fr.tokens.period)){const e=this._consume(Fr.tokens.ident,"Expected member name."),t=this._postfix_expression(),n=new wr(e.lexeme);return t&&(n.postfix=t),n}return null}_getStruct(e){return this._context.aliases.has(e)?this._context.aliases.get(e).type:this._context.structs.has(e)?this._context.structs.get(e):null}_primary_expression(){if(this._match(Fr.tokens.ident)){const e=this._previous().toString();if(this._check(Fr.tokens.paren_left)){const t=this._argument_expression_list(),n=this._getStruct(e);return null!=n?new br(n,t):new _r(e,t)}if(this._context.constants.has(e)){const t=this._context.constants.get(e);return new Tr(e,t.value)}return new kr(e)}if(this._match(Fr.const_literal))return new Sr(parseFloat(this._previous().toString()));if(this._check(Fr.tokens.paren_left))return this._paren_expression();if(this._match(Fr.keywords.bitcast)){this._consume(Fr.tokens.less_than,"Expected '<'.");const e=this._type_decl();this._consume(Fr.tokens.greater_than,"Expected '>'.");const t=this._paren_expression();return new Pr(e,t)}const e=this._type_decl(),t=this._argument_expression_list();return new Er(e,t)}_argument_expression_list(){if(!this._match(Fr.tokens.paren_left))return null;const e=[];do{if(this._check(Fr.tokens.paren_right))break;const t=this._short_circuit_or_expression();e.push(t)}while(this._match(Fr.tokens.comma));return this._consume(Fr.tokens.paren_right,"Expected ')' for agument list"),e}_optional_paren_expression(){this._match(Fr.tokens.paren_left);const e=this._short_circuit_or_expression();return this._match(Fr.tokens.paren_right),new Ar([e])}_paren_expression(){this._consume(Fr.tokens.paren_left,"Expected '('.");const e=this._short_circuit_or_expression();return this._consume(Fr.tokens.paren_right,"Expected ')'."),new Ar([e])}_struct_decl(){if(!this._match(Fr.keywords.struct))return null;const e=this._consume(Fr.tokens.ident,"Expected name for struct.").toString();this._consume(Fr.tokens.brace_left,"Expected '{' for struct body.");const t=[];for(;!this._check(Fr.tokens.brace_right);){const e=this._attribute(),n=this._consume(Fr.tokens.ident,"Expected variable name.").toString();this._consume(Fr.tokens.colon,"Expected ':' for struct member type.");const r=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=r),this._check(Fr.tokens.brace_right)?this._match(Fr.tokens.comma):this._consume(Fr.tokens.comma,"Expected ',' for struct member."),t.push(new Ur(n,i,e))}this._consume(Fr.tokens.brace_right,"Expected '}' after struct body.");const n=new fr(e,t);return this._context.structs.set(e,n),n}_global_variable_decl(){const e=this._variable_decl();return e&&this._match(Fr.tokens.equal)&&(e.value=this._const_expression()),e}_override_variable_decl(){const e=this._override_decl();return e&&this._match(Fr.tokens.equal)&&(e.value=this._const_expression()),e}_global_const_decl(){if(!this._match(Fr.keywords.const))return null;const e=this._consume(Fr.tokens.ident,"Expected variable name");let t=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;if(this._match(Fr.tokens.equal)){const e=this._short_circuit_or_expression();if(e instanceof br)n=e;else if(e instanceof Tr&&e.initializer instanceof br)n=e.initializer;else try{const t=e.evaluate(this._context);n=new Sr(t)}catch(t){n=e}}const r=new er(e.toString(),t,"","",n);return this._context.constants.set(r.name,r),r}_global_let_decl(){if(!this._match(Fr.keywords.let))return null;const e=this._consume(Fr.tokens.ident,"Expected variable name");let t=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;return this._match(Fr.tokens.equal)&&(n=this._const_expression()),new Jn(e.toString(),t,"","",n)}_const_expression(){if(this._match(Fr.const_literal))return new wr(this._previous().toString());const e=this._type_decl();this._consume(Fr.tokens.paren_left,"Expected '('.");let t=[];for(;!this._check(Fr.tokens.paren_right)&&(t.push(this._const_expression()),this._check(Fr.tokens.comma));)this._advance();return this._consume(Fr.tokens.paren_right,"Expected ')'."),new br(e,t)}_variable_decl(){if(!this._match(Fr.keywords.var))return null;let e="",t="";this._match(Fr.tokens.less_than)&&(e=this._consume(Fr.storage_class,"Expected storage_class.").toString(),this._match(Fr.tokens.comma)&&(t=this._consume(Fr.access_mode,"Expected access_mode.").toString()),this._consume(Fr.tokens.greater_than,"Expected '>'."));const n=this._consume(Fr.tokens.ident,"Expected variable name");let r=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=e)}return new Kn(n.toString(),r,e,t,null)}_override_decl(){if(!this._match(Fr.keywords.override))return null;const e=this._consume(Fr.tokens.ident,"Expected variable name");let t=null;if(this._match(Fr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}return new Qn(e.toString(),t,null)}_enable_directive(){const e=this._consume(Fr.tokens.ident,"identity expected.");return new lr(e.toString())}_type_alias(){const e=this._consume(Fr.tokens.ident,"identity expected.");this._consume(Fr.tokens.equal,"Expected '=' for type alias.");let t=this._type_decl();if(null===t)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);const n=new cr(e.toString(),t);return this._context.aliases.set(n.name,n),n}_type_decl(){if(this._check([Fr.tokens.ident,...Fr.texel_format,Fr.keywords.bool,Fr.keywords.f32,Fr.keywords.i32,Fr.keywords.u32])){const e=this._advance(),t=e.toString();return this._context.structs.has(t)?this._context.structs.get(t):this._context.aliases.has(t)?this._context.aliases.get(t).type:new pr(e.toString())}let e=this._texture_sampler_types();if(e)return e;if(this._check(Fr.template_types)){let e=this._advance().toString(),t=null,n=null;return this._match(Fr.tokens.less_than)&&(t=this._type_decl(),n=null,this._match(Fr.tokens.comma)&&(n=this._consume(Fr.access_mode,"Expected access_mode for pointer").toString()),this._consume(Fr.tokens.greater_than,"Expected '>' for type.")),new mr(e,t,n)}if(this._match(Fr.keywords.ptr)){let e=this._previous().toString();this._consume(Fr.tokens.less_than,"Expected '<' for pointer.");const t=this._consume(Fr.storage_class,"Expected storage_class for pointer");this._consume(Fr.tokens.comma,"Expected ',' for pointer.");const n=this._type_decl();let r=null;return this._match(Fr.tokens.comma)&&(r=this._consume(Fr.access_mode,"Expected access_mode for pointer").toString()),this._consume(Fr.tokens.greater_than,"Expected '>' for pointer."),new yr(e,t.toString(),n,r)}const t=this._attribute();if(this._match(Fr.keywords.array)){let e=null,n=-1;const r=this._previous();if(this._match(Fr.tokens.less_than)){e=this._type_decl(),this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);let t="";this._match(Fr.tokens.comma)&&(t=this._shift_expression().evaluate(this._context).toString()),this._consume(Fr.tokens.greater_than,"Expected '>' for array."),n=t?parseInt(t):0}return new gr(r.toString(),t,e,n)}return null}_texture_sampler_types(){if(this._match(Fr.sampler_type))return new vr(this._previous().toString(),null,null);if(this._match(Fr.depth_texture_type))return new vr(this._previous().toString(),null,null);if(this._match(Fr.sampled_texture_type)||this._match(Fr.multisampled_texture_type)){const e=this._previous();this._consume(Fr.tokens.less_than,"Expected '<' for sampler type.");const t=this._type_decl();return this._consume(Fr.tokens.greater_than,"Expected '>' for sampler type."),new vr(e.toString(),t,null)}if(this._match(Fr.storage_texture_type)){const e=this._previous();this._consume(Fr.tokens.less_than,"Expected '<' for sampler type.");const t=this._consume(Fr.texel_format,"Invalid texel format.").toString();this._consume(Fr.tokens.comma,"Expected ',' after texel format.");const n=this._consume(Fr.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(Fr.tokens.greater_than,"Expected '>' for sampler type."),new vr(e.toString(),t,n)}return null}_attribute(){let e=[];for(;this._match(Fr.tokens.attr);){const t=this._consume(Fr.attribute_name,"Expected attribute name"),n=new jr(t.toString(),null);if(this._match(Fr.tokens.paren_left)){if(n.value=this._consume(Fr.literal_or_ident,"Expected attribute value").toString(),this._check(Fr.tokens.comma)){this._advance();do{const e=this._consume(Fr.literal_or_ident,"Expected attribute value").toString();n.value instanceof Array||(n.value=[n.value]),n.value.push(e)}while(this._match(Fr.tokens.comma))}this._consume(Fr.tokens.paren_right,"Expected ')'")}e.push(n)}for(;this._match(Fr.tokens.attr_left);){if(!this._check(Fr.tokens.attr_right))do{const t=this._consume(Fr.attribute_name,"Expected attribute name"),n=new jr(t.toString(),null);if(this._match(Fr.tokens.paren_left)){if(n.value=[this._consume(Fr.literal_or_ident,"Expected attribute value").toString()],this._check(Fr.tokens.comma)){this._advance();do{const e=this._consume(Fr.literal_or_ident,"Expected attribute value").toString();n.value.push(e)}while(this._match(Fr.tokens.comma))}this._consume(Fr.tokens.paren_right,"Expected ')'")}e.push(n)}while(this._match(Fr.tokens.comma));this._consume(Fr.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==e.length?null:e}}class Gr{constructor(e,t){this.name=e,this.attributes=t,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class Wr{constructor(e,t,n){this.name=e,this.type=t,this.attributes=n,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class Yr extends Gr{constructor(e,t){super(e,t),this.members=[],this.align=0}get isStruct(){return!0}}class $r extends Gr{constructor(e,t){super(e,t),this.count=0,this.stride=0}get isArray(){return!0}}class Hr extends Gr{constructor(e,t,n,r){super(e,n),this.format=t,this.access=r}get isTemplate(){return!0}}!function(e){e[e.Uniform=0]="Uniform",e[e.Storage=1]="Storage",e[e.Texture=2]="Texture",e[e.Sampler=3]="Sampler",e[e.StorageTexture=4]="StorageTexture"}(Fn||(Fn={}));class Xr{constructor(e,t,n,r,i,s,o){this.name=e,this.type=t,this.group=n,this.binding=r,this.attributes=i,this.resourceType=s,this.access=o}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class Zr{constructor(e,t){this.name=e,this.type=t}}class Kr{constructor(e,t){this.align=e,this.size=t}}class Qr{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r,this.interpolation=null}}class Jr{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r}}class ei{constructor(e,t=null){this.stage=null,this.inputs=[],this.outputs=[],this.resources=[],this.name=e,this.stage=t}}class ti{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class ni{constructor(e,t,n,r){this.name=e,this.type=t,this.attributes=n,this.id=r}}class ri{constructor(e){this.resources=null,this.node=e}}class ii{constructor(e){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new ti,this._types=new Map,this._functions=new Map,e&&this.update(e)}_isStorageTexture(e){return"texture_storage_1d"==e.name||"texture_storage_2d"==e.name||"texture_storage_2d_array"==e.name||"texture_storage_3d"==e.name}update(e){const t=(new Vr).parse(e);for(const e of t)e instanceof Yn&&this._functions.set(e.name,new ri(e));for(const e of t)if(e instanceof fr){const t=this._getTypeInfo(e,null);t instanceof Yr&&this.structs.push(t)}else if(e instanceof cr)this.aliases.push(this._getAliasInfo(e));else if(e instanceof Qn){const t=e,n=this._getAttributeNum(t.attributes,"id",0),r=null!=t.type?this._getTypeInfo(t.type,t.attributes):null;this.overrides.push(new ni(t.name,r,t.attributes,n))}else if(this._isUniformVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new Xr(t.name,i,n,r,t.attributes,Fn.Uniform,t.access);this.uniforms.push(s)}else if(this._isStorageVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=this._isStorageTexture(i),o=new Xr(t.name,i,n,r,t.attributes,s?Fn.StorageTexture:Fn.Storage,t.access);this.storage.push(o)}else if(this._isTextureVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=this._isStorageTexture(i),o=new Xr(t.name,i,n,r,t.attributes,s?Fn.StorageTexture:Fn.Texture,t.access);s?this.storage.push(o):this.textures.push(o)}else if(this._isSamplerVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new Xr(t.name,i,n,r,t.attributes,Fn.Sampler,t.access);this.samplers.push(s)}else if(e instanceof Yn){const t=this._getAttribute(e,"vertex"),n=this._getAttribute(e,"fragment"),r=this._getAttribute(e,"compute"),i=t||n||r;if(i){const t=new ei(e.name,null==i?void 0:i.name);t.inputs=this._getInputs(e.args),t.outputs=this._getOutputs(e.returnType),t.resources=this._findResources(e),this.entry[i.name].push(t)}}}_findResource(e){for(const t of this.uniforms)if(t.name==e)return t;for(const t of this.storage)if(t.name==e)return t;for(const t of this.textures)if(t.name==e)return t;for(const t of this.samplers)if(t.name==e)return t;return null}_findResources(e){const t=[],n=this,r=[];return e.search((e=>{if(e instanceof Vn)r.push({});else if(e instanceof Gn)r.pop();else if(e instanceof Kn){if(r.length>0){const t=e;r[r.length-1][t.name]=t}}else if(e instanceof Jn){if(r.length>0){const t=e;r[r.length-1][t.name]=t}}else if(e instanceof kr){const i=e;if(r.length>0&&r[r.length-1][i.name])return;const s=n._findResource(i.name);s&&t.push(s)}else if(e instanceof _r){const r=e,i=n._functions.get(r.name);i&&(null===i.resources&&(i.resources=n._findResources(i.node)),t.push(...i.resources))}})),[...new Map(t.map((e=>[e.name,e]))).values()]}getBindGroups(){const e=[];function t(t,n){t>=e.length&&(e.length=t+1),void 0===e[t]&&(e[t]=[]),n>=e[t].length&&(e[t].length=n+1)}for(const n of this.uniforms)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.storage)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.textures)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.samplers)t(n.group,n.binding),e[n.group][n.binding]=n;return e}_getOutputs(e,t=void 0){if(void 0===t&&(t=[]),e instanceof fr)this._getStructOutputs(e,t);else{const n=this._getOutputInfo(e);null!==n&&t.push(n)}return t}_getStructOutputs(e,t){for(const n of e.members)if(n.type instanceof fr)this._getStructOutputs(n.type,t);else{const e=this._getAttribute(n,"location")||this._getAttribute(n,"builtin");if(null!==e){const r=this._getTypeInfo(n.type,n.type.attributes),i=this._parseInt(e.value),s=new Jr(n.name,r,e.name,i);t.push(s)}}}_getOutputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getTypeInfo(e,e.attributes),r=this._parseInt(t.value);return new Jr("",n,t.name,r)}return null}_getInputs(e,t=void 0){void 0===t&&(t=[]);for(const n of e)if(n.type instanceof fr)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}return t}_getStructInputs(e,t){for(const n of e.members)if(n.type instanceof fr)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}}_getInputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getAttribute(e,"interpolation"),r=this._getTypeInfo(e.type,e.attributes),i=this._parseInt(t.value),s=new Qr(e.name,r,t.name,i);return null!==n&&(s.interpolation=this._parseString(n.value)),s}return null}_parseString(e){return e instanceof Array&&(e=e[0]),e}_parseInt(e){e instanceof Array&&(e=e[0]);const t=parseInt(e);return isNaN(t)?e:t}_getAlias(e){for(const t of this.aliases)if(t.name==e)return t.type;return null}_getAliasInfo(e){return new Zr(e.name,this._getTypeInfo(e.type,null))}_getTypeInfo(e,t){if(this._types.has(e))return this._types.get(e);if(e instanceof gr){const n=e,r=this._getTypeInfo(n.format,n.attributes),i=new $r(n.name,t);return i.format=r,i.count=n.count,this._types.set(e,i),this._updateTypeInfo(i),i}if(e instanceof fr){const n=e,r=new Yr(n.name,t);for(const e of n.members){const t=this._getTypeInfo(e.type,e.attributes);r.members.push(new Wr(e.name,t,e.attributes))}return this._types.set(e,r),this._updateTypeInfo(r),r}if(e instanceof vr){const n=e,r=n.format instanceof pr,i=n.format?r?this._getTypeInfo(n.format,null):new Gr(n.format,null):null,s=new Hr(n.name,i,t,n.access);return this._types.set(e,s),this._updateTypeInfo(s),s}if(e instanceof mr){const n=e,r=n.format?this._getTypeInfo(n.format,null):null,i=new Hr(n.name,r,t,n.access);return this._types.set(e,i),this._updateTypeInfo(i),i}const n=new Gr(e.name,t);return this._types.set(e,n),this._updateTypeInfo(n),n}_updateTypeInfo(e){var t,n;const r=this._getTypeSize(e);if(e.size=null!==(t=null==r?void 0:r.size)&&void 0!==t?t:0,e instanceof $r){const t=this._getTypeSize(e.format);e.stride=null!==(n=null==t?void 0:t.size)&&void 0!==n?n:0,this._updateTypeInfo(e.format)}e instanceof Yr&&this._updateStructInfo(e)}_updateStructInfo(e){var t;let n=0,r=0,i=0,s=0;for(let o=0,a=e.members.length;o<a;++o){const a=e.members[o],l=this._getTypeSize(a);if(!l)continue;null!==(t=this._getAlias(a.type.name))&&void 0!==t||a.type;const c=l.align,u=l.size;n=this._roundUp(c,n+r),r=u,i=n,s=Math.max(s,c),a.offset=n,a.size=u,this._updateTypeInfo(a.type)}e.size=this._roundUp(s,i+r),e.align=s}_getTypeSize(e){var t;if(null==e)return null;const n=this._getAttributeNum(e.attributes,"size",0),r=this._getAttributeNum(e.attributes,"align",0);if(e instanceof Wr&&(e=e.type),e instanceof Gr){const t=this._getAlias(e.name);null!==t&&(e=t)}{const t=ii._typeInfo[e.name];if(void 0!==t){const i="f16"===e.format?2:1;return new Kr(Math.max(r,t.align/i),Math.max(n,t.size/i))}}{const t=ii._typeInfo[e.name.substring(0,e.name.length-1)];if(t){const i="h"===e.name[e.name.length-1]?2:1;return new Kr(Math.max(r,t.align/i),Math.max(n,t.size/i))}}if(e instanceof $r){let i=e,s=8,o=8;const a=this._getTypeSize(i.format);return null!==a&&(o=a.size,s=a.align),o=i.count*this._getAttributeNum(null!==(t=null==e?void 0:e.attributes)&&void 0!==t?t:null,"stride",this._roundUp(s,o)),n&&(o=n),new Kr(Math.max(r,s),Math.max(n,o))}if(e instanceof Yr){let t=0,i=0,s=0,o=0,a=0;for(const n of e.members){const e=this._getTypeSize(n.type);null!==e&&(t=Math.max(e.align,t),s=this._roundUp(e.align,s+o),o=e.size,a=s)}return i=this._roundUp(t,a+o),new Kr(Math.max(r,t),Math.max(n,i))}return null}_isUniformVar(e){return e instanceof Kn&&"uniform"==e.storage}_isStorageVar(e){return e instanceof Kn&&"storage"==e.storage}_isTextureVar(e){return e instanceof Kn&&null!==e.type&&-1!=ii._textureTypes.indexOf(e.type.name)}_isSamplerVar(e){return e instanceof Kn&&null!==e.type&&-1!=ii._samplerTypes.indexOf(e.type.name)}_getAttribute(e,t){const n=e;if(!n||!n.attributes)return null;const r=n.attributes;for(let e of r)if(e.name==t)return e;return null}_getAttributeNum(e,t,n){if(null===e)return n;for(let r of e)if(r.name==t){let e=null!==r&&null!==r.value?r.value:n;return e instanceof Array&&(e=e[0]),"number"==typeof e?e:"string"==typeof e?parseInt(e):n}return n}_roundUp(e,t){return Math.ceil(t/e)*e}}function si(e,t){const n=function(e){return Array.isArray(e)||In(e)?[...e,1,1].slice(0,3):function(e){return[e.width,e.height||1,e.depthOrArrayLayers||1]}(e)}(e),r=Math.max(...n.slice(0,"3d"===t?3:2));return 1+Math.log2(r)|0}ii._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},ii._textureTypes=Fr.any_texture_type.map((e=>e.name)),ii._samplerTypes=Fr.sampler_type.map((e=>e.name));const oi=new WeakMap;const ai=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function li(e){return In(e)||Array.isArray(e)||function(e){const t=e;return In(t.data)||Array.isArray(t.data)}(e)}function ci(e){switch(e){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...ai.entries()].map((([e,{formats:[t,n]}])=>[[t,e],[n,e]])).flat());const ui={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},hi=/([a-z]+)(\d+)([a-z]+)/;function di(e){const[,t,n,r]=hi.exec(e),i=t.length,s=parseInt(n)/8;return{channels:t,numChannels:i,bytesPerChannel:s,bytesPerElement:i*s,Type:ui[`${n}${r}`]}}function pi(e,t,n,r={}){n.forEach(((n,i)=>{const s=[0,0,i+(r.baseArrayLayer||0)];if(li(n))!function(e,t,n,r){const i=function(e,t){if(In(e))return e;const{Type:n}=di(t);return new n(e)}(n.data||n,t.format),s=function(e,t){return[e.width,e.height,e.depthOrArrayLayers].map((e=>Math.max(1,Math.floor(e/1))))}(t),{bytesPerElement:o}=di(t.format),a=r.origin||[0,0,0];e.queue.writeTexture({texture:t,origin:a},i,{bytesPerRow:o*s[0],rowsPerImage:s[1]},s)}(e,t,n,{origin:s});else{const i=n,{flipY:o,premultipliedAlpha:a,colorSpace:l}=r;e.queue.copyExternalImageToTexture({source:i,flipY:o},{texture:t,premultipliedAlpha:a,colorSpace:l,origin:s},fi(i,r))}})),t.mipLevelCount>1&&function(e,t,n){let r=oi.get(e);r||(r={pipelineByFormatAndView:{},moduleByViewType:{}},oi.set(e,r));let{sampler:i,uniformBuffer:s,uniformValues:o}=r;const{pipelineByFormatAndView:a,moduleByViewType:l}=r;n=n||function(e){switch(e.dimension){case"1d":return"1d";case"3d":return"3d";default:return e.depthOrArrayLayers>1?"2d-array":"2d"}}(t);let c=l[n];if(!c){const t=function(e){let t,n;switch(e){case"2d":t="texture_2d<f32>",n="textureSample(ourTexture, ourSampler, fsInput.texcoord)";break;case"2d-array":t="texture_2d_array<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              fsInput.texcoord,\n              uni.layer)";break;case"cube":t="texture_cube<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1))";break;case"cube-array":t="texture_cube_array<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1), uni.layer)";break;default:throw new Error(`unsupported view: ${e}`)}return`\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        struct Uniforms {\n          layer: u32,\n        };\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: ${t};\n        @group(0) @binding(2) var<uniform> uni: Uniforms;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          _ = uni.layer; // make sure this is used so all pipelines have the same bindings\n          return ${n};\n        }\n      `}(n);c=e.createShaderModule({label:`mip level generation for ${n}`,code:t}),l[n]=c}i||(i=e.createSampler({minFilter:"linear",magFilter:"linear"}),s=e.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),o=new Uint32Array(1),Object.assign(r,{sampler:i,uniformBuffer:s,uniformValues:o}));const u=`${t.format}.${n}`;a[u]||(a[u]=e.createRenderPipeline({label:`mip level generator pipeline for ${n}`,layout:"auto",vertex:{module:c,entryPoint:"vs"},fragment:{module:c,entryPoint:"fs",targets:[{format:t.format}]}}));const h=a[u];for(let r=1;r<t.mipLevelCount;++r)for(let a=0;a<t.depthOrArrayLayers;++a){o[0]=a,e.queue.writeBuffer(s,0,o);const l=e.createBindGroup({layout:h.getBindGroupLayout(0),entries:[{binding:0,resource:i},{binding:1,resource:t.createView({dimension:n,baseMipLevel:r-1,mipLevelCount:1})},{binding:2,resource:{buffer:s}}]}),c={label:"mip gen renderPass",colorAttachments:[{view:t.createView({dimension:"2d",baseMipLevel:r,mipLevelCount:1,baseArrayLayer:a,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},u=e.createCommandEncoder({label:"mip gen encoder"}),d=u.beginRenderPass(c);d.setPipeline(h),d.setBindGroup(0,l),d.draw(3),d.end();const p=u.finish();e.queue.submit([p])}}(e,t)}function fi(e,t){if(e instanceof HTMLVideoElement)return[e.videoWidth,e.videoHeight,1];{const n=e,{width:r,height:i}=n;if(r>0&&i>0&&!li(e))return[r,i,1];const s=t.format||"rgba8unorm",{bytesPerElement:o,bytesPerChannel:a}=di(s),l=In(e)||Array.isArray(e)?e:e.data;return function(e,t,n,r="2d"){if(n%1!=0)throw new Error("can't guess dimensions");if(e||t){if(t){if(!e&&(e=n/t)%1)throw new Error("can't guess dimensions")}else if((t=n/e)%1)throw new Error("can't guess dimensions")}else{const i=Math.sqrt(n/("cube"===r?6:1));i%1==0?(e=i,t=i):(e=n,t=1)}const i=n/e/t;if(i%1)throw new Error("can't guess dimensions");return[e,t,i]}(r,i,(In(l)?l.byteLength:l.length*a)/o)}}async function mi(e,t,n={}){const r=await Promise.all(t.map((e=>async function(e,t={}){const n=await fetch(e),r=await n.blob(),i={...t,...void 0!==t.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(r,i)}(e))));return function(e,t,n={}){const r=fi(t[0],n);r[2]=r[2]>1?r[2]:t.length;const i=e.createTexture({dimension:ci(n.dimension),format:n.format||"rgba8unorm",mipLevelCount:n.mipLevelCount?n.mipLevelCount:n.mips?si(r):1,size:r,usage:(n.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return pi(e,i,t,n),i}(e,r,n)}const yi=e=>{let t=te.create(1/0,1/0,1/0),n=te.create(-1/0,-1/0,-1/0);for(const{AABB:r}of e)t=te.min(r.min,t),n=te.max(r.max,n);return{min:t,max:n}},gi=e=>{const t=yi(e),n=(t.max[0]-t.min[0])*(t.max[1]-t.min[1])*(t.max[2]-t.min[2]);return e.length*n},vi=(44,16,16*Math.ceil(2.75));class xi{#a;#l;#c;#u;#h;constructor(e,t){this.#a=e,this.#c=t.map(((e,t)=>({AABB:e,objectIndex:t}))),this.#u=0,this.#l=[],this.#d(this.#c,0),console.log(this.#l),this.#p()}get gpuBuffer(){const e=this.#a.createBuffer({size:this.#h.size,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ,mappedAtCreation:!1}),t=this.#a.createCommandEncoder();return t.copyBufferToBuffer(this.#h,0,e,0,this.#h.size),this.#a.queue.submit([t.finish()]),e.mapAsync(GPUMapMode.READ).then((()=>{new Float32Array(e.getMappedRange())})),this.#h}update(e){this.#c=e.map(((e,t)=>({AABB:e,objectIndex:t}))),this.#u=0,this.#l=[],this.#d(this.#c,0),this.#p()}#d(e,t){if(0===this.#c.length)return;if(1===e.length)return void(this.#l[t]={leftChildIndex:this.#c.indexOf(e[0]),rightChildIndex:-1,objectCount:1,AABBMax:e[0].AABB.max,AABBMin:e[0].AABB.min});const n=yi(e);let r=-1,i=-1;const{left:s,right:o}=(e=>{let t=1/0,n=-1;const r=Math.floor(e.length/2);for(let i=1;i<e.length;i++){const s=e.slice(0,i),o=e.slice(i),a=gi(s)+gi(o),l=1*Math.abs(i-r)+1*a;l<t&&(t=l,n=i)}return{left:e.slice(0,n),right:e.slice(n)}})(e);s.length>0&&(r=++this.#u,this.#d(s,r)),o.length>0&&(i=++this.#u,this.#d(o,i)),this.#l[t]={leftChildIndex:r,rightChildIndex:i,objectCount:e.length,AABBMax:n.max,AABBMin:n.min}}#p(){return this.#h=this.#a.createBuffer({size:Math.max(this.#l.length,1)*vi,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC,mappedAtCreation:!1,label:"bvh buffer"}),this.#l.forEach(((e,t)=>{const n=t*vi,r=new ArrayBuffer(vi),i=new DataView(r);i.setInt32(0,e.leftChildIndex,!0),i.setInt32(4,e.rightChildIndex,!0),i.setUint32(8,e.objectCount,!0),i.setFloat32(16,e.AABBMin[0],!0),i.setFloat32(20,e.AABBMin[1],!0),i.setFloat32(24,e.AABBMin[2],!0),i.setFloat32(32,e.AABBMax[0],!0),i.setFloat32(36,e.AABBMax[1],!0),i.setFloat32(40,e.AABBMax[2],!0),this.#a.queue.writeBuffer(this.#h,n,r,0,vi)})),this.#h}}const wi="clear",bi=async()=>{const e=Ci.createShaderModule({code:"\n    struct VertexOutput {\n      @builtin(position) position : vec4f,\n    }\n    @vertex\n    fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n      var output : VertexOutput;\n      return output;\n    }\n    @fragment\n    fn fragment_main(@builtin(position) position : vec4f) -> @location(0) vec4<f32> {\n        return vec4(0.0);\n    }"}),t=Ci.createRenderPipeline({label:wi,layout:"auto",vertex:{module:e,entryPoint:"vertex_main"},fragment:{module:e,entryPoint:"fragment_main",targets:[{format:Xe}]}});return{render:e=>{const n=e.commandEncoder.beginRenderPass({label:wi,timestampWrites:e.timestampWrites,colorAttachments:[{view:e.outputTextures.finalTexture.view,loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});n.setPipeline(t),n.draw(6),n.end()},label:wi}};function _i(e,t){let n=0,r=1/t,i=e;for(;i>0;)n+=r*(i%t),i=Math.floor(i/t),r/=t;return n}let ki,Ti=!1;class Si extends e{position;rotation;scale;#f;constructor(e,t,n){super(),this.position=e,this.rotation=t,this.scale=n,this.#f=ge.identity()}get transform(){let e=ge.identity();return ge.translate(e,this.position,e),ge.multiply(e,ge.fromQuat(this.rotation),e),ge.scale(e,this.scale,e),e}get previousTransform(){return this.#f}set previousTransform(e){this.#f=e}get direction(){return te.transformQuat(te.create(0,0,1),this.rotation)}get right(){return te.transformQuat(te.create(1,0,0),this.rotation)}get left(){return te.transformQuat(te.create(-1,0,0),this.rotation)}get up(){return te.transformQuat(te.create(0,1,0),this.rotation)}get down(){return te.transformQuat(te.create(0,-1,0),this.rotation)}}class Pi extends e{size;atlasLocation;paletteIndex;octreeBufferIndex;name;constructor({size:e,atlasLocation:t,paletteIndex:n,octreeBufferIndex:r,name:i}){super(),this.size=e,this.atlasLocation=t,this.paletteIndex=n,this.octreeBufferIndex=r,this.name=i}}const Ei=(e,t)=>{const n=te.create(e.size[0]/2,e.size[1]/2,e.size[2]/2);return(e=>{let t=te.create(1/0,1/0,1/0),n=te.create(-1/0,-1/0,-1/0);for(const r of e)t=te.min(t,r),n=te.max(n,r);return{min:t,max:n}})([te.create(-n[0],-n[1],-n[2]),te.create(-n[0],-n[1],n[2]),te.create(-n[0],n[1],-n[2]),te.create(-n[0],n[1],n[2]),te.create(n[0],-n[1],-n[2]),te.create(n[0],-n[1],n[2]),te.create(n[0],n[1],-n[2]),te.create(n[0],n[1],n[2])].map((e=>te.transformMat4(e,t.transform))))},Ai=new class{#m;#y;#g;#v;constructor(){this.#m=new Mn(1),this.#y=new Mn(0),this.#g=new Mn(0),this.#v=new Mn(.8)}set targetScale(e){this.#m.target=e}set targetTranslateX(e){this.#y.target=e}set targetRotateY(e){this.#g.target=e}set targetSunRotateY(e){this.#v.target=e}get targetScale(){return this.#m.target}get targetTranslateX(){return this.#y.target}get targetRotateY(){return this.#g.target}get targetSunRotateY(){return this.#v.target}get sunRotateY(){return this.#v.value}get scale(){return this.#m.value}get translateX(){return this.#y.value}};let Mi,zi,Ii,Ci,Bi=z.create(4,4),Oi=0,Ri=Oi,Ni=0,Ui=0;const ji=new class{gui;timingsFolder;passesFolder;constructor(){}log(e){}setupDebugControls(e){}},Di=(()=>{let e={};const t=t=>{const n=e[t];return n?n.reduce(((e,t)=>e+t))/n.length:0};return{addSample:(t,n)=>{e[t]||(e[t]=[]),e[t].push(n)>50&&e[t].shift()},clearEntry:t=>{e[t]&&(e[t]=[0])},toString:()=>Object.keys(e).map((e=>`${e}: ${t(e).toFixed(2)}ms`)).join("\n"),toHTML:()=>Object.keys(e).map((e=>`<div class="debug-row">\n                    <div>\n                        ${e}\n                    </div>\n                   <div>${t(e).toFixed(2)}ms</div>\n                </div>`)).join("\n"),getAverages:()=>Object.keys(e).reduce(((e,n)=>(e[n]=t(n),e)),{})}})();Di.addSample("frame time",0);let Fi,qi,Li,Vi,Gi,Wi,Yi,$i,Hi,Xi,Zi,Ki,Qi,Ji,es,ts,ns,rs,is,ss,os,as,ls,cs=ge.create();qi=Array.from({length:200}).map((()=>({position:[-80*Math.random(),50*Math.random(),-200*Math.random()],size:4,color:te.normalize(te.create(Math.random(),Math.random(),Math.random()))})));const us=async(e,t,n,r)=>{if(Ci=e,Ii=t,!navigator.gpu)throw new Error("WebGPU not supported");ds=((e,t,n)=>{const r=new Float32Array(t),i=e.createBuffer({size:r.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"camera position"});return We(i,t),i})(Ci,[0,0,0,0]),hs(Ci),rs=new xi(Ci,r.map((e=>Ei(n.getComponents(e).get(Pi),n.getComponents(e).get(Si))))),Fi=(e=>e.createTexture({label:"sky texture",dimension:"2d",size:[640,640,6],format:"rgba16float",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING}))(Ci),Li=await Promise.all([bi(),ht(),dt(Ci)]),ls=Li.reduce(((e,t)=>t.timestampLabels?e.concat(t.timestampLabels):e.concat(t.label)),[]),zi=document.getElementById("webgpu-canvas"),zi.style.imageRendering="pixelated",Mi=zi.getContext("webgpu"),Mi.configure({device:Ci,format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT}),os=Ci.createSampler({magFilter:"linear",minFilter:"linear"}),as=Ci.createSampler({magFilter:"nearest",minFilter:"nearest"}),Ci.features.has("timestamp-query")&&(is=Ci.createQuerySet({type:"timestamp",count:1e3}),ss=Ci.createBuffer({label:"timestamp query",size:8*is.count,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}));const{clientWidth:i,clientHeight:s}=zi.parentElement,o=z.create(1*i,1*s);Bi=z.mulScalar(o,1),zi.width=o[0],zi.height=o[1],zi.style.transform="scale(1)"},hs=async e=>{const t=await async function(e,t,n={}){return mi(e,[t],n)}(e,"blue-noise-rg.png",{usage:GPUTextureUsage.COPY_SRC});Xi=t.createView()};let ds;setInterval((()=>{ji.log(Di.getAverages())}),500);const ps=(e,t,n,r,i)=>{if(!Ci||!Li||!Ii)return;const s=Ci.createCommandEncoder();0===Oi&&(Oi=e),s.pushDebugGroup("frame");const o=e-Oi;Ni=o-Ri,Di.addSample("frame time",Ni),Ri=o,Ui++,((e,t)=>{const n=function(e,t,n,r,i,s){const o=2*Math.tan(r/2)*s,a=o*i,l=2/t,c=2/n;return[(_i(e,2)-.5)*l*a,(_i(e,3)-.5)*c*o]}(Ui,Bi[0],Bi[1],"fieldOfView"in e.config?e.config.fieldOfView:90,Bi[0]/Bi[1],"near"in e.config?e.config.near:.1),r=function(e,t){const n=new Float32Array(e);return n[8]+=t[0],n[9]+=t[1],n}(e.projectionMatrix,n),i=(e=>{const t=e.position;return ge.lookAt(t,te.add(t,e.direction),e.up)})(t),s=ge.mul(r,i);ts=new Float32Array([...s,...cs,...ge.invert(s),...ge.invert(cs),...r,...ge.invert(r)]),Ji||(Ji=Ci.createBuffer({size:ts.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"view matrices buffer"})),Ci.queue.writeBuffer(Ji,0,ts.buffer,0,ts.length*Float32Array.BYTES_PER_ELEMENT);const o=ge.mul((a=r,ge.invert(a)),s);var a;const l=ge.invert(o);ns=new Float32Array(ge.getTranslation(l)),Ci.queue.writeBuffer(ds,0,ns.buffer,0,ns.length*Float32Array.BYTES_PER_ELEMENT),cs=s})(n,r),((e,t,n)=>{const r=n.map((e=>{return n=t.getComponents(e).get(Pi),[...(r=t.getComponents(e).get(Si)).transform,...ge.invert(r.transform),...r.previousTransform,...ge.invert(r.previousTransform),...n.size,0,...n.atlasLocation,n.paletteIndex,0,0,0,n.octreeBufferIndex];var n,r})).flat(),i=new Float32Array(r).byteLength;Qi&&i===Qi.size||(Qi=e.createBuffer({size:i,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"voxel objects buffer"})),e.queue.writeBuffer(Qi,0,new Float32Array(r).buffer,0,r.length*Float32Array.BYTES_PER_ELEMENT)})(Ci,t,i),Zi||(Zi=Ge([Ui,0,0],"time buffer")),Ci.queue.writeBuffer(Zi,4,new Float32Array([Ni])),Ci.queue.writeBuffer(Zi,0,new Uint32Array([Ui])),Ci.queue.writeBuffer(Zi,8,new Float32Array([Ri/1e3])),Ki?Ve(Ki,[Bi[0],Bi[1]]):Ki=Ge([Bi[0],Bi[1]]),(()=>{const e=ge.identity();ge.rotateY(e,Ai.sunRotateY,e);const t=te.normalize(te.transformMat4(te.create(0,.5,-.8),e));es?We(es,[t[0],t[1],t[2]]):es=Ge([t[0],t[1],t[2]],"sun buffer")})(),rs.update(i.map((e=>Ei(t.getComponents(e).get(Pi),t.getComponents(e).get(Si))))),Gi=new st(Ci,Bi[0],Bi[1]),Vi=new ot(Ci,Bi[0],Bi[1]),Yi=new at(Ci,Bi[0],Bi[1]),$i=new lt(Ci,Bi[0],Bi[1]),Wi=new ut(Ci,Bi[0],Bi[1]),Hi=new ct(Ci,Bi[0],Bi[1]);let a=0;Li.forEach(((e,o)=>{const{render:l,label:c}=e;let u;Ci.features.has("timestamp-query")&&s.clearBuffer(ss),Ci.features.has("timestamp-query")&&(u={querySet:is,beginningOfPassWriteIndex:a,endOfPassWriteIndex:a+1}),c&&s.pushDebugGroup(c),l({enabled:document.getElementById(`flag-${c}`)?.checked,commandEncoder:s,resolutionBuffer:Ki,timeBuffer:Zi,outputTextures:{finalTexture:Wi,albedoTexture:Gi,normalTexture:Vi,depthTexture:Yi,skyTexture:Fi,velocityTexture:$i,worldPositionTexture:Hi},cameraPositionBuffer:ds,volumeAtlas:Ii,transformationMatrixBuffer:Qi,viewProjectionMatricesArray:ts,viewProjectionMatricesBuffer:Ji,timestampWrites:u,sunDirectionBuffer:es,blueNoiseTextureView:Xi,bvhBuffer:rs.gpuBuffer,lights:qi,linearSampler:os,nearestSampler:as,camera:n,cameraTransform:r,renderableEntities:i,ecs:t}),a+=ls?.length>0?2*ls.length:2,c&&s.popDebugGroup()})),s.popDebugGroup(),Ci.features.has("timestamp-query")&&(async(e,t,n)=>{const r=n.size;ki||(ki=Ci.createBuffer({size:r,label:"gpu read buffer",usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}));const i=Ci.createCommandEncoder();if(Ti)return;Ti=!0,i.resolveQuerySet(t,0,t.count,n,0),i.copyBufferToBuffer(n,0,ki,0,r),Ci.queue.submit([i.finish()]),await Ci.queue.onSubmittedWorkDone(),await ki.mapAsync(GPUMapMode.READ).finally((()=>{Ti=!1}));const s=ki.getMappedRange(),o=new BigInt64Array(s),a=[];o.forEach((e=>{a.push(Number(e)/1e6)})),a.reduce(((e,t,n)=>(n%2==0&&e.push(a[n+1]-t),e)),[]).forEach(((t,n)=>{Di.addSample(e[n],t)})),ki.unmap()})(ls,is,ss),Ci.queue.submit([s.finish()])};class fs extends e{config;constructor(e){super(),this.config=e}get projectionMatrix(){return"size"in this.config?ge.ortho(-Bi[0]/this.config.size,Bi[0]/this.config.size,-Bi[1]/this.config.size,Bi[1]/this.config.size,this.config.size,-this.config.size):ge.perspective(this.config.fieldOfView,Bi[0]/Bi[1],this.config.near,this.config.far)}}class ms{index;dataView;constructor(e){this.dataView=new DataView(e),this.index=0}readUint8(){const e=this.dataView.getUint8(this.index);return this.index++,e}readUint32(){const e=this.dataView.getUint32(this.index,!0);return this.index+=4,e}readFloat32(){const e=this.dataView.getFloat32(this.index,!0);return this.index+=4,e}skip(e){this.index+=e}}const ys=e=>0===e,gs=e=>[1&e?1:0,2&e?1:0,4&e?1:0];let vs=0;class xs{nodes;#x;#w;constructor(e){var t;this.nodes=[],this.#x=0,this.#w=(t=e.SIZE,Math.ceil(Math.log2(Math.max(...t)))),this.#d(e,0,[0,0,0],0),vs/=this.nodes.length,console.log(`Average first child index: ${vs}`)}#b(e=8){return this.#x+=e,this.#x-(e-1)}#d(e,t,n,r){if(1===e.SIZE[0]){const r=e.XYZI[0].c;return void(this.nodes[t]={red:e.RGBA[r].r,green:e.RGBA[r].g,blue:e.RGBA[r].b,x:n[0],y:n[1],z:n[2]})}const i=Array.from({length:8},(()=>null)),s=r+1,o=(e=>Math.pow(2,Math.ceil(Math.log2(e))))(Math.max(...e.SIZE)),a=o/2;for(let t=0;t<8;t++){const r=gs(t),s=n[0]+r[0]*a,o=n[1]+r[1]*a,l=n[2]+r[2]*a,c=e.XYZI.filter((e=>e.x>=s&&e.x<s+a&&e.y>=o&&e.y<o+a&&e.z>=l&&e.z<l+a));c.length>0&&(i[t]={SIZE:[a,a,a],XYZI:c,RGBA:e.RGBA,VOX:c.length})}let l=0;const c=i.reduce(((e,t,n)=>t?(l=n+1,e|1<<n):e),0),u=this.#b(l),h=u-t;i.forEach(((e,t)=>{if(e){const r=u+t,i=gs(t),o=n[0]+i[0]*a,l=n[1]+i[1]*a,c=n[2]+i[2]*a;this.#d(e,r,[o,l,c],s)}})),vs+=u,this.nodes[t]={firstChildIndex:h,childMask:c,voxels:{...e,SIZE:[o,o,o]},x:n[0],y:n[1],z:n[2],size:o,leafMask:0}}get totalSize(){return 8*this.nodes.length}}const ws=async(e,t,n)=>{console.time(`Fetch ${e}`);const r=await fetch(e);console.timeEnd(`Fetch ${e}`);const i=(e=>{console.time("convert vxm");const t=new ms(e);let n,r=[],i="",s=[];if(i=String.fromCodePoint(t.readUint8(),t.readUint8(),t.readUint8(),t.readUint8()),"VXMC"!==i&&"VXMA"!==i)throw new Error(`Incorrect magic: ${i}`);if(i[3].charCodeAt(0)>="0".charCodeAt(0)&&i[3].charCodeAt(0)<="9".charCodeAt(0))n=i[3].charCodeAt(0)-"0".charCodeAt(0);else{if(!(i[3].charCodeAt(0)>="A".charCodeAt(0)&&i[3].charCodeAt(0)<="C".charCodeAt(0)))throw new Error("Unsupported version found");n=10+i[3].charCodeAt(0)-"A".charCodeAt(0)}if(n<11||n>12)throw new Error(`Could not load vxm file: Unsupported version found (${n})`);let o=[0,0,0];o[0]=t.readUint32(),o[1]=t.readUint32(),o[2]=t.readUint32();let a=[.5,0,.5];if(a[0]=t.readFloat32(),a[1]=t.readFloat32(),a[2]=t.readFloat32(),t.readUint8()>0){let e=0,n=0;t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),e=t.readUint32(),n=t.readUint32();let r=e*n;t.skip(4*r)}n>=8&&t.skip(16);let l=t.readUint32();for(let e=0;e<l;++e){let e=t.readUint32(),n=t.readUint32();if(e>2048||n>2048)throw new Error("Size of texture exceeds the max allowed value");let r=t.readUint32();t.skip(r);for(let e=0;e<6;++e){let e=t.readUint32();e>262144&&console.warn(`Size of quads exceeds the max allowed value: ${e}`);let n=4*e*20;t.skip(n)}}t.skip(1024),t.skip(1024);let c=t.readUint8();for(let e=0;e<c;++e)t.skip(1024),t.readUint8(),t.readUint8();let u=t.readUint8();for(let e=0;e<u;++e){let n=t.readUint8(),i=t.readUint8(),s=t.readUint8(),o=t.readUint8();o=1===t.readUint8()?2:255,r[e]={r:s,g:i,b:n,a:o}}let h=1;n>=12&&(h=t.readUint8());let d={min:te.create(9999,9999,9999),max:te.create(0,0,0)};for(let e=0;e<h;++e){let r=0,i=!0,a="";if(n>=12){for(;;){const e=t.readUint8();if(ys(e))break;a=`${a}${String.fromCharCode(e)}`}i=t.readUint8()>0}else a=`Layer ${e}`;for(;;){let e=t.readUint8();if(0===e)break;let n=t.readUint8();if(255!==n)if(n>=u)r+=e;else{for(let t=r;t<r+e;t++){let e=Math.floor(t/(o[1]*o[2])),r=Math.floor(t/o[2]%o[1]),i=Math.floor(t%o[2]);d.min=te.min(d.min,[e,r,i]),d.max=te.max(d.max,[e,r,i]),s.push({x:e,y:r,z:i,c:n})}r+=e}else r+=e}}s=s.map((({x:e,y:t,z:n,c:r})=>({x:e-d.min[0],y:t-d.min[1],z:n-d.min[2],c:r})));const p=te.sub(d.max,d.min);return console.timeEnd("convert vxm"),{VOX:s.length,SIZE:[p[0]+1,p[1]+1,p[2]+1],XYZI:s,RGBA:r}})(await r.arrayBuffer());console.time(`Create texture from voxels for ${e}`);let s=await(async(e,t)=>{const n=e.createTexture({size:{width:t.SIZE[0],height:t.SIZE[1],depthOrArrayLayers:t.SIZE[2]},format:He,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:4}),r=n.width*n.height*n.depthOrArrayLayers,i=e.createBuffer({size:4*r*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE}),s=e.createBuffer({size:256*t.SIZE[2],usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.UNIFORM,label:"voxels buffer"}),o=Array.from({length:t.SIZE[2]},((e,t)=>t));for(let t=0;t<o.length;t++)e.queue.writeBuffer(s,256*t,new Uint32Array([o[t]]).buffer);for(let n=0;n<t.XYZI.length;n++){const{x:r,y:s,z:o,c}=t.XYZI[n],u=(a=t.SIZE,(l=[r,s,o])[0]+l[1]*a[0]+l[2]*(a[0]*a[1]));e.queue.writeBuffer(i,16*u,new Uint32Array([r,s,o,c]).buffer)}var a,l;const c=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"storage"}}]}),u=e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[c]}),vertex:{module:e.createShaderModule({code:"\n          struct VertexOutput {\n            @builtin(position) Position : vec4<f32>,\n          }\n          \n          @vertex\n          fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n            const pos = array(\n              vec2( 1.0,  1.0),\n              vec2( 1.0, -1.0),\n              vec2(-1.0, -1.0),\n              vec2( 1.0,  1.0),\n              vec2(-1.0, -1.0),\n              vec2(-1.0,  1.0),\n            );\n            var output : VertexOutput;\n            output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n            return output;\n          }"}),entryPoint:"vertex_main"},fragment:{module:e.createShaderModule({code:"\n          @group(0) @binding(0) var<uniform> zIndex: u32;\n          @group(0) @binding(1) var<storage, read_write> voxelBuffer: array<vec4<u32>>;\n          \n          override sizeX: u32;\n          override sizeY: u32;\n          override sizeZ: u32;\n           \n          fn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\n            return position.x + position.y * size.x + position.z * (size.x * size.y);\n          }\n          \n          @fragment\n          fn fragment_main(@builtin(position) position : vec4<f32>) -> @location(0) vec4<f32> { \n            let voxelPosition = vec3(position.xy, f32(zIndex));\n            let voxelIndex = convert3DTo1D(vec3<u32>(sizeX, sizeY, sizeZ), vec3<u32>(voxelPosition));\n            let voxel = voxelBuffer[voxelIndex];\n            let normalisedPaletteIndex = f32(voxel.a) / 255.0;\n            return vec4(normalisedPaletteIndex,0,0,0);\n          }\n        "}),entryPoint:"fragment_main",targets:[{format:He}],constants:{sizeX:t.SIZE[0],sizeY:t.SIZE[1],sizeZ:t.SIZE[2]}}}),h=e.createCommandEncoder();for(let t=0;t<n.depthOrArrayLayers;t++){const r=e.createBindGroup({label:"create-texture-from-voxels",layout:c,entries:[{binding:0,resource:{buffer:s,offset:256*t,size:4}},{binding:1,resource:{buffer:i}}]}),o=h.beginRenderPass({colorAttachments:[{view:n.createView({baseArrayLayer:t,arrayLayerCount:1,mipLevelCount:1,dimension:"2d"}),loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});o.setPipeline(u),o.setBindGroup(0,r),o.draw(6),o.end()}e.queue.submit([h.finish()]),await e.queue.onSubmittedWorkDone();const d=r/1024/1024;return console.log(`Created texture of size ${d.toFixed(3)} MB`),n})(t,i);console.timeEnd(`Create texture from voxels for ${e}`),console.time(`Create octree for ${e}`);const o=(e=>{const t=new ArrayBuffer(e.totalSize),n=new DataView(t);return e.nodes.forEach(((e,t)=>{"red"in e?((e,t,n)=>{e.setUint16(8*t,0,!0),e.setUint8(8*t+2,n.red),e.setUint8(8*t+3,n.green),e.setUint8(8*t+4,n.blue),e.setUint8(8*t+5,n.x),e.setUint8(8*t+6,n.y),e.setUint8(8*t+7,n.z)})(n,t,e):((e,t,n)=>{console.assert(n.firstChildIndex<2**24-1,`First child index of ${n.firstChildIndex} is too large to fit in 3 bytes`),e.setUint32(8*t,n.firstChildIndex,!0),e.setUint8(8*t+3,n.childMask),e.setUint8(8*t+4,n.x),e.setUint8(8*t+5,n.y),e.setUint8(8*t+6,n.z),e.setUint8(8*t+7,n.size),0===t&&console.log(n.size)})(n,t,e)})),console.debug(`Created octree of size ${(e.totalSize/1048576).toFixed(3)} MB`),t})(new xs(i));console.timeEnd(`Create octree for ${e}`),console.time(`Create palette texture for ${e}`);const a=await(async(e,t)=>{const n=e.createTexture({size:{width:256,height:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC,dimension:"2d",mipLevelCount:1}),r=e.createBuffer({label:"palette buffer",size:1024,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC});t.RGBA.forEach((({r:t,g:n,b:i,a:s},o)=>{const a=new Uint8Array([t,n,i,s]);e.queue.writeBuffer(r,4*o,a)}));const i=e.createCommandEncoder();return i.copyBufferToTexture({buffer:r},{texture:n},[255,1,1]),e.queue.submit([i.finish()]),await e.queue.onSubmittedWorkDone(),n})(t,i);console.timeEnd(`Create palette texture for ${e}`),await n.addVolume(s,a,e,o)},bs=async(e,t,n,r)=>{t.dictionary[r]||await ws(r,e,t);const{size:i,location:s,paletteIndex:o,octreeOffset:a}=t.dictionary[r];return new Pi({name:n,size:i,atlasLocation:s,paletteIndex:o,octreeBufferIndex:a})},_s=async(e,t,n)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");const r=await(async(e,t)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");const n=e.createTexture({size:{width:t.width,height:t.height,depthOrArrayLayers:t.depthOrArrayLayers},format:t.format,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:t.mipLevelCount}),r=e.createCommandEncoder();for(let e=0;e<t.mipLevelCount;e++)for(let i=0;i<t.depthOrArrayLayers>>e;i++)r.copyTextureToTexture({texture:t,mipLevel:e,origin:{x:0,y:0,z:i}},{texture:n,mipLevel:e,origin:{x:0,y:0,z:i}},{width:t.width>>e,height:t.height>>e,depthOrArrayLayers:1});return e.queue.submit([r.finish()]),await e.queue.onSubmittedWorkDone(),n})(e,t),i=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),s=e.createBuffer({size:256*t.depthOrArrayLayers,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.UNIFORM,label:"z indices buffer"}),o=Array.from({length:t.depthOrArrayLayers},((e,t)=>t));for(let t=0;t<o.length;t++)e.queue.writeBuffer(s,256*t,new Uint32Array([o[t]]).buffer);const a=e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[i]}),vertex:{module:e.createShaderModule({code:"\n          struct VertexOutput {\n            @builtin(position) Position : vec4<f32>,\n          }\n          const pos = array(\n              vec2( 1.0,  1.0),\n              vec2( 1.0, -1.0),\n              vec2(-1.0, -1.0),\n              vec2( 1.0,  1.0),\n              vec2(-1.0, -1.0),\n              vec2(-1.0,  1.0),\n            );\n          @vertex\n          fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n            var output : VertexOutput;\n            output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n            return output;\n          }"}),entryPoint:"vertex_main"},fragment:{module:e.createShaderModule({code:"\n          @group(0) @binding(0) var voxels : texture_3d<f32>;\n          @group(0) @binding(1) var<uniform> zIndex: u32;\n          @fragment\nfn fragment_main(@builtin(position) position : vec4<f32>) -> @location(0) vec4<f32> {\n  let srcTexel = vec3(vec2<u32>(position.xy),zIndex);\n  var colours = array<f32, 8>();\n  var isOctantEmpty = true;\n  for(var x = u32(0); x < 2; x++){\n    for(var y = u32(0); y < 2; y++){\n      for(var z = u32(0); z < 2; z++){\n        let voxelX = srcTexel.x * 2 + x;\n        let voxelY = srcTexel.y * 2 + y;\n        let voxelZ = srcTexel.z * 2 + z;\n        var voxelId = vec3<u32>(voxelX,voxelY,voxelZ);\n        var voxel = textureLoad(voxels,voxelId,0).r;\n        if(voxel > 0){\n          var index = x + y * 2 + z * 4;\n          colours[index] = voxel;\n          isOctantEmpty = false;\n        }\n      }\n    }\n  }\n\n  // If all voxels in the octant are empty, keep it blank\n  if(isOctantEmpty){\n    discard;\n  }\n\n  // Get the most common colour in the octant\n  var mostCommonColour = f32(0);\n  var mostCommonColourCount = u32(0);\n  for(var i = u32(0); i < 8; i = i + 1u){\n    var colour = colours[i];\n    var count = u32(0);\n    for(var j = u32(0); j < 8; j = j + 1u){\n      if(colour > 0 && colour == colours[j]){\n        count++;\n      }\n    }\n    if(count > mostCommonColourCount){\n      mostCommonColour = colour;\n      mostCommonColourCount = count;\n    }\n  }\n\n  return vec4(mostCommonColour, 0,0,0);\n}\n\n\n        "}),entryPoint:"fragment_main",targets:[{format:t.format}]}}),l=e.createCommandEncoder(),c=Math.max(1,t.depthOrArrayLayers>>n);for(let o=0;o<c;o++){const c=e.createBindGroup({layout:i,entries:[{binding:0,resource:t.createView({label:`${n} mip level of volume texture`,dimension:"3d",baseMipLevel:n-1,mipLevelCount:1})},{binding:1,resource:{buffer:s,offset:256*o,size:4}}]}),u=l.beginRenderPass({colorAttachments:[{view:r.createView({label:"volume slice for rendering mips",baseArrayLayer:o,arrayLayerCount:1,baseMipLevel:n,mipLevelCount:1,dimension:"2d-array"}),loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});u.setPipeline(a),u.setBindGroup(0,c),u.draw(6),u.end()}return e.queue.submit([l.finish()]),await e.queue.onSubmittedWorkDone(),await(async(e,t)=>{if("2d"!==t.dimension)throw new Error("Input texture should be a 2D texture");const n=e.createTexture({size:{width:t.width,height:t.height,depthOrArrayLayers:t.depthOrArrayLayers},format:t.format,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d",mipLevelCount:t.mipLevelCount}),r=e.createCommandEncoder();for(let e=0;e<t.mipLevelCount;e++)for(let i=0;i<t.depthOrArrayLayers>>e;i++)r.copyTextureToTexture({texture:t,mipLevel:e,origin:{x:0,y:0,z:i}},{texture:n,mipLevel:e,origin:{x:0,y:0,z:i}},{width:t.width>>e,height:t.height>>e,depthOrArrayLayers:1});return e.queue.submit([r.finish()]),await e.queue.onSubmittedWorkDone(),n})(e,r)},ks={format:He,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d"},Ts=(e,t)=>Math.ceil(e/t)*t,Ss=Math.pow(2,3),Ps=Ss,Es=256;class As{#_={};#k;#T;#a;#S;#P;#E;constructor(e){this.#a=e,this.#k=e.createTexture({size:{width:Ps,height:Ps,depthOrArrayLayers:Ps},...ks,label:"Volume atlas containing ",mipLevelCount:4}),this.#T=e.createTexture({size:{width:Es,height:1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,label:"Palette texture",mipLevelCount:1}),this.#S=this.#k.createView(),this.#P=this.#T.createView(),this.#E=e.createBuffer({size:0,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC,label:"Octree buffer"})}get dictionary(){return this.#_}addVolume=async(e,t,n,r)=>{if(this.#_[n])throw new Error(`Error adding volume to atlas: volume with label ${n} already exists`);const i=this.#a.createCommandEncoder(),{width:s,height:o,depthOrArrayLayers:a}=e,l=Ts(s,Ss),c=Ts(o,Ss),u=Ts(a,Ss),h=this.#k.width+l;if(h>this.#a.limits.maxTextureDimension3D)throw new Error(`Error adding volume to atlas: adding volume would exceed device max texture dimension of ${this.#a.limits.maxTextureDimension3D}`);const d=Math.max(this.#k.height,c),p=Math.max(this.#k.depthOrArrayLayers,u),f=this.#a.createTexture({size:{width:h,height:d,depthOrArrayLayers:p},mipLevelCount:this.#k.mipLevelCount,...ks,label:`${this.#k.label}, ${e.label||"unnamed volume"}`}),m=this.#k.width;i.copyTextureToTexture({texture:this.#k},{texture:f},{width:this.#k.width,height:this.#k.height,depthOrArrayLayers:this.#k.depthOrArrayLayers}),i.copyTextureToTexture({texture:e,mipLevel:0,origin:{x:0,y:0,z:0}},{texture:f,mipLevel:0,origin:{x:m,y:0,z:0}},{width:e.width,height:e.height,depthOrArrayLayers:e.depthOrArrayLayers}),this.#k=f;const y=this.#T.height;this.#_[n]={location:[m,0,0],size:[s,o,a],paletteIndex:y,octreeOffset:this.#E.size,octreeSizeBytes:r.byteLength,textureSizeBytes:e.width*e.height*e.depthOrArrayLayers};const g=this.#a.createTexture({size:{width:Es,height:this.#T.height+1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,label:"Palette texture",mipLevelCount:1});i.copyTextureToTexture({texture:this.#T},{texture:g},{width:Es,height:this.#T.height,depthOrArrayLayers:1}),i.copyTextureToTexture({texture:t},{texture:g,origin:{x:0,y,z:0}},{width:Es,height:1,depthOrArrayLayers:1}),this.#T=g;const v=this.#a.createBuffer({label:"Octree buffer",size:this.#E.size+r.byteLength,usage:this.#E.usage});i.copyBufferToBuffer(this.#E,0,v,0,this.#E.size),this.#a.queue.writeBuffer(v,this.#E.size,r),this.#a.queue.submit([i.finish()]),await this.#a.queue.onSubmittedWorkDone(),this.#E=v,this.#E.unmap(),this.#k=await(async(e,t)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");let n=t;for(let r=1;r<t.mipLevelCount;r++)n=await _s(e,n,r);return n})(this.#a,this.#k),this.#S=this.#k.createView(),this.#P=this.#T.createView()};get atlasTextureView(){return this.#S}get paletteTextureView(){return this.#P}get octreeBuffer(){return this.#E}}class Ms extends e{device;volumeAtlas}class zs{pressed={w:!1,a:!1,s:!1,d:!1,q:!1,e:!1," ":!1,shift:!1};constructor(){window.addEventListener("keydown",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!0})),window.addEventListener("keyup",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!1})),window.addEventListener("blur",(()=>{Object.keys(this.pressed).forEach((e=>{this.pressed[e]=!1}))})),window.addEventListener("contextmenu",(()=>{Object.keys(this.pressed).forEach((e=>{this.pressed[e]=!1}))}))}}class Is extends e{speed=.1;rotationSpeed=.003}class Cs{constructor(e){void 0===e&&(e=[0,0,0,0,0,0,0,0,0]),this.elements=e}identity(){const e=this.elements;e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1}setZero(){const e=this.elements;e[0]=0,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=0,e[6]=0,e[7]=0,e[8]=0}setTrace(e){const t=this.elements;t[0]=e.x,t[4]=e.y,t[8]=e.z}getTrace(e){void 0===e&&(e=new Os);const t=this.elements;return e.x=t[0],e.y=t[4],e.z=t[8],e}vmult(e,t){void 0===t&&(t=new Os);const n=this.elements,r=e.x,i=e.y,s=e.z;return t.x=n[0]*r+n[1]*i+n[2]*s,t.y=n[3]*r+n[4]*i+n[5]*s,t.z=n[6]*r+n[7]*i+n[8]*s,t}smult(e){for(let t=0;t<this.elements.length;t++)this.elements[t]*=e}mmult(e,t){void 0===t&&(t=new Cs);const n=this.elements,r=e.elements,i=t.elements,s=n[0],o=n[1],a=n[2],l=n[3],c=n[4],u=n[5],h=n[6],d=n[7],p=n[8],f=r[0],m=r[1],y=r[2],g=r[3],v=r[4],x=r[5],w=r[6],b=r[7],_=r[8];return i[0]=s*f+o*g+a*w,i[1]=s*m+o*v+a*b,i[2]=s*y+o*x+a*_,i[3]=l*f+c*g+u*w,i[4]=l*m+c*v+u*b,i[5]=l*y+c*x+u*_,i[6]=h*f+d*g+p*w,i[7]=h*m+d*v+p*b,i[8]=h*y+d*x+p*_,t}scale(e,t){void 0===t&&(t=new Cs);const n=this.elements,r=t.elements;for(let t=0;3!==t;t++)r[3*t+0]=e.x*n[3*t+0],r[3*t+1]=e.y*n[3*t+1],r[3*t+2]=e.z*n[3*t+2];return t}solve(e,t){void 0===t&&(t=new Os);const n=[];let r,i;for(r=0;r<12;r++)n.push(0);for(r=0;r<3;r++)for(i=0;i<3;i++)n[r+4*i]=this.elements[r+3*i];n[3]=e.x,n[7]=e.y,n[11]=e.z;let s=3;const o=s;let a,l;do{if(r=o-s,0===n[r+4*r])for(i=r+1;i<o;i++)if(0!==n[r+4*i]){a=4;do{l=4-a,n[l+4*r]+=n[l+4*i]}while(--a);break}if(0!==n[r+4*r])for(i=r+1;i<o;i++){const e=n[r+4*i]/n[r+4*r];a=4;do{l=4-a,n[l+4*i]=l<=r?0:n[l+4*i]-n[l+4*r]*e}while(--a)}}while(--s);if(t.z=n[11]/n[10],t.y=(n[7]-n[6]*t.z)/n[5],t.x=(n[3]-n[2]*t.z-n[1]*t.y)/n[0],isNaN(t.x)||isNaN(t.y)||isNaN(t.z)||t.x===1/0||t.y===1/0||t.z===1/0)throw`Could not solve equation! Got x=[${t.toString()}], b=[${e.toString()}], A=[${this.toString()}]`;return t}e(e,t,n){if(void 0===n)return this.elements[t+3*e];this.elements[t+3*e]=n}copy(e){for(let t=0;t<e.elements.length;t++)this.elements[t]=e.elements[t];return this}toString(){let e="";for(let t=0;t<9;t++)e+=this.elements[t]+",";return e}reverse(e){void 0===e&&(e=new Cs);const t=Bs;let n,r;for(n=0;n<3;n++)for(r=0;r<3;r++)t[n+6*r]=this.elements[n+3*r];t[3]=1,t[9]=0,t[15]=0,t[4]=0,t[10]=1,t[16]=0,t[5]=0,t[11]=0,t[17]=1;let i=3;const s=i;let o,a;do{if(n=s-i,0===t[n+6*n])for(r=n+1;r<s;r++)if(0!==t[n+6*r]){o=6;do{a=6-o,t[a+6*n]+=t[a+6*r]}while(--o);break}if(0!==t[n+6*n])for(r=n+1;r<s;r++){const e=t[n+6*r]/t[n+6*n];o=6;do{a=6-o,t[a+6*r]=a<=n?0:t[a+6*r]-t[a+6*n]*e}while(--o)}}while(--i);n=2;do{r=n-1;do{const e=t[n+6*r]/t[n+6*n];o=6;do{a=6-o,t[a+6*r]=t[a+6*r]-t[a+6*n]*e}while(--o)}while(r--)}while(--n);n=2;do{const e=1/t[n+6*n];o=6;do{a=6-o,t[a+6*n]=t[a+6*n]*e}while(--o)}while(n--);n=2;do{r=2;do{if(a=t[3+r+6*n],isNaN(a)||a===1/0)throw`Could not reverse! A=[${this.toString()}]`;e.e(n,r,a)}while(r--)}while(n--);return e}setRotationFromQuaternion(e){const t=e.x,n=e.y,r=e.z,i=e.w,s=t+t,o=n+n,a=r+r,l=t*s,c=t*o,u=t*a,h=n*o,d=n*a,p=r*a,f=i*s,m=i*o,y=i*a,g=this.elements;return g[0]=1-(h+p),g[1]=c-y,g[2]=u+m,g[3]=c+y,g[4]=1-(l+p),g[5]=d-f,g[6]=u-m,g[7]=d+f,g[8]=1-(l+h),this}transpose(e){void 0===e&&(e=new Cs);const t=this.elements,n=e.elements;let r;return n[0]=t[0],n[4]=t[4],n[8]=t[8],r=t[1],n[1]=t[3],n[3]=r,r=t[2],n[2]=t[6],n[6]=r,r=t[5],n[5]=t[7],n[7]=r,e}}const Bs=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class Os{constructor(e,t,n){void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=0),this.x=e,this.y=t,this.z=n}cross(e,t){void 0===t&&(t=new Os);const n=e.x,r=e.y,i=e.z,s=this.x,o=this.y,a=this.z;return t.x=o*i-a*r,t.y=a*n-s*i,t.z=s*r-o*n,t}set(e,t,n){return this.x=e,this.y=t,this.z=n,this}setZero(){this.x=this.y=this.z=0}vadd(e,t){if(!t)return new Os(this.x+e.x,this.y+e.y,this.z+e.z);t.x=e.x+this.x,t.y=e.y+this.y,t.z=e.z+this.z}vsub(e,t){if(!t)return new Os(this.x-e.x,this.y-e.y,this.z-e.z);t.x=this.x-e.x,t.y=this.y-e.y,t.z=this.z-e.z}crossmat(){return new Cs([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const e=this.x,t=this.y,n=this.z,r=Math.sqrt(e*e+t*t+n*n);if(r>0){const e=1/r;this.x*=e,this.y*=e,this.z*=e}else this.x=0,this.y=0,this.z=0;return r}unit(e){void 0===e&&(e=new Os);const t=this.x,n=this.y,r=this.z;let i=Math.sqrt(t*t+n*n+r*r);return i>0?(i=1/i,e.x=t*i,e.y=n*i,e.z=r*i):(e.x=1,e.y=0,e.z=0),e}length(){const e=this.x,t=this.y,n=this.z;return Math.sqrt(e*e+t*t+n*n)}lengthSquared(){return this.dot(this)}distanceTo(e){const t=this.x,n=this.y,r=this.z,i=e.x,s=e.y,o=e.z;return Math.sqrt((i-t)*(i-t)+(s-n)*(s-n)+(o-r)*(o-r))}distanceSquared(e){const t=this.x,n=this.y,r=this.z,i=e.x,s=e.y,o=e.z;return(i-t)*(i-t)+(s-n)*(s-n)+(o-r)*(o-r)}scale(e,t){void 0===t&&(t=new Os);const n=this.x,r=this.y,i=this.z;return t.x=e*n,t.y=e*r,t.z=e*i,t}vmul(e,t){return void 0===t&&(t=new Os),t.x=e.x*this.x,t.y=e.y*this.y,t.z=e.z*this.z,t}addScaledVector(e,t,n){return void 0===n&&(n=new Os),n.x=this.x+e*t.x,n.y=this.y+e*t.y,n.z=this.z+e*t.z,n}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(e){return void 0===e&&(e=new Os),e.x=-this.x,e.y=-this.y,e.z=-this.z,e}tangents(e,t){const n=this.length();if(n>0){const r=Rs,i=1/n;r.set(this.x*i,this.y*i,this.z*i);const s=Ns;Math.abs(r.x)<.9?(s.set(1,0,0),r.cross(s,e)):(s.set(0,1,0),r.cross(s,e)),r.cross(e,t)}else e.set(1,0,0),t.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}lerp(e,t,n){const r=this.x,i=this.y,s=this.z;n.x=r+(e.x-r)*t,n.y=i+(e.y-i)*t,n.z=s+(e.z-s)*t}almostEquals(e,t){return void 0===t&&(t=1e-6),!(Math.abs(this.x-e.x)>t||Math.abs(this.y-e.y)>t||Math.abs(this.z-e.z)>t)}almostZero(e){return void 0===e&&(e=1e-6),!(Math.abs(this.x)>e||Math.abs(this.y)>e||Math.abs(this.z)>e)}isAntiparallelTo(e,t){return this.negate(Us),Us.almostEquals(e,t)}clone(){return new Os(this.x,this.y,this.z)}}Os.ZERO=new Os(0,0,0),Os.UNIT_X=new Os(1,0,0),Os.UNIT_Y=new Os(0,1,0),Os.UNIT_Z=new Os(0,0,1);const Rs=new Os,Ns=new Os,Us=new Os;class js{constructor(e){void 0===e&&(e={}),this.lowerBound=new Os,this.upperBound=new Os,e.lowerBound&&this.lowerBound.copy(e.lowerBound),e.upperBound&&this.upperBound.copy(e.upperBound)}setFromPoints(e,t,n,r){const i=this.lowerBound,s=this.upperBound,o=n;i.copy(e[0]),o&&o.vmult(i,i),s.copy(i);for(let t=1;t<e.length;t++){let n=e[t];o&&(o.vmult(n,Ds),n=Ds),n.x>s.x&&(s.x=n.x),n.x<i.x&&(i.x=n.x),n.y>s.y&&(s.y=n.y),n.y<i.y&&(i.y=n.y),n.z>s.z&&(s.z=n.z),n.z<i.z&&(i.z=n.z)}return t&&(t.vadd(i,i),t.vadd(s,s)),r&&(i.x-=r,i.y-=r,i.z-=r,s.x+=r,s.y+=r,s.z+=r),this}copy(e){return this.lowerBound.copy(e.lowerBound),this.upperBound.copy(e.upperBound),this}clone(){return(new js).copy(this)}extend(e){this.lowerBound.x=Math.min(this.lowerBound.x,e.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,e.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,e.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,e.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,e.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,e.upperBound.z)}overlaps(e){const t=this.lowerBound,n=this.upperBound,r=e.lowerBound,i=e.upperBound,s=r.x<=n.x&&n.x<=i.x||t.x<=i.x&&i.x<=n.x,o=r.y<=n.y&&n.y<=i.y||t.y<=i.y&&i.y<=n.y,a=r.z<=n.z&&n.z<=i.z||t.z<=i.z&&i.z<=n.z;return s&&o&&a}volume(){const e=this.lowerBound,t=this.upperBound;return(t.x-e.x)*(t.y-e.y)*(t.z-e.z)}contains(e){const t=this.lowerBound,n=this.upperBound,r=e.lowerBound,i=e.upperBound;return t.x<=r.x&&n.x>=i.x&&t.y<=r.y&&n.y>=i.y&&t.z<=r.z&&n.z>=i.z}getCorners(e,t,n,r,i,s,o,a){const l=this.lowerBound,c=this.upperBound;e.copy(l),t.set(c.x,l.y,l.z),n.set(c.x,c.y,l.z),r.set(l.x,c.y,c.z),i.set(c.x,l.y,c.z),s.set(l.x,c.y,l.z),o.set(l.x,l.y,c.z),a.copy(c)}toLocalFrame(e,t){const n=Fs,r=n[0],i=n[1],s=n[2],o=n[3],a=n[4],l=n[5],c=n[6],u=n[7];this.getCorners(r,i,s,o,a,l,c,u);for(let t=0;8!==t;t++){const r=n[t];e.pointToLocal(r,r)}return t.setFromPoints(n)}toWorldFrame(e,t){const n=Fs,r=n[0],i=n[1],s=n[2],o=n[3],a=n[4],l=n[5],c=n[6],u=n[7];this.getCorners(r,i,s,o,a,l,c,u);for(let t=0;8!==t;t++){const r=n[t];e.pointToWorld(r,r)}return t.setFromPoints(n)}overlapsRay(e){const{direction:t,from:n}=e,r=1/t.x,i=1/t.y,s=1/t.z,o=(this.lowerBound.x-n.x)*r,a=(this.upperBound.x-n.x)*r,l=(this.lowerBound.y-n.y)*i,c=(this.upperBound.y-n.y)*i,u=(this.lowerBound.z-n.z)*s,h=(this.upperBound.z-n.z)*s,d=Math.max(Math.max(Math.min(o,a),Math.min(l,c)),Math.min(u,h)),p=Math.min(Math.min(Math.max(o,a),Math.max(l,c)),Math.max(u,h));return!(p<0||d>p)}}const Ds=new Os,Fs=[new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os];class qs{constructor(){this.matrix=[]}get(e,t){let{index:n}=e,{index:r}=t;if(r>n){const e=r;r=n,n=e}return this.matrix[(n*(n+1)>>1)+r-1]}set(e,t,n){let{index:r}=e,{index:i}=t;if(i>r){const e=i;i=r,r=e}this.matrix[(r*(r+1)>>1)+i-1]=n?1:0}reset(){for(let e=0,t=this.matrix.length;e!==t;e++)this.matrix[e]=0}setNumObjects(e){this.matrix.length=e*(e-1)>>1}}class Ls{addEventListener(e,t){void 0===this._listeners&&(this._listeners={});const n=this._listeners;return void 0===n[e]&&(n[e]=[]),n[e].includes(t)||n[e].push(t),this}hasEventListener(e,t){if(void 0===this._listeners)return!1;const n=this._listeners;return!(void 0===n[e]||!n[e].includes(t))}hasAnyEventListener(e){return void 0!==this._listeners&&void 0!==this._listeners[e]}removeEventListener(e,t){if(void 0===this._listeners)return this;const n=this._listeners;if(void 0===n[e])return this;const r=n[e].indexOf(t);return-1!==r&&n[e].splice(r,1),this}dispatchEvent(e){if(void 0===this._listeners)return this;const t=this._listeners[e.type];if(void 0!==t){e.target=this;for(let n=0,r=t.length;n<r;n++)t[n].call(this,e)}return this}}class Vs{constructor(e,t,n,r){void 0===e&&(e=0),void 0===t&&(t=0),void 0===n&&(n=0),void 0===r&&(r=1),this.x=e,this.y=t,this.z=n,this.w=r}set(e,t,n,r){return this.x=e,this.y=t,this.z=n,this.w=r,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(e,t){const n=Math.sin(.5*t);return this.x=e.x*n,this.y=e.y*n,this.z=e.z*n,this.w=Math.cos(.5*t),this}toAxisAngle(e){void 0===e&&(e=new Os),this.normalize();const t=2*Math.acos(this.w),n=Math.sqrt(1-this.w*this.w);return n<.001?(e.x=this.x,e.y=this.y,e.z=this.z):(e.x=this.x/n,e.y=this.y/n,e.z=this.z/n),[e,t]}setFromVectors(e,t){if(e.isAntiparallelTo(t)){const t=Gs,n=Ws;e.tangents(t,n),this.setFromAxisAngle(t,Math.PI)}else{const n=e.cross(t);this.x=n.x,this.y=n.y,this.z=n.z,this.w=Math.sqrt(e.length()**2*t.length()**2)+e.dot(t),this.normalize()}return this}mult(e,t){void 0===t&&(t=new Vs);const n=this.x,r=this.y,i=this.z,s=this.w,o=e.x,a=e.y,l=e.z,c=e.w;return t.x=n*c+s*o+r*l-i*a,t.y=r*c+s*a+i*o-n*l,t.z=i*c+s*l+n*a-r*o,t.w=s*c-n*o-r*a-i*l,t}inverse(e){void 0===e&&(e=new Vs);const t=this.x,n=this.y,r=this.z,i=this.w;this.conjugate(e);const s=1/(t*t+n*n+r*r+i*i);return e.x*=s,e.y*=s,e.z*=s,e.w*=s,e}conjugate(e){return void 0===e&&(e=new Vs),e.x=-this.x,e.y=-this.y,e.z=-this.z,e.w=this.w,e}normalize(){let e=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===e?(this.x=0,this.y=0,this.z=0,this.w=0):(e=1/e,this.x*=e,this.y*=e,this.z*=e,this.w*=e),this}normalizeFast(){const e=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===e?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=e,this.y*=e,this.z*=e,this.w*=e),this}vmult(e,t){void 0===t&&(t=new Os);const n=e.x,r=e.y,i=e.z,s=this.x,o=this.y,a=this.z,l=this.w,c=l*n+o*i-a*r,u=l*r+a*n-s*i,h=l*i+s*r-o*n,d=-s*n-o*r-a*i;return t.x=c*l+d*-s+u*-a-h*-o,t.y=u*l+d*-o+h*-s-c*-a,t.z=h*l+d*-a+c*-o-u*-s,t}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w,this}toEuler(e,t){let n,r,i;void 0===t&&(t="YZX");const s=this.x,o=this.y,a=this.z,l=this.w;if("YZX"!==t)throw new Error(`Euler order ${t} not supported yet.`);{const e=s*o+a*l;if(e>.499&&(n=2*Math.atan2(s,l),r=Math.PI/2,i=0),e<-.499&&(n=-2*Math.atan2(s,l),r=-Math.PI/2,i=0),void 0===n){const t=s*s,c=o*o,u=a*a;n=Math.atan2(2*o*l-2*s*a,1-2*c-2*u),r=Math.asin(2*e),i=Math.atan2(2*s*l-2*o*a,1-2*t-2*u)}}e.y=n,e.z=r,e.x=i}setFromEuler(e,t,n,r){void 0===r&&(r="XYZ");const i=Math.cos(e/2),s=Math.cos(t/2),o=Math.cos(n/2),a=Math.sin(e/2),l=Math.sin(t/2),c=Math.sin(n/2);return"XYZ"===r?(this.x=a*s*o+i*l*c,this.y=i*l*o-a*s*c,this.z=i*s*c+a*l*o,this.w=i*s*o-a*l*c):"YXZ"===r?(this.x=a*s*o+i*l*c,this.y=i*l*o-a*s*c,this.z=i*s*c-a*l*o,this.w=i*s*o+a*l*c):"ZXY"===r?(this.x=a*s*o-i*l*c,this.y=i*l*o+a*s*c,this.z=i*s*c+a*l*o,this.w=i*s*o-a*l*c):"ZYX"===r?(this.x=a*s*o-i*l*c,this.y=i*l*o+a*s*c,this.z=i*s*c-a*l*o,this.w=i*s*o+a*l*c):"YZX"===r?(this.x=a*s*o+i*l*c,this.y=i*l*o+a*s*c,this.z=i*s*c-a*l*o,this.w=i*s*o-a*l*c):"XZY"===r&&(this.x=a*s*o-i*l*c,this.y=i*l*o-a*s*c,this.z=i*s*c+a*l*o,this.w=i*s*o+a*l*c),this}clone(){return new Vs(this.x,this.y,this.z,this.w)}slerp(e,t,n){void 0===n&&(n=new Vs);const r=this.x,i=this.y,s=this.z,o=this.w;let a,l,c,u,h,d=e.x,p=e.y,f=e.z,m=e.w;return l=r*d+i*p+s*f+o*m,l<0&&(l=-l,d=-d,p=-p,f=-f,m=-m),1-l>1e-6?(a=Math.acos(l),c=Math.sin(a),u=Math.sin((1-t)*a)/c,h=Math.sin(t*a)/c):(u=1-t,h=t),n.x=u*r+h*d,n.y=u*i+h*p,n.z=u*s+h*f,n.w=u*o+h*m,n}integrate(e,t,n,r){void 0===r&&(r=new Vs);const i=e.x*n.x,s=e.y*n.y,o=e.z*n.z,a=this.x,l=this.y,c=this.z,u=this.w,h=.5*t;return r.x+=h*(i*u+s*c-o*l),r.y+=h*(s*u+o*a-i*c),r.z+=h*(o*u+i*l-s*a),r.w+=h*(-i*a-s*l-o*c),r}}const Gs=new Os,Ws=new Os;class Ys{constructor(e){void 0===e&&(e={}),this.id=Ys.idCounter++,this.type=e.type||0,this.boundingSphereRadius=0,this.collisionResponse=!e.collisionResponse||e.collisionResponse,this.collisionFilterGroup=void 0!==e.collisionFilterGroup?e.collisionFilterGroup:1,this.collisionFilterMask=void 0!==e.collisionFilterMask?e.collisionFilterMask:-1,this.material=e.material?e.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(e,t){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(e,t,n,r){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}Ys.idCounter=0,Ys.types={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class $s{constructor(e){void 0===e&&(e={}),this.position=new Os,this.quaternion=new Vs,e.position&&this.position.copy(e.position),e.quaternion&&this.quaternion.copy(e.quaternion)}pointToLocal(e,t){return $s.pointToLocalFrame(this.position,this.quaternion,e,t)}pointToWorld(e,t){return $s.pointToWorldFrame(this.position,this.quaternion,e,t)}vectorToWorldFrame(e,t){return void 0===t&&(t=new Os),this.quaternion.vmult(e,t),t}static pointToLocalFrame(e,t,n,r){return void 0===r&&(r=new Os),n.vsub(e,r),t.conjugate(Hs),Hs.vmult(r,r),r}static pointToWorldFrame(e,t,n,r){return void 0===r&&(r=new Os),t.vmult(n,r),r.vadd(e,r),r}static vectorToWorldFrame(e,t,n){return void 0===n&&(n=new Os),e.vmult(t,n),n}static vectorToLocalFrame(e,t,n,r){return void 0===r&&(r=new Os),t.w*=-1,t.vmult(n,r),t.w*=-1,r}}const Hs=new Vs;class Xs extends Ys{constructor(e){void 0===e&&(e={});const{vertices:t=[],faces:n=[],normals:r=[],axes:i,boundingSphereRadius:s}=e;super({type:Ys.types.CONVEXPOLYHEDRON}),this.vertices=t,this.faces=n,this.faceNormals=r,0===this.faceNormals.length&&this.computeNormals(),s?this.boundingSphereRadius=s:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const e=this.faces,t=this.vertices,n=this.uniqueEdges;n.length=0;const r=new Os;for(let i=0;i!==e.length;i++){const s=e[i],o=s.length;for(let e=0;e!==o;e++){const i=(e+1)%o;t[s[e]].vsub(t[s[i]],r),r.normalize();let a=!1;for(let e=0;e!==n.length;e++)if(n[e].almostEquals(r)||n[e].almostEquals(r)){a=!0;break}a||n.push(r.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let e=0;e<this.faces.length;e++){for(let t=0;t<this.faces[e].length;t++)if(!this.vertices[this.faces[e][t]])throw new Error(`Vertex ${this.faces[e][t]} not found!`);const t=this.faceNormals[e]||new Os;this.getFaceNormal(e,t),t.negate(t),this.faceNormals[e]=t;const n=this.vertices[this.faces[e][0]];if(t.dot(n)<0){console.error(`.faceNormals[${e}] = Vec3(${t.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let t=0;t<this.faces[e].length;t++)console.warn(`.vertices[${this.faces[e][t]}] = Vec3(${this.vertices[this.faces[e][t]].toString()})`)}}}getFaceNormal(e,t){const n=this.faces[e],r=this.vertices[n[0]],i=this.vertices[n[1]],s=this.vertices[n[2]];Xs.computeNormal(r,i,s,t)}static computeNormal(e,t,n,r){const i=new Os,s=new Os;t.vsub(e,s),n.vsub(t,i),i.cross(s,r),r.isZero()||r.normalize()}clipAgainstHull(e,t,n,r,i,s,o,a,l){const c=new Os;let u=-1,h=-Number.MAX_VALUE;for(let e=0;e<n.faces.length;e++){c.copy(n.faceNormals[e]),i.vmult(c,c);const t=c.dot(s);t>h&&(h=t,u=e)}const d=[];for(let e=0;e<n.faces[u].length;e++){const t=n.vertices[n.faces[u][e]],s=new Os;s.copy(t),i.vmult(s,s),r.vadd(s,s),d.push(s)}u>=0&&this.clipFaceAgainstHull(s,e,t,d,o,a,l)}findSeparatingAxis(e,t,n,r,i,s,o,a){const l=new Os,c=new Os,u=new Os,h=new Os,d=new Os,p=new Os;let f=Number.MAX_VALUE;const m=this;if(m.uniqueAxes)for(let o=0;o!==m.uniqueAxes.length;o++){n.vmult(m.uniqueAxes[o],l);const a=m.testSepAxis(l,e,t,n,r,i);if(!1===a)return!1;a<f&&(f=a,s.copy(l))}else{const a=o?o.length:m.faces.length;for(let c=0;c<a;c++){const a=o?o[c]:c;l.copy(m.faceNormals[a]),n.vmult(l,l);const u=m.testSepAxis(l,e,t,n,r,i);if(!1===u)return!1;u<f&&(f=u,s.copy(l))}}if(e.uniqueAxes)for(let o=0;o!==e.uniqueAxes.length;o++){i.vmult(e.uniqueAxes[o],c);const a=m.testSepAxis(c,e,t,n,r,i);if(!1===a)return!1;a<f&&(f=a,s.copy(c))}else{const o=a?a.length:e.faces.length;for(let l=0;l<o;l++){const o=a?a[l]:l;c.copy(e.faceNormals[o]),i.vmult(c,c);const u=m.testSepAxis(c,e,t,n,r,i);if(!1===u)return!1;u<f&&(f=u,s.copy(c))}}for(let o=0;o!==m.uniqueEdges.length;o++){n.vmult(m.uniqueEdges[o],h);for(let o=0;o!==e.uniqueEdges.length;o++)if(i.vmult(e.uniqueEdges[o],d),h.cross(d,p),!p.almostZero()){p.normalize();const o=m.testSepAxis(p,e,t,n,r,i);if(!1===o)return!1;o<f&&(f=o,s.copy(p))}}return r.vsub(t,u),u.dot(s)>0&&s.negate(s),!0}testSepAxis(e,t,n,r,i,s){Xs.project(this,e,n,r,Zs),Xs.project(t,e,i,s,Ks);const o=Zs[0],a=Zs[1],l=Ks[0],c=Ks[1];if(o<c||l<a)return!1;const u=o-c,h=l-a;return u<h?u:h}calculateLocalInertia(e,t){const n=new Os,r=new Os;this.computeLocalAABB(r,n);const i=n.x-r.x,s=n.y-r.y,o=n.z-r.z;t.x=1/12*e*(2*s*2*s+2*o*2*o),t.y=1/12*e*(2*i*2*i+2*o*2*o),t.z=1/12*e*(2*s*2*s+2*i*2*i)}getPlaneConstantOfFace(e){const t=this.faces[e],n=this.faceNormals[e],r=this.vertices[t[0]];return-n.dot(r)}clipFaceAgainstHull(e,t,n,r,i,s,o){const a=new Os,l=new Os,c=new Os,u=new Os,h=new Os,d=new Os,p=new Os,f=new Os,m=this,y=r,g=[];let v=-1,x=Number.MAX_VALUE;for(let t=0;t<m.faces.length;t++){a.copy(m.faceNormals[t]),n.vmult(a,a);const r=a.dot(e);r<x&&(x=r,v=t)}if(v<0)return;const w=m.faces[v];w.connectedFaces=[];for(let e=0;e<m.faces.length;e++)for(let t=0;t<m.faces[e].length;t++)-1!==w.indexOf(m.faces[e][t])&&e!==v&&-1===w.connectedFaces.indexOf(e)&&w.connectedFaces.push(e);const b=w.length;for(let e=0;e<b;e++){const r=m.vertices[w[e]],i=m.vertices[w[(e+1)%b]];r.vsub(i,l),c.copy(l),n.vmult(c,c),t.vadd(c,c),u.copy(this.faceNormals[v]),n.vmult(u,u),t.vadd(u,u),c.cross(u,h),h.negate(h),d.copy(r),n.vmult(d,d),t.vadd(d,d);const s=w.connectedFaces[e];p.copy(this.faceNormals[s]);const o=this.getPlaneConstantOfFace(s);f.copy(p),n.vmult(f,f);const a=o-f.dot(t);for(this.clipFaceAgainstPlane(y,g,f,a);y.length;)y.shift();for(;g.length;)y.push(g.shift())}p.copy(this.faceNormals[v]);const _=this.getPlaneConstantOfFace(v);f.copy(p),n.vmult(f,f);const k=_-f.dot(t);for(let e=0;e<y.length;e++){let t=f.dot(y[e])+k;if(t<=i&&(console.log(`clamped: depth=${t} to minDist=${i}`),t=i),t<=s){const n=y[e];if(t<=1e-6){const e={point:n,normal:f,depth:t};o.push(e)}}}}clipFaceAgainstPlane(e,t,n,r){let i,s;const o=e.length;if(o<2)return t;let a=e[e.length-1],l=e[0];i=n.dot(a)+r;for(let c=0;c<o;c++){if(l=e[c],s=n.dot(l)+r,i<0)if(s<0){const e=new Os;e.copy(l),t.push(e)}else{const e=new Os;a.lerp(l,i/(i-s),e),t.push(e)}else if(s<0){const e=new Os;a.lerp(l,i/(i-s),e),t.push(e),t.push(l)}a=l,i=s}return t}computeWorldVertices(e,t){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new Os);const n=this.vertices,r=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)t.vmult(n[i],r[i]),e.vadd(r[i],r[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(e,t){const n=this.vertices;e.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),t.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let r=0;r<this.vertices.length;r++){const i=n[r];i.x<e.x?e.x=i.x:i.x>t.x&&(t.x=i.x),i.y<e.y?e.y=i.y:i.y>t.y&&(t.y=i.y),i.z<e.z?e.z=i.z:i.z>t.z&&(t.z=i.z)}}computeWorldFaceNormals(e){const t=this.faceNormals.length;for(;this.worldFaceNormals.length<t;)this.worldFaceNormals.push(new Os);const n=this.faceNormals,r=this.worldFaceNormals;for(let i=0;i!==t;i++)e.vmult(n[i],r[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let e=0;const t=this.vertices;for(let n=0;n!==t.length;n++){const r=t[n].lengthSquared();r>e&&(e=r)}this.boundingSphereRadius=Math.sqrt(e)}calculateWorldAABB(e,t,n,r){const i=this.vertices;let s,o,a,l,c,u,h=new Os;for(let n=0;n<i.length;n++){h.copy(i[n]),t.vmult(h,h),e.vadd(h,h);const r=h;(void 0===s||r.x<s)&&(s=r.x),(void 0===l||r.x>l)&&(l=r.x),(void 0===o||r.y<o)&&(o=r.y),(void 0===c||r.y>c)&&(c=r.y),(void 0===a||r.z<a)&&(a=r.z),(void 0===u||r.z>u)&&(u=r.z)}n.set(s,o,a),r.set(l,c,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(e){void 0===e&&(e=new Os);const t=this.vertices;for(let n=0;n<t.length;n++)e.vadd(t[n],e);return e.scale(1/t.length,e),e}transformAllPoints(e,t){const n=this.vertices.length,r=this.vertices;if(t){for(let e=0;e<n;e++){const n=r[e];t.vmult(n,n)}for(let e=0;e<this.faceNormals.length;e++){const n=this.faceNormals[e];t.vmult(n,n)}}if(e)for(let t=0;t<n;t++){const n=r[t];n.vadd(e,n)}}pointIsInside(e){const t=this.vertices,n=this.faces,r=this.faceNormals,i=new Os;this.getAveragePointLocal(i);for(let s=0;s<this.faces.length;s++){let o=r[s];const a=t[n[s][0]],l=new Os;e.vsub(a,l);const c=o.dot(l),u=new Os;i.vsub(a,u);const h=o.dot(u);if(c<0&&h>0||c>0&&h<0)return!1}return-1}static project(e,t,n,r,i){const s=e.vertices.length,o=Qs;let a=0,l=0;const c=Js,u=e.vertices;c.setZero(),$s.vectorToLocalFrame(n,r,t,o),$s.pointToLocalFrame(n,r,c,c);const h=c.dot(o);l=a=u[0].dot(o);for(let e=1;e<s;e++){const t=u[e].dot(o);t>a&&(a=t),t<l&&(l=t)}if(l-=h,a-=h,l>a){const e=l;l=a,a=e}i[0]=a,i[1]=l}}const Zs=[],Ks=[],Qs=(new Os,new Os),Js=new Os;class eo extends Ys{constructor(e){super({type:Ys.types.BOX}),this.halfExtents=e,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const e=this.halfExtents.x,t=this.halfExtents.y,n=this.halfExtents.z,r=Os,i=[new r(-e,-t,-n),new r(e,-t,-n),new r(e,t,-n),new r(-e,t,-n),new r(-e,-t,n),new r(e,-t,n),new r(e,t,n),new r(-e,t,n)],s=[new r(0,0,1),new r(0,1,0),new r(1,0,0)],o=new Xs({vertices:i,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:s});this.convexPolyhedronRepresentation=o,o.material=this.material}calculateLocalInertia(e,t){return void 0===t&&(t=new Os),eo.calculateInertia(this.halfExtents,e,t),t}static calculateInertia(e,t,n){const r=e;n.x=1/12*t*(2*r.y*2*r.y+2*r.z*2*r.z),n.y=1/12*t*(2*r.x*2*r.x+2*r.z*2*r.z),n.z=1/12*t*(2*r.y*2*r.y+2*r.x*2*r.x)}getSideNormals(e,t){const n=e,r=this.halfExtents;if(n[0].set(r.x,0,0),n[1].set(0,r.y,0),n[2].set(0,0,r.z),n[3].set(-r.x,0,0),n[4].set(0,-r.y,0),n[5].set(0,0,-r.z),void 0!==t)for(let e=0;e!==n.length;e++)t.vmult(n[e],n[e]);return n}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(e,t,n){const r=this.halfExtents,i=[[r.x,r.y,r.z],[-r.x,r.y,r.z],[-r.x,-r.y,r.z],[-r.x,-r.y,-r.z],[r.x,-r.y,-r.z],[r.x,r.y,-r.z],[-r.x,r.y,-r.z],[r.x,-r.y,r.z]];for(let r=0;r<i.length;r++)to.set(i[r][0],i[r][1],i[r][2]),t.vmult(to,to),e.vadd(to,to),n(to.x,to.y,to.z)}calculateWorldAABB(e,t,n,r){const i=this.halfExtents;no[0].set(i.x,i.y,i.z),no[1].set(-i.x,i.y,i.z),no[2].set(-i.x,-i.y,i.z),no[3].set(-i.x,-i.y,-i.z),no[4].set(i.x,-i.y,-i.z),no[5].set(i.x,i.y,-i.z),no[6].set(-i.x,i.y,-i.z),no[7].set(i.x,-i.y,i.z);const s=no[0];t.vmult(s,s),e.vadd(s,s),r.copy(s),n.copy(s);for(let i=1;i<8;i++){const s=no[i];t.vmult(s,s),e.vadd(s,s);const o=s.x,a=s.y,l=s.z;o>r.x&&(r.x=o),a>r.y&&(r.y=a),l>r.z&&(r.z=l),o<n.x&&(n.x=o),a<n.y&&(n.y=a),l<n.z&&(n.z=l)}}}const to=new Os,no=[new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os];class ro extends Ls{constructor(e){void 0===e&&(e={}),super(),this.id=ro.idCounter++,this.index=-1,this.world=null,this.vlambda=new Os,this.collisionFilterGroup="number"==typeof e.collisionFilterGroup?e.collisionFilterGroup:1,this.collisionFilterMask="number"==typeof e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionResponse="boolean"!=typeof e.collisionResponse||e.collisionResponse,this.position=new Os,this.previousPosition=new Os,this.interpolatedPosition=new Os,this.initPosition=new Os,e.position&&(this.position.copy(e.position),this.previousPosition.copy(e.position),this.interpolatedPosition.copy(e.position),this.initPosition.copy(e.position)),this.velocity=new Os,e.velocity&&this.velocity.copy(e.velocity),this.initVelocity=new Os,this.force=new Os;const t="number"==typeof e.mass?e.mass:0;this.mass=t,this.invMass=t>0?1/t:0,this.material=e.material||null,this.linearDamping="number"==typeof e.linearDamping?e.linearDamping:.01,this.type=t<=0?ro.STATIC:ro.DYNAMIC,typeof e.type==typeof ro.STATIC&&(this.type=e.type),this.allowSleep=void 0===e.allowSleep||e.allowSleep,this.sleepState=ro.AWAKE,this.sleepSpeedLimit=void 0!==e.sleepSpeedLimit?e.sleepSpeedLimit:.1,this.sleepTimeLimit=void 0!==e.sleepTimeLimit?e.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new Os,this.quaternion=new Vs,this.initQuaternion=new Vs,this.previousQuaternion=new Vs,this.interpolatedQuaternion=new Vs,e.quaternion&&(this.quaternion.copy(e.quaternion),this.initQuaternion.copy(e.quaternion),this.previousQuaternion.copy(e.quaternion),this.interpolatedQuaternion.copy(e.quaternion)),this.angularVelocity=new Os,e.angularVelocity&&this.angularVelocity.copy(e.angularVelocity),this.initAngularVelocity=new Os,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new Os,this.invInertia=new Os,this.invInertiaWorld=new Cs,this.invMassSolve=0,this.invInertiaSolve=new Os,this.invInertiaWorldSolve=new Cs,this.fixedRotation=void 0!==e.fixedRotation&&e.fixedRotation,this.angularDamping=void 0!==e.angularDamping?e.angularDamping:.01,this.linearFactor=new Os(1,1,1),e.linearFactor&&this.linearFactor.copy(e.linearFactor),this.angularFactor=new Os(1,1,1),e.angularFactor&&this.angularFactor.copy(e.angularFactor),this.aabb=new js,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new Os,this.isTrigger=Boolean(e.isTrigger),e.shape&&this.addShape(e.shape),this.updateMassProperties()}wakeUp(){const e=this.sleepState;this.sleepState=ro.AWAKE,this.wakeUpAfterNarrowphase=!1,e===ro.SLEEPING&&this.dispatchEvent(ro.wakeupEvent)}sleep(){this.sleepState=ro.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(e){if(this.allowSleep){const t=this.sleepState,n=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),r=this.sleepSpeedLimit**2;t===ro.AWAKE&&n<r?(this.sleepState=ro.SLEEPY,this.timeLastSleepy=e,this.dispatchEvent(ro.sleepyEvent)):t===ro.SLEEPY&&n>r?this.wakeUp():t===ro.SLEEPY&&e-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(ro.sleepEvent))}}updateSolveMassProperties(){this.sleepState===ro.SLEEPING||this.type===ro.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(e,t){return void 0===t&&(t=new Os),e.vsub(this.position,t),this.quaternion.conjugate().vmult(t,t),t}vectorToLocalFrame(e,t){return void 0===t&&(t=new Os),this.quaternion.conjugate().vmult(e,t),t}pointToWorldFrame(e,t){return void 0===t&&(t=new Os),this.quaternion.vmult(e,t),t.vadd(this.position,t),t}vectorToWorldFrame(e,t){return void 0===t&&(t=new Os),this.quaternion.vmult(e,t),t}addShape(e,t,n){const r=new Os,i=new Vs;return t&&r.copy(t),n&&i.copy(n),this.shapes.push(e),this.shapeOffsets.push(r),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,e.body=this,this}removeShape(e){const t=this.shapes.indexOf(e);return-1===t?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(t,1),this.shapeOffsets.splice(t,1),this.shapeOrientations.splice(t,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,e.body=null,this)}updateBoundingRadius(){const e=this.shapes,t=this.shapeOffsets,n=e.length;let r=0;for(let i=0;i!==n;i++){const n=e[i];n.updateBoundingSphereRadius();const s=t[i].length(),o=n.boundingSphereRadius;s+o>r&&(r=s+o)}this.boundingRadius=r}updateAABB(){const e=this.shapes,t=this.shapeOffsets,n=this.shapeOrientations,r=e.length,i=io,s=so,o=this.quaternion,a=this.aabb,l=oo;for(let c=0;c!==r;c++){const r=e[c];o.vmult(t[c],i),i.vadd(this.position,i),o.mult(n[c],s),r.calculateWorldAABB(i,s,l.lowerBound,l.upperBound),0===c?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(e){const t=this.invInertia;if(t.x!==t.y||t.y!==t.z||e){const e=ao,n=lo;e.setRotationFromQuaternion(this.quaternion),e.transpose(n),e.scale(t,e),e.mmult(n,this.invInertiaWorld)}}applyForce(e,t){if(void 0===t&&(t=new Os),this.type!==ro.DYNAMIC)return;this.sleepState===ro.SLEEPING&&this.wakeUp();const n=co;t.cross(e,n),this.force.vadd(e,this.force),this.torque.vadd(n,this.torque)}applyLocalForce(e,t){if(void 0===t&&(t=new Os),this.type!==ro.DYNAMIC)return;const n=uo,r=ho;this.vectorToWorldFrame(e,n),this.vectorToWorldFrame(t,r),this.applyForce(n,r)}applyTorque(e){this.type===ro.DYNAMIC&&(this.sleepState===ro.SLEEPING&&this.wakeUp(),this.torque.vadd(e,this.torque))}applyImpulse(e,t){if(void 0===t&&(t=new Os),this.type!==ro.DYNAMIC)return;this.sleepState===ro.SLEEPING&&this.wakeUp();const n=t,r=po;r.copy(e),r.scale(this.invMass,r),this.velocity.vadd(r,this.velocity);const i=fo;n.cross(e,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(e,t){if(void 0===t&&(t=new Os),this.type!==ro.DYNAMIC)return;const n=mo,r=yo;this.vectorToWorldFrame(e,n),this.vectorToWorldFrame(t,r),this.applyImpulse(n,r)}updateMassProperties(){const e=go;this.invMass=this.mass>0?1/this.mass:0;const t=this.inertia,n=this.fixedRotation;this.updateAABB(),e.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),eo.calculateInertia(e,this.mass,t),this.invInertia.set(t.x>0&&!n?1/t.x:0,t.y>0&&!n?1/t.y:0,t.z>0&&!n?1/t.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(e,t){const n=new Os;return e.vsub(this.position,n),this.angularVelocity.cross(n,t),this.velocity.vadd(t,t),t}integrate(e,t,n){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==ro.DYNAMIC&&this.type!==ro.KINEMATIC||this.sleepState===ro.SLEEPING)return;const r=this.velocity,i=this.angularVelocity,s=this.position,o=this.force,a=this.torque,l=this.quaternion,c=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,d=c*e;r.x+=o.x*d*h.x,r.y+=o.y*d*h.y,r.z+=o.z*d*h.z;const p=u.elements,f=this.angularFactor,m=a.x*f.x,y=a.y*f.y,g=a.z*f.z;i.x+=e*(p[0]*m+p[1]*y+p[2]*g),i.y+=e*(p[3]*m+p[4]*y+p[5]*g),i.z+=e*(p[6]*m+p[7]*y+p[8]*g),s.x+=r.x*e,s.y+=r.y*e,s.z+=r.z*e,l.integrate(this.angularVelocity,e,this.angularFactor,l),t&&(n?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}ro.idCounter=0,ro.COLLIDE_EVENT_NAME="collide",ro.DYNAMIC=1,ro.STATIC=2,ro.KINEMATIC=4,ro.AWAKE=0,ro.SLEEPY=1,ro.SLEEPING=2,ro.wakeupEvent={type:"wakeup"},ro.sleepyEvent={type:"sleepy"},ro.sleepEvent={type:"sleep"};const io=new Os,so=new Vs,oo=new js,ao=new Cs,lo=new Cs,co=(new Cs,new Os),uo=new Os,ho=new Os,po=new Os,fo=new Os,mo=new Os,yo=new Os,go=new Os;class vo{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(e,t,n){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(e,t){return 0!=(e.collisionFilterGroup&t.collisionFilterMask)&&0!=(t.collisionFilterGroup&e.collisionFilterMask)&&(0==(e.type&ro.STATIC)&&e.sleepState!==ro.SLEEPING||0==(t.type&ro.STATIC)&&t.sleepState!==ro.SLEEPING)}intersectionTest(e,t,n,r){this.useBoundingBoxes?this.doBoundingBoxBroadphase(e,t,n,r):this.doBoundingSphereBroadphase(e,t,n,r)}doBoundingSphereBroadphase(e,t,n,r){const i=xo;t.position.vsub(e.position,i);const s=(e.boundingRadius+t.boundingRadius)**2;i.lengthSquared()<s&&(n.push(e),r.push(t))}doBoundingBoxBroadphase(e,t,n,r){e.aabbNeedsUpdate&&e.updateAABB(),t.aabbNeedsUpdate&&t.updateAABB(),e.aabb.overlaps(t.aabb)&&(n.push(e),r.push(t))}makePairsUnique(e,t){const n=wo,r=bo,i=_o,s=e.length;for(let n=0;n!==s;n++)r[n]=e[n],i[n]=t[n];e.length=0,t.length=0;for(let e=0;e!==s;e++){const t=r[e].id,s=i[e].id,o=t<s?`${t},${s}`:`${s},${t}`;n[o]=e,n.keys.push(o)}for(let s=0;s!==n.keys.length;s++){const s=n.keys.pop(),o=n[s];e.push(r[o]),t.push(i[o]),delete n[s]}}setWorld(e){}static boundingSphereCheck(e,t){const n=new Os;e.position.vsub(t.position,n);const r=e.shapes[0],i=t.shapes[0];return Math.pow(r.boundingSphereRadius+i.boundingSphereRadius,2)>n.lengthSquared()}aabbQuery(e,t,n){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const xo=new Os;new Os,new Vs,new Os;const wo={keys:[]},bo=[],_o=[];new Os,new Os,new Os;class ko extends vo{constructor(){super()}collisionPairs(e,t,n){const r=e.bodies,i=r.length;let s,o;for(let e=0;e!==i;e++)for(let i=0;i!==e;i++)s=r[e],o=r[i],this.needBroadphaseCollision(s,o)&&this.intersectionTest(s,o,t,n)}aabbQuery(e,t,n){void 0===n&&(n=[]);for(let r=0;r<e.bodies.length;r++){const i=e.bodies[r];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(t)&&n.push(i)}return n}}class To{constructor(){this.rayFromWorld=new Os,this.rayToWorld=new Os,this.hitNormalWorld=new Os,this.hitPointWorld=new Os,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(e,t,n,r,i,s,o){this.rayFromWorld.copy(e),this.rayToWorld.copy(t),this.hitNormalWorld.copy(n),this.hitPointWorld.copy(r),this.shape=i,this.body=s,this.distance=o}}let So,Po,Eo,Ao,Mo,zo,Io;So=Ys.types.SPHERE,Po=Ys.types.PLANE,Eo=Ys.types.BOX,Ao=Ys.types.CYLINDER,Mo=Ys.types.CONVEXPOLYHEDRON,zo=Ys.types.HEIGHTFIELD,Io=Ys.types.TRIMESH;class Co{get[So](){return this._intersectSphere}get[Po](){return this._intersectPlane}get[Eo](){return this._intersectBox}get[Ao](){return this._intersectConvex}get[Mo](){return this._intersectConvex}get[zo](){return this._intersectHeightfield}get[Io](){return this._intersectTrimesh}constructor(e,t){void 0===e&&(e=new Os),void 0===t&&(t=new Os),this.from=e.clone(),this.to=t.clone(),this.direction=new Os,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=Co.ANY,this.result=new To,this.hasHit=!1,this.callback=e=>{}}intersectWorld(e,t){return this.mode=t.mode||Co.ANY,this.result=t.result||new To,this.skipBackfaces=!!t.skipBackfaces,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:-1,this.checkCollisionResponse=void 0===t.checkCollisionResponse||t.checkCollisionResponse,t.from&&this.from.copy(t.from),t.to&&this.to.copy(t.to),this.callback=t.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(Bo),Oo.length=0,e.broadphase.aabbQuery(e,Bo,Oo),this.intersectBodies(Oo),this.hasHit}intersectBody(e,t){t&&(this.result=t,this.updateDirection());const n=this.checkCollisionResponse;if(n&&!e.collisionResponse)return;if(0==(this.collisionFilterGroup&e.collisionFilterMask)||0==(e.collisionFilterGroup&this.collisionFilterMask))return;const r=Uo,i=jo;for(let t=0,s=e.shapes.length;t<s;t++){const s=e.shapes[t];if((!n||s.collisionResponse)&&(e.quaternion.mult(e.shapeOrientations[t],i),e.quaternion.vmult(e.shapeOffsets[t],r),r.vadd(e.position,r),this.intersectShape(s,i,r,e),this.result.shouldStop))break}}intersectBodies(e,t){t&&(this.result=t,this.updateDirection());for(let t=0,n=e.length;!this.result.shouldStop&&t<n;t++)this.intersectBody(e[t])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(e,t,n,r){const i=function(e,t,n){n.vsub(e,sa);const r=sa.dot(t);t.scale(r,oa),oa.vadd(e,oa);return n.distanceTo(oa)}(this.from,this.direction,n);if(i>e.boundingSphereRadius)return;const s=this[e.type];s&&s.call(this,e,t,n,r,e)}_intersectBox(e,t,n,r,i){return this._intersectConvex(e.convexPolyhedronRepresentation,t,n,r,i)}_intersectPlane(e,t,n,r,i){const s=this.from,o=this.to,a=this.direction,l=new Os(0,0,1);t.vmult(l,l);const c=new Os;s.vsub(n,c);const u=c.dot(l);if(o.vsub(n,c),u*c.dot(l)>0)return;if(s.distanceTo(o)<u)return;const h=l.dot(a);if(Math.abs(h)<this.precision)return;const d=new Os,p=new Os,f=new Os;s.vsub(n,d);const m=-l.dot(d)/h;a.scale(m,p),s.vadd(p,f),this.reportIntersection(l,f,i,r,-1)}getAABB(e){const{lowerBound:t,upperBound:n}=e,r=this.to,i=this.from;t.x=Math.min(r.x,i.x),t.y=Math.min(r.y,i.y),t.z=Math.min(r.z,i.z),n.x=Math.max(r.x,i.x),n.y=Math.max(r.y,i.y),n.z=Math.max(r.z,i.z)}_intersectHeightfield(e,t,n,r,i){e.data,e.elementSize;const s=Wo;s.from.copy(this.from),s.to.copy(this.to),$s.pointToLocalFrame(n,t,s.from,s.from),$s.pointToLocalFrame(n,t,s.to,s.to),s.updateDirection();const o=Yo;let a,l,c,u;a=l=0,c=u=e.data.length-1;const h=new js;s.getAABB(h),e.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,o,!0),a=Math.max(a,o[0]),l=Math.max(l,o[1]),e.getIndexOfPosition(h.upperBound.x,h.upperBound.y,o,!0),c=Math.min(c,o[0]+1),u=Math.min(u,o[1]+1);for(let o=a;o<c;o++)for(let a=l;a<u;a++){if(this.result.shouldStop)return;if(e.getAabbAtIndex(o,a,h),h.overlapsRay(s)){if(e.getConvexTrianglePillar(o,a,!1),$s.pointToWorldFrame(n,t,e.pillarOffset,Go),this._intersectConvex(e.pillarConvex,t,Go,r,i,Vo),this.result.shouldStop)return;e.getConvexTrianglePillar(o,a,!0),$s.pointToWorldFrame(n,t,e.pillarOffset,Go),this._intersectConvex(e.pillarConvex,t,Go,r,i,Vo)}}}_intersectSphere(e,t,n,r,i){const s=this.from,o=this.to,a=e.radius,l=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2,c=2*((o.x-s.x)*(s.x-n.x)+(o.y-s.y)*(s.y-n.y)+(o.z-s.z)*(s.z-n.z)),u=c**2-4*l*((s.x-n.x)**2+(s.y-n.y)**2+(s.z-n.z)**2-a**2),h=$o,d=Ho;if(!(u<0))if(0===u)s.lerp(o,u,h),h.vsub(n,d),d.normalize(),this.reportIntersection(d,h,i,r,-1);else{const e=(-c-Math.sqrt(u))/(2*l),t=(-c+Math.sqrt(u))/(2*l);if(e>=0&&e<=1&&(s.lerp(o,e,h),h.vsub(n,d),d.normalize(),this.reportIntersection(d,h,i,r,-1)),this.result.shouldStop)return;t>=0&&t<=1&&(s.lerp(o,t,h),h.vsub(n,d),d.normalize(),this.reportIntersection(d,h,i,r,-1))}}_intersectConvex(e,t,n,r,i,s){const o=Xo,a=Zo,l=s&&s.faceList||null,c=e.faces,u=e.vertices,h=e.faceNormals,d=this.direction,p=this.from,f=this.to,m=p.distanceTo(f),y=l?l.length:c.length,g=this.result;for(let e=0;!g.shouldStop&&e<y;e++){const s=l?l[e]:e,f=c[s],y=h[s],v=t,x=n;a.copy(u[f[0]]),v.vmult(a,a),a.vadd(x,a),a.vsub(p,a),v.vmult(y,o);const w=d.dot(o);if(Math.abs(w)<this.precision)continue;const b=o.dot(a)/w;if(!(b<0)){d.scale(b,Do),Do.vadd(p,Do),Fo.copy(u[f[0]]),v.vmult(Fo,Fo),x.vadd(Fo,Fo);for(let e=1;!g.shouldStop&&e<f.length-1;e++){qo.copy(u[f[e]]),Lo.copy(u[f[e+1]]),v.vmult(qo,qo),v.vmult(Lo,Lo),x.vadd(qo,qo),x.vadd(Lo,Lo);const t=Do.distanceTo(p);!Co.pointInTriangle(Do,Fo,qo,Lo)&&!Co.pointInTriangle(Do,qo,Fo,Lo)||t>m||this.reportIntersection(o,Do,i,r,s)}}}}_intersectTrimesh(e,t,n,r,i,s){const o=Ko,a=ra,l=ia,c=Zo,u=Qo,h=Jo,d=ea,p=na,f=ta,m=e.indices;e.vertices;const y=this.from,g=this.to,v=this.direction;l.position.copy(n),l.quaternion.copy(t),$s.vectorToLocalFrame(n,t,v,u),$s.pointToLocalFrame(n,t,y,h),$s.pointToLocalFrame(n,t,g,d),d.x*=e.scale.x,d.y*=e.scale.y,d.z*=e.scale.z,h.x*=e.scale.x,h.y*=e.scale.y,h.z*=e.scale.z,d.vsub(h,u),u.normalize();const x=h.distanceSquared(d);e.tree.rayQuery(this,l,a);for(let s=0,l=a.length;!this.result.shouldStop&&s!==l;s++){const l=a[s];e.getNormal(l,o),e.getVertex(m[3*l],Fo),Fo.vsub(h,c);const d=u.dot(o),y=o.dot(c)/d;if(y<0)continue;u.scale(y,Do),Do.vadd(h,Do),e.getVertex(m[3*l+1],qo),e.getVertex(m[3*l+2],Lo);const g=Do.distanceSquared(h);!Co.pointInTriangle(Do,qo,Fo,Lo)&&!Co.pointInTriangle(Do,Fo,qo,Lo)||g>x||($s.vectorToWorldFrame(t,o,f),$s.pointToWorldFrame(n,t,Do,p),this.reportIntersection(f,p,i,r,l))}a.length=0}reportIntersection(e,t,n,r,i){const s=this.from,o=this.to,a=s.distanceTo(t),l=this.result;if(!(this.skipBackfaces&&e.dot(this.direction)>0))switch(l.hitFaceIndex=void 0!==i?i:-1,this.mode){case Co.ALL:this.hasHit=!0,l.set(s,o,e,t,n,r,a),l.hasHit=!0,this.callback(l);break;case Co.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(s,o,e,t,n,r,a));break;case Co.ANY:this.hasHit=!0,l.hasHit=!0,l.set(s,o,e,t,n,r,a),l.shouldStop=!0}}static pointInTriangle(e,t,n,r){r.vsub(t,sa),n.vsub(t,Ro),e.vsub(t,No);const i=sa.dot(sa),s=sa.dot(Ro),o=sa.dot(No),a=Ro.dot(Ro),l=Ro.dot(No);let c,u;return(c=a*o-s*l)>=0&&(u=i*l-s*o)>=0&&c+u<i*a-s*s}}Co.CLOSEST=1,Co.ANY=2,Co.ALL=4;const Bo=new js,Oo=[],Ro=new Os,No=new Os,Uo=new Os,jo=new Vs,Do=new Os,Fo=new Os,qo=new Os,Lo=new Os;new Os,new To;const Vo={faceList:[0]},Go=new Os,Wo=new Co,Yo=[],$o=new Os,Ho=new Os,Xo=new Os,Zo=(new Os,new Os,new Os),Ko=new Os,Qo=new Os,Jo=new Os,ea=new Os,ta=new Os,na=new Os;new js;const ra=[],ia=new $s,sa=new Os,oa=new Os;class aa{static defaults(e,t){void 0===e&&(e={});for(let n in t)n in e||(e[n]=t[n]);return e}}class la{constructor(e,t,n){void 0===n&&(n={}),n=aa.defaults(n,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=e,this.bodyB=t,this.id=la.idCounter++,this.collideConnected=n.collideConnected,n.wakeUpBodies&&(e&&e.wakeUp(),t&&t.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const e=this.equations;for(let t=0;t<e.length;t++)e[t].enabled=!0}disable(){const e=this.equations;for(let t=0;t<e.length;t++)e[t].enabled=!1}}la.idCounter=0;class ca{constructor(){this.spatial=new Os,this.rotational=new Os}multiplyElement(e){return e.spatial.dot(this.spatial)+e.rotational.dot(this.rotational)}multiplyVectors(e,t){return e.dot(this.spatial)+t.dot(this.rotational)}}class ua{constructor(e,t,n,r){void 0===n&&(n=-1e6),void 0===r&&(r=1e6),this.id=ua.idCounter++,this.minForce=n,this.maxForce=r,this.bi=e,this.bj=t,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new ca,this.jacobianElementB=new ca,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(e,t,n){const r=t,i=e,s=n;this.a=4/(s*(1+4*r)),this.b=4*r/(1+4*r),this.eps=4/(s*s*i*(1+4*r))}computeB(e,t,n){const r=this.computeGW();return-this.computeGq()*e-r*t-this.computeGiMf()*n}computeGq(){const e=this.jacobianElementA,t=this.jacobianElementB,n=this.bi,r=this.bj,i=n.position,s=r.position;return e.spatial.dot(i)+t.spatial.dot(s)}computeGW(){const e=this.jacobianElementA,t=this.jacobianElementB,n=this.bi,r=this.bj,i=n.velocity,s=r.velocity,o=n.angularVelocity,a=r.angularVelocity;return e.multiplyVectors(i,o)+t.multiplyVectors(s,a)}computeGWlambda(){const e=this.jacobianElementA,t=this.jacobianElementB,n=this.bi,r=this.bj,i=n.vlambda,s=r.vlambda,o=n.wlambda,a=r.wlambda;return e.multiplyVectors(i,o)+t.multiplyVectors(s,a)}computeGiMf(){const e=this.jacobianElementA,t=this.jacobianElementB,n=this.bi,r=this.bj,i=n.force,s=n.torque,o=r.force,a=r.torque,l=n.invMassSolve,c=r.invMassSolve;return i.scale(l,ha),o.scale(c,da),n.invInertiaWorldSolve.vmult(s,pa),r.invInertiaWorldSolve.vmult(a,fa),e.multiplyVectors(ha,pa)+t.multiplyVectors(da,fa)}computeGiMGt(){const e=this.jacobianElementA,t=this.jacobianElementB,n=this.bi,r=this.bj,i=n.invMassSolve,s=r.invMassSolve,o=n.invInertiaWorldSolve,a=r.invInertiaWorldSolve;let l=i+s;return o.vmult(e.rotational,ma),l+=ma.dot(e.rotational),a.vmult(t.rotational,ma),l+=ma.dot(t.rotational),l}addToWlambda(e){const t=this.jacobianElementA,n=this.jacobianElementB,r=this.bi,i=this.bj,s=ya;r.vlambda.addScaledVector(r.invMassSolve*e,t.spatial,r.vlambda),i.vlambda.addScaledVector(i.invMassSolve*e,n.spatial,i.vlambda),r.invInertiaWorldSolve.vmult(t.rotational,s),r.wlambda.addScaledVector(e,s,r.wlambda),i.invInertiaWorldSolve.vmult(n.rotational,s),i.wlambda.addScaledVector(e,s,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}ua.idCounter=0;const ha=new Os,da=new Os,pa=new Os,fa=new Os,ma=new Os,ya=new Os;class ga extends ua{constructor(e,t,n){void 0===n&&(n=1e6),super(e,t,0,n),this.restitution=0,this.ri=new Os,this.rj=new Os,this.ni=new Os}computeB(e){const t=this.a,n=this.b,r=this.bi,i=this.bj,s=this.ri,o=this.rj,a=va,l=xa,c=r.velocity,u=r.angularVelocity;r.force,r.torque;const h=i.velocity,d=i.angularVelocity;i.force,i.torque;const p=wa,f=this.jacobianElementA,m=this.jacobianElementB,y=this.ni;s.cross(y,a),o.cross(y,l),y.negate(f.spatial),a.negate(f.rotational),m.spatial.copy(y),m.rotational.copy(l),p.copy(i.position),p.vadd(o,p),p.vsub(r.position,p),p.vsub(s,p);const g=y.dot(p),v=this.restitution+1;return-g*t-(v*h.dot(y)-v*c.dot(y)+d.dot(l)-u.dot(a))*n-e*this.computeGiMf()}getImpactVelocityAlongNormal(){const e=ba,t=_a,n=ka,r=Ta,i=Sa;return this.bi.position.vadd(this.ri,n),this.bj.position.vadd(this.rj,r),this.bi.getVelocityAtWorldPoint(n,e),this.bj.getVelocityAtWorldPoint(r,t),e.vsub(t,i),this.ni.dot(i)}}const va=new Os,xa=new Os,wa=new Os,ba=new Os,_a=new Os,ka=new Os,Ta=new Os,Sa=new Os;new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os;class Pa extends ua{constructor(e,t,n){super(e,t,-n,n),this.ri=new Os,this.rj=new Os,this.t=new Os}computeB(e){this.a;const t=this.b;this.bi,this.bj;const n=this.ri,r=this.rj,i=Ea,s=Aa,o=this.t;n.cross(o,i),r.cross(o,s);const a=this.jacobianElementA,l=this.jacobianElementB;return o.negate(a.spatial),i.negate(a.rotational),l.spatial.copy(o),l.rotational.copy(s),-this.computeGW()*t-e*this.computeGiMf()}}const Ea=new Os,Aa=new Os;class Ma{constructor(e,t,n){n=aa.defaults(n,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Ma.idCounter++,this.materials=[e,t],this.friction=n.friction,this.restitution=n.restitution,this.contactEquationStiffness=n.contactEquationStiffness,this.contactEquationRelaxation=n.contactEquationRelaxation,this.frictionEquationStiffness=n.frictionEquationStiffness,this.frictionEquationRelaxation=n.frictionEquationRelaxation}}Ma.idCounter=0;class za{constructor(e){void 0===e&&(e={});let t="";"string"==typeof e&&(t=e,e={}),this.name=t,this.id=za.idCounter++,this.friction=void 0!==e.friction?e.friction:-1,this.restitution=void 0!==e.restitution?e.restitution:-1}}za.idCounter=0,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Co,new Os,new Os,new Os,new Os(1,0,0),new Os(0,1,0),new Os(0,0,1),new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new js,new Os,new js,new Os,new Os,new Os,new Os,new Os,new Os,new Os,new js,new Os,new $s,new js;class Ia{constructor(){this.equations=[]}solve(e,t){return 0}addEquation(e){!e.enabled||e.bi.isTrigger||e.bj.isTrigger||this.equations.push(e)}removeEquation(e){const t=this.equations,n=t.indexOf(e);-1!==n&&t.splice(n,1)}removeAllEquations(){this.equations.length=0}}class Ca extends Ia{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(e,t){let n=0;const r=this.iterations,i=this.tolerance*this.tolerance,s=this.equations,o=s.length,a=t.bodies,l=a.length,c=e;let u,h,d,p,f,m;if(0!==o)for(let e=0;e!==l;e++)a[e].updateSolveMassProperties();const y=Oa,g=Ra,v=Ba;y.length=o,g.length=o,v.length=o;for(let e=0;e!==o;e++){const t=s[e];v[e]=0,g[e]=t.computeB(c),y[e]=1/t.computeC()}if(0!==o){for(let e=0;e!==l;e++){const t=a[e],n=t.vlambda,r=t.wlambda;n.set(0,0,0),r.set(0,0,0)}for(n=0;n!==r;n++){p=0;for(let e=0;e!==o;e++){const t=s[e];u=g[e],h=y[e],m=v[e],f=t.computeGWlambda(),d=h*(u-f-t.eps*m),m+d<t.minForce?d=t.minForce-m:m+d>t.maxForce&&(d=t.maxForce-m),v[e]+=d,p+=d>0?d:-d,t.addToWlambda(d)}if(p*p<i)break}for(let e=0;e!==l;e++){const t=a[e],n=t.velocity,r=t.angularVelocity;t.vlambda.vmul(t.linearFactor,t.vlambda),n.vadd(t.vlambda,n),t.wlambda.vmul(t.angularFactor,t.wlambda),r.vadd(t.wlambda,r)}let e=s.length;const t=1/c;for(;e--;)s[e].multiplier=v[e]*t}return n}}const Ba=[],Oa=[],Ra=[];ro.STATIC;class Na{constructor(){this.objects=[],this.type=Object}release(){const e=arguments.length;for(let t=0;t!==e;t++)this.objects.push(t<0||arguments.length<=t?void 0:arguments[t]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(e){const t=this.objects;for(;t.length>e;)t.pop();for(;t.length<e;)t.push(this.constructObject());return this}}class Ua extends Na{constructor(){super(...arguments),this.type=Os}constructObject(){return new Os}}const ja=Ys.types.SPHERE,Da=Ys.types.SPHERE|Ys.types.PLANE,Fa=Ys.types.BOX|Ys.types.BOX,qa=Ys.types.SPHERE|Ys.types.BOX,La=Ys.types.PLANE|Ys.types.BOX,Va=Ys.types.CONVEXPOLYHEDRON,Ga=Ys.types.SPHERE|Ys.types.CONVEXPOLYHEDRON,Wa=Ys.types.PLANE|Ys.types.CONVEXPOLYHEDRON,Ya=Ys.types.BOX|Ys.types.CONVEXPOLYHEDRON,$a=Ys.types.SPHERE|Ys.types.HEIGHTFIELD,Ha=Ys.types.BOX|Ys.types.HEIGHTFIELD,Xa=Ys.types.CONVEXPOLYHEDRON|Ys.types.HEIGHTFIELD,Za=Ys.types.PARTICLE|Ys.types.SPHERE,Ka=Ys.types.PLANE|Ys.types.PARTICLE,Qa=Ys.types.BOX|Ys.types.PARTICLE,Ja=Ys.types.PARTICLE|Ys.types.CONVEXPOLYHEDRON,el=Ys.types.CYLINDER,tl=Ys.types.SPHERE|Ys.types.CYLINDER,nl=Ys.types.PLANE|Ys.types.CYLINDER,rl=Ys.types.BOX|Ys.types.CYLINDER,il=Ys.types.CONVEXPOLYHEDRON|Ys.types.CYLINDER,sl=Ys.types.HEIGHTFIELD|Ys.types.CYLINDER,ol=Ys.types.PARTICLE|Ys.types.CYLINDER,al=Ys.types.SPHERE|Ys.types.TRIMESH,ll=Ys.types.PLANE|Ys.types.TRIMESH;class cl{get[ja](){return this.sphereSphere}get[Da](){return this.spherePlane}get[Fa](){return this.boxBox}get[qa](){return this.sphereBox}get[La](){return this.planeBox}get[Va](){return this.convexConvex}get[Ga](){return this.sphereConvex}get[Wa](){return this.planeConvex}get[Ya](){return this.boxConvex}get[$a](){return this.sphereHeightfield}get[Ha](){return this.boxHeightfield}get[Xa](){return this.convexHeightfield}get[Za](){return this.sphereParticle}get[Ka](){return this.planeParticle}get[Qa](){return this.boxParticle}get[Ja](){return this.convexParticle}get[el](){return this.convexConvex}get[tl](){return this.sphereConvex}get[nl](){return this.planeConvex}get[rl](){return this.boxConvex}get[il](){return this.convexConvex}get[sl](){return this.heightfieldCylinder}get[ol](){return this.particleCylinder}get[al](){return this.sphereTrimesh}get[ll](){return this.planeTrimesh}constructor(e){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new Ua,this.world=e,this.currentContactMaterial=e.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(e,t,n,r,i,s){let o;this.contactPointPool.length?(o=this.contactPointPool.pop(),o.bi=e,o.bj=t):o=new ga(e,t),o.enabled=e.collisionResponse&&t.collisionResponse&&n.collisionResponse&&r.collisionResponse;const a=this.currentContactMaterial;o.restitution=a.restitution,o.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=n.material||e.material,c=r.material||t.material;return l&&c&&l.restitution>=0&&c.restitution>=0&&(o.restitution=l.restitution*c.restitution),o.si=i||n,o.sj=s||r,o}createFrictionEquationsFromContact(e,t){const n=e.bi,r=e.bj,i=e.si,s=e.sj,o=this.world,a=this.currentContactMaterial;let l=a.friction;const c=i.material||n.material,u=s.material||r.material;if(c&&u&&c.friction>=0&&u.friction>=0&&(l=c.friction*u.friction),l>0){const i=l*(o.frictionGravity||o.gravity).length();let s=n.invMass+r.invMass;s>0&&(s=1/s);const c=this.frictionEquationPool,u=c.length?c.pop():new Pa(n,r,i*s),h=c.length?c.pop():new Pa(n,r,i*s);return u.bi=h.bi=n,u.bj=h.bj=r,u.minForce=h.minForce=-i*s,u.maxForce=h.maxForce=i*s,u.ri.copy(e.ri),u.rj.copy(e.rj),h.ri.copy(e.ri),h.rj.copy(e.rj),e.ni.tangents(u.t,h.t),u.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,o.dt),h.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,o.dt),u.enabled=h.enabled=e.enabled,t.push(u,h),!0}return!1}createFrictionFromAverage(e){let t=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(t,this.frictionResult)||1===e)return;const n=this.frictionResult[this.frictionResult.length-2],r=this.frictionResult[this.frictionResult.length-1];ul.setZero(),hl.setZero(),dl.setZero();const i=t.bi;t.bj;for(let n=0;n!==e;n++)t=this.result[this.result.length-1-n],t.bi!==i?(ul.vadd(t.ni,ul),hl.vadd(t.ri,hl),dl.vadd(t.rj,dl)):(ul.vsub(t.ni,ul),hl.vadd(t.rj,hl),dl.vadd(t.ri,dl));const s=1/e;hl.scale(s,n.ri),dl.scale(s,n.rj),r.ri.copy(n.ri),r.rj.copy(n.rj),ul.normalize(),ul.tangents(n.t,r.t)}getContacts(e,t,n,r,i,s,o){this.contactPointPool=i,this.frictionEquationPool=o,this.result=r,this.frictionResult=s;const a=ml,l=yl,c=pl,u=fl;for(let r=0,i=e.length;r!==i;r++){const i=e[r],s=t[r];let o=null;i.material&&s.material&&(o=n.getContactMaterial(i.material,s.material)||null);const h=i.type&ro.KINEMATIC&&s.type&ro.STATIC||i.type&ro.STATIC&&s.type&ro.KINEMATIC||i.type&ro.KINEMATIC&&s.type&ro.KINEMATIC;for(let e=0;e<i.shapes.length;e++){i.quaternion.mult(i.shapeOrientations[e],a),i.quaternion.vmult(i.shapeOffsets[e],c),c.vadd(i.position,c);const t=i.shapes[e];for(let e=0;e<s.shapes.length;e++){s.quaternion.mult(s.shapeOrientations[e],l),s.quaternion.vmult(s.shapeOffsets[e],u),u.vadd(s.position,u);const r=s.shapes[e];if(!(t.collisionFilterMask&r.collisionFilterGroup&&r.collisionFilterMask&t.collisionFilterGroup))continue;if(c.distanceTo(u)>t.boundingSphereRadius+r.boundingSphereRadius)continue;let d=null;t.material&&r.material&&(d=n.getContactMaterial(t.material,r.material)||null),this.currentContactMaterial=d||o||n.defaultContactMaterial;const p=this[t.type|r.type];if(p){let e=!1;e=t.type<r.type?p.call(this,t,r,c,u,a,l,i,s,t,r,h):p.call(this,r,t,u,c,l,a,s,i,t,r,h),e&&h&&(n.shapeOverlapKeeper.set(t.id,r.id),n.bodyOverlapKeeper.set(i.id,s.id))}}}}}sphereSphere(e,t,n,r,i,s,o,a,l,c,u){if(u)return n.distanceSquared(r)<(e.radius+t.radius)**2;const h=this.createContactEquation(o,a,e,t,l,c);r.vsub(n,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(e.radius,h.ri),h.rj.scale(-t.radius,h.rj),h.ri.vadd(n,h.ri),h.ri.vsub(o.position,h.ri),h.rj.vadd(r,h.rj),h.rj.vsub(a.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(e,t,n,r,i,s,o,a,l,c,u){const h=this.createContactEquation(o,a,e,t,l,c);if(h.ni.set(0,0,1),s.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(e.radius,h.ri),n.vsub(r,Rl),h.ni.scale(h.ni.dot(Rl),Nl),Rl.vsub(Nl,h.rj),-Rl.dot(h.ni)<=e.radius){if(u)return!0;const e=h.ri,t=h.rj;e.vadd(n,e),e.vsub(o.position,e),t.vadd(r,t),t.vsub(a.position,t),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(e,t,n,r,i,s,o,a,l,c,u){return e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(e.convexPolyhedronRepresentation,t.convexPolyhedronRepresentation,n,r,i,s,o,a,e,t,u)}sphereBox(e,t,n,r,i,s,o,a,l,c,u){const h=this.v3pool,d=Wl;n.vsub(r,ql),t.getSideNormals(d,s);const p=e.radius;let f=!1;const m=$l,y=Hl,g=Xl;let v=null,x=0,w=0,b=0,_=null;for(let e=0,t=d.length;e!==t&&!1===f;e++){const t=Ll;t.copy(d[e]);const n=t.length();t.normalize();const r=ql.dot(t);if(r<n+p&&r>0){const i=Vl,s=Gl;i.copy(d[(e+1)%3]),s.copy(d[(e+2)%3]);const o=i.length(),a=s.length();i.normalize(),s.normalize();const l=ql.dot(i),c=ql.dot(s);if(l<o&&l>-o&&c<a&&c>-a){const e=Math.abs(r-n-p);if((null===_||e<_)&&(_=e,w=l,b=c,v=n,m.copy(t),y.copy(i),g.copy(s),x++,u))return!0}}}if(x){f=!0;const i=this.createContactEquation(o,a,e,t,l,c);m.scale(-p,i.ri),i.ni.copy(m),i.ni.negate(i.ni),m.scale(v,m),y.scale(w,y),m.vadd(y,m),g.scale(b,g),m.vadd(g,i.rj),i.ri.vadd(n,i.ri),i.ri.vsub(o.position,i.ri),i.rj.vadd(r,i.rj),i.rj.vsub(a.position,i.rj),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}let k=h.get();const T=Yl;for(let i=0;2!==i&&!f;i++)for(let s=0;2!==s&&!f;s++)for(let h=0;2!==h&&!f;h++)if(k.set(0,0,0),i?k.vadd(d[0],k):k.vsub(d[0],k),s?k.vadd(d[1],k):k.vsub(d[1],k),h?k.vadd(d[2],k):k.vsub(d[2],k),r.vadd(k,T),T.vsub(n,T),T.lengthSquared()<p*p){if(u)return!0;f=!0;const i=this.createContactEquation(o,a,e,t,l,c);i.ri.copy(T),i.ri.normalize(),i.ni.copy(i.ri),i.ri.scale(p,i.ri),i.rj.copy(k),i.ri.vadd(n,i.ri),i.ri.vsub(o.position,i.ri),i.rj.vadd(r,i.rj),i.rj.vsub(a.position,i.rj),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}h.release(k),k=null;const S=h.get(),P=h.get(),E=h.get(),A=h.get(),M=h.get(),z=d.length;for(let i=0;i!==z&&!f;i++)for(let s=0;s!==z&&!f;s++)if(i%3!=s%3){d[s].cross(d[i],S),S.normalize(),d[i].vadd(d[s],P),E.copy(n),E.vsub(P,E),E.vsub(r,E);const h=E.dot(S);S.scale(h,A);let m=0;for(;m===i%3||m===s%3;)m++;M.copy(n),M.vsub(A,M),M.vsub(P,M),M.vsub(r,M);const y=Math.abs(h),g=M.length();if(y<d[m].length()&&g<p){if(u)return!0;f=!0;const i=this.createContactEquation(o,a,e,t,l,c);P.vadd(A,i.rj),i.rj.copy(i.rj),M.negate(i.ni),i.ni.normalize(),i.ri.copy(i.rj),i.ri.vadd(r,i.ri),i.ri.vsub(n,i.ri),i.ri.normalize(),i.ri.scale(p,i.ri),i.ri.vadd(n,i.ri),i.ri.vsub(o.position,i.ri),i.rj.vadd(r,i.rj),i.rj.vsub(a.position,i.rj),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}h.release(S,P,E,A,M)}planeBox(e,t,n,r,i,s,o,a,l,c,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,t.convexPolyhedronRepresentation.id=t.id,this.planeConvex(e,t.convexPolyhedronRepresentation,n,r,i,s,o,a,e,t,u)}convexConvex(e,t,n,r,i,s,o,a,l,c,u,h,d){const p=uc;if(!(n.distanceTo(r)>e.boundingSphereRadius+t.boundingSphereRadius)&&e.findSeparatingAxis(t,n,i,r,s,p,h,d)){const h=[],d=hc;e.clipAgainstHull(n,i,t,r,s,p,-100,100,h);let f=0;for(let i=0;i!==h.length;i++){if(u)return!0;const s=this.createContactEquation(o,a,e,t,l,c),m=s.ri,y=s.rj;p.negate(s.ni),h[i].normal.negate(d),d.scale(h[i].depth,d),h[i].point.vadd(d,m),y.copy(h[i].point),m.vsub(n,m),y.vsub(r,y),m.vadd(n,m),m.vsub(o.position,m),y.vadd(r,y),y.vsub(a.position,y),this.result.push(s),f++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(s,this.frictionResult)}this.enableFrictionReduction&&f&&this.createFrictionFromAverage(f)}}sphereConvex(e,t,n,r,i,s,o,a,l,c,u){const h=this.v3pool;n.vsub(r,Zl);const d=t.faceNormals,p=t.faces,f=t.vertices,m=e.radius;let y=!1;for(let i=0;i!==f.length;i++){const h=f[i],d=ec;s.vmult(h,d),r.vadd(d,d);const p=Jl;if(d.vsub(n,p),p.lengthSquared()<m*m){if(u)return!0;y=!0;const i=this.createContactEquation(o,a,e,t,l,c);return i.ri.copy(p),i.ri.normalize(),i.ni.copy(i.ri),i.ri.scale(m,i.ri),d.vsub(r,i.rj),i.ri.vadd(n,i.ri),i.ri.vsub(o.position,i.ri),i.rj.vadd(r,i.rj),i.rj.vsub(a.position,i.rj),this.result.push(i),void this.createFrictionEquationsFromContact(i,this.frictionResult)}}for(let i=0,g=p.length;i!==g&&!1===y;i++){const g=d[i],v=p[i],x=tc;s.vmult(g,x);const w=nc;s.vmult(f[v[0]],w),w.vadd(r,w);const b=rc;x.scale(-m,b),n.vadd(b,b);const _=ic;b.vsub(w,_);const k=_.dot(x),T=sc;if(n.vsub(w,T),k<0&&T.dot(x)>0){const i=[];for(let e=0,t=v.length;e!==t;e++){const t=h.get();s.vmult(f[v[e]],t),r.vadd(t,t),i.push(t)}if(Fl(i,x,n)){if(u)return!0;y=!0;const s=this.createContactEquation(o,a,e,t,l,c);x.scale(-m,s.ri),x.negate(s.ni);const d=h.get();x.scale(-k,d);const p=h.get();x.scale(-m,p),n.vsub(r,s.rj),s.rj.vadd(p,s.rj),s.rj.vadd(d,s.rj),s.rj.vadd(r,s.rj),s.rj.vsub(a.position,s.rj),s.ri.vadd(n,s.ri),s.ri.vsub(o.position,s.ri),h.release(d),h.release(p),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult);for(let e=0,t=i.length;e!==t;e++)h.release(i[e]);return}for(let d=0;d!==v.length;d++){const p=h.get(),y=h.get();s.vmult(f[v[(d+1)%v.length]],p),s.vmult(f[v[(d+2)%v.length]],y),r.vadd(p,p),r.vadd(y,y);const g=Kl;y.vsub(p,g);const x=Ql;g.unit(x);const w=h.get(),b=h.get();n.vsub(p,b);const _=b.dot(x);x.scale(_,w),w.vadd(p,w);const k=h.get();if(w.vsub(n,k),_>0&&_*_<g.lengthSquared()&&k.lengthSquared()<m*m){if(u)return!0;const s=this.createContactEquation(o,a,e,t,l,c);w.vsub(r,s.rj),w.vsub(n,s.ni),s.ni.normalize(),s.ni.scale(m,s.ri),s.rj.vadd(r,s.rj),s.rj.vsub(a.position,s.rj),s.ri.vadd(n,s.ri),s.ri.vsub(o.position,s.ri),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult);for(let e=0,t=i.length;e!==t;e++)h.release(i[e]);return h.release(p),h.release(y),h.release(w),h.release(k),void h.release(b)}h.release(p),h.release(y),h.release(w),h.release(k),h.release(b)}for(let e=0,t=i.length;e!==t;e++)h.release(i[e])}}}planeConvex(e,t,n,r,i,s,o,a,l,c,u){const h=oc,d=ac;d.set(0,0,1),i.vmult(d,d);let p=0;const f=lc;for(let i=0;i!==t.vertices.length;i++)if(h.copy(t.vertices[i]),s.vmult(h,h),r.vadd(h,h),h.vsub(n,f),d.dot(f)<=0){if(u)return!0;const i=this.createContactEquation(o,a,e,t,l,c),s=cc;d.scale(d.dot(f),s),h.vsub(s,s),s.vsub(n,i.ri),i.ni.copy(d),h.vsub(r,i.rj),i.ri.vadd(n,i.ri),i.ri.vsub(o.position,i.ri),i.rj.vadd(r,i.rj),i.rj.vsub(a.position,i.rj),this.result.push(i),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(i,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(e,t,n,r,i,s,o,a,l,c,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(e.convexPolyhedronRepresentation,t,n,r,i,s,o,a,e,t,u)}sphereHeightfield(e,t,n,r,i,s,o,a,l,c,u){const h=t.data,d=e.radius,p=t.elementSize,f=Sc,m=Tc;$s.pointToLocalFrame(r,s,n,m);let y=Math.floor((m.x-d)/p)-1,g=Math.ceil((m.x+d)/p)+1,v=Math.floor((m.y-d)/p)-1,x=Math.ceil((m.y+d)/p)+1;if(g<0||x<0||y>h.length||v>h[0].length)return;y<0&&(y=0),g<0&&(g=0),v<0&&(v=0),x<0&&(x=0),y>=h.length&&(y=h.length-1),g>=h.length&&(g=h.length-1),x>=h[0].length&&(x=h[0].length-1),v>=h[0].length&&(v=h[0].length-1);const w=[];t.getRectMinMax(y,v,g,x,w);const b=w[0],_=w[1];if(m.z-d>_||m.z+d<b)return;const k=this.result;for(let l=y;l<g;l++)for(let c=v;c<x;c++){const h=k.length;let d=!1;if(t.getConvexTrianglePillar(l,c,!1),$s.pointToWorldFrame(r,s,t.pillarOffset,f),n.distanceTo(f)<t.pillarConvex.boundingSphereRadius+e.boundingSphereRadius&&(d=this.sphereConvex(e,t.pillarConvex,n,f,i,s,o,a,e,t,u)),u&&d)return!0;if(t.getConvexTrianglePillar(l,c,!0),$s.pointToWorldFrame(r,s,t.pillarOffset,f),n.distanceTo(f)<t.pillarConvex.boundingSphereRadius+e.boundingSphereRadius&&(d=this.sphereConvex(e,t.pillarConvex,n,f,i,s,o,a,e,t,u)),u&&d)return!0;if(k.length-h>2)return}}boxHeightfield(e,t,n,r,i,s,o,a,l,c,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexHeightfield(e.convexPolyhedronRepresentation,t,n,r,i,s,o,a,e,t,u)}convexHeightfield(e,t,n,r,i,s,o,a,l,c,u){const h=t.data,d=t.elementSize,p=e.boundingSphereRadius,f=_c,m=kc,y=bc;$s.pointToLocalFrame(r,s,n,y);let g=Math.floor((y.x-p)/d)-1,v=Math.ceil((y.x+p)/d)+1,x=Math.floor((y.y-p)/d)-1,w=Math.ceil((y.y+p)/d)+1;if(v<0||w<0||g>h.length||x>h[0].length)return;g<0&&(g=0),v<0&&(v=0),x<0&&(x=0),w<0&&(w=0),g>=h.length&&(g=h.length-1),v>=h.length&&(v=h.length-1),w>=h[0].length&&(w=h[0].length-1),x>=h[0].length&&(x=h[0].length-1);const b=[];t.getRectMinMax(g,x,v,w,b);const _=b[0],k=b[1];if(!(y.z-p>k||y.z+p<_))for(let l=g;l<v;l++)for(let c=x;c<w;c++){let h=!1;if(t.getConvexTrianglePillar(l,c,!1),$s.pointToWorldFrame(r,s,t.pillarOffset,f),n.distanceTo(f)<t.pillarConvex.boundingSphereRadius+e.boundingSphereRadius&&(h=this.convexConvex(e,t.pillarConvex,n,f,i,s,o,a,null,null,u,m,null)),u&&h)return!0;if(t.getConvexTrianglePillar(l,c,!0),$s.pointToWorldFrame(r,s,t.pillarOffset,f),n.distanceTo(f)<t.pillarConvex.boundingSphereRadius+e.boundingSphereRadius&&(h=this.convexConvex(e,t.pillarConvex,n,f,i,s,o,a,null,null,u,m,null)),u&&h)return!0}}sphereParticle(e,t,n,r,i,s,o,a,l,c,u){const h=mc;if(h.set(0,0,1),r.vsub(n,h),h.lengthSquared()<=e.radius*e.radius){if(u)return!0;const n=this.createContactEquation(a,o,t,e,l,c);h.normalize(),n.rj.copy(h),n.rj.scale(e.radius,n.rj),n.ni.copy(h),n.ni.negate(n.ni),n.ri.set(0,0,0),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}planeParticle(e,t,n,r,i,s,o,a,l,c,u){const h=dc;h.set(0,0,1),o.quaternion.vmult(h,h);const d=pc;if(r.vsub(o.position,d),h.dot(d)<=0){if(u)return!0;const n=this.createContactEquation(a,o,t,e,l,c);n.ni.copy(h),n.ni.negate(n.ni),n.ri.set(0,0,0);const i=fc;h.scale(h.dot(r),i),r.vsub(i,i),n.rj.copy(i),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}boxParticle(e,t,n,r,i,s,o,a,l,c,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexParticle(e.convexPolyhedronRepresentation,t,n,r,i,s,o,a,e,t,u)}convexParticle(e,t,n,r,i,s,o,a,l,c,u){let h=-1;const d=vc,p=wc;let f=null;const m=gc;if(m.copy(r),m.vsub(n,m),i.conjugate(yc),yc.vmult(m,m),e.pointIsInside(m)){e.worldVerticesNeedsUpdate&&e.computeWorldVertices(n,i),e.worldFaceNormalsNeedsUpdate&&e.computeWorldFaceNormals(i);for(let t=0,n=e.faces.length;t!==n;t++){const n=[e.worldVertices[e.faces[t][0]]],i=e.worldFaceNormals[t];r.vsub(n[0],xc);const s=-i.dot(xc);if(null===f||Math.abs(s)<Math.abs(f)){if(u)return!0;f=s,h=t,d.copy(i)}}if(-1!==h){const i=this.createContactEquation(a,o,t,e,l,c);d.scale(f,p),p.vadd(r,p),p.vsub(n,p),i.rj.copy(p),d.negate(i.ni),i.ri.set(0,0,0);const s=i.ri,u=i.rj;s.vadd(r,s),s.vsub(a.position,s),u.vadd(n,u),u.vsub(o.position,u),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(e,t,n,r,i,s,o,a,l,c,u){return this.convexHeightfield(t,e,r,n,s,i,a,o,l,c,u)}particleCylinder(e,t,n,r,i,s,o,a,l,c,u){return this.convexParticle(t,e,r,n,s,i,a,o,l,c,u)}sphereTrimesh(e,t,n,r,i,s,o,a,l,c,u){const h=Tl,d=Sl,p=Pl,f=El,m=Al,y=Ml,g=Bl,v=kl,x=bl,w=Ol;$s.pointToLocalFrame(r,s,n,m);const b=e.radius;g.lowerBound.set(m.x-b,m.y-b,m.z-b),g.upperBound.set(m.x+b,m.y+b,m.z+b),t.getTrianglesInAABB(g,w);const _=_l,k=e.radius*e.radius;for(let i=0;i<w.length;i++)for(let h=0;h<3;h++)if(t.getVertex(t.indices[3*w[i]+h],_),_.vsub(m,x),x.lengthSquared()<=k){if(v.copy(_),$s.pointToWorldFrame(r,s,v,_),_.vsub(n,x),u)return!0;let i=this.createContactEquation(o,a,e,t,l,c);i.ni.copy(x),i.ni.normalize(),i.ri.copy(i.ni),i.ri.scale(e.radius,i.ri),i.ri.vadd(n,i.ri),i.ri.vsub(o.position,i.ri),i.rj.copy(_),i.rj.vsub(a.position,i.rj),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}for(let i=0;i<w.length;i++)for(let g=0;g<3;g++){t.getVertex(t.indices[3*w[i]+g],h),t.getVertex(t.indices[3*w[i]+(g+1)%3],d),d.vsub(h,p),m.vsub(d,y);const v=y.dot(p);m.vsub(h,y);let x=y.dot(p);if(x>0&&v<0&&(m.vsub(h,y),f.copy(p),f.normalize(),x=y.dot(f),f.scale(x,y),y.vadd(h,y),y.distanceTo(m)<e.radius)){if(u)return!0;const i=this.createContactEquation(o,a,e,t,l,c);y.vsub(m,i.ni),i.ni.normalize(),i.ni.scale(e.radius,i.ri),i.ri.vadd(n,i.ri),i.ri.vsub(o.position,i.ri),$s.pointToWorldFrame(r,s,y,y),y.vsub(a.position,i.rj),$s.vectorToWorldFrame(s,i.ni,i.ni),$s.vectorToWorldFrame(s,i.ri,i.ri),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}const T=zl,S=Il,P=Cl,E=wl;for(let i=0,h=w.length;i!==h;i++){t.getTriangleVertices(w[i],T,S,P),t.getNormal(w[i],E),m.vsub(T,y);let h=y.dot(E);if(E.scale(h,y),m.vsub(y,y),h=y.distanceTo(m),Co.pointInTriangle(y,T,S,P)&&h<e.radius){if(u)return!0;let i=this.createContactEquation(o,a,e,t,l,c);y.vsub(m,i.ni),i.ni.normalize(),i.ni.scale(e.radius,i.ri),i.ri.vadd(n,i.ri),i.ri.vsub(o.position,i.ri),$s.pointToWorldFrame(r,s,y,y),y.vsub(a.position,i.rj),$s.vectorToWorldFrame(s,i.ni,i.ni),$s.vectorToWorldFrame(s,i.ri,i.ri),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}w.length=0}planeTrimesh(e,t,n,r,i,s,o,a,l,c,u){const h=new Os,d=gl;d.set(0,0,1),i.vmult(d,d);for(let i=0;i<t.vertices.length/3;i++){t.getVertex(i,h);const p=new Os;p.copy(h),$s.pointToWorldFrame(r,s,p,h);const f=vl;if(h.vsub(n,f),d.dot(f)<=0){if(u)return!0;const n=this.createContactEquation(o,a,e,t,l,c);n.ni.copy(d);const r=xl;d.scale(f.dot(d),r),h.vsub(r,r),n.ri.copy(r),n.ri.vsub(o.position,n.ri),n.rj.copy(h),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}}}const ul=new Os,hl=new Os,dl=new Os,pl=new Os,fl=new Os,ml=new Vs,yl=new Vs,gl=new Os,vl=new Os,xl=new Os,wl=new Os,bl=new Os;new Os;const _l=new Os,kl=new Os,Tl=new Os,Sl=new Os,Pl=new Os,El=new Os,Al=new Os,Ml=new Os,zl=new Os,Il=new Os,Cl=new Os,Bl=new js,Ol=[],Rl=new Os,Nl=new Os,Ul=new Os,jl=new Os,Dl=new Os;function Fl(e,t,n){let r=null;const i=e.length;for(let s=0;s!==i;s++){const o=e[s],a=Ul;e[(s+1)%i].vsub(o,a);const l=jl;a.cross(t,l);const c=Dl;n.vsub(o,c);const u=l.dot(c);if(!(null===r||u>0&&!0===r||u<=0&&!1===r))return!1;null===r&&(r=u>0)}return!0}const ql=new Os,Ll=new Os,Vl=new Os,Gl=new Os,Wl=[new Os,new Os,new Os,new Os,new Os,new Os],Yl=new Os,$l=new Os,Hl=new Os,Xl=new Os,Zl=new Os,Kl=new Os,Ql=new Os,Jl=new Os,ec=new Os,tc=new Os,nc=new Os,rc=new Os,ic=new Os,sc=new Os;new Os,new Os;const oc=new Os,ac=new Os,lc=new Os,cc=new Os,uc=new Os,hc=new Os,dc=new Os,pc=new Os,fc=new Os,mc=new Os,yc=new Vs,gc=new Os;new Os;const vc=new Os,xc=new Os,wc=new Os,bc=new Os,_c=new Os,kc=[0],Tc=new Os,Sc=new Os;class Pc{constructor(){this.current=[],this.previous=[]}getKey(e,t){if(t<e){const n=t;t=e,e=n}return e<<16|t}set(e,t){const n=this.getKey(e,t),r=this.current;let i=0;for(;n>r[i];)i++;if(n!==r[i]){for(let e=r.length-1;e>=i;e--)r[e+1]=r[e];r[i]=n}}tick(){const e=this.current;this.current=this.previous,this.previous=e,this.current.length=0}getDiff(e,t){const n=this.current,r=this.previous,i=n.length,s=r.length;let o=0;for(let t=0;t<i;t++){let i=!1;const s=n[t];for(;s>r[o];)o++;i=s===r[o],i||Ec(e,s)}o=0;for(let e=0;e<s;e++){let i=!1;const s=r[e];for(;s>n[o];)o++;i=n[o]===s,i||Ec(t,s)}}}function Ec(e,t){e.push((4294901760&t)>>16,65535&t)}const Ac=(e,t)=>e<t?`${e}-${t}`:`${t}-${e}`;class Mc{constructor(){this.data={keys:[]}}get(e,t){const n=Ac(e,t);return this.data[n]}set(e,t,n){const r=Ac(e,t);this.get(e,t)||this.data.keys.push(r),this.data[r]=n}delete(e,t){const n=Ac(e,t),r=this.data.keys.indexOf(n);-1!==r&&this.data.keys.splice(r,1),delete this.data[n]}reset(){const e=this.data,t=e.keys;for(;t.length>0;)delete e[t.pop()]}}class zc extends Ls{constructor(e){void 0===e&&(e={}),super(),this.dt=-1,this.allowSleep=!!e.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==e.quatNormalizeSkip?e.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==e.quatNormalizeFast&&e.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new Os,e.gravity&&this.gravity.copy(e.gravity),e.frictionGravity&&(this.frictionGravity=new Os,this.frictionGravity.copy(e.frictionGravity)),this.broadphase=void 0!==e.broadphase?e.broadphase:new ko,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==e.solver?e.solver:new Ca,this.constraints=[],this.narrowphase=new cl(this),this.collisionMatrix=new qs,this.collisionMatrixPrevious=new qs,this.bodyOverlapKeeper=new Pc,this.shapeOverlapKeeper=new Pc,this.contactmaterials=[],this.contactMaterialTable=new Mc,this.defaultMaterial=new za("default"),this.defaultContactMaterial=new Ma(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(e,t){return this.contactMaterialTable.get(e.id,t.id)}collisionMatrixTick(){const e=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=e,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(e){this.constraints.push(e)}removeConstraint(e){const t=this.constraints.indexOf(e);-1!==t&&this.constraints.splice(t,1)}rayTest(e,t,n){n instanceof To?this.raycastClosest(e,t,{skipBackfaces:!0},n):this.raycastAll(e,t,{skipBackfaces:!0},n)}raycastAll(e,t,n,r){return void 0===n&&(n={}),n.mode=Co.ALL,n.from=e,n.to=t,n.callback=r,Ic.intersectWorld(this,n)}raycastAny(e,t,n,r){return void 0===n&&(n={}),n.mode=Co.ANY,n.from=e,n.to=t,n.result=r,Ic.intersectWorld(this,n)}raycastClosest(e,t,n,r){return void 0===n&&(n={}),n.mode=Co.CLOSEST,n.from=e,n.to=t,n.result=r,Ic.intersectWorld(this,n)}addBody(e){this.bodies.includes(e)||(e.index=this.bodies.length,this.bodies.push(e),e.world=this,e.initPosition.copy(e.position),e.initVelocity.copy(e.velocity),e.timeLastSleepy=this.time,e instanceof ro&&(e.initAngularVelocity.copy(e.angularVelocity),e.initQuaternion.copy(e.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=e,this.idToBodyMap[e.id]=e,this.dispatchEvent(this.addBodyEvent))}removeBody(e){e.world=null;const t=this.bodies.length-1,n=this.bodies,r=n.indexOf(e);if(-1!==r){n.splice(r,1);for(let e=0;e!==n.length;e++)n[e].index=e;this.collisionMatrix.setNumObjects(t),this.removeBodyEvent.body=e,delete this.idToBodyMap[e.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(e){return this.idToBodyMap[e]}getShapeById(e){const t=this.bodies;for(let n=0;n<t.length;n++){const r=t[n].shapes;for(let t=0;t<r.length;t++){const n=r[t];if(n.id===e)return n}}return null}addContactMaterial(e){this.contactmaterials.push(e),this.contactMaterialTable.set(e.materials[0].id,e.materials[1].id,e)}removeContactMaterial(e){const t=this.contactmaterials.indexOf(e);-1!==t&&(this.contactmaterials.splice(t,1),this.contactMaterialTable.delete(e.materials[0].id,e.materials[1].id))}fixedStep(e,t){void 0===e&&(e=1/60),void 0===t&&(t=10);const n=Cc.now()/1e3;if(this.lastCallTime){const r=n-this.lastCallTime;this.step(e,r,t)}else this.step(e,void 0,t);this.lastCallTime=n}step(e,t,n){if(void 0===n&&(n=10),void 0===t)this.internalStep(e),this.time+=e;else{this.accumulator+=t;const r=Cc.now();let i=0;for(;this.accumulator>=e&&i<n&&(this.internalStep(e),this.accumulator-=e,i++,!(Cc.now()-r>1e3*e)););this.accumulator=this.accumulator%e;const s=this.accumulator/e;for(let e=0;e!==this.bodies.length;e++){const t=this.bodies[e];t.previousPosition.lerp(t.position,s,t.interpolatedPosition),t.previousQuaternion.slerp(t.quaternion,s,t.interpolatedQuaternion),t.previousQuaternion.normalize()}this.time+=t}}internalStep(e){this.dt=e;const t=this.contacts,n=jc,r=Dc,i=this.bodies.length,s=this.bodies,o=this.solver,a=this.gravity,l=this.doProfiling,c=this.profile,u=ro.DYNAMIC;let h=-1/0;const d=this.constraints,p=Uc;a.length();const f=a.x,m=a.y,y=a.z;let g=0;for(l&&(h=Cc.now()),g=0;g!==i;g++){const e=s[g];if(e.type===u){const t=e.force,n=e.mass;t.x+=n*f,t.y+=n*m,t.z+=n*y}}for(let e=0,t=this.subsystems.length;e!==t;e++)this.subsystems[e].update();l&&(h=Cc.now()),n.length=0,r.length=0,this.broadphase.collisionPairs(this,n,r),l&&(c.broadphase=Cc.now()-h);let v=d.length;for(g=0;g!==v;g++){const e=d[g];if(!e.collideConnected)for(let t=n.length-1;t>=0;t-=1)(e.bodyA===n[t]&&e.bodyB===r[t]||e.bodyB===n[t]&&e.bodyA===r[t])&&(n.splice(t,1),r.splice(t,1))}this.collisionMatrixTick(),l&&(h=Cc.now());const x=Nc,w=t.length;for(g=0;g!==w;g++)x.push(t[g]);t.length=0;const b=this.frictionEquations.length;for(g=0;g!==b;g++)p.push(this.frictionEquations[g]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(n,r,this,t,x,this.frictionEquations,p),l&&(c.narrowphase=Cc.now()-h),l&&(h=Cc.now()),g=0;g<this.frictionEquations.length;g++)o.addEquation(this.frictionEquations[g]);const _=t.length;for(let e=0;e!==_;e++){const n=t[e],r=n.bi,i=n.bj,s=n.si,a=n.sj;let l;l=r.material&&i.material&&this.getContactMaterial(r.material,i.material)||this.defaultContactMaterial,l.friction,r.material&&i.material&&(r.material.friction>=0&&i.material.friction>=0&&(r.material.friction,i.material.friction),r.material.restitution>=0&&i.material.restitution>=0&&(n.restitution=r.material.restitution*i.material.restitution)),o.addEquation(n),r.allowSleep&&r.type===ro.DYNAMIC&&r.sleepState===ro.SLEEPING&&i.sleepState===ro.AWAKE&&i.type!==ro.STATIC&&i.velocity.lengthSquared()+i.angularVelocity.lengthSquared()>=2*i.sleepSpeedLimit**2&&(r.wakeUpAfterNarrowphase=!0),i.allowSleep&&i.type===ro.DYNAMIC&&i.sleepState===ro.SLEEPING&&r.sleepState===ro.AWAKE&&r.type!==ro.STATIC&&r.velocity.lengthSquared()+r.angularVelocity.lengthSquared()>=2*r.sleepSpeedLimit**2&&(i.wakeUpAfterNarrowphase=!0),this.collisionMatrix.set(r,i,!0),this.collisionMatrixPrevious.get(r,i)||(Rc.body=i,Rc.contact=n,r.dispatchEvent(Rc),Rc.body=r,i.dispatchEvent(Rc)),this.bodyOverlapKeeper.set(r.id,i.id),this.shapeOverlapKeeper.set(s.id,a.id)}for(this.emitContactEvents(),l&&(c.makeContactConstraints=Cc.now()-h,h=Cc.now()),g=0;g!==i;g++){const e=s[g];e.wakeUpAfterNarrowphase&&(e.wakeUp(),e.wakeUpAfterNarrowphase=!1)}for(v=d.length,g=0;g!==v;g++){const e=d[g];e.update();for(let t=0,n=e.equations.length;t!==n;t++){const n=e.equations[t];o.addEquation(n)}}o.solve(e,this),l&&(c.solve=Cc.now()-h),o.removeAllEquations();const k=Math.pow;for(g=0;g!==i;g++){const t=s[g];if(t.type&u){const n=k(1-t.linearDamping,e),r=t.velocity;r.scale(n,r);const i=t.angularVelocity;if(i){const n=k(1-t.angularDamping,e);i.scale(n,i)}}}this.dispatchEvent(Oc),l&&(h=Cc.now());const T=this.stepnumber%(this.quatNormalizeSkip+1)==0,S=this.quatNormalizeFast;for(g=0;g!==i;g++)s[g].integrate(e,T,S);this.clearForces(),this.broadphase.dirty=!0,l&&(c.integrate=Cc.now()-h),this.stepnumber+=1,this.dispatchEvent(Bc);let P=!0;if(this.allowSleep)for(P=!1,g=0;g!==i;g++){const e=s[g];e.sleepTick(this.time),e.sleepState!==ro.SLEEPING&&(P=!0)}this.hasActiveBodies=P}emitContactEvents(){const e=this.hasAnyEventListener("beginContact"),t=this.hasAnyEventListener("endContact");if((e||t)&&this.bodyOverlapKeeper.getDiff(Fc,qc),e){for(let e=0,t=Fc.length;e<t;e+=2)Lc.bodyA=this.getBodyById(Fc[e]),Lc.bodyB=this.getBodyById(Fc[e+1]),this.dispatchEvent(Lc);Lc.bodyA=Lc.bodyB=null}if(t){for(let e=0,t=qc.length;e<t;e+=2)Vc.bodyA=this.getBodyById(qc[e]),Vc.bodyB=this.getBodyById(qc[e+1]),this.dispatchEvent(Vc);Vc.bodyA=Vc.bodyB=null}Fc.length=qc.length=0;const n=this.hasAnyEventListener("beginShapeContact"),r=this.hasAnyEventListener("endShapeContact");if((n||r)&&this.shapeOverlapKeeper.getDiff(Fc,qc),n){for(let e=0,t=Fc.length;e<t;e+=2){const t=this.getShapeById(Fc[e]),n=this.getShapeById(Fc[e+1]);Gc.shapeA=t,Gc.shapeB=n,t&&(Gc.bodyA=t.body),n&&(Gc.bodyB=n.body),this.dispatchEvent(Gc)}Gc.bodyA=Gc.bodyB=Gc.shapeA=Gc.shapeB=null}if(r){for(let e=0,t=qc.length;e<t;e+=2){const t=this.getShapeById(qc[e]),n=this.getShapeById(qc[e+1]);Wc.shapeA=t,Wc.shapeB=n,t&&(Wc.bodyA=t.body),n&&(Wc.bodyB=n.body),this.dispatchEvent(Wc)}Wc.bodyA=Wc.bodyB=Wc.shapeA=Wc.shapeB=null}}clearForces(){const e=this.bodies,t=e.length;for(let n=0;n!==t;n++){const t=e[n];t.force,t.torque,t.force.set(0,0,0),t.torque.set(0,0,0)}}}new js;const Ic=new Co,Cc=globalThis.performance||{};if(!Cc.now){let e=Date.now();Cc.timing&&Cc.timing.navigationStart&&(e=Cc.timing.navigationStart),Cc.now=()=>Date.now()-e}new Os;const Bc={type:"postStep"},Oc={type:"preStep"},Rc={type:ro.COLLIDE_EVENT_NAME,body:null,contact:null},Nc=[],Uc=[],jc=[],Dc=[],Fc=[],qc=[],Lc={type:"beginContact",bodyA:null,bodyB:null},Vc={type:"endContact",bodyA:null,bodyB:null},Gc={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},Wc={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},Yc=new class{lastTime=0;entities=new Map;systems=new Map;nextEntityID=0;entitiesToDestroy=new Array;addEntity(){let e=this.nextEntityID;return this.nextEntityID++,this.entities.set(e,new n),e}removeEntity(e){this.entitiesToDestroy.push(e)}addComponent(e,t){this.entities.get(e).add(t),this.checkE(e)}addComponents(e,...t){for(let n of t)this.addComponent(e,n)}getComponents(e){return this.entities.get(e)}removeComponent(e,t){this.entities.get(e).delete(t),this.checkE(e)}addSystem(e){if(0==e.componentsRequired.size)return console.warn("System not added: empty Components list."),void console.warn(e);e.ecs=this,this.systems.set(e,new Set);for(let t of this.entities.keys())this.checkES(t,e)}removeSystem(e){this.systems.delete(e)}update(e){let t=e-this.lastTime;for(let[n,r]of this.systems.entries())n.update(r,e,t);for(;this.entitiesToDestroy.length>0;)this.destroyEntity(this.entitiesToDestroy.pop());this.lastTime=e}destroyEntity(e){this.entities.delete(e);for(let t of this.systems.values())t.delete(e)}checkE(e){for(let t of this.systems.keys())this.checkES(e,t)}checkES(e,t){let n=this.entities.get(e),r=t.componentsRequired;n.hasAll(r)?this.systems.get(t).add(e):this.systems.get(t).delete(e)}getEntitiesithComponent(e){let t=new Set;for(let[n,r]of this.entities)r.has(e)&&t.add(n);return t}};Yc.addSystem(new class extends t{componentsRequired=new Set([Pi,Si]);constructor(){super(),(async()=>{const e=await navigator.gpu.requestAdapter({powerPreference:"high-performance"});let t;console.log(e);try{t=await e.requestDevice({requiredFeatures:["timestamp-query"],requiredLimits:{maxColorAttachmentBytesPerSample:64}})}catch(n){console.warn("Timestamp query or 64 byte colour attachment not supported, falling back"),t=await e.requestDevice()}return t})().then((async e=>{const t=new As(e),n=(e=>{const t=e.getEntitiesithComponent(Ms).values().next().value;return e.getComponents(t).get(Ms)})(this.ecs);n.device=e,n.volumeAtlas=t;const r=await bs(e,t,"Dragon","./Tavern/dragon.vxm");await bs(e,t,"TeaPot","./Tavern/teapot.vxm");let i=[];for(let e=-600;e<=600;e+=150)for(let t=0;t<=1200;t+=150){const n=this.ecs.addEntity();this.ecs.addComponent(n,new Pi(r)),this.ecs.addComponent(n,new Si([e+50*Math.random(),0,t+50*Math.random()],Le.identity(),[1,1,1])),i.push(n)}us(e,t,this.ecs,i)}))}update(e,t){const n=this.ecs.getEntitiesithComponent(fs).values().next().value,r=this.ecs.getComponents(n),i=r.get(fs),s=r.get(Si);ps(t,this.ecs,i,s,Array.from(e))}}),Yc.addSystem(new class extends t{keyboardControls=new zs;componentsRequired=new Set([Si,Is]);update(e,t,n){for(const t of e){const e=this.ecs.getComponents(t),r=e.get(Si),i=e.get(Is),s=i.speed*n,o=i.rotationSpeed*n;this.keyboardControls.pressed.a&&(r.position=te.add(r.position,te.mulScalar(r.left,s))),this.keyboardControls.pressed.d&&(r.position=te.add(r.position,te.mulScalar(r.right,s))),this.keyboardControls.pressed.w&&(r.position=te.add(r.position,te.mulScalar(r.direction,s))),this.keyboardControls.pressed.s&&(r.position=te.sub(r.position,te.mulScalar(r.direction,s))),this.keyboardControls.pressed.q&&(r.rotation=Le.rotateY(r.rotation,-o)),this.keyboardControls.pressed.e&&(r.rotation=Le.rotateY(r.rotation,o)),this.keyboardControls.pressed[" "]&&(r.position=te.add(r.position,te.mulScalar(r.up,s))),this.keyboardControls.pressed.shift&&(r.position=te.add(r.position,te.mulScalar(r.down,s)))}}});const $c=Yc.addEntity();Yc.addComponent($c,new Ms),Yc.addComponent($c,new class extends e{world=new zc({gravity:new Os(0,-150,0)});constructor(){super()}});const Hc=Yc.addEntity();Yc.addComponents(Hc,new fs({fieldOfView:Math.PI/180*70,near:.5,far:1e4}),new Si(te.create(0,50,-120),Le.fromEuler(0,0,0,"xyz"),te.create(1,1,1)),new Is);const Xc=Yc.addEntity();Yc.addComponents(Xc,new Si(te.create(0,0,0),Le.identity(),te.create(1,1,1)),new Is);const Zc=e=>{Yc.update(e),requestAnimationFrame(Zc)};requestAnimationFrame(Zc)})();