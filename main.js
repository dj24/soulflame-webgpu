(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{UI:()=>rs,Ji:()=>Xi,mL:()=>Hi,Eh:()=>es,jO:()=>Wi,sZ:()=>$i,PM:()=>Ki});const t=(e,t)=>{const r=new Uint32Array(t);Wi.queue.writeBuffer(e,0,r.buffer,0,t.length*Uint32Array.BYTES_PER_ELEMENT)},r=(e,r)=>{const n=new Uint32Array(e),i=Wi.createBuffer({size:n.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:r});return t(i,e),i},n=(e,t)=>{if(t instanceof Float32Array)Wi.queue.writeBuffer(e,0,t.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT);else{const r=new Float32Array(t);Wi.queue.writeBuffer(e,0,r.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT)}},i=(e,t,r)=>{const i=new Float32Array(t),s=e.createBuffer({size:i.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:r});return n(s,t),s},s="struct BoxIntersectionResult {\r\n    tNear: f32,\r\n    tFar: f32,\r\n    normal: vec3<f32>,\r\n    isHit: bool,\r\n}\r\n\r\nfn simpleBoxIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n) -> f32 {\r\n  let m = 1.0/rd; // can precompute if traversing a set of aligned boxes\r\n  let n = m*ro;   // can precompute if traversing a set of aligned boxes\r\n  let k = abs(m)*boxSize;\r\n  let t1 = -n - k;\r\n  let t2 = -n + k;\r\n  let tN = max( max( t1.x, t1.y ), t1.z );\r\n  let tF = min( min( t2.x, t2.y ), t2.z );\r\n  if( tN>tF || tF<0.0) {\r\n    return -1.0; // no intersection\r\n  }\r\n  return tN;\r\n}\r\n\r\nfn boxIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    result.isHit = false;\r\n    result.tNear = -1.0;\r\n    result.tFar = -1.0;\r\n\r\n    let offsetRayOrigin = ro - boxSize;\r\n    let m: vec3<f32> = 1.0 / rd;\r\n    let n: vec3<f32> = m * offsetRayOrigin;\r\n    let k: vec3<f32> = abs(m) * boxSize;\r\n    let t1: vec3<f32> = -n - k;\r\n    let t2: vec3<f32> = -n + k;\r\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\r\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\r\n    if (tN > tF || tF < 0.0) {\r\n        return result;\r\n    }\r\n    // Check if the ray starts inside the volume\r\n    let insideVolume = tN < 0.0;\r\n    var normal = select(\r\n        step(vec3<f32>(tN), t1),\r\n        step(t2, vec3<f32>(tF)),\r\n        tN < 0.0,\r\n    );\r\n    normal *= -sign(rd);\r\n    // Check if the intersection is in the correct direction, only if inside the volume\r\n    if (insideVolume && dot(normal, rd) < 0.0) {\r\n        return result;\r\n    }\r\n    result.tNear = tN;\r\n    result.tFar = tF;\r\n    result.normal = normal;\r\n    result.isHit = true;\r\n    return result;\r\n}\r\n\r\nfn planeIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    planeNormal: vec3<f32>,\r\n    planeDistance: f32,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    let denom = dot(planeNormal, rd);\r\n    if (abs(denom) > 0.0001) {\r\n        let t = -(dot(planeNormal, ro) + planeDistance) / denom;\r\n        if (t > 0.0) {\r\n            result.isHit = true;\r\n            result.tNear = t;\r\n            result.tFar = t;\r\n            result.normal = planeNormal;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfn get3x3From4x4(m: mat4x4<f32>) -> mat3x3<f32> {\r\n    return mat3x3<f32>(\r\n        m[0].xyz,\r\n        m[1].xyz,\r\n        m[2].xyz,\r\n    );\r\n}\r\n\r\n\r\nfn intersectOBB(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n    boxOrientation: mat3x3<f32>,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    result.isHit = false;\r\n    result.tNear = -1.0;\r\n    result.tFar = -1.0;\r\n\r\n    let offsetRayOrigin = ro - boxSize;\r\n    let m: vec3<f32> = 1.0 / rd;\r\n    let n: vec3<f32> = m * offsetRayOrigin;\r\n    let k: vec3<f32> = abs(m) * boxSize;\r\n    let t1: vec3<f32> = -n - k;\r\n    let t2: vec3<f32> = -n + k;\r\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\r\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\r\n    if (tN > tF || tF < 0.0) {\r\n        return result;\r\n    }\r\n    // Check if the ray starts inside the volume\r\n    let insideVolume = tN < 0.0;\r\n    var normal = select(\r\n        step(vec3<f32>(tN), t1),\r\n        step(t2, vec3<f32>(tF)),\r\n        tN < 0.0,\r\n    );\r\n    normal *= -sign(rd);\r\n    // Check if the intersection is in the correct direction, only if inside the volume\r\n    if (insideVolume && dot(normal, rd) < 0.0) {\r\n        return result;\r\n    }\r\n    result.tNear = tN;\r\n    result.tFar = tF;\r\n    result.normal = normal;\r\n    result.isHit = true;\r\n    return result;\r\n}",a="const EPSILON = 0.0001;\r\nconst MAX_RAY_STEPS = 256;\r\nconst FAR_PLANE = 10000.0;\r\nconst NEAR_PLANE = 0.5;\r\nconst STACK_LEN: u32 = 32u;\r\n\r\n// Function to transform a normal vector from object to world space\r\nfn transformNormal(inverseTransform: mat4x4<f32>, normal: vec3<f32>) -> vec3<f32> {\r\n    let worldNormal = normalize((vec4<f32>(normal, 0.0) * inverseTransform).xyz);\r\n    return worldNormal;\r\n}\r\n\r\n// Function to transform an object space position to world space\r\nfn transformPosition(transform: mat4x4<f32>, position: vec3<f32>) -> vec3<f32> {\r\n    let worldPosition = (transform * vec4<f32>(position, 1.0)).xyz;\r\n    return worldPosition;\r\n}\r\n\r\nfn getMaxMipLevel(size: vec3<f32>) -> u32 {\r\n  return u32(log2(max(size.x, max(size.y, size.z))));\r\n}\r\n\r\nstruct Brick {\r\n  voxels: array<u32, 16>\r\n}\r\nstruct VoxelObject {\r\n  transform: mat4x4<f32>,\r\n  inverseTransform: mat4x4<f32>,\r\n  previousTransform: mat4x4<f32>,\r\n  previousInverseTransform: mat4x4<f32>,\r\n  size : vec3<f32>,\r\n  atlasLocation : vec3<f32>,\r\n  paletteIndex : f32,\r\n}\r\n\r\nstruct RayMarchResult {\r\n  worldPos: vec3<f32>,\r\n  normal: vec3<f32>,\r\n  stepsTaken: i32,\r\n  hit: bool,\r\n  t: f32,\r\n}\r\n\r\nfn isInBounds(position: vec3<i32>, size: vec3<i32>) -> bool {\r\n  return all(position >= vec3(0)) && all(position <= size - vec3(1));\r\n}\r\n\r\nfn getMipLevelFromVoxelSize(voxelSize: vec3<f32>) -> u32 {\r\n  return u32(log2(max(voxelSize.x, max(voxelSize.y, voxelSize.z))));\r\n}\r\n\r\nfn convert1DTo3D(size: vec3<u32>, index: u32) -> vec3<u32> {\r\n  return vec3(\r\n    index % size.x,\r\n    index / size.y,\r\n    index / (size.x * size.y)\r\n  );\r\n}\r\n\r\nfn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\r\n  return position.x + position.y * size.x + position.z * (size.x * size.y);\r\n}\r\n\r\n\r\nfn doesBrickContainVoxels(brick: Brick) -> bool {\r\n  for(var i = 0; i < 16; i++){\r\n    if(brick.voxels[i] > 0){\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfn getBit(value: u32, bitIndex: u32) -> bool {\r\n  return (value & (1u << bitIndex)) != 0;\r\n}\r\n\r\n// gets bit in 512bit bitmask in a brick\r\n// bitIndex is the index of the bit in the bitmask, 0-511\r\nfn getBitInBrick(brick: Brick, bitIndex: u32) -> bool {\r\n  let maskIndex = bitIndex / 32;\r\n  let bitIndexInMask = bitIndex % 32;\r\n  return getBit(brick.voxels[maskIndex], bitIndexInMask);\r\n}\r\n\r\nfn rayMarchAtMip(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\r\n  var output = RayMarchResult();\r\n  let rayDirSign = sign(objectRayDirection);\r\n  let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\r\n  var voxelSize = vec3(f32(1 << mipLevel));\r\n  var shiftedRayOrigin = objectRayOrigin - objectRayDirection * EPSILON;\r\n  var objectPos = shiftedRayOrigin;\r\n  var currentIndex = vec3<i32>(floor(objectPos));\r\n  var scaledRayOrigin =  objectRayOrigin / voxelSize;\r\n  var scaledObjectPos = floor(objectPos / voxelSize);\r\n  var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\r\n  var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\r\n  let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\r\n  var objectNormal = mask * -rayDirSign;\r\n  var tCurrent = min(tMax.x, min(tMax.y, tMax.z));\r\n\r\n  // RAYMARCH\r\n  for(var i = 0; i < MAX_RAY_STEPS; i++)\r\n  {\r\n    output.stepsTaken = i;\r\n\r\n    let samplePosition = vec3<u32>(currentIndex) + atlasLocation;\r\n    let mipSample0 = textureLoad(voxels, samplePosition / vec3((1u << mipLevel)), mipLevel);\r\n\r\n\r\n    if(mipSample0.r > 0.0 && isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n        output.worldPos = (voxelObject.transform *  vec4(objectPos, 1.0)).xyz;\r\n        output.normal = transformNormal(voxelObject.inverseTransform,vec3<f32>(objectNormal));\r\n        output.hit = true;\r\n        output.t = tCurrent;\r\n        return output;\r\n    }\r\n\r\n    var scaledRayOrigin = shiftedRayOrigin / voxelSize;\r\n    var scaledObjectPos = floor(objectPos / voxelSize);\r\n    var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\r\n    var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\r\n    let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\r\n\r\n    tCurrent = min(tMax.x, min(tMax.y, tMax.z));\r\n    objectPos = objectRayOrigin + objectRayDirection * tCurrent;\r\n    currentIndex = vec3<i32>(floor(objectPos / voxelSize) * voxelSize);\r\n    objectNormal = mask * -rayDirSign;\r\n\r\n\r\n    if(!isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n        break;\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\nfn rayMarchTransformed(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\r\n      var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n      let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n      return  rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\r\n}\r\n\r\nfn rayMarchOctree(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, startingMipLevel: u32) -> RayMarchResult {\r\n   var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n   let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n   var output = RayMarchResult();\r\n   for(var mipLevel = startingMipLevel; mipLevel > 0; mipLevel--){\r\n     output = rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\r\n     if(output.hit){\r\n       objectRayOrigin += (output.t - EPSILON) * objectRayDirection;\r\n     }\r\n     else{\r\n      return output;\r\n     }\r\n   }\r\n   return rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, 0);\r\n}\r\n\r\n\r\nstruct Stack {\r\n  arr: array<i32, STACK_LEN>,\r\n\thead: u32,\r\n}\r\n\r\nfn stack_new() -> Stack {\r\n    var arr: array<i32, STACK_LEN>;\r\n    return Stack(arr, 0u);\r\n}\r\n\r\nfn stack_push(stack: ptr<function, Stack>, val: i32) {\r\n    (*stack).arr[(*stack).head] = val;\r\n    (*stack).head += 1u;\r\n}\r\n\r\nfn stack_pop(stack: ptr<function, Stack>) -> i32 {\r\n    (*stack).head -= 1u;\r\n    return (*stack).arr[(*stack).head];\r\n}\r\n\r\nconst colours = array<vec3<f32>, 6>(\r\n  vec3<f32>(1.0, 0.0, 0.0),\r\n  vec3<f32>(0.0, 1.0, 0.0),\r\n  vec3<f32>(0.0, 0.0, 1.0),\r\n  vec3<f32>(1.0, 1.0, 0.0),\r\n  vec3<f32>(1.0, 0.0, 1.0),\r\n  vec3<f32>(0.0, 1.0, 1.0)\r\n);\r\n\r\nfn debugColourFromIndex(index: i32) -> vec3<f32> {\r\n  return colours[index % 6];\r\n}\r\n\r\n\r\nconst OCTREE_CHILD_OFFSETS = array<vec3<i32>, 8>(\r\n  vec3<i32>(0, 0, 0),\r\n  vec3<i32>(1, 0, 0),\r\n  vec3<i32>(0, 1, 0),\r\n  vec3<i32>(1, 1, 0),\r\n  vec3<i32>(0, 0, 1),\r\n  vec3<i32>(1, 0, 1),\r\n  vec3<i32>(0, 1, 1),\r\n  vec3<i32>(1, 1, 1)\r\n);\r\n\r\n//fn rayMarchStack(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, startingMipLevel: u32) -> RayMarchResult {\r\n//  // Create a stack to store the nodes to visit\r\n//  var stack = stack_new();\r\n//  var closestIntersection = RayMarchResult();\r\n//  var stack = stack_new();\r\n//  var mipLevel = startingMipLevel;\r\n//  var voxelSize = vec3<f32>(1 << mipLevel);\r\n//  var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n//  let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n//\r\n//  stack_push(&stack, 0);\r\n//  closestIntersection.worldPos = rayOrigin + rayDirection * FAR_PLANE;\r\n//\r\n//  while (stack.head > 0u && iterations < MAX_STEPS) {\r\n//    var nodeDistances = array<f32>(8);\r\n//    for(var i = 0; i < 8; i++){\r\n//      nodeDistances[i] = FAR_PLANE;\r\n//    }\r\n//\r\n//  }\r\n//}\r\n",o="const BRICK_SIZE = 8;\r\nconst MAX_STEPS = 256;\r\n\r\n\r\nstruct BVHNode {\r\n  leftIndex: i32,\r\n  rightIndex: i32,\r\n  objectCount: u32,\r\n  AABBMin: vec3<f32>,\r\n  AABBMax: vec3<f32>\r\n}\r\n\r\nfn getDistanceToNode(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, node: BVHNode) -> f32 {\r\n  if(all(rayOrigin >= node.AABBMin) && all(rayOrigin <= node.AABBMax)){\r\n    return 0.0;\r\n  }\r\n  let boxSize = (node.AABBMax - node.AABBMin) / 2;\r\n  let intersection = boxIntersection(rayOrigin - node.AABBMin, rayDirection, boxSize);\r\n  if(intersection.isHit){\r\n    return intersection.tNear;\r\n  }\r\n  return -1.0;\r\n\r\n}\r\n\r\n// Stack-based BVH traversal\r\nfn rayMarchBVH(rayOrigin: vec3<f32>, rayDirection: vec3<f32>) -> RayMarchResult {\r\n  var closestIntersection = RayMarchResult();\r\n  closestIntersection.worldPos = rayOrigin + rayDirection * FAR_PLANE;\r\n\r\n  // Create a stack to store the nodes to visit\r\n  var stack = stack_new();\r\n  stack_push(&stack, 0);\r\n\r\n  var iterations = 0;\r\n  var nodeIndex = 0;\r\n\r\n  while (stack.head > 0u && iterations < MAX_STEPS) {\r\n    let node = bvhNodes[nodeIndex];\r\n    if(node.objectCount > 1){\r\n      let leftNode = bvhNodes[node.leftIndex];\r\n      let rightNode = bvhNodes[node.rightIndex];\r\n      let leftDist = getDistanceToNode(rayOrigin, rayDirection, leftNode);\r\n      let rightDist = getDistanceToNode(rayOrigin, rayDirection, rightNode);\r\n      let hitLeft = leftDist >= 0.0;\r\n      let hitRight = rightDist >= 0.0;\r\n      if(hitLeft){\r\n        var nearIndex = node.leftIndex;\r\n        // We hit both left and right, choose the closest one\r\n        if(hitRight){\r\n          if(leftDist < rightDist){\r\n            // left is closer, push right to stack\r\n            stack_push(&stack, node.rightIndex);\r\n          } else {\r\n            // right is closer, push left to stack\r\n            stack_push(&stack, node.leftIndex);\r\n            nearIndex = node.rightIndex;\r\n          }\r\n        }\r\n        nodeIndex = nearIndex;\r\n      }\r\n      // We only hit the right Node\r\n      else if(hitRight){\r\n        nodeIndex = node.rightIndex;\r\n      }\r\n      // We didn't hit any node, pop the stack\r\n      else{\r\n        nodeIndex = stack_pop(&stack);\r\n      }\r\n    }\r\n    // valid leaf, raymarch it\r\n    else if(node.objectCount == 1){\r\n        let distanceToLeaf = getDistanceToNode(rayOrigin, rayDirection, node);\r\n        if(distanceToLeaf < 0.0){\r\n          nodeIndex = stack_pop(&stack);\r\n          continue;\r\n        }\r\n        let worldPos = rayOrigin + rayDirection * distanceToLeaf;\r\n        let voxelObject = voxelObjects[node.leftIndex];\r\n//          let rayMarchResult = rayMarchTransformed(voxelObject, rayDirection, worldPos, 0);\r\n        let rayMarchResult = rayMarchOctree(voxelObject, rayDirection, worldPos, 2);\r\n        if(rayMarchResult.hit){\r\n          return rayMarchResult;\r\n        }\r\n\r\n        nodeIndex = stack_pop(&stack);\r\n    }\r\n\r\n    iterations += 1;\r\n//    closestIntersection.colour += vec3<f32>(0.0075);\r\n  }\r\n\r\n  return closestIntersection;\r\n}",u="fn calculateRayDirection(uv: vec2<f32>, inverseProjection: mat4x4<f32>) -> vec3<f32> {\r\n  let clipSpace = vec2(1.0 - uv.x, 1.0 - uv.y) * 2.0 - 1.0;\r\n  let viewRay = vec3<f32>(clipSpace, 1.0);\r\n  let viewRayView = inverseProjection * vec4(viewRay, 1.0);\r\n  return normalize(viewRayView.xyz);\r\n}\r\n",c=async()=>{const e={binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},t={binding:5,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d"}},r={binding:7,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},n=(GPUShaderStage.COMPUTE,{binding:9,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}),i={binding:10,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},c={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},l={binding:11,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba32float",viewDimension:"2d"}},f={binding:12,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d"}},d=Wi.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},c,e,t,r,{binding:8,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},n,i,l,f]}),h=await Wi.createComputePipelineAsync({label:"raymarch g-buffer",layout:Wi.createPipelineLayout({bindGroupLayouts:[d]}),compute:{module:Wi.createShaderModule({code:`\n          struct IndirectArgs {\n            count: atomic<u32>\n          };\n          @group(0) @binding(10) var<storage> bvhNodes: array<BVHNode>;\n          ${u}\n          ${s}\n          ${a}\n          ${o}\n          struct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  previousInverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\r\n\r\n@group(0) @binding(0) var voxels : texture_3d<f32>;\r\n@group(0) @binding(2) var<uniform> cameraPosition : vec3<f32>;\r\n@group(0) @binding(3) var<storage> voxelObjects : array<VoxelObject>;\r\n// TODO: maybe make a G-Buffer bind group to resuse across shaders\r\n@group(0) @binding(4) var normalTex : texture_storage_2d<rgba16float, write>;\r\n@group(0) @binding(5) var albedoTex : texture_storage_2d<rgba8unorm, write>;\r\n//@group(0) @binding(6) var depthRead : texture_2d<f32>;\r\n@group(0) @binding(6) var depthWrite : texture_storage_2d<rgba32float, write>;\r\n@group(0) @binding(7) var velocityTex : texture_storage_2d<rgba16float, write>;\r\n@group(0) @binding(8) var<uniform> viewProjections : ViewProjectionMatrices;\r\n@group(0) @binding(9) var<uniform> sunDirection : vec3<f32>;\r\n@group(0) @binding(11) var worldPosTex : texture_storage_2d<rgba32float, write>;\r\n@group(0) @binding(12) var paletteTex : texture_3d<f32>;\r\n\r\n\r\n\r\nfn plainIntersect(ro: vec3<f32>, rd: vec3<f32>, p: vec4<f32>) -> f32 {\r\n    return -(dot(ro, p.xyz) + p.w) / dot(rd, p.xyz);\r\n}\r\n\r\nfn getVelocity(rayMarchResult: RayMarchResult, viewProjections: ViewProjectionMatrices) -> vec3<f32> {\r\n  return vec3<f32>(0.0);\r\n//  let vp = viewProjections.viewProjection;\r\n//    let previousVp = viewProjections.previousViewProjection;\r\n//    let modelMatrix = rayMarchResult.modelMatrix;\r\n//    let previousModelMatrix = rayMarchResult.previousModelMatrix;\r\n//\r\n//    // Get current object space position of the current pixel\r\n//    let objectPos = rayMarchResult.objectPos.xyz;\r\n//    let objectClipSpace = vp * modelMatrix * vec4(objectPos.xyz, 1.0);\r\n//    let objectNDC = objectClipSpace.xyz / objectClipSpace.w;\r\n//\r\n//    // Get previous position of the current object space position\r\n//    let previousObjectClipSpace = previousVp * previousModelMatrix * vec4(objectPos.xyz, 1.0);\r\n//    let previousObjectNDC = previousObjectClipSpace.xyz / previousObjectClipSpace.w;\r\n//\r\n//    // Get velocity based on the difference between the current and previous positions\r\n//    var velocity = objectNDC - previousObjectNDC;\r\n//    velocity.y = -velocity.y;\r\n//  return velocity;\r\n}\r\n\r\nfn getLeftChildIndex(index: i32) -> i32 {\r\n  return index * 2 + 1;\r\n}\r\n\r\nfn getRightChildIndex(index: i32) -> i32 {\r\n  return index * 2 + 2;\r\n}\r\n\r\nfn getParentIndex(index: i32) -> i32 {\r\n  return (index - 1) / 2;\r\n}\r\n\r\n\r\nfn dirIsNegative(dir: vec3<f32>, axis: i32) -> bool {\r\n  return dir[axis] < 0.0;\r\n}\r\n\r\nfn getDebugColour(index: i32) -> vec3<f32> {\r\n  let colours = array<vec3<f32>, 6>(\r\n    vec3<f32>(1.0, 0.0, 0.0),\r\n    vec3<f32>(0.0, 1.0, 0.0),\r\n    vec3<f32>(0.0, 0.0, 1.0),\r\n    vec3<f32>(1.0, 1.0, 0.0),\r\n    vec3<f32>(1.0, 0.0, 1.0),\r\n    vec3<f32>(0.0, 1.0, 1.0)\r\n  );\r\n  return colours[index % 6];\r\n}\r\n\r\n\r\nfn customNormalize(value: f32, min: f32, max: f32) -> f32 {\r\n    return (value - min) / (max - min);\r\n}\r\n\r\nfn catmullRomSpline(t: f32, p0: f32, p1: f32, p2: f32, p3: f32) -> f32 {\r\n  let t2 = t * t;\r\n  let t3 = t2 * t;\r\n  return 0.5 * (\r\n    (2.0 * p1) +\r\n    (-p0 + p2) * t +\r\n    (2.0 * p0 - 5.0 * p1 + 4.0 * p2 - p3) * t2 +\r\n    (-p0 + 3.0 * p1 - 3.0 * p2 + p3) * t3\r\n  );\r\n}\r\n\r\n/*\r\n\r\nx o x\r\no x o\r\nx o x\r\n\r\nx o x o x\r\no x o x o\r\nx o x o x\r\no x o x o\r\nx o x o x\r\n\r\nIncremental sampling pattern\r\n1 o o o 2 o o o 1\r\no o o o o o o o o\r\no o 2 o o o 2 o o\r\no o o o o o o o o\r\n2 o o o 1 o o o 2\r\no o o o o o o o o\r\no o 2 o o o 2 o o\r\no o o o o o o o o\r\n1 o o o 2 o o o 1\r\n\r\n*/\r\n\r\nconst SPATIAL_KERNEL_SIZE = 9;\r\nconst SPATIAL_SAMPLE_COUNT = 5;\r\n\r\nconst KERNEL_CORNER_OFFSETS = array<vec2<u32>, SPATIAL_SAMPLE_COUNT>(\r\n  // First set\r\n  vec2(0,0),\r\n  vec2(8,0),\r\n  vec2(0,8),\r\n  vec2(8,8),\r\n  vec2(4,4)\r\n);\r\n\r\n\r\nconst GROUPS_X = 8;\r\nconst GROUPS_Y = 8;\r\n\r\n@compute @workgroup_size(GROUPS_X, GROUPS_Y, 1)\r\nfn main(\r\n  @builtin(local_invocation_index) LocalInvocationIndex : u32,\r\n  @builtin(workgroup_id) WorkgroupID : vec3<u32>,\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\r\n) {\r\n  let resolution = textureDimensions(albedoTex);\r\n  let pixel = GlobalInvocationID.xy;\r\n  var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\r\n  let rayDirection = calculateRayDirection(uv,viewProjections.inverseViewProjection);\r\n  var rayOrigin = cameraPosition;\r\n  var closestIntersection = RayMarchResult();\r\n\r\n  let bvhResult = rayMarchBVH(rayOrigin, rayDirection);\r\n  if(!bvhResult.hit){\r\n    textureStore(albedoTex, pixel, vec4(0));\r\n    textureStore(normalTex, pixel, vec4(0));\r\n    textureStore(velocityTex, pixel, vec4(0));\r\n    textureStore(worldPosTex, pixel, vec4(0));\r\n    return;\r\n  }\r\n  closestIntersection = bvhResult;\r\n\r\n\r\n  let normal = closestIntersection.normal;\r\n//  let depth = distance(cameraPosition, closestIntersection.worldPos);\r\n//  let albedo = closestIntersection.colour;\r\n//  let albedo = vec3(f32(closestIntersection.stepsTaken)) * 0.02;\r\nlet albedo = abs(closestIntersection.worldPos * 0.25) % 1.0;\r\n  let velocity = getVelocity(closestIntersection, viewProjections);\r\n  let worldPos = closestIntersection.worldPos;\r\n\r\n  textureStore(albedoTex, pixel, vec4(albedo, 1));\r\n  textureStore(normalTex, pixel, vec4(normal,1));\r\n  textureStore(velocityTex, pixel, vec4(velocity ,0));\r\n  textureStore(worldPosTex, pixel, vec4(worldPos, 1));\r\n}`}),entryPoint:"main"}});return{render:({commandEncoder:e,outputTextures:t,cameraPositionBuffer:r,volumeAtlas:n,transformationMatrixBuffer:i,viewProjectionMatricesBuffer:s,timestampWrites:a,sunDirectionBuffer:o,bvhBuffer:u})=>{let c=e.beginComputePass({timestampWrites:a});const l=Wi.createBindGroup({layout:d,entries:[{binding:0,resource:n.atlasTextureView},{binding:2,resource:{buffer:r}},{binding:3,resource:{buffer:i}},{binding:4,resource:t.normalTexture.createView()},{binding:5,resource:t.albedoTexture.createView()},{binding:7,resource:t.velocityTexture.createView()},{binding:8,resource:{buffer:s}},{binding:9,resource:{buffer:o}},{binding:10,resource:{buffer:u}},{binding:11,resource:t.worldPositionTexture.createView()},{binding:12,resource:n.paletteTextureView}]}),f=Math.ceil(Ki[0]/8),p=Math.ceil(Ki[1]/8);return c.setPipeline(h),c.setBindGroup(0,l),c.dispatchWorkgroups(f,p),c.end(),e.copyTextureToTexture({texture:t.albedoTexture},{texture:t.finalTexture},{width:t.finalTexture.width,height:t.finalTexture.height,depthOrArrayLayers:1}),[e.finish()]},label:"raymarched g-buffer"}};let l=1e-6,f=Float32Array;function d(e=0,t=0){const r=new f(2);return void 0!==e&&(r[0]=e,void 0!==t&&(r[1]=t)),r}let h=Float32Array;function p(e,t,r){const n=new h(3);return void 0!==e&&(n[0]=e,void 0!==t&&(n[1]=t,void 0!==r&&(n[2]=r))),n}const m=d;function g(e,t,r){return(r=r||new f(2))[0]=e[0]-t[0],r[1]=e[1]-t[1],r}const v=g;function x(e,t,r){return(r=r||new f(2))[0]=e[0]*t,r[1]=e[1]*t,r}const y=x;function _(e,t){return(t=t||new f(2))[0]=1/e[0],t[1]=1/e[1],t}const b=_;function w(e,t){return e[0]*t[0]+e[1]*t[1]}function T(e){const t=e[0],r=e[1];return Math.sqrt(t*t+r*r)}const k=T;function S(e){const t=e[0],r=e[1];return t*t+r*r}const P=S;function M(e,t){const r=e[0]-t[0],n=e[1]-t[1];return Math.sqrt(r*r+n*n)}const A=M;function E(e,t){const r=e[0]-t[0],n=e[1]-t[1];return r*r+n*n}const U=E;function O(e,t){return(t=t||new f(2))[0]=e[0],t[1]=e[1],t}const I=O;function C(e,t,r){return(r=r||new f(2))[0]=e[0]*t[0],r[1]=e[1]*t[1],r}const R=C;function z(e,t,r){return(r=r||new f(2))[0]=e[0]/t[0],r[1]=e[1]/t[1],r}const D=z;var B=Object.freeze({__proto__:null,create:d,setDefaultType:function(e){const t=f;return f=e,t},fromValues:m,set:function(e,t,r){return(r=r||new f(2))[0]=e,r[1]=t,r},ceil:function(e,t){return(t=t||new f(2))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(e,t){return(t=t||new f(2))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},round:function(e,t){return(t=t||new f(2))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},clamp:function(e,t=0,r=1,n){return(n=n||new f(2))[0]=Math.min(r,Math.max(t,e[0])),n[1]=Math.min(r,Math.max(t,e[1])),n},add:function(e,t,r){return(r=r||new f(2))[0]=e[0]+t[0],r[1]=e[1]+t[1],r},addScaled:function(e,t,r,n){return(n=n||new f(2))[0]=e[0]+t[0]*r,n[1]=e[1]+t[1]*r,n},angle:function(e,t){const r=e[0],n=e[1],i=e[0],s=e[1],a=Math.sqrt(r*r+n*n)*Math.sqrt(i*i+s*s),o=a&&w(e,t)/a;return Math.acos(o)},subtract:g,sub:v,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<l&&Math.abs(e[1]-t[1])<l},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]},lerp:function(e,t,r,n){return(n=n||new f(2))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n},lerpV:function(e,t,r,n){return(n=n||new f(2))[0]=e[0]+r[0]*(t[0]-e[0]),n[1]=e[1]+r[1]*(t[1]-e[1]),n},max:function(e,t,r){return(r=r||new f(2))[0]=Math.max(e[0],t[0]),r[1]=Math.max(e[1],t[1]),r},min:function(e,t,r){return(r=r||new f(2))[0]=Math.min(e[0],t[0]),r[1]=Math.min(e[1],t[1]),r},mulScalar:x,scale:y,divScalar:function(e,t,r){return(r=r||new f(2))[0]=e[0]/t,r[1]=e[1]/t,r},inverse:_,invert:b,cross:function(e,t,r){r=r||new h(3);const n=e[0]*t[1]-e[1]*t[0];return r[0]=0,r[1]=0,r[2]=n,r},dot:w,length:T,len:k,lengthSq:S,lenSq:P,distance:M,dist:A,distanceSq:E,distSq:U,normalize:function(e,t){t=t||new f(2);const r=e[0],n=e[1],i=Math.sqrt(r*r+n*n);return i>1e-5?(t[0]=r/i,t[1]=n/i):(t[0]=0,t[1]=0),t},negate:function(e,t){return(t=t||new f(2))[0]=-e[0],t[1]=-e[1],t},copy:O,clone:I,multiply:C,mul:R,divide:z,div:D,random:function(e=1,t){t=t||new f(2);const r=2*Math.random()*Math.PI;return t[0]=Math.cos(r)*e,t[1]=Math.sin(r)*e,t},zero:function(e){return(e=e||new f(2))[0]=0,e[1]=0,e},transformMat4:function(e,t,r){r=r||new f(2);const n=e[0],i=e[1];return r[0]=n*t[0]+i*t[4]+t[12],r[1]=n*t[1]+i*t[5]+t[13],r},transformMat3:function(e,t,r){r=r||new f(2);const n=e[0],i=e[1];return r[0]=t[0]*n+t[4]*i+t[8],r[1]=t[1]*n+t[5]*i+t[9],r}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);const N=p;function G(e,t,r){return(r=r||new h(3))[0]=e[0]-t[0],r[1]=e[1]-t[1],r[2]=e[2]-t[2],r}const j=G;function L(e,t,r){return(r=r||new h(3))[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r}const V=L;function q(e,t){return(t=t||new h(3))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}const F=q;function Y(e,t,r){r=r||new h(3);const n=e[2]*t[0]-e[0]*t[2],i=e[0]*t[1]-e[1]*t[0];return r[0]=e[1]*t[2]-e[2]*t[1],r[1]=n,r[2]=i,r}function H(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function W(e){const t=e[0],r=e[1],n=e[2];return Math.sqrt(t*t+r*r+n*n)}const $=W;function X(e){const t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n}const Z=X;function K(e,t){const r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(r*r+n*n+i*i)}const Q=K;function J(e,t){const r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return r*r+n*n+i*i}const ee=J;function te(e,t){t=t||new h(3);const r=e[0],n=e[1],i=e[2],s=Math.sqrt(r*r+n*n+i*i);return s>1e-5?(t[0]=r/s,t[1]=n/s,t[2]=i/s):(t[0]=0,t[1]=0,t[2]=0),t}function re(e,t){return(t=t||new h(3))[0]=e[0],t[1]=e[1],t[2]=e[2],t}const ne=re;function ie(e,t,r){return(r=r||new h(3))[0]=e[0]*t[0],r[1]=e[1]*t[1],r[2]=e[2]*t[2],r}const se=ie;function ae(e,t,r){return(r=r||new h(3))[0]=e[0]/t[0],r[1]=e[1]/t[1],r[2]=e[2]/t[2],r}const oe=ae;var ue=Object.freeze({__proto__:null,create:p,setDefaultType:function(e){const t=h;return h=e,t},fromValues:N,set:function(e,t,r,n){return(n=n||new h(3))[0]=e,n[1]=t,n[2]=r,n},ceil:function(e,t){return(t=t||new h(3))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(e,t){return(t=t||new h(3))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},round:function(e,t){return(t=t||new h(3))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},clamp:function(e,t=0,r=1,n){return(n=n||new h(3))[0]=Math.min(r,Math.max(t,e[0])),n[1]=Math.min(r,Math.max(t,e[1])),n[2]=Math.min(r,Math.max(t,e[2])),n},add:function(e,t,r){return(r=r||new h(3))[0]=e[0]+t[0],r[1]=e[1]+t[1],r[2]=e[2]+t[2],r},addScaled:function(e,t,r,n){return(n=n||new h(3))[0]=e[0]+t[0]*r,n[1]=e[1]+t[1]*r,n[2]=e[2]+t[2]*r,n},angle:function(e,t){const r=e[0],n=e[1],i=e[2],s=e[0],a=e[1],o=e[2],u=Math.sqrt(r*r+n*n+i*i)*Math.sqrt(s*s+a*a+o*o),c=u&&H(e,t)/u;return Math.acos(c)},subtract:G,sub:j,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<l&&Math.abs(e[1]-t[1])<l&&Math.abs(e[2]-t[2])<l},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},lerp:function(e,t,r,n){return(n=n||new h(3))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n[2]=e[2]+r*(t[2]-e[2]),n},lerpV:function(e,t,r,n){return(n=n||new h(3))[0]=e[0]+r[0]*(t[0]-e[0]),n[1]=e[1]+r[1]*(t[1]-e[1]),n[2]=e[2]+r[2]*(t[2]-e[2]),n},max:function(e,t,r){return(r=r||new h(3))[0]=Math.max(e[0],t[0]),r[1]=Math.max(e[1],t[1]),r[2]=Math.max(e[2],t[2]),r},min:function(e,t,r){return(r=r||new h(3))[0]=Math.min(e[0],t[0]),r[1]=Math.min(e[1],t[1]),r[2]=Math.min(e[2],t[2]),r},mulScalar:L,scale:V,divScalar:function(e,t,r){return(r=r||new h(3))[0]=e[0]/t,r[1]=e[1]/t,r[2]=e[2]/t,r},inverse:q,invert:F,cross:Y,dot:H,length:W,len:$,lengthSq:X,lenSq:Z,distance:K,dist:Q,distanceSq:J,distSq:ee,normalize:te,negate:function(e,t){return(t=t||new h(3))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},copy:re,clone:ne,multiply:ie,mul:se,divide:ae,div:oe,random:function(e=1,t){t=t||new h(3);const r=2*Math.random()*Math.PI,n=2*Math.random()-1,i=Math.sqrt(1-n*n)*e;return t[0]=Math.cos(r)*i,t[1]=Math.sin(r)*i,t[2]=n*e,t},zero:function(e){return(e=e||new h(3))[0]=0,e[1]=0,e[2]=0,e},transformMat4:function(e,t,r){r=r||new h(3);const n=e[0],i=e[1],s=e[2],a=t[3]*n+t[7]*i+t[11]*s+t[15]||1;return r[0]=(t[0]*n+t[4]*i+t[8]*s+t[12])/a,r[1]=(t[1]*n+t[5]*i+t[9]*s+t[13])/a,r[2]=(t[2]*n+t[6]*i+t[10]*s+t[14])/a,r},transformMat4Upper3x3:function(e,t,r){r=r||new h(3);const n=e[0],i=e[1],s=e[2];return r[0]=n*t[0]+i*t[4]+s*t[8],r[1]=n*t[1]+i*t[5]+s*t[9],r[2]=n*t[2]+i*t[6]+s*t[10],r},transformMat3:function(e,t,r){r=r||new h(3);const n=e[0],i=e[1],s=e[2];return r[0]=n*t[0]+i*t[4]+s*t[8],r[1]=n*t[1]+i*t[5]+s*t[9],r[2]=n*t[2]+i*t[6]+s*t[10],r},transformQuat:function(e,t,r){r=r||new h(3);const n=t[0],i=t[1],s=t[2],a=2*t[3],o=e[0],u=e[1],c=e[2],l=i*c-s*u,f=s*o-n*c,d=n*u-i*o;return r[0]=o+l*a+2*(i*d-s*f),r[1]=u+f*a+2*(s*l-n*d),r[2]=c+d*a+2*(n*f-i*l),r},getTranslation:function(e,t){return(t=t||new h(3))[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,r){const n=4*t;return(r=r||new h(3))[0]=e[n+0],r[1]=e[n+1],r[2]=e[n+2],r},getScaling:function(e,t){t=t||new h(3);const r=e[0],n=e[1],i=e[2],s=e[4],a=e[5],o=e[6],u=e[8],c=e[9],l=e[10];return t[0]=Math.sqrt(r*r+n*n+i*i),t[1]=Math.sqrt(s*s+a*a+o*o),t[2]=Math.sqrt(u*u+c*c+l*l),t}});let ce=Float32Array;function le(e,t){return(t=t||new ce(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}const fe=le;function de(e){return(e=e||new ce(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function he(e,t){t=t||new ce(16);const r=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5],u=e[6],c=e[7],l=e[8],f=e[9],d=e[10],h=e[11],p=e[12],m=e[13],g=e[14],v=e[15],x=d*v,y=g*h,_=u*v,b=g*c,w=u*h,T=d*c,k=i*v,S=g*s,P=i*h,M=d*s,A=i*c,E=u*s,U=l*m,O=p*f,I=a*m,C=p*o,R=a*f,z=l*o,D=r*m,B=p*n,N=r*f,G=l*n,j=r*o,L=a*n,V=x*o+b*f+w*m-(y*o+_*f+T*m),q=y*n+k*f+M*m-(x*n+S*f+P*m),F=_*n+S*o+A*m-(b*n+k*o+E*m),Y=T*n+P*o+E*f-(w*n+M*o+A*f),H=1/(r*V+a*q+l*F+p*Y);return t[0]=H*V,t[1]=H*q,t[2]=H*F,t[3]=H*Y,t[4]=H*(y*a+_*l+T*p-(x*a+b*l+w*p)),t[5]=H*(x*r+S*l+P*p-(y*r+k*l+M*p)),t[6]=H*(b*r+k*a+E*p-(_*r+S*a+A*p)),t[7]=H*(w*r+M*a+A*l-(T*r+P*a+E*l)),t[8]=H*(U*c+C*h+R*v-(O*c+I*h+z*v)),t[9]=H*(O*s+D*h+G*v-(U*s+B*h+N*v)),t[10]=H*(I*s+B*c+j*v-(C*s+D*c+L*v)),t[11]=H*(z*s+N*c+L*h-(R*s+G*c+j*h)),t[12]=H*(I*d+z*g+O*u-(R*g+U*u+C*d)),t[13]=H*(N*g+U*i+B*d-(D*d+G*g+O*i)),t[14]=H*(D*u+L*g+C*i-(j*g+I*i+B*u)),t[15]=H*(j*d+R*i+G*u-(N*u+L*d+z*i)),t}const pe=he;function me(e,t,r){r=r||new ce(16);const n=e[0],i=e[1],s=e[2],a=e[3],o=e[4],u=e[5],c=e[6],l=e[7],f=e[8],d=e[9],h=e[10],p=e[11],m=e[12],g=e[13],v=e[14],x=e[15],y=t[0],_=t[1],b=t[2],w=t[3],T=t[4],k=t[5],S=t[6],P=t[7],M=t[8],A=t[9],E=t[10],U=t[11],O=t[12],I=t[13],C=t[14],R=t[15];return r[0]=n*y+o*_+f*b+m*w,r[1]=i*y+u*_+d*b+g*w,r[2]=s*y+c*_+h*b+v*w,r[3]=a*y+l*_+p*b+x*w,r[4]=n*T+o*k+f*S+m*P,r[5]=i*T+u*k+d*S+g*P,r[6]=s*T+c*k+h*S+v*P,r[7]=a*T+l*k+p*S+x*P,r[8]=n*M+o*A+f*E+m*U,r[9]=i*M+u*A+d*E+g*U,r[10]=s*M+c*A+h*E+v*U,r[11]=a*M+l*A+p*E+x*U,r[12]=n*O+o*I+f*C+m*R,r[13]=i*O+u*I+d*C+g*R,r[14]=s*O+c*I+h*C+v*R,r[15]=a*O+l*I+p*C+x*R,r}const ge=me;let ve,xe,ye;function _e(e,t,r){r=r||new ce(16);let n=e[0],i=e[1],s=e[2];const a=Math.sqrt(n*n+i*i+s*s);n/=a,i/=a,s/=a;const o=n*n,u=i*i,c=s*s,l=Math.cos(t),f=Math.sin(t),d=1-l;return r[0]=o+(1-o)*l,r[1]=n*i*d+s*f,r[2]=n*s*d-i*f,r[3]=0,r[4]=n*i*d-s*f,r[5]=u+(1-u)*l,r[6]=i*s*d+n*f,r[7]=0,r[8]=n*s*d+i*f,r[9]=i*s*d-n*f,r[10]=c+(1-c)*l,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}const be=_e;function we(e,t,r,n){n=n||new ce(16);let i=t[0],s=t[1],a=t[2];const o=Math.sqrt(i*i+s*s+a*a);i/=o,s/=o,a/=o;const u=i*i,c=s*s,l=a*a,f=Math.cos(r),d=Math.sin(r),h=1-f,p=u+(1-u)*f,m=i*s*h+a*d,g=i*a*h-s*d,v=i*s*h-a*d,x=c+(1-c)*f,y=s*a*h+i*d,_=i*a*h+s*d,b=s*a*h-i*d,w=l+(1-l)*f,T=e[0],k=e[1],S=e[2],P=e[3],M=e[4],A=e[5],E=e[6],U=e[7],O=e[8],I=e[9],C=e[10],R=e[11];return n[0]=p*T+m*M+g*O,n[1]=p*k+m*A+g*I,n[2]=p*S+m*E+g*C,n[3]=p*P+m*U+g*R,n[4]=v*T+x*M+y*O,n[5]=v*k+x*A+y*I,n[6]=v*S+x*E+y*C,n[7]=v*P+x*U+y*R,n[8]=_*T+b*M+w*O,n[9]=_*k+b*A+w*I,n[10]=_*S+b*E+w*C,n[11]=_*P+b*U+w*R,e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n}const Te=we;var ke=Object.freeze({__proto__:null,setDefaultType:function(e){const t=ce;return ce=e,t},create:function(e,t,r,n,i,s,a,o,u,c,l,f,d,h,p,m){const g=new ce(16);return void 0!==e&&(g[0]=e,void 0!==t&&(g[1]=t,void 0!==r&&(g[2]=r,void 0!==n&&(g[3]=n,void 0!==i&&(g[4]=i,void 0!==s&&(g[5]=s,void 0!==a&&(g[6]=a,void 0!==o&&(g[7]=o,void 0!==u&&(g[8]=u,void 0!==c&&(g[9]=c,void 0!==l&&(g[10]=l,void 0!==f&&(g[11]=f,void 0!==d&&(g[12]=d,void 0!==h&&(g[13]=h,void 0!==p&&(g[14]=p,void 0!==m&&(g[15]=m)))))))))))))))),g},set:function(e,t,r,n,i,s,a,o,u,c,l,f,d,h,p,m,g){return(g=g||new ce(16))[0]=e,g[1]=t,g[2]=r,g[3]=n,g[4]=i,g[5]=s,g[6]=a,g[7]=o,g[8]=u,g[9]=c,g[10]=l,g[11]=f,g[12]=d,g[13]=h,g[14]=p,g[15]=m,g},fromMat3:function(e,t){return(t=t||new ce(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=0,t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=0,t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromQuat:function(e,t){t=t||new ce(16);const r=e[0],n=e[1],i=e[2],s=e[3],a=r+r,o=n+n,u=i+i,c=r*a,l=n*a,f=n*o,d=i*a,h=i*o,p=i*u,m=s*a,g=s*o,v=s*u;return t[0]=1-f-p,t[1]=l+v,t[2]=d-g,t[3]=0,t[4]=l-v,t[5]=1-c-p,t[6]=h+m,t[7]=0,t[8]=d+g,t[9]=h-m,t[10]=1-c-f,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},negate:function(e,t){return(t=t||new ce(16))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=-e[7],t[8]=-e[8],t[9]=-e[9],t[10]=-e[10],t[11]=-e[11],t[12]=-e[12],t[13]=-e[13],t[14]=-e[14],t[15]=-e[15],t},copy:le,clone:fe,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<l&&Math.abs(e[1]-t[1])<l&&Math.abs(e[2]-t[2])<l&&Math.abs(e[3]-t[3])<l&&Math.abs(e[4]-t[4])<l&&Math.abs(e[5]-t[5])<l&&Math.abs(e[6]-t[6])<l&&Math.abs(e[7]-t[7])<l&&Math.abs(e[8]-t[8])<l&&Math.abs(e[9]-t[9])<l&&Math.abs(e[10]-t[10])<l&&Math.abs(e[11]-t[11])<l&&Math.abs(e[12]-t[12])<l&&Math.abs(e[13]-t[13])<l&&Math.abs(e[14]-t[14])<l&&Math.abs(e[15]-t[15])<l},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},identity:de,transpose:function(e,t){if((t=t||new ce(16))===e){let r;return r=e[1],e[1]=e[4],e[4]=r,r=e[2],e[2]=e[8],e[8]=r,r=e[3],e[3]=e[12],e[12]=r,r=e[6],e[6]=e[9],e[9]=r,r=e[7],e[7]=e[13],e[13]=r,r=e[11],e[11]=e[14],e[14]=r,t}const r=e[0],n=e[1],i=e[2],s=e[3],a=e[4],o=e[5],u=e[6],c=e[7],l=e[8],f=e[9],d=e[10],h=e[11],p=e[12],m=e[13],g=e[14],v=e[15];return t[0]=r,t[1]=a,t[2]=l,t[3]=p,t[4]=n,t[5]=o,t[6]=f,t[7]=m,t[8]=i,t[9]=u,t[10]=d,t[11]=g,t[12]=s,t[13]=c,t[14]=h,t[15]=v,t},inverse:he,determinant:function(e){const t=e[0],r=e[1],n=e[2],i=e[3],s=e[4],a=e[5],o=e[6],u=e[7],c=e[8],l=e[9],f=e[10],d=e[11],h=e[12],p=e[13],m=e[14],g=e[15],v=f*g,x=m*d,y=o*g,_=m*u,b=o*d,w=f*u,T=n*g,k=m*i,S=n*d,P=f*i,M=n*u,A=o*i;return t*(v*a+_*l+b*p-(x*a+y*l+w*p))+s*(x*r+T*l+P*p-(v*r+k*l+S*p))+c*(y*r+k*a+M*p-(_*r+T*a+A*p))+h*(w*r+S*a+A*l-(b*r+P*a+M*l))},invert:pe,multiply:me,mul:ge,setTranslation:function(e,t,r){return e!==(r=r||de())&&(r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[8]=e[8],r[9]=e[9],r[10]=e[10],r[11]=e[11]),r[12]=t[0],r[13]=t[1],r[14]=t[2],r[15]=1,r},getTranslation:function(e,t){return(t=t||p())[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,r){const n=4*t;return(r=r||p())[0]=e[n+0],r[1]=e[n+1],r[2]=e[n+2],r},setAxis:function(e,t,r,n){n!==e&&(n=le(e,n));const i=4*r;return n[i+0]=t[0],n[i+1]=t[1],n[i+2]=t[2],n},getScaling:function(e,t){t=t||p();const r=e[0],n=e[1],i=e[2],s=e[4],a=e[5],o=e[6],u=e[8],c=e[9],l=e[10];return t[0]=Math.sqrt(r*r+n*n+i*i),t[1]=Math.sqrt(s*s+a*a+o*o),t[2]=Math.sqrt(u*u+c*c+l*l),t},perspective:function(e,t,r,n,i){i=i||new ce(16);const s=Math.tan(.5*Math.PI-.5*e);if(i[0]=s/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=s,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,n===1/0)i[10]=-1,i[14]=-r;else{const e=1/(r-n);i[10]=n*e,i[14]=n*r*e}return i},ortho:function(e,t,r,n,i,s,a){return(a=a||new ce(16))[0]=2/(t-e),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(n-r),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(i-s),a[11]=0,a[12]=(t+e)/(e-t),a[13]=(n+r)/(r-n),a[14]=i/(i-s),a[15]=1,a},frustum:function(e,t,r,n,i,s,a){const o=t-e,u=n-r,c=i-s;return(a=a||new ce(16))[0]=2*i/o,a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2*i/u,a[6]=0,a[7]=0,a[8]=(e+t)/o,a[9]=(n+r)/u,a[10]=s/c,a[11]=-1,a[12]=0,a[13]=0,a[14]=i*s/c,a[15]=0,a},aim:function(e,t,r,n){return n=n||new ce(16),ve=ve||p(),xe=xe||p(),ye=ye||p(),te(G(t,e,ye),ye),te(Y(r,ye,ve),ve),te(Y(ye,ve,xe),xe),n[0]=ve[0],n[1]=ve[1],n[2]=ve[2],n[3]=0,n[4]=xe[0],n[5]=xe[1],n[6]=xe[2],n[7]=0,n[8]=ye[0],n[9]=ye[1],n[10]=ye[2],n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n},cameraAim:function(e,t,r,n){return n=n||new ce(16),ve=ve||p(),xe=xe||p(),ye=ye||p(),te(G(e,t,ye),ye),te(Y(r,ye,ve),ve),te(Y(ye,ve,xe),xe),n[0]=ve[0],n[1]=ve[1],n[2]=ve[2],n[3]=0,n[4]=xe[0],n[5]=xe[1],n[6]=xe[2],n[7]=0,n[8]=ye[0],n[9]=ye[1],n[10]=ye[2],n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n},lookAt:function(e,t,r,n){return n=n||new ce(16),ve=ve||p(),xe=xe||p(),ye=ye||p(),te(G(e,t,ye),ye),te(Y(r,ye,ve),ve),te(Y(ye,ve,xe),xe),n[0]=ve[0],n[1]=xe[0],n[2]=ye[0],n[3]=0,n[4]=ve[1],n[5]=xe[1],n[6]=ye[1],n[7]=0,n[8]=ve[2],n[9]=xe[2],n[10]=ye[2],n[11]=0,n[12]=-(ve[0]*e[0]+ve[1]*e[1]+ve[2]*e[2]),n[13]=-(xe[0]*e[0]+xe[1]*e[1]+xe[2]*e[2]),n[14]=-(ye[0]*e[0]+ye[1]*e[1]+ye[2]*e[2]),n[15]=1,n},translation:function(e,t){return(t=t||new ce(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},translate:function(e,t,r){r=r||new ce(16);const n=t[0],i=t[1],s=t[2],a=e[0],o=e[1],u=e[2],c=e[3],l=e[4],f=e[5],d=e[6],h=e[7],p=e[8],m=e[9],g=e[10],v=e[11],x=e[12],y=e[13],_=e[14],b=e[15];return e!==r&&(r[0]=a,r[1]=o,r[2]=u,r[3]=c,r[4]=l,r[5]=f,r[6]=d,r[7]=h,r[8]=p,r[9]=m,r[10]=g,r[11]=v),r[12]=a*n+l*i+p*s+x,r[13]=o*n+f*i+m*s+y,r[14]=u*n+d*i+g*s+_,r[15]=c*n+h*i+v*s+b,r},rotationX:function(e,t){t=t||new ce(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateX:function(e,t,r){r=r||new ce(16);const n=e[4],i=e[5],s=e[6],a=e[7],o=e[8],u=e[9],c=e[10],l=e[11],f=Math.cos(t),d=Math.sin(t);return r[4]=f*n+d*o,r[5]=f*i+d*u,r[6]=f*s+d*c,r[7]=f*a+d*l,r[8]=f*o-d*n,r[9]=f*u-d*i,r[10]=f*c-d*s,r[11]=f*l-d*a,e!==r&&(r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},rotationY:function(e,t){t=t||new ce(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateY:function(e,t,r){r=r||new ce(16);const n=e[0],i=e[1],s=e[2],a=e[3],o=e[8],u=e[9],c=e[10],l=e[11],f=Math.cos(t),d=Math.sin(t);return r[0]=f*n-d*o,r[1]=f*i-d*u,r[2]=f*s-d*c,r[3]=f*a-d*l,r[8]=f*o+d*n,r[9]=f*u+d*i,r[10]=f*c+d*s,r[11]=f*l+d*a,e!==r&&(r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},rotationZ:function(e,t){t=t||new ce(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateZ:function(e,t,r){r=r||new ce(16);const n=e[0],i=e[1],s=e[2],a=e[3],o=e[4],u=e[5],c=e[6],l=e[7],f=Math.cos(t),d=Math.sin(t);return r[0]=f*n+d*o,r[1]=f*i+d*u,r[2]=f*s+d*c,r[3]=f*a+d*l,r[4]=f*o-d*n,r[5]=f*u-d*i,r[6]=f*c-d*s,r[7]=f*l-d*a,e!==r&&(r[8]=e[8],r[9]=e[9],r[10]=e[10],r[11]=e[11],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},axisRotation:_e,rotation:be,axisRotate:we,rotate:Te,scaling:function(e,t){return(t=t||new ce(16))[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},scale:function(e,t,r){r=r||new ce(16);const n=t[0],i=t[1],s=t[2];return r[0]=n*e[0],r[1]=n*e[1],r[2]=n*e[2],r[3]=n*e[3],r[4]=i*e[4],r[5]=i*e[5],r[6]=i*e[6],r[7]=i*e[7],r[8]=s*e[8],r[9]=s*e[9],r[10]=s*e[10],r[11]=s*e[11],e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},uniformScaling:function(e,t){return(t=t||new ce(16))[0]=e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},uniformScale:function(e,t,r){return(r=r||new ce(16))[0]=t*e[0],r[1]=t*e[1],r[2]=t*e[2],r[3]=t*e[3],r[4]=t*e[4],r[5]=t*e[5],r[6]=t*e[6],r[7]=t*e[7],r[8]=t*e[8],r[9]=t*e[9],r[10]=t*e[10],r[11]=t*e[11],e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r}});let Se=Float32Array;function Pe(e,t,r,n){const i=new Se(4);return void 0!==e&&(i[0]=e,void 0!==t&&(i[1]=t,void 0!==r&&(i[2]=r,void 0!==n&&(i[3]=n)))),i}const Me=Pe;function Ae(e,t,r){r=r||new Se(4);const n=.5*t,i=Math.sin(n);return r[0]=i*e[0],r[1]=i*e[1],r[2]=i*e[2],r[3]=Math.cos(n),r}function Ee(e,t,r){r=r||new Se(4);const n=e[0],i=e[1],s=e[2],a=e[3],o=t[0],u=t[1],c=t[2],l=t[3];return r[0]=n*l+a*o+i*c-s*u,r[1]=i*l+a*u+s*o-n*c,r[2]=s*l+a*c+n*u-i*o,r[3]=a*l-n*o-i*u-s*c,r}const Ue=Ee;function Oe(e,t,r,n){n=n||new Se(4);const i=e[0],s=e[1],a=e[2],o=e[3];let u,c,f=t[0],d=t[1],h=t[2],p=t[3],m=i*f+s*d+a*h+o*p;if(m<0&&(m=-m,f=-f,d=-d,h=-h,p=-p),1-m>l){const e=Math.acos(m),t=Math.sin(e);u=Math.sin((1-r)*e)/t,c=Math.sin(r*e)/t}else u=1-r,c=r;return n[0]=u*i+c*f,n[1]=u*s+c*d,n[2]=u*a+c*h,n[3]=u*o+c*p,n}function Ie(e,t){return(t=t||new Se(4))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}const Ce=Ie;function Re(e,t,r){return(r=r||new Se(4))[0]=e[0]-t[0],r[1]=e[1]-t[1],r[2]=e[2]-t[2],r[3]=e[3]-t[3],r}const ze=Re;function De(e,t,r){return(r=r||new Se(4))[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r[3]=e[3]*t,r}const Be=De;function Ne(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function Ge(e){const t=e[0],r=e[1],n=e[2],i=e[3];return Math.sqrt(t*t+r*r+n*n+i*i)}const je=Ge;function Le(e){const t=e[0],r=e[1],n=e[2],i=e[3];return t*t+r*r+n*n+i*i}const Ve=Le;function qe(e,t){t=t||new Se(4);const r=e[0],n=e[1],i=e[2],s=e[3],a=Math.sqrt(r*r+n*n+i*i+s*s);return a>1e-5?(t[0]=r/a,t[1]=n/a,t[2]=i/a,t[3]=s/a):(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}let Fe,Ye,He,We,$e;var Xe,Ze=Object.freeze({__proto__:null,create:Pe,setDefaultType:function(e){const t=Se;return Se=e,t},fromValues:Me,set:function(e,t,r,n,i){return(i=i||new Se(4))[0]=e,i[1]=t,i[2]=r,i[3]=n,i},fromAxisAngle:Ae,toAxisAngle:function(e,t){t=t||p(4);const r=2*Math.acos(e[3]),n=Math.sin(.5*r);return n>l?(t[0]=e[0]/n,t[1]=e[1]/n,t[2]=e[2]/n):(t[0]=1,t[1]=0,t[2]=0),{angle:r,axis:t}},angle:function(e,t){const r=Ne(e,t);return Math.acos(2*r*r-1)},multiply:Ee,mul:Ue,rotateX:function(e,t,r){r=r||new Se(4);const n=.5*t,i=e[0],s=e[1],a=e[2],o=e[3],u=Math.sin(n),c=Math.cos(n);return r[0]=i*c+o*u,r[1]=s*c+a*u,r[2]=a*c-s*u,r[3]=o*c-i*u,r},rotateY:function(e,t,r){r=r||new Se(4);const n=.5*t,i=e[0],s=e[1],a=e[2],o=e[3],u=Math.sin(n),c=Math.cos(n);return r[0]=i*c-a*u,r[1]=s*c+o*u,r[2]=a*c+i*u,r[3]=o*c-s*u,r},rotateZ:function(e,t,r){r=r||new Se(4);const n=.5*t,i=e[0],s=e[1],a=e[2],o=e[3],u=Math.sin(n),c=Math.cos(n);return r[0]=i*c+s*u,r[1]=s*c-i*u,r[2]=a*c+o*u,r[3]=o*c-a*u,r},slerp:Oe,inverse:function(e,t){t=t||new Se(4);const r=e[0],n=e[1],i=e[2],s=e[3],a=r*r+n*n+i*i+s*s,o=a?1/a:0;return t[0]=-r*o,t[1]=-n*o,t[2]=-i*o,t[3]=s*o,t},conjugate:function(e,t){return(t=t||new Se(4))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t},fromMat:function(e,t){t=t||new Se(4);const r=e[0]+e[5]+e[10];if(r>0){const n=Math.sqrt(r+1);t[3]=.5*n;const i=.5/n;t[0]=(e[6]-e[9])*i,t[1]=(e[8]-e[2])*i,t[2]=(e[1]-e[4])*i}else{let r=0;e[5]>e[0]&&(r=1),e[10]>e[4*r+r]&&(r=2);const n=(r+1)%3,i=(r+2)%3,s=Math.sqrt(e[4*r+r]-e[4*n+n]-e[4*i+i]+1);t[r]=.5*s;const a=.5/s;t[3]=(e[4*n+i]-e[4*i+n])*a,t[n]=(e[4*n+r]+e[4*r+n])*a,t[i]=(e[4*i+r]+e[4*r+i])*a}return t},fromEuler:function(e,t,r,n,i){i=i||new Se(4);const s=.5*e,a=.5*t,o=.5*r,u=Math.sin(s),c=Math.cos(s),l=Math.sin(a),f=Math.cos(a),d=Math.sin(o),h=Math.cos(o);switch(n){case"xyz":i[0]=u*f*h+c*l*d,i[1]=c*l*h-u*f*d,i[2]=c*f*d+u*l*h,i[3]=c*f*h-u*l*d;break;case"xzy":i[0]=u*f*h-c*l*d,i[1]=c*l*h-u*f*d,i[2]=c*f*d+u*l*h,i[3]=c*f*h+u*l*d;break;case"yxz":i[0]=u*f*h+c*l*d,i[1]=c*l*h-u*f*d,i[2]=c*f*d-u*l*h,i[3]=c*f*h+u*l*d;break;case"yzx":i[0]=u*f*h+c*l*d,i[1]=c*l*h+u*f*d,i[2]=c*f*d-u*l*h,i[3]=c*f*h-u*l*d;break;case"zxy":i[0]=u*f*h-c*l*d,i[1]=c*l*h+u*f*d,i[2]=c*f*d+u*l*h,i[3]=c*f*h-u*l*d;break;case"zyx":i[0]=u*f*h-c*l*d,i[1]=c*l*h+u*f*d,i[2]=c*f*d-u*l*h,i[3]=c*f*h+u*l*d;break;default:throw new Error(`Unknown rotation order: ${n}`)}return i},copy:Ie,clone:Ce,add:function(e,t,r){return(r=r||new Se(4))[0]=e[0]+t[0],r[1]=e[1]+t[1],r[2]=e[2]+t[2],r[3]=e[3]+t[3],r},subtract:Re,sub:ze,mulScalar:De,scale:Be,divScalar:function(e,t,r){return(r=r||new Se(4))[0]=e[0]/t,r[1]=e[1]/t,r[2]=e[2]/t,r[3]=e[3]/t,r},dot:Ne,lerp:function(e,t,r,n){return(n=n||new Se(4))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n[2]=e[2]+r*(t[2]-e[2]),n[3]=e[3]+r*(t[3]-e[3]),n},length:Ge,len:je,lengthSq:Le,lenSq:Ve,normalize:qe,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<l&&Math.abs(e[1]-t[1])<l&&Math.abs(e[2]-t[2])<l&&Math.abs(e[3]-t[3])<l},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},identity:function(e){return(e=e||new Se(4))[0]=0,e[1]=0,e[2]=0,e[3]=1,e},rotationTo:function(e,t,r){r=r||new Se(4),Fe=Fe||p(),Ye=Ye||p(1,0,0),He=He||p(0,1,0);const n=H(e,t);return n<-.999999?(Y(Ye,e,Fe),$(Fe)<1e-6&&Y(He,e,Fe),te(Fe,Fe),Ae(Fe,Math.PI,r),r):n>.999999?(r[0]=0,r[1]=0,r[2]=0,r[3]=1,r):(Y(e,t,Fe),r[0]=Fe[0],r[1]=Fe[1],r[2]=Fe[2],r[3]=1+n,qe(r,r))},sqlerp:function(e,t,r,n,i,s){return s=s||new Se(4),We=We||new Se(4),$e=$e||new Se(4),Oe(e,n,i,We),Oe(t,r,i,$e),Oe(We,$e,2*i*(1-i),s),s}});Float32Array,function(e){const t=[];e.updateAll=()=>{for(const e of t)e.update()},e.register=e=>class extends e{constructor(...e){super(...e),t.push(this)}}}(Xe||(Xe={}));const Ke={duration:.3,delay:0,endDelay:0,repeat:0,easing:"ease"},Qe=e=>1e3*e,Je=e=>e/1e3,et=()=>{},tt=e=>e;function rt(e,t=!0){if(e&&"finished"!==e.playState)try{e.stop?e.stop():(t&&e.commitStyles(),e.cancel())}catch(e){}}const nt=e=>e(),it=(e,t,r=Ke.duration)=>new Proxy({animations:e.map(nt).filter(Boolean),duration:r,options:t},st),st={get:(e,t)=>{const r=e.animations[0];switch(t){case"duration":return e.duration;case"currentTime":return Je((null==r?void 0:r[t])||0);case"playbackRate":case"playState":return null==r?void 0:r[t];case"finished":return e.finished||(e.finished=Promise.all(e.animations.map(at)).catch(et)),e.finished;case"stop":return()=>{e.animations.forEach((e=>rt(e)))};case"forEachNative":return t=>{e.animations.forEach((r=>t(r,e)))};default:return void 0===(null==r?void 0:r[t])?void 0:()=>e.animations.forEach((e=>e[t]()))}},set:(e,t,r)=>{switch(t){case"currentTime":r=Qe(r);case"playbackRate":for(let n=0;n<e.animations.length;n++)e.animations[n][t]=r;return!0}return!1}},at=e=>e.finished,ot=e=>"object"==typeof e&&Boolean(e.createAnimation),ut=e=>"number"==typeof e,ct=e=>Array.isArray(e)&&!ut(e[0]),lt=(e,t,r)=>-r*e+r*t+e,ft=(e,t,r)=>t-e==0?1:(r-e)/(t-e);function dt(e,t){const r=e[e.length-1];for(let n=1;n<=t;n++){const i=ft(0,t,n);e.push(lt(r,1,i))}}const ht=(e,t,r)=>Math.min(Math.max(r,e),t);const pt=(e,t,r)=>(((1-3*r+3*t)*e+(3*r-6*t))*e+3*t)*e,mt=1e-7,gt=12;function vt(e,t,r,n){if(e===t&&r===n)return tt;return i=>0===i||1===i?i:pt(function(e,t,r,n,i){let s,a,o=0;do{a=t+(r-t)/2,s=pt(a,n,i)-e,s>0?r=a:t=a}while(Math.abs(s)>mt&&++o<gt);return a}(i,0,1,e,r),t,n)}const xt=e=>"function"==typeof e,yt=e=>Array.isArray(e)&&ut(e[0]),_t={ease:vt(.25,.1,.25,1),"ease-in":vt(.42,0,1,1),"ease-in-out":vt(.42,0,.58,1),"ease-out":vt(0,0,.58,1)},bt=/\((.*?)\)/;function wt(e){if(xt(e))return e;if(yt(e))return vt(...e);if(_t[e])return _t[e];if(e.startsWith("steps")){const t=bt.exec(e);if(t){const e=t[1].split(",");return((e,t="end")=>r=>{const n=(r="end"===t?Math.min(r,.999):Math.max(r,.001))*e,i="end"===t?Math.floor(n):Math.ceil(n);return ht(0,1,i/e)})(parseFloat(e[0]),e[1].trim())}}return tt}class Tt{constructor(e,t=[0,1],{easing:r,duration:n=Ke.duration,delay:i=Ke.delay,endDelay:s=Ke.endDelay,repeat:a=Ke.repeat,offset:o,direction:u="normal",autoplay:c=!0}={}){if(this.startTime=null,this.rate=1,this.t=0,this.cancelTimestamp=null,this.easing=tt,this.duration=0,this.totalDuration=0,this.repeat=0,this.playState="idle",this.finished=new Promise(((e,t)=>{this.resolve=e,this.reject=t})),r=r||Ke.easing,ot(r)){const e=r.createAnimation(t);r=e.easing,t=e.keyframes||t,n=e.duration||n}this.repeat=a,this.easing=ct(r)?tt:wt(r),this.updateDuration(n);const l=function(e,t=function(e){const t=[0];return dt(t,e-1),t}(e.length),r=tt){const n=e.length,i=n-t.length;return i>0&&dt(t,i),i=>{let s=0;for(;s<n-2&&!(i<t[s+1]);s++);let a=ht(0,1,ft(t[s],t[s+1],i));const o=function(e,t){return ct(e)?e[((e,t,r)=>{const n=t-e;return((r-e)%n+n)%n+e})(0,e.length,t)]:e}(r,s);return a=o(a),lt(e[s],e[s+1],a)}}(t,o,ct(r)?r.map(wt):tt);this.tick=t=>{var r;let n=0;n=void 0!==this.pauseTime?this.pauseTime:(t-this.startTime)*this.rate,this.t=n,n/=1e3,n=Math.max(n-i,0),"finished"===this.playState&&void 0===this.pauseTime&&(n=this.totalDuration);const a=n/this.duration;let o=Math.floor(a),c=a%1;!c&&a>=1&&(c=1),1===c&&o--;const f=o%2;("reverse"===u||"alternate"===u&&f||"alternate-reverse"===u&&!f)&&(c=1-c);const d=n>=this.totalDuration?1:Math.min(c,1),h=l(this.easing(d));e(h),void 0===this.pauseTime&&("finished"===this.playState||n>=this.totalDuration+s)?(this.playState="finished",null===(r=this.resolve)||void 0===r||r.call(this,h)):"idle"!==this.playState&&(this.frameRequestId=requestAnimationFrame(this.tick))},c&&this.play()}play(){const e=performance.now();this.playState="running",void 0!==this.pauseTime?this.startTime=e-this.pauseTime:this.startTime||(this.startTime=e),this.cancelTimestamp=this.startTime,this.pauseTime=void 0,this.frameRequestId=requestAnimationFrame(this.tick)}pause(){this.playState="paused",this.pauseTime=this.t}finish(){this.playState="finished",this.tick(0)}stop(){var e;this.playState="idle",void 0!==this.frameRequestId&&cancelAnimationFrame(this.frameRequestId),null===(e=this.reject)||void 0===e||e.call(this,!1)}cancel(){this.stop(),this.tick(this.cancelTimestamp)}reverse(){this.rate*=-1}commitStyles(){}updateDuration(e){this.duration=e,this.totalDuration=e*(this.repeat+1)}get currentTime(){return this.t}set currentTime(e){void 0!==this.pauseTime||0===this.rate?this.pauseTime=e:this.startTime=performance.now()-e/this.rate}get playbackRate(){return this.rate}set playbackRate(e){this.rate=e}}class kt{setAnimation(e){this.animation=e,null==e||e.finished.then((()=>this.clearAnimation())).catch((()=>{}))}clearAnimation(){this.animation=this.generator=void 0}}const St=new WeakMap;function Pt(e){return St.has(e)||St.set(e,{transforms:[],values:new Map}),St.get(e)}const Mt=["","X","Y","Z"],At={x:"translateX",y:"translateY",z:"translateZ"},Et={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:e=>e+"deg"},Ut={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:e=>e+"px"},rotate:Et,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:tt},skew:Et},Ot=new Map,It=e=>`--motion-${e}`,Ct=["x","y","z"];["translate","scale","rotate","skew"].forEach((e=>{Mt.forEach((t=>{Ct.push(e+t),Ot.set(It(e+t),Ut[e])}))}));const Rt=(e,t)=>Ct.indexOf(e)-Ct.indexOf(t),zt=new Set(Ct),Dt=e=>zt.has(e),Bt=e=>e.sort(Rt).reduce(Nt,"").trim(),Nt=(e,t)=>`${e} ${t}(var(${It(t)}))`,Gt=e=>e.startsWith("--"),jt=new Set,Lt=(e,t)=>document.createElement("div").animate(e,t),Vt={cssRegisterProperty:()=>"undefined"!=typeof CSS&&Object.hasOwnProperty.call(CSS,"registerProperty"),waapi:()=>Object.hasOwnProperty.call(Element.prototype,"animate"),partialKeyframes:()=>{try{Lt({opacity:[1]})}catch(e){return!1}return!0},finished:()=>Boolean(Lt({opacity:[0,1]},{duration:.001}).finished),linearEasing:()=>{try{Lt({opacity:0},{easing:"linear(0, 1)"})}catch(e){return!1}return!0}},qt={},Ft={};for(const e in Vt)Ft[e]=()=>(void 0===qt[e]&&(qt[e]=Vt[e]()),qt[e]);const Yt=(e,t)=>xt(e)?Ft.linearEasing()?`linear(${((e,t)=>{let r="";const n=Math.round(t/.015);for(let t=0;t<n;t++)r+=e(ft(0,n-1,t))+", ";return r.substring(0,r.length-2)})(e,t)})`:Ke.easing:yt(e)?Ht(e):e,Ht=([e,t,r,n])=>`cubic-bezier(${e}, ${t}, ${r}, ${n})`;function Wt(e){return At[e]&&(e=At[e]),Dt(e)?It(e):e}const $t=(e,t)=>{t=Wt(t);let r=Gt(t)?e.style.getPropertyValue(t):getComputedStyle(e)[t];if(!r&&0!==r){const e=Ot.get(t);e&&(r=e.initialValue)}return r},Xt=(e,t,r)=>{t=Wt(t),Gt(t)?e.style.setProperty(t,r):e.style[t]=r},Zt=e=>"string"==typeof e;function Kt(e,t){var r;let n=(null==t?void 0:t.toDefaultUnit)||tt;const i=e[e.length-1];if(Zt(i)){const e=(null===(r=i.match(/(-?[\d.]+)([a-z%]*)/))||void 0===r?void 0:r[2])||"";e&&(n=t=>t+e)}return n}function Qt(e,t,r,n={},i){const s=window.__MOTION_DEV_TOOLS_RECORD,a=!1!==n.record&&s;let o,{duration:u=Ke.duration,delay:c=Ke.delay,endDelay:l=Ke.endDelay,repeat:f=Ke.repeat,easing:d=Ke.easing,persist:h=!1,direction:p,offset:m,allowWebkitAcceleration:g=!1,autoplay:v=!0}=n;const x=Pt(e),y=Dt(t);let _=Ft.waapi();y&&((e,t)=>{At[t]&&(t=At[t]);const{transforms:r}=Pt(e);var n,i;i=t,-1===(n=r).indexOf(i)&&n.push(i),e.style.transform=Bt(r)})(e,t);const b=Wt(t),w=function(e,t){return e.has(t)||e.set(t,new kt),e.get(t)}(x.values,b),T=Ot.get(b);return rt(w.animation,!(ot(d)&&w.generator)&&!1!==n.record),()=>{const x=()=>{var t,r;return null!==(r=null!==(t=$t(e,b))&&void 0!==t?t:null==T?void 0:T.initialValue)&&void 0!==r?r:0};let k=function(e,t){for(let r=0;r<e.length;r++)null===e[r]&&(e[r]=r?e[r-1]:t());return e}((e=>Array.isArray(e)?e:[e])(r),x);const S=Kt(k,T);if(ot(d)){const e=d.createAnimation(k,"opacity"!==t,x,b,w);d=e.easing,k=e.keyframes||k,u=e.duration||u}if(Gt(b)&&(Ft.cssRegisterProperty()?function(e){if(!jt.has(e)){jt.add(e);try{const{syntax:t,initialValue:r}=Ot.has(e)?Ot.get(e):{};CSS.registerProperty({name:e,inherits:!1,syntax:t,initialValue:r})}catch(e){}}}(b):_=!1),y&&!Ft.linearEasing()&&(xt(d)||ct(d)&&d.some(xt))&&(_=!1),_){T&&(k=k.map((e=>ut(e)?T.toDefaultUnit(e):e))),1!==k.length||Ft.partialKeyframes()&&!a||k.unshift(x());const t={delay:Qe(c),duration:Qe(u),endDelay:Qe(l),easing:ct(d)?void 0:Yt(d,u),direction:p,iterations:f+1,fill:"both"};o=e.animate({[b]:k,offset:m,easing:ct(d)?d.map((e=>Yt(e,u))):void 0},t),o.finished||(o.finished=new Promise(((e,t)=>{o.onfinish=e,o.oncancel=t})));const r=k[k.length-1];o.finished.then((()=>{h||(Xt(e,b,r),o.cancel())})).catch(et),g||(o.playbackRate=1.000001)}else if(i&&y)k=k.map((e=>"string"==typeof e?parseFloat(e):e)),1===k.length&&k.unshift(parseFloat(x())),o=new i((t=>{Xt(e,b,S?S(t):t)}),k,Object.assign(Object.assign({},n),{duration:u,easing:d}));else{const t=k[k.length-1];Xt(e,b,T&&ut(t)?T.toDefaultUnit(t):t)}return a&&s(e,t,k,{duration:u,delay:c,easing:d,repeat:f,offset:m},"motion-one"),w.setAnimation(o),o&&!v&&o.pause(),o}}const Jt=(e,t)=>e[t]?Object.assign(Object.assign({},e),e[t]):Object.assign({},e);function er(e,t,r){return xt(e)?e(t,r):e}const tr=(rr=Tt,function(e,t,r={}){const n=(e=function(e,t){return"string"==typeof e?e=document.querySelectorAll(e):e instanceof Element&&(e=[e]),Array.from(e||[])}(e)).length;Boolean(n),Boolean(t);const i=[];for(let s=0;s<n;s++){const a=e[s];for(const e in t){const o=Jt(r,e);o.delay=er(o.delay,s,n);const u=Qt(a,e,t[e],o,rr);i.push(u)}}return it(i,r,r.duration)});var rr;function nr(e,t={}){return it([()=>{const r=new Tt(e,[0,1],t);return r.finished.catch((()=>{})),r}],t,t.duration)}function ir(e,t,r){return(xt(e)?nr:tr)(e,t,r)}function sr(e,t,r){const n=Math.max(t-5,0);return i=r-e(n),(s=t-n)?i*(1e3/s):0;var i,s}function ar(e){return ut(e)&&!isNaN(e)}function or(e){return Zt(e)?parseFloat(e):e}const ur=function(e){const t=new WeakMap;return(e={})=>{const r=new Map,n=(t=0,n=100,i=0,s=!1)=>{const a=`${t}-${n}-${i}-${s}`;return r.has(a)||r.set(a,(({from:e=0,velocity:t=0,power:r=.8,decay:n=.325,bounceDamping:i,bounceStiffness:s,changeTarget:a,min:o,max:u,restDistance:c=.5,restSpeed:l})=>{n=Qe(n);const f={hasReachedTarget:!1,done:!1,current:e,target:e},d=e=>void 0===o?u:void 0===u||Math.abs(o-e)<Math.abs(u-e)?o:u;let h=r*t;const p=e+h,m=void 0===a?p:a(p);f.target=m,m!==p&&(h=m-e);const g=e=>-h*Math.exp(-e/n),v=e=>m+g(e),x=e=>{const t=g(e),r=v(e);f.done=Math.abs(t)<=c,f.current=f.done?m:r};let y,_;const b=e=>{var t;t=f.current,(void 0!==o&&t<o||void 0!==u&&t>u)&&(y=e,_=(({stiffness:e=100,damping:t=10,mass:r=1,from:n=0,to:i=1,velocity:s=0,restSpeed:a,restDistance:o}={})=>{s=s?Je(s):0;const u={done:!1,hasReachedTarget:!1,current:n,target:i},c=i-n,l=Math.sqrt(e/r)/1e3,f=((e=100,t=10,r=1)=>t/(2*Math.sqrt(e*r)))(e,t,r),d=Math.abs(c)<5;let h;if(a||(a=d?.01:2),o||(o=d?.005:.5),f<1){const e=l*Math.sqrt(1-f*f);h=t=>i-Math.exp(-f*l*t)*((f*l*c-s)/e*Math.sin(e*t)+c*Math.cos(e*t))}else h=e=>i-Math.exp(-l*e)*(c+(l*c-s)*e);return e=>{u.current=h(e);const t=0===e?s:sr(h,e,u.current),r=Math.abs(t)<=a,c=Math.abs(i-u.current)<=o;var l,f,d;return u.done=r&&c,u.hasReachedTarget=(l=n,f=i,d=u.current,l<f&&d>=f||l>f&&d<=f),u}})({from:f.current,to:d(f.current),velocity:sr(v,e,f.current),damping:i,stiffness:s,restDistance:c,restSpeed:l}))};return b(0),e=>{let t=!1;return _||void 0!==y||(t=!0,x(e),b(e)),void 0!==y&&e>y?(f.hasReachedTarget=!0,_(e-y)):(f.hasReachedTarget=!1,!t&&x(e),f)}})(Object.assign({from:t,to:n,velocity:i},e))),r.get(a)},i=(e,r)=>(t.has(e)||t.set(e,function(e,t=tt){let r,n=10,i=e(0);const s=[t(i.current)];for(;!i.done&&n<1e4;)i=e(n),s.push(t(i.done?i.target:i.current)),void 0===r&&i.hasReachedTarget&&(r=n),n+=10;const a=n-10;return 1===s.length&&s.push(i.current),{keyframes:s,duration:a/1e3,overshootDuration:(null!=r?r:a)/1e3}}(e,r)),t.get(e));return{createAnimation:(e,t=!0,r,s,a)=>{let o,u,c,l=0,f=tt;const d=e.length;if(t)if(f=Kt(e,s?Ot.get(Wt(s)):void 0),c=or(e[d-1]),d>1&&null!==e[0])u=or(e[0]);else{const e=null==a?void 0:a.generator;if(e){const{animation:t,generatorStartTime:r}=a,n=(null==t?void 0:t.startTime)||r||0,i=(null==t?void 0:t.currentTime)||performance.now()-n,s=e(i).current;u=s,l=sr((t=>e(t).current),i,s)}else r&&(u=or(r()))}if(ar(u)&&ar(c)){const e=n(u,c,l,null==s?void 0:s.includes("scale"));o=Object.assign(Object.assign({},i(e,f)),{easing:"linear"}),a&&(a.generator=e,a.generatorStartTime=performance.now())}return o||(o={easing:"ease",duration:i(n(0,100)).overshootDuration}),o}}}}();var cr=function(e,t,r,n){var i,s=arguments.length,a=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var o=e.length-1;o>=0;o--)(i=e[o])&&(a=(s<3?i(a):s>3?i(t,r,a):i(t,r))||a);return s>3&&a&&Object.defineProperty(t,r,a),a};let lr=class{value;target;constructor(e){this.value=e,this.target=e}update(){ir((e=>{this.value=ue.lerp(this.value,this.target,e)}),{easing:ur({velocity:2e-4*es})})}};lr=cr([Xe.register],lr);let fr=class{value;target;constructor(e){this.value=e,this.target=e}update(){ir((e=>{this.value=this.value+(this.target-this.value)*e}),{easing:ur({velocity:2e-4*es})})}};fr=cr([Xe.register],fr);let dr=class{value;target;constructor(e){this.value=e,this.target=e}update(){ir((e=>{this.value=Ze.slerp(this.value,this.target,e)}),{easing:ur({velocity:2e-4*es})})}};dr=cr([Xe.register],dr);class hr{#e;#t;#r;#n;constructor(e){this.#e=new lr(e.position),this.#t=new dr(e.rotation),this.#r=new lr(e.scale??ue.create(1,1,1)),this.#n=this.transform}get transform(){let e=ke.identity();return ke.translate(e,this.#e.value,e),ke.scale(e,this.#r.value,e),ke.multiply(e,ke.fromQuat(this.#t.value),e),e}get previousTransform(){return this.#n}get inverseTransform(){return ke.invert(this.transform)}get previousInverseTransform(){return ke.invert(this.#n)}set targetPosition(e){this.#e.target=e}get targetPosition(){return this.#e.target}set targetRotation(e){this.#t.target=e}get targetRotation(){return this.#t.target}get direction(){return ue.transformQuat(ue.create(0,0,1),this.#t.value)}get right(){return ue.transformQuat(ue.create(1,0,0),this.#t.value)}get left(){return ue.transformQuat(ue.create(-1,0,0),this.#t.value)}get up(){return ue.transformQuat(ue.create(0,1,0),this.#t.value)}get down(){return ue.transformQuat(ue.create(0,-1,0),this.#t.value)}get viewMatrix(){const e=this.#e.value;return ke.lookAt(e,ue.add(e,this.direction),this.up)}get inverseViewMatrix(){return ke.invert(this.viewMatrix)}}const pr=new class{pressed={w:!1,a:!1,s:!1,d:!1,q:!1,e:!1," ":!1,shift:!1};constructor(){window.addEventListener("keydown",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!0})),window.addEventListener("keyup",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!1})),window.addEventListener("blur",(()=>{Object.keys(this.pressed).forEach((e=>{this.pressed[e]=!1}))}))}};let mr=class extends hr{fieldOfView;near=.5;far=1e4;constructor(e){super({position:e.position,rotation:Ze.fromMat(ke.lookAt(ue.create(),e.direction,ue.create(0,1,0)))}),this.fieldOfView=e.fieldOfView}get projectionMatrix(){return ke.perspective(this.fieldOfView,Ki[0]/Ki[1],this.near,this.far)}get inverseProjectionMatrix(){return ke.invert(this.projectionMatrix)}get viewProjectionMatrix(){return ke.mul(this.projectionMatrix,this.viewMatrix)}get inverseViewProjectionMatrix(){return ke.invert(this.viewProjectionMatrix)}update(){const e=.005*es,t=.04*es;let r=ue.zero();pr.pressed.a&&(r=ue.add(r,rs.left)),pr.pressed.d&&(r=ue.add(r,rs.right)),pr.pressed.w&&(r=ue.add(r,rs.direction)),pr.pressed.s&&(r=ue.subtract(r,rs.direction)),pr.pressed.e&&(rs.targetRotation=Ze.rotateY(rs.targetRotation,e)),pr.pressed.q&&(rs.targetRotation=Ze.rotateY(rs.targetRotation,-e)),pr.pressed[" "]&&(r=ue.add(r,rs.up)),pr.pressed.shift&&(r=ue.add(r,rs.down)),r=ue.normalize(r),rs.targetPosition=ue.add(rs.targetPosition,ue.mulScalar(r,t))}};mr=function(e,t,r,n){var i,s=arguments.length,a=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,r,n);else for(var o=e.length-1;o>=0;o--)(i=e[o])&&(a=(s<3?i(a):s>3?i(t,r,a):i(t,r))||a);return s>3&&a&&Object.defineProperty(t,r,a),a}([Xe.register],mr);const gr="@group(0) @binding(0) var mySampler : sampler;\r\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\r\n//@group(0) @binding(2) var debugTexture : texture_2d<f32>;\r\n\r\nstruct VertexOutput {\r\n  @builtin(position) Position : vec4<f32>,\r\n  @location(0) fragUV : vec2<f32>,\r\n}\r\n\r\n@vertex\r\nfn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\r\n  const pos = array(\r\n    vec2( 1.0,  1.0),\r\n    vec2( 1.0, -1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2( 1.0,  1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2(-1.0,  1.0),\r\n  );\r\n\r\n  const uv = array(\r\n    vec2(1.0, 0.0),\r\n    vec2(1.0, 1.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(1.0, 0.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(0.0, 0.0),\r\n  );\r\n\r\n  var output : VertexOutput;\r\n  output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\r\n  output.fragUV = uv[VertexIndex];\r\n  return output;\r\n}\r\n\r\nfn get_debug_colour(index : i32) -> vec4<f32> {\r\n  let colours = array(\r\n    vec4<f32>(1.0, 0.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(1.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(0.0, 0.0, 0.0, 1.0),\r\n  );\r\n  return colours[index % 8];\r\n}\r\n\r\n@fragment\r\nfn fragment_main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\r\n    let pixel = fragUV * vec2<f32>(textureDimensions(myTexture));\r\n    var colour = textureLoad(myTexture, vec2<u32>(pixel),0);\r\n    return abs(colour);\r\n}\r\n",vr=async e=>{const t=e.createShaderModule({code:gr}),r=e.createRenderPipeline({layout:"auto",vertex:{module:t,entryPoint:"vertex_main"},fragment:{module:t,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]}});return{render:t=>{const n=t.commandEncoder.beginRenderPass({timestampWrites:t.timestampWrites,colorAttachments:[{view:$i.getCurrentTexture().createView(),loadOp:"clear",clearValue:[.3,.3,.3,1],storeOp:"store"}]}),i=e.createBindGroup({layout:r.getBindGroupLayout(0),entries:[{binding:1,resource:t.outputTextures.finalTexture.createView()}]});return n.setPipeline(r),n.setBindGroup(0,i),n.draw(6),n.end(),[t.commandEncoder.finish()]},label:"fullscreen quad"}},xr=e=>e&&"number"==typeof e.length&&e.buffer instanceof ArrayBuffer&&"number"==typeof e.byteLength,yr={i32:{numElements:1,align:4,size:4,type:"i32",View:Int32Array},u32:{numElements:1,align:4,size:4,type:"u32",View:Uint32Array},f32:{numElements:1,align:4,size:4,type:"f32",View:Float32Array},f16:{numElements:1,align:2,size:2,type:"u16",View:Uint16Array},vec2f:{numElements:2,align:8,size:8,type:"f32",View:Float32Array},vec2i:{numElements:2,align:8,size:8,type:"i32",View:Int32Array},vec2u:{numElements:2,align:8,size:8,type:"u32",View:Uint32Array},vec2h:{numElements:2,align:4,size:4,type:"u16",View:Uint16Array},vec3i:{numElements:3,align:16,size:12,type:"i32",View:Int32Array},vec3u:{numElements:3,align:16,size:12,type:"u32",View:Uint32Array},vec3f:{numElements:3,align:16,size:12,type:"f32",View:Float32Array},vec3h:{numElements:3,align:8,size:6,type:"u16",View:Uint16Array},vec4i:{numElements:4,align:16,size:16,type:"i32",View:Int32Array},vec4u:{numElements:4,align:16,size:16,type:"u32",View:Uint32Array},vec4f:{numElements:4,align:16,size:16,type:"f32",View:Float32Array},vec4h:{numElements:4,align:8,size:8,type:"u16",View:Uint16Array},mat2x2f:{numElements:4,align:8,size:16,type:"f32",View:Float32Array},mat2x2h:{numElements:4,align:4,size:8,type:"u16",View:Uint16Array},mat3x2f:{numElements:6,align:8,size:24,type:"f32",View:Float32Array},mat3x2h:{numElements:6,align:4,size:12,type:"u16",View:Uint16Array},mat4x2f:{numElements:8,align:8,size:32,type:"f32",View:Float32Array},mat4x2h:{numElements:8,align:4,size:16,type:"u16",View:Uint16Array},mat2x3f:{numElements:8,align:16,size:32,pad:[3,1],type:"f32",View:Float32Array},mat2x3h:{numElements:8,align:8,size:16,pad:[3,1],type:"u16",View:Uint16Array},mat3x3f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x3h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x3f:{numElements:16,align:16,size:64,pad:[3,1],type:"f32",View:Float32Array},mat4x3h:{numElements:16,align:8,size:32,pad:[3,1],type:"u16",View:Uint16Array},mat2x4f:{numElements:8,align:16,size:32,type:"f32",View:Float32Array},mat2x4h:{numElements:8,align:8,size:16,type:"u16",View:Uint16Array},mat3x4f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x4h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x4f:{numElements:16,align:16,size:64,type:"f32",View:Float32Array},mat4x4h:{numElements:16,align:8,size:32,type:"u16",View:Uint16Array},bool:{numElements:0,align:1,size:0,type:"bool",View:Uint32Array}},_r={...yr,"atomic<i32>":yr.i32,"atomic<u32>":yr.u32,"vec2<i32>":yr.vec2i,"vec2<u32>":yr.vec2u,"vec2<f32>":yr.vec2f,"vec2<f16>":yr.vec2h,"vec3<i32>":yr.vec3i,"vec3<u32>":yr.vec3u,"vec3<f32>":yr.vec3f,"vec3<f16>":yr.vec3h,"vec4<i32>":yr.vec4i,"vec4<u32>":yr.vec4u,"vec4<f32>":yr.vec4f,"vec4<f16>":yr.vec4h,"mat2x2<f32>":yr.mat2x2f,"mat2x2<f16>":yr.mat2x2h,"mat3x2<f32>":yr.mat3x2f,"mat3x2<f16>":yr.mat3x2h,"mat4x2<f32>":yr.mat4x2f,"mat4x2<f16>":yr.mat4x2h,"mat2x3<f32>":yr.mat2x3f,"mat2x3<f16>":yr.mat2x3h,"mat3x3<f32>":yr.mat3x3f,"mat3x3<f16>":yr.mat3x3h,"mat4x3<f32>":yr.mat4x3f,"mat4x3<f16>":yr.mat4x3h,"mat2x4<f32>":yr.mat2x4f,"mat2x4<f16>":yr.mat2x4h,"mat3x4<f32>":yr.mat3x4f,"mat3x4<f16>":yr.mat3x4h,"mat4x4<f32>":yr.mat4x4f,"mat4x4<f16>":yr.mat4x4h},br=(wr=_r,Object.keys(wr));var wr,Tr,kr,Sr,Pr,Mr;!function(e=[],t){const r=new Set;for(const n of br){const i=_r[n];r.has(i)||(r.add(i),i.flatten=e.includes(n)?t:!t)}}(),new WeakMap;class Ar{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class Er{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(e){throw new Error("Cannot evaluate node")}evaluateString(e){return this.evaluate(e).toString()}search(e){}searchBlock(e,t){if(e){t(Ur.instance);for(const r of e)r instanceof Array?this.searchBlock(r,t):r.search(t);t(Or.instance)}}}class Ur extends Er{}Ur.instance=new Ur;class Or extends Er{}Or.instance=new Or;class Ir extends Er{constructor(){super()}}class Cr extends Ir{constructor(e,t,r,n){super(),this.name=e,this.args=t,this.returnType=r,this.body=n}get astNodeType(){return"function"}search(e){this.searchBlock(this.body,e)}}class Rr extends Ir{constructor(e){super(),this.expression=e}get astNodeType(){return"staticAssert"}search(e){this.expression.search(e)}}class zr extends Ir{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"while"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class Dr extends Ir{constructor(e){super(),this.body=e}get astNodeType(){return"continuing"}search(e){this.searchBlock(this.body,e)}}class Br extends Ir{constructor(e,t,r,n){super(),this.init=e,this.condition=t,this.increment=r,this.body=n}get astNodeType(){return"for"}search(e){var t,r,n;null===(t=this.init)||void 0===t||t.search(e),null===(r=this.condition)||void 0===r||r.search(e),null===(n=this.increment)||void 0===n||n.search(e),this.searchBlock(this.body,e)}}class Nr extends Ir{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"var"}search(e){var t;e(this),null===(t=this.value)||void 0===t||t.search(e)}}class Gr extends Ir{constructor(e,t,r){super(),this.name=e,this.type=t,this.value=r}get astNodeType(){return"override"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class jr extends Ir{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"let"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class Lr extends Ir{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"const"}evaluate(e){return this.value.evaluate(e)}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}!function(e){e.increment="++",e.decrement="--"}(Tr||(Tr={})),function(e){e.parse=function(t){const r=t;if("parse"==r)throw new Error("Invalid value for IncrementOperator");return e[r]}}(Tr||(Tr={}));class Vr extends Ir{constructor(e,t){super(),this.operator=e,this.variable=t}get astNodeType(){return"increment"}search(e){this.variable.search(e)}}!function(e){e.assign="=",e.addAssign="+=",e.subtractAssin="-=",e.multiplyAssign="*=",e.divideAssign="/=",e.moduloAssign="%=",e.andAssign="&=",e.orAssign="|=",e.xorAssign="^=",e.shiftLeftAssign="<<=",e.shiftRightAssign=">>="}(kr||(kr={})),function(e){e.parse=function(e){const t=e;if("parse"==t)throw new Error("Invalid value for AssignOperator");return t}}(kr||(kr={}));class qr extends Ir{constructor(e,t,r){super(),this.operator=e,this.variable=t,this.value=r}get astNodeType(){return"assign"}search(e){this.value.search(e)}}class Fr extends Ir{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"call"}}class Yr extends Ir{constructor(e,t){super(),this.body=e,this.continuing=t}get astNodeType(){return"loop"}}class Hr extends Ir{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"body"}}class Wr extends Ir{constructor(e,t,r,n){super(),this.condition=e,this.body=t,this.elseif=r,this.else=n}get astNodeType(){return"if"}search(e){this.condition.search(e),this.searchBlock(this.body,e),this.searchBlock(this.elseif,e),this.searchBlock(this.else,e)}}class $r extends Ir{constructor(e){super(),this.value=e}get astNodeType(){return"return"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class Xr extends Ir{constructor(e){super(),this.name=e}get astNodeType(){return"enable"}}class Zr extends Ir{constructor(e,t){super(),this.name=e,this.type=t}get astNodeType(){return"alias"}}class Kr extends Ir{constructor(){super()}get astNodeType(){return"discard"}}class Qr extends Ir{constructor(){super()}get astNodeType(){return"break"}}class Jr extends Ir{constructor(){super()}get astNodeType(){return"continue"}}class en extends Ir{constructor(e){super(),this.name=e}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class tn extends en{constructor(e,t){super(e),this.members=t}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(e){for(let t=0;t<this.members.length;t++)if(this.members[t].name==e)return t;return-1}}class rn extends en{constructor(e,t,r){super(e),this.format=t,this.access=r}get astNodeType(){return"template"}}class nn extends en{constructor(e,t,r,n){super(e),this.storage=t,this.type=r,this.access=n}get astNodeType(){return"pointer"}}class sn extends en{constructor(e,t,r,n){super(e),this.attributes=t,this.format=r,this.count=n}get astNodeType(){return"array"}get isArray(){return!0}}class an extends en{constructor(e,t,r){super(e),this.format=t,this.access=r}get astNodeType(){return"sampler"}}class on extends Er{constructor(){super()}}class un extends on{constructor(e){super(),this.value=e}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class cn extends on{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"createExpr"}}class ln extends on{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"callExpr"}evaluate(e){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(e));case"acos":return Math.acos(this.args[0].evaluate(e));case"acosh":return Math.acosh(this.args[0].evaluate(e));case"asin":return Math.asin(this.args[0].evaluate(e));case"asinh":return Math.asinh(this.args[0].evaluate(e));case"atan":return Math.atan(this.args[0].evaluate(e));case"atan2":return Math.atan2(this.args[0].evaluate(e),this.args[1].evaluate(e));case"atanh":return Math.atanh(this.args[0].evaluate(e));case"ceil":return Math.ceil(this.args[0].evaluate(e));case"clamp":return Math.min(Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e)),this.args[2].evaluate(e));case"cos":return Math.cos(this.args[0].evaluate(e));case"degrees":return 180*this.args[0].evaluate(e)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(e)-this.args[1].evaluate(e),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(e));case"exp2":return Math.pow(2,this.args[0].evaluate(e));case"floor":return Math.floor(this.args[0].evaluate(e));case"fma":return this.args[0].evaluate(e)*this.args[1].evaluate(e)+this.args[2].evaluate(e);case"fract":case"modf":return this.args[0].evaluate(e)-Math.floor(this.args[0].evaluate(e));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(e));case"log":return Math.log(this.args[0].evaluate(e));case"log2":return Math.log2(this.args[0].evaluate(e));case"max":return Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e));case"min":return Math.min(this.args[0].evaluate(e),this.args[1].evaluate(e));case"mix":return this.args[0].evaluate(e)*(1-this.args[2].evaluate(e))+this.args[1].evaluate(e)*this.args[2].evaluate(e);case"pow":return Math.pow(this.args[0].evaluate(e),this.args[1].evaluate(e));case"radians":return this.args[0].evaluate(e)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(e));case"sign":return Math.sign(this.args[0].evaluate(e));case"sin":return Math.sin(this.args[0].evaluate(e));case"sinh":return Math.sinh(this.args[0].evaluate(e));case"saturate":return Math.min(Math.max(this.args[0].evaluate(e),0),1);case"smoothstep":return this.args[0].evaluate(e)*this.args[0].evaluate(e)*(3-2*this.args[0].evaluate(e));case"sqrt":return Math.sqrt(this.args[0].evaluate(e));case"step":return this.args[0].evaluate(e)<this.args[1].evaluate(e)?0:1;case"tan":return Math.tan(this.args[0].evaluate(e));case"tanh":return Math.tanh(this.args[0].evaluate(e));case"trunc":return Math.trunc(this.args[0].evaluate(e));default:throw new Error("Non const function: "+this.name)}}search(e){for(const t of this.args)t.search(e);e(this)}}class fn extends on{constructor(e){super(),this.name=e}get astNodeType(){return"varExpr"}search(e){e(this)}}class dn extends on{constructor(e,t){super(),this.name=e,this.initializer=t}get astNodeType(){return"constExpr"}evaluate(e){var t,r;if(this.initializer instanceof cn){const n=null===(t=this.postfix)||void 0===t?void 0:t.evaluateString(e),i=null===(r=this.initializer.type)||void 0===r?void 0:r.name,s=e.structs.get(i),a=null==s?void 0:s.getMemberIndex(n);if(-1!=a)return this.initializer.args[a].evaluate(e);console.log(a)}return this.initializer.evaluate(e)}search(e){this.initializer.search(e)}}class hn extends on{constructor(e){super(),this.value=e}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class pn extends on{constructor(e,t){super(),this.type=e,this.value=t}get astNodeType(){return"bitcastExpr"}search(e){this.value.search(e)}}class mn extends on{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"typecastExpr"}evaluate(e){return this.args[0].evaluate(e)}search(e){this.searchBlock(this.args,e)}}class gn extends on{constructor(e){super(),this.contents=e}get astNodeType(){return"groupExpr"}evaluate(e){return this.contents[0].evaluate(e)}search(e){this.searchBlock(this.contents,e)}}class vn extends on{constructor(){super()}}class xn extends vn{constructor(e,t){super(),this.operator=e,this.right=t}get astNodeType(){return"unaryOp"}evaluate(e){switch(this.operator){case"+":return this.right.evaluate(e);case"-":return-this.right.evaluate(e);case"!":return this.right.evaluate(e)?0:1;case"~":return~this.right.evaluate(e);default:throw new Error("Unknown unary operator: "+this.operator)}}search(e){this.right.search(e)}}class yn extends vn{constructor(e,t,r){super(),this.operator=e,this.left=t,this.right=r}get astNodeType(){return"binaryOp"}evaluate(e){switch(this.operator){case"+":return this.left.evaluate(e)+this.right.evaluate(e);case"-":return this.left.evaluate(e)-this.right.evaluate(e);case"*":return this.left.evaluate(e)*this.right.evaluate(e);case"/":return this.left.evaluate(e)/this.right.evaluate(e);case"%":return this.left.evaluate(e)%this.right.evaluate(e);case"==":return this.left.evaluate(e)==this.right.evaluate(e)?1:0;case"!=":return this.left.evaluate(e)!=this.right.evaluate(e)?1:0;case"<":return this.left.evaluate(e)<this.right.evaluate(e)?1:0;case">":return this.left.evaluate(e)>this.right.evaluate(e)?1:0;case"<=":return this.left.evaluate(e)<=this.right.evaluate(e)?1:0;case">=":return this.left.evaluate(e)>=this.right.evaluate(e)?1:0;case"&&":return this.left.evaluate(e)&&this.right.evaluate(e)?1:0;case"||":return this.left.evaluate(e)||this.right.evaluate(e)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}search(e){this.left.search(e),this.right.search(e)}}class _n extends Er{constructor(){super()}}class bn extends _n{constructor(e,t){super(),this.selector=e,this.body=t}get astNodeType(){return"case"}search(e){this.searchBlock(this.body,e)}}class wn extends _n{constructor(e){super(),this.body=e}get astNodeType(){return"default"}search(e){this.searchBlock(this.body,e)}}class Tn extends Er{constructor(e,t,r){super(),this.name=e,this.type=t,this.attributes=r}get astNodeType(){return"argument"}}class kn extends Er{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"elseif"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class Sn extends Er{constructor(e,t,r){super(),this.name=e,this.type=t,this.attributes=r}get astNodeType(){return"member"}}class Pn extends Er{constructor(e,t){super(),this.name=e,this.value=t}get astNodeType(){return"attribute"}}!function(e){e[e.token=0]="token",e[e.keyword=1]="keyword",e[e.reserved=2]="reserved"}(Pr||(Pr={}));class Mn{constructor(e,t,r){this.name=e,this.type=t,this.rule=r}toString(){return this.name}}class An{}Sr=An,An.none=new Mn("",Pr.reserved,""),An.eof=new Mn("EOF",Pr.token,""),An.reserved={asm:new Mn("asm",Pr.reserved,"asm"),bf16:new Mn("bf16",Pr.reserved,"bf16"),do:new Mn("do",Pr.reserved,"do"),enum:new Mn("enum",Pr.reserved,"enum"),f16:new Mn("f16",Pr.reserved,"f16"),f64:new Mn("f64",Pr.reserved,"f64"),handle:new Mn("handle",Pr.reserved,"handle"),i8:new Mn("i8",Pr.reserved,"i8"),i16:new Mn("i16",Pr.reserved,"i16"),i64:new Mn("i64",Pr.reserved,"i64"),mat:new Mn("mat",Pr.reserved,"mat"),premerge:new Mn("premerge",Pr.reserved,"premerge"),regardless:new Mn("regardless",Pr.reserved,"regardless"),typedef:new Mn("typedef",Pr.reserved,"typedef"),u8:new Mn("u8",Pr.reserved,"u8"),u16:new Mn("u16",Pr.reserved,"u16"),u64:new Mn("u64",Pr.reserved,"u64"),unless:new Mn("unless",Pr.reserved,"unless"),using:new Mn("using",Pr.reserved,"using"),vec:new Mn("vec",Pr.reserved,"vec"),void:new Mn("void",Pr.reserved,"void")},An.keywords={array:new Mn("array",Pr.keyword,"array"),atomic:new Mn("atomic",Pr.keyword,"atomic"),bool:new Mn("bool",Pr.keyword,"bool"),f32:new Mn("f32",Pr.keyword,"f32"),i32:new Mn("i32",Pr.keyword,"i32"),mat2x2:new Mn("mat2x2",Pr.keyword,"mat2x2"),mat2x3:new Mn("mat2x3",Pr.keyword,"mat2x3"),mat2x4:new Mn("mat2x4",Pr.keyword,"mat2x4"),mat3x2:new Mn("mat3x2",Pr.keyword,"mat3x2"),mat3x3:new Mn("mat3x3",Pr.keyword,"mat3x3"),mat3x4:new Mn("mat3x4",Pr.keyword,"mat3x4"),mat4x2:new Mn("mat4x2",Pr.keyword,"mat4x2"),mat4x3:new Mn("mat4x3",Pr.keyword,"mat4x3"),mat4x4:new Mn("mat4x4",Pr.keyword,"mat4x4"),ptr:new Mn("ptr",Pr.keyword,"ptr"),sampler:new Mn("sampler",Pr.keyword,"sampler"),sampler_comparison:new Mn("sampler_comparison",Pr.keyword,"sampler_comparison"),struct:new Mn("struct",Pr.keyword,"struct"),texture_1d:new Mn("texture_1d",Pr.keyword,"texture_1d"),texture_2d:new Mn("texture_2d",Pr.keyword,"texture_2d"),texture_2d_array:new Mn("texture_2d_array",Pr.keyword,"texture_2d_array"),texture_3d:new Mn("texture_3d",Pr.keyword,"texture_3d"),texture_cube:new Mn("texture_cube",Pr.keyword,"texture_cube"),texture_cube_array:new Mn("texture_cube_array",Pr.keyword,"texture_cube_array"),texture_multisampled_2d:new Mn("texture_multisampled_2d",Pr.keyword,"texture_multisampled_2d"),texture_storage_1d:new Mn("texture_storage_1d",Pr.keyword,"texture_storage_1d"),texture_storage_2d:new Mn("texture_storage_2d",Pr.keyword,"texture_storage_2d"),texture_storage_2d_array:new Mn("texture_storage_2d_array",Pr.keyword,"texture_storage_2d_array"),texture_storage_3d:new Mn("texture_storage_3d",Pr.keyword,"texture_storage_3d"),texture_depth_2d:new Mn("texture_depth_2d",Pr.keyword,"texture_depth_2d"),texture_depth_2d_array:new Mn("texture_depth_2d_array",Pr.keyword,"texture_depth_2d_array"),texture_depth_cube:new Mn("texture_depth_cube",Pr.keyword,"texture_depth_cube"),texture_depth_cube_array:new Mn("texture_depth_cube_array",Pr.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new Mn("texture_depth_multisampled_2d",Pr.keyword,"texture_depth_multisampled_2d"),texture_external:new Mn("texture_external",Pr.keyword,"texture_external"),u32:new Mn("u32",Pr.keyword,"u32"),vec2:new Mn("vec2",Pr.keyword,"vec2"),vec3:new Mn("vec3",Pr.keyword,"vec3"),vec4:new Mn("vec4",Pr.keyword,"vec4"),bitcast:new Mn("bitcast",Pr.keyword,"bitcast"),block:new Mn("block",Pr.keyword,"block"),break:new Mn("break",Pr.keyword,"break"),case:new Mn("case",Pr.keyword,"case"),continue:new Mn("continue",Pr.keyword,"continue"),continuing:new Mn("continuing",Pr.keyword,"continuing"),default:new Mn("default",Pr.keyword,"default"),discard:new Mn("discard",Pr.keyword,"discard"),else:new Mn("else",Pr.keyword,"else"),enable:new Mn("enable",Pr.keyword,"enable"),fallthrough:new Mn("fallthrough",Pr.keyword,"fallthrough"),false:new Mn("false",Pr.keyword,"false"),fn:new Mn("fn",Pr.keyword,"fn"),for:new Mn("for",Pr.keyword,"for"),function:new Mn("function",Pr.keyword,"function"),if:new Mn("if",Pr.keyword,"if"),let:new Mn("let",Pr.keyword,"let"),const:new Mn("const",Pr.keyword,"const"),loop:new Mn("loop",Pr.keyword,"loop"),while:new Mn("while",Pr.keyword,"while"),private:new Mn("private",Pr.keyword,"private"),read:new Mn("read",Pr.keyword,"read"),read_write:new Mn("read_write",Pr.keyword,"read_write"),return:new Mn("return",Pr.keyword,"return"),storage:new Mn("storage",Pr.keyword,"storage"),switch:new Mn("switch",Pr.keyword,"switch"),true:new Mn("true",Pr.keyword,"true"),alias:new Mn("alias",Pr.keyword,"alias"),type:new Mn("type",Pr.keyword,"type"),uniform:new Mn("uniform",Pr.keyword,"uniform"),var:new Mn("var",Pr.keyword,"var"),override:new Mn("override",Pr.keyword,"override"),workgroup:new Mn("workgroup",Pr.keyword,"workgroup"),write:new Mn("write",Pr.keyword,"write"),r8unorm:new Mn("r8unorm",Pr.keyword,"r8unorm"),r8snorm:new Mn("r8snorm",Pr.keyword,"r8snorm"),r8uint:new Mn("r8uint",Pr.keyword,"r8uint"),r8sint:new Mn("r8sint",Pr.keyword,"r8sint"),r16uint:new Mn("r16uint",Pr.keyword,"r16uint"),r16sint:new Mn("r16sint",Pr.keyword,"r16sint"),r16float:new Mn("r16float",Pr.keyword,"r16float"),rg8unorm:new Mn("rg8unorm",Pr.keyword,"rg8unorm"),rg8snorm:new Mn("rg8snorm",Pr.keyword,"rg8snorm"),rg8uint:new Mn("rg8uint",Pr.keyword,"rg8uint"),rg8sint:new Mn("rg8sint",Pr.keyword,"rg8sint"),r32uint:new Mn("r32uint",Pr.keyword,"r32uint"),r32sint:new Mn("r32sint",Pr.keyword,"r32sint"),r32float:new Mn("r32float",Pr.keyword,"r32float"),rg16uint:new Mn("rg16uint",Pr.keyword,"rg16uint"),rg16sint:new Mn("rg16sint",Pr.keyword,"rg16sint"),rg16float:new Mn("rg16float",Pr.keyword,"rg16float"),rgba8unorm:new Mn("rgba8unorm",Pr.keyword,"rgba8unorm"),rgba8unorm_srgb:new Mn("rgba8unorm_srgb",Pr.keyword,"rgba8unorm_srgb"),rgba8snorm:new Mn("rgba8snorm",Pr.keyword,"rgba8snorm"),rgba8uint:new Mn("rgba8uint",Pr.keyword,"rgba8uint"),rgba8sint:new Mn("rgba8sint",Pr.keyword,"rgba8sint"),bgra8unorm:new Mn("bgra8unorm",Pr.keyword,"bgra8unorm"),bgra8unorm_srgb:new Mn("bgra8unorm_srgb",Pr.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new Mn("rgb10a2unorm",Pr.keyword,"rgb10a2unorm"),rg11b10float:new Mn("rg11b10float",Pr.keyword,"rg11b10float"),rg32uint:new Mn("rg32uint",Pr.keyword,"rg32uint"),rg32sint:new Mn("rg32sint",Pr.keyword,"rg32sint"),rg32float:new Mn("rg32float",Pr.keyword,"rg32float"),rgba16uint:new Mn("rgba16uint",Pr.keyword,"rgba16uint"),rgba16sint:new Mn("rgba16sint",Pr.keyword,"rgba16sint"),rgba16float:new Mn("rgba16float",Pr.keyword,"rgba16float"),rgba32uint:new Mn("rgba32uint",Pr.keyword,"rgba32uint"),rgba32sint:new Mn("rgba32sint",Pr.keyword,"rgba32sint"),rgba32float:new Mn("rgba32float",Pr.keyword,"rgba32float"),static_assert:new Mn("static_assert",Pr.keyword,"static_assert")},An.tokens={decimal_float_literal:new Mn("decimal_float_literal",Pr.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new Mn("hex_float_literal",Pr.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new Mn("int_literal",Pr.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new Mn("uint_literal",Pr.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new Mn("ident",Pr.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new Mn("and",Pr.token,"&"),and_and:new Mn("and_and",Pr.token,"&&"),arrow:new Mn("arrow ",Pr.token,"->"),attr:new Mn("attr",Pr.token,"@"),attr_left:new Mn("attr_left",Pr.token,"[["),attr_right:new Mn("attr_right",Pr.token,"]]"),forward_slash:new Mn("forward_slash",Pr.token,"/"),bang:new Mn("bang",Pr.token,"!"),bracket_left:new Mn("bracket_left",Pr.token,"["),bracket_right:new Mn("bracket_right",Pr.token,"]"),brace_left:new Mn("brace_left",Pr.token,"{"),brace_right:new Mn("brace_right",Pr.token,"}"),colon:new Mn("colon",Pr.token,":"),comma:new Mn("comma",Pr.token,","),equal:new Mn("equal",Pr.token,"="),equal_equal:new Mn("equal_equal",Pr.token,"=="),not_equal:new Mn("not_equal",Pr.token,"!="),greater_than:new Mn("greater_than",Pr.token,">"),greater_than_equal:new Mn("greater_than_equal",Pr.token,">="),shift_right:new Mn("shift_right",Pr.token,">>"),less_than:new Mn("less_than",Pr.token,"<"),less_than_equal:new Mn("less_than_equal",Pr.token,"<="),shift_left:new Mn("shift_left",Pr.token,"<<"),modulo:new Mn("modulo",Pr.token,"%"),minus:new Mn("minus",Pr.token,"-"),minus_minus:new Mn("minus_minus",Pr.token,"--"),period:new Mn("period",Pr.token,"."),plus:new Mn("plus",Pr.token,"+"),plus_plus:new Mn("plus_plus",Pr.token,"++"),or:new Mn("or",Pr.token,"|"),or_or:new Mn("or_or",Pr.token,"||"),paren_left:new Mn("paren_left",Pr.token,"("),paren_right:new Mn("paren_right",Pr.token,")"),semicolon:new Mn("semicolon",Pr.token,";"),star:new Mn("star",Pr.token,"*"),tilde:new Mn("tilde",Pr.token,"~"),underscore:new Mn("underscore",Pr.token,"_"),xor:new Mn("xor",Pr.token,"^"),plus_equal:new Mn("plus_equal",Pr.token,"+="),minus_equal:new Mn("minus_equal",Pr.token,"-="),times_equal:new Mn("times_equal",Pr.token,"*="),division_equal:new Mn("division_equal",Pr.token,"/="),modulo_equal:new Mn("modulo_equal",Pr.token,"%="),and_equal:new Mn("and_equal",Pr.token,"&="),or_equal:new Mn("or_equal",Pr.token,"|="),xor_equal:new Mn("xor_equal",Pr.token,"^="),shift_right_equal:new Mn("shift_right_equal",Pr.token,">>="),shift_left_equal:new Mn("shift_left_equal",Pr.token,"<<=")},An.storage_class=[Sr.keywords.function,Sr.keywords.private,Sr.keywords.workgroup,Sr.keywords.uniform,Sr.keywords.storage],An.access_mode=[Sr.keywords.read,Sr.keywords.write,Sr.keywords.read_write],An.sampler_type=[Sr.keywords.sampler,Sr.keywords.sampler_comparison],An.sampled_texture_type=[Sr.keywords.texture_1d,Sr.keywords.texture_2d,Sr.keywords.texture_2d_array,Sr.keywords.texture_3d,Sr.keywords.texture_cube,Sr.keywords.texture_cube_array],An.multisampled_texture_type=[Sr.keywords.texture_multisampled_2d],An.storage_texture_type=[Sr.keywords.texture_storage_1d,Sr.keywords.texture_storage_2d,Sr.keywords.texture_storage_2d_array,Sr.keywords.texture_storage_3d],An.depth_texture_type=[Sr.keywords.texture_depth_2d,Sr.keywords.texture_depth_2d_array,Sr.keywords.texture_depth_cube,Sr.keywords.texture_depth_cube_array,Sr.keywords.texture_depth_multisampled_2d],An.texture_external_type=[Sr.keywords.texture_external],An.any_texture_type=[...Sr.sampled_texture_type,...Sr.multisampled_texture_type,...Sr.storage_texture_type,...Sr.depth_texture_type,...Sr.texture_external_type],An.texel_format=[Sr.keywords.r8unorm,Sr.keywords.r8snorm,Sr.keywords.r8uint,Sr.keywords.r8sint,Sr.keywords.r16uint,Sr.keywords.r16sint,Sr.keywords.r16float,Sr.keywords.rg8unorm,Sr.keywords.rg8snorm,Sr.keywords.rg8uint,Sr.keywords.rg8sint,Sr.keywords.r32uint,Sr.keywords.r32sint,Sr.keywords.r32float,Sr.keywords.rg16uint,Sr.keywords.rg16sint,Sr.keywords.rg16float,Sr.keywords.rgba8unorm,Sr.keywords.rgba8unorm_srgb,Sr.keywords.rgba8snorm,Sr.keywords.rgba8uint,Sr.keywords.rgba8sint,Sr.keywords.bgra8unorm,Sr.keywords.bgra8unorm_srgb,Sr.keywords.rgb10a2unorm,Sr.keywords.rg11b10float,Sr.keywords.rg32uint,Sr.keywords.rg32sint,Sr.keywords.rg32float,Sr.keywords.rgba16uint,Sr.keywords.rgba16sint,Sr.keywords.rgba16float,Sr.keywords.rgba32uint,Sr.keywords.rgba32sint,Sr.keywords.rgba32float],An.const_literal=[Sr.tokens.int_literal,Sr.tokens.uint_literal,Sr.tokens.decimal_float_literal,Sr.tokens.hex_float_literal,Sr.keywords.true,Sr.keywords.false],An.literal_or_ident=[Sr.tokens.ident,Sr.tokens.int_literal,Sr.tokens.uint_literal,Sr.tokens.decimal_float_literal,Sr.tokens.hex_float_literal],An.element_count_expression=[Sr.tokens.int_literal,Sr.tokens.uint_literal,Sr.tokens.ident],An.template_types=[Sr.keywords.vec2,Sr.keywords.vec3,Sr.keywords.vec4,Sr.keywords.mat2x2,Sr.keywords.mat2x3,Sr.keywords.mat2x4,Sr.keywords.mat3x2,Sr.keywords.mat3x3,Sr.keywords.mat3x4,Sr.keywords.mat4x2,Sr.keywords.mat4x3,Sr.keywords.mat4x4,Sr.keywords.atomic,Sr.keywords.bitcast,...Sr.any_texture_type],An.attribute_name=[Sr.tokens.ident,Sr.keywords.block],An.assignment_operators=[Sr.tokens.equal,Sr.tokens.plus_equal,Sr.tokens.minus_equal,Sr.tokens.times_equal,Sr.tokens.division_equal,Sr.tokens.modulo_equal,Sr.tokens.and_equal,Sr.tokens.or_equal,Sr.tokens.xor_equal,Sr.tokens.shift_right_equal,Sr.tokens.shift_left_equal],An.increment_operators=[Sr.tokens.plus_plus,Sr.tokens.minus_minus];class En{constructor(e,t,r){this.type=e,this.lexeme=t,this.line=r}toString(){return this.lexeme}isTemplateType(){return-1!=An.template_types.indexOf(this.type)}isArrayType(){return this.type==An.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class Un{constructor(e){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=e?e:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new En(An.eof,"",this._line)),this._tokens}scanToken(){let e=this._advance();if("\n"==e)return this._line++,!0;if(this._isWhitespace(e))return!0;if("/"==e){if("/"==this._peekAhead()){for(;"\n"!=e;){if(this._isAtEnd())return!0;e=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let t=1;for(;t>0;){if(this._isAtEnd())return!0;if(e=this._advance(),"\n"==e)this._line++;else if("*"==e){if("/"==this._peekAhead()&&(this._advance(),t--,0==t))return!0}else"/"==e&&"*"==this._peekAhead()&&(this._advance(),t++)}return!0}}let t=An.none;for(;;){let r=this._findType(e);const n=this._peekAhead();if(">"==e&&(">"==n||"="==n)){let e=!1,t=this._tokens.length-1;for(let r=0;r<5&&t>=0;++r,--t)if(this._tokens[t].type===An.tokens.less_than){t>0&&this._tokens[t-1].isArrayOrTemplateType()&&(e=!0);break}if(e)return this._addToken(r),!0}if(r===An.none){let n=e,i=0;const s=2;for(let e=0;e<s;++e)if(n+=this._peekAhead(e),r=this._findType(n),r!==An.none){i=e;break}if(r===An.none)return t!==An.none&&(this._current--,this._addToken(t),!0);e=n,this._current+=i+1}if(t=r,this._isAtEnd())break;e+=this._advance()}return t!==An.none&&(this._addToken(t),!0)}_findType(e){for(const t in An.keywords){const r=An.keywords[t];if(this._match(e,r.rule))return r}for(const t in An.tokens){const r=An.tokens[t];if(this._match(e,r.rule))return r}return An.none}_match(e,t){if("string"==typeof t){if(t==e)return!0}else{const r=t.exec(e);if(r&&0==r.index&&r[0]==e)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(e){return" "==e||"\t"==e||"\r"==e}_advance(e=0){let t=this._source[this._current];return e=e||0,e++,this._current+=e,t}_peekAhead(e=0){return e=e||0,this._current+e>=this._source.length?"\0":this._source[this._current+e]}_addToken(e){const t=this._source.substring(this._start,this._current);this._tokens.push(new En(e,t,this._line))}}class On{constructor(){this._tokens=[],this._current=0,this._context=new Ar}parse(e){this._initialize(e);let t=[];for(;!this._isAtEnd();){const e=this._global_decl_or_directive();if(!e)break;t.push(e)}return t}_initialize(e){if(e)if("string"==typeof e){const t=new Un(e);this._tokens=t.scanTokens()}else this._tokens=e;else this._tokens=[];this._current=0}_error(e,t){return console.error(e,t),{token:e,message:t,toString:function(){return`${t}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==An.eof}_match(e){if(e instanceof Mn)return!!this._check(e)&&(this._advance(),!0);for(let t=0,r=e.length;t<r;++t){const r=e[t];if(this._check(r))return this._advance(),!0}return!1}_consume(e,t){if(this._check(e))return this._advance();throw this._error(this._peek(),t)}_check(e){if(this._isAtEnd())return!1;const t=this._peek();if(e instanceof Array){let r=t.type;return-1!=e.indexOf(r)}return t.type==e}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(An.tokens.semicolon)&&!this._isAtEnd(););if(this._match(An.keywords.alias)){const e=this._type_alias();return this._consume(An.tokens.semicolon,"Expected ';'"),e}if(this._match(An.keywords.enable)){const e=this._enable_directive();return this._consume(An.tokens.semicolon,"Expected ';'"),e}const e=this._attribute();if(this._check(An.keywords.var)){const t=this._global_variable_decl();return null!=t&&(t.attributes=e),this._consume(An.tokens.semicolon,"Expected ';'."),t}if(this._check(An.keywords.override)){const t=this._override_variable_decl();return null!=t&&(t.attributes=e),this._consume(An.tokens.semicolon,"Expected ';'."),t}if(this._check(An.keywords.let)){const t=this._global_let_decl();return null!=t&&(t.attributes=e),this._consume(An.tokens.semicolon,"Expected ';'."),t}if(this._check(An.keywords.const)){const t=this._global_const_decl();return null!=t&&(t.attributes=e),this._consume(An.tokens.semicolon,"Expected ';'."),t}if(this._check(An.keywords.struct)){const t=this._struct_decl();return null!=t&&(t.attributes=e),t}if(this._check(An.keywords.fn)){const t=this._function_decl();return null!=t&&(t.attributes=e),t}return null}_function_decl(){if(!this._match(An.keywords.fn))return null;const e=this._consume(An.tokens.ident,"Expected function name.").toString();this._consume(An.tokens.paren_left,"Expected '(' for function arguments.");const t=[];if(!this._check(An.tokens.paren_right))do{if(this._check(An.tokens.paren_right))break;const e=this._attribute(),r=this._consume(An.tokens.ident,"Expected argument name.").toString();this._consume(An.tokens.colon,"Expected ':' for argument type.");const n=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=n,t.push(new Tn(r,i,e)))}while(this._match(An.tokens.comma));this._consume(An.tokens.paren_right,"Expected ')' after function arguments.");let r=null;if(this._match(An.tokens.arrow)){const e=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=e)}const n=this._compound_statement();return new Cr(e,t,r,n)}_compound_statement(){const e=[];for(this._consume(An.tokens.brace_left,"Expected '{' for block.");!this._check(An.tokens.brace_right);){const t=this._statement();null!==t&&e.push(t)}return this._consume(An.tokens.brace_right,"Expected '}' for block."),e}_statement(){for(;this._match(An.tokens.semicolon)&&!this._isAtEnd(););if(this._check(An.keywords.if))return this._if_statement();if(this._check(An.keywords.switch))return this._switch_statement();if(this._check(An.keywords.loop))return this._loop_statement();if(this._check(An.keywords.for))return this._for_statement();if(this._check(An.keywords.while))return this._while_statement();if(this._check(An.keywords.continuing))return this._continuing_statement();if(this._check(An.keywords.static_assert))return this._static_assert_statement();if(this._check(An.tokens.brace_left))return this._compound_statement();let e=null;return e=this._check(An.keywords.return)?this._return_statement():this._check([An.keywords.var,An.keywords.let,An.keywords.const])?this._variable_statement():this._match(An.keywords.discard)?new Kr:this._match(An.keywords.break)?new Qr:this._match(An.keywords.continue)?new Jr:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=e&&this._consume(An.tokens.semicolon,"Expected ';' after statement."),e}_static_assert_statement(){if(!this._match(An.keywords.static_assert))return null;let e=this._optional_paren_expression();return new Rr(e)}_while_statement(){if(!this._match(An.keywords.while))return null;let e=this._optional_paren_expression();const t=this._compound_statement();return new zr(e,t)}_continuing_statement(){if(!this._match(An.keywords.continuing))return null;const e=this._compound_statement();return new Dr(e)}_for_statement(){if(!this._match(An.keywords.for))return null;this._consume(An.tokens.paren_left,"Expected '('.");const e=this._check(An.tokens.semicolon)?null:this._for_init();this._consume(An.tokens.semicolon,"Expected ';'.");const t=this._check(An.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(An.tokens.semicolon,"Expected ';'.");const r=this._check(An.tokens.paren_right)?null:this._for_increment();this._consume(An.tokens.paren_right,"Expected ')'.");const n=this._compound_statement();return new Br(e,t,r,n)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(An.keywords.var)){const e=this._variable_decl();if(null===e)throw this._error(this._peek(),"Variable declaration expected.");let t=null;return this._match(An.tokens.equal)&&(t=this._short_circuit_or_expression()),new Nr(e.name,e.type,e.storage,e.access,t)}if(this._match(An.keywords.let)){const e=this._consume(An.tokens.ident,"Expected name for let.").toString();let t=null;if(this._match(An.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(An.tokens.equal,"Expected '=' for let.");const r=this._short_circuit_or_expression();return new jr(e,t,null,null,r)}if(this._match(An.keywords.const)){const e=this._consume(An.tokens.ident,"Expected name for const.").toString();let t=null;if(this._match(An.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(An.tokens.equal,"Expected '=' for const.");const r=this._short_circuit_or_expression();return new Lr(e,t,null,null,r)}return null}_increment_decrement_statement(){const e=this._current,t=this._unary_expression();if(null==t)return null;if(!this._check(An.increment_operators))return this._current=e,null;const r=this._consume(An.increment_operators,"Expected increment operator");return new Vr(r.type===An.tokens.plus_plus?Tr.increment:Tr.decrement,t)}_assignment_statement(){let e=null;if(this._check(An.tokens.brace_right))return null;let t=this._match(An.tokens.underscore);if(t||(e=this._unary_expression()),!t&&null==e)return null;const r=this._consume(An.assignment_operators,"Expected assignment operator."),n=this._short_circuit_or_expression();return new qr(kr.parse(r.lexeme),e,n)}_func_call_statement(){if(!this._check(An.tokens.ident))return null;const e=this._current,t=this._consume(An.tokens.ident,"Expected function name."),r=this._argument_expression_list();return null===r?(this._current=e,null):new Fr(t.lexeme,r)}_loop_statement(){if(!this._match(An.keywords.loop))return null;this._consume(An.tokens.brace_left,"Expected '{' for loop.");const e=[];let t=this._statement();for(;null!==t;){if(Array.isArray(t))for(let r of t)e.push(r);else e.push(t);t=this._statement()}let r=null;return this._match(An.keywords.continuing)&&(r=this._compound_statement()),this._consume(An.tokens.brace_right,"Expected '}' for loop."),new Yr(e,r)}_switch_statement(){if(!this._match(An.keywords.switch))return null;const e=this._optional_paren_expression();this._consume(An.tokens.brace_left,"Expected '{' for switch.");const t=this._switch_body();if(null==t||0==t.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(An.tokens.brace_right,"Expected '}' for switch."),new Hr(e,t)}_switch_body(){const e=[];if(this._match(An.keywords.case)){const t=this._case_selectors();this._match(An.tokens.colon),this._consume(An.tokens.brace_left,"Exected '{' for switch case.");const r=this._case_body();this._consume(An.tokens.brace_right,"Exected '}' for switch case."),e.push(new bn(t,r))}if(this._match(An.keywords.default)){this._match(An.tokens.colon),this._consume(An.tokens.brace_left,"Exected '{' for switch default.");const t=this._case_body();this._consume(An.tokens.brace_right,"Exected '}' for switch default."),e.push(new wn(t))}if(this._check([An.keywords.default,An.keywords.case])){const t=this._switch_body();e.push(t[0])}return e}_case_selectors(){var e,t,r,n;const i=[null!==(t=null===(e=this._shift_expression())||void 0===e?void 0:e.evaluate(this._context).toString())&&void 0!==t?t:""];for(;this._match(An.tokens.comma);)i.push(null!==(n=null===(r=this._shift_expression())||void 0===r?void 0:r.evaluate(this._context).toString())&&void 0!==n?n:"");return i}_case_body(){if(this._match(An.keywords.fallthrough))return this._consume(An.tokens.semicolon,"Expected ';'"),[];let e=this._statement();if(null==e)return[];e instanceof Array||(e=[e]);const t=this._case_body();return 0==t.length?e:[...e,t[0]]}_if_statement(){if(!this._match(An.keywords.if))return null;const e=this._optional_paren_expression(),t=this._compound_statement();let r=[];this._match_elseif()&&(r=this._elseif_statement(r));let n=null;return this._match(An.keywords.else)&&(n=this._compound_statement()),new Wr(e,t,r,n)}_match_elseif(){return this._tokens[this._current].type===An.keywords.else&&this._tokens[this._current+1].type===An.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(e=[]){const t=this._optional_paren_expression(),r=this._compound_statement();return e.push(new kn(t,r)),this._match_elseif()&&this._elseif_statement(e),e}_return_statement(){if(!this._match(An.keywords.return))return null;const e=this._short_circuit_or_expression();return new $r(e)}_short_circuit_or_expression(){let e=this._short_circuit_and_expr();for(;this._match(An.tokens.or_or);)e=new yn(this._previous().toString(),e,this._short_circuit_and_expr());return e}_short_circuit_and_expr(){let e=this._inclusive_or_expression();for(;this._match(An.tokens.and_and);)e=new yn(this._previous().toString(),e,this._inclusive_or_expression());return e}_inclusive_or_expression(){let e=this._exclusive_or_expression();for(;this._match(An.tokens.or);)e=new yn(this._previous().toString(),e,this._exclusive_or_expression());return e}_exclusive_or_expression(){let e=this._and_expression();for(;this._match(An.tokens.xor);)e=new yn(this._previous().toString(),e,this._and_expression());return e}_and_expression(){let e=this._equality_expression();for(;this._match(An.tokens.and);)e=new yn(this._previous().toString(),e,this._equality_expression());return e}_equality_expression(){const e=this._relational_expression();return this._match([An.tokens.equal_equal,An.tokens.not_equal])?new yn(this._previous().toString(),e,this._relational_expression()):e}_relational_expression(){let e=this._shift_expression();for(;this._match([An.tokens.less_than,An.tokens.greater_than,An.tokens.less_than_equal,An.tokens.greater_than_equal]);)e=new yn(this._previous().toString(),e,this._shift_expression());return e}_shift_expression(){let e=this._additive_expression();for(;this._match([An.tokens.shift_left,An.tokens.shift_right]);)e=new yn(this._previous().toString(),e,this._additive_expression());return e}_additive_expression(){let e=this._multiplicative_expression();for(;this._match([An.tokens.plus,An.tokens.minus]);)e=new yn(this._previous().toString(),e,this._multiplicative_expression());return e}_multiplicative_expression(){let e=this._unary_expression();for(;this._match([An.tokens.star,An.tokens.forward_slash,An.tokens.modulo]);)e=new yn(this._previous().toString(),e,this._unary_expression());return e}_unary_expression(){return this._match([An.tokens.minus,An.tokens.bang,An.tokens.tilde,An.tokens.star,An.tokens.and])?new xn(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const e=this._primary_expression(),t=this._postfix_expression();return t&&(e.postfix=t),e}_postfix_expression(){if(this._match(An.tokens.bracket_left)){const e=this._short_circuit_or_expression();this._consume(An.tokens.bracket_right,"Expected ']'.");const t=this._postfix_expression();return t&&(e.postfix=t),e}if(this._match(An.tokens.period)){const e=this._consume(An.tokens.ident,"Expected member name."),t=this._postfix_expression(),r=new un(e.lexeme);return t&&(r.postfix=t),r}return null}_getStruct(e){return this._context.aliases.has(e)?this._context.aliases.get(e).type:this._context.structs.has(e)?this._context.structs.get(e):null}_primary_expression(){if(this._match(An.tokens.ident)){const e=this._previous().toString();if(this._check(An.tokens.paren_left)){const t=this._argument_expression_list(),r=this._getStruct(e);return null!=r?new cn(r,t):new ln(e,t)}if(this._context.constants.has(e)){const t=this._context.constants.get(e);return new dn(e,t.value)}return new fn(e)}if(this._match(An.const_literal))return new hn(parseFloat(this._previous().toString()));if(this._check(An.tokens.paren_left))return this._paren_expression();if(this._match(An.keywords.bitcast)){this._consume(An.tokens.less_than,"Expected '<'.");const e=this._type_decl();this._consume(An.tokens.greater_than,"Expected '>'.");const t=this._paren_expression();return new pn(e,t)}const e=this._type_decl(),t=this._argument_expression_list();return new mn(e,t)}_argument_expression_list(){if(!this._match(An.tokens.paren_left))return null;const e=[];do{if(this._check(An.tokens.paren_right))break;const t=this._short_circuit_or_expression();e.push(t)}while(this._match(An.tokens.comma));return this._consume(An.tokens.paren_right,"Expected ')' for agument list"),e}_optional_paren_expression(){this._match(An.tokens.paren_left);const e=this._short_circuit_or_expression();return this._match(An.tokens.paren_right),new gn([e])}_paren_expression(){this._consume(An.tokens.paren_left,"Expected '('.");const e=this._short_circuit_or_expression();return this._consume(An.tokens.paren_right,"Expected ')'."),new gn([e])}_struct_decl(){if(!this._match(An.keywords.struct))return null;const e=this._consume(An.tokens.ident,"Expected name for struct.").toString();this._consume(An.tokens.brace_left,"Expected '{' for struct body.");const t=[];for(;!this._check(An.tokens.brace_right);){const e=this._attribute(),r=this._consume(An.tokens.ident,"Expected variable name.").toString();this._consume(An.tokens.colon,"Expected ':' for struct member type.");const n=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=n),this._check(An.tokens.brace_right)?this._match(An.tokens.comma):this._consume(An.tokens.comma,"Expected ',' for struct member."),t.push(new Sn(r,i,e))}this._consume(An.tokens.brace_right,"Expected '}' after struct body.");const r=new tn(e,t);return this._context.structs.set(e,r),r}_global_variable_decl(){const e=this._variable_decl();return e&&this._match(An.tokens.equal)&&(e.value=this._const_expression()),e}_override_variable_decl(){const e=this._override_decl();return e&&this._match(An.tokens.equal)&&(e.value=this._const_expression()),e}_global_const_decl(){if(!this._match(An.keywords.const))return null;const e=this._consume(An.tokens.ident,"Expected variable name");let t=null;if(this._match(An.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let r=null;if(this._match(An.tokens.equal)){const e=this._short_circuit_or_expression();if(e instanceof cn)r=e;else if(e instanceof dn&&e.initializer instanceof cn)r=e.initializer;else try{const t=e.evaluate(this._context);r=new hn(t)}catch(t){r=e}}const n=new Lr(e.toString(),t,"","",r);return this._context.constants.set(n.name,n),n}_global_let_decl(){if(!this._match(An.keywords.let))return null;const e=this._consume(An.tokens.ident,"Expected variable name");let t=null;if(this._match(An.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let r=null;return this._match(An.tokens.equal)&&(r=this._const_expression()),new jr(e.toString(),t,"","",r)}_const_expression(){if(this._match(An.const_literal))return new un(this._previous().toString());const e=this._type_decl();this._consume(An.tokens.paren_left,"Expected '('.");let t=[];for(;!this._check(An.tokens.paren_right)&&(t.push(this._const_expression()),this._check(An.tokens.comma));)this._advance();return this._consume(An.tokens.paren_right,"Expected ')'."),new cn(e,t)}_variable_decl(){if(!this._match(An.keywords.var))return null;let e="",t="";this._match(An.tokens.less_than)&&(e=this._consume(An.storage_class,"Expected storage_class.").toString(),this._match(An.tokens.comma)&&(t=this._consume(An.access_mode,"Expected access_mode.").toString()),this._consume(An.tokens.greater_than,"Expected '>'."));const r=this._consume(An.tokens.ident,"Expected variable name");let n=null;if(this._match(An.tokens.colon)){const e=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=e)}return new Nr(r.toString(),n,e,t,null)}_override_decl(){if(!this._match(An.keywords.override))return null;const e=this._consume(An.tokens.ident,"Expected variable name");let t=null;if(this._match(An.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}return new Gr(e.toString(),t,null)}_enable_directive(){const e=this._consume(An.tokens.ident,"identity expected.");return new Xr(e.toString())}_type_alias(){const e=this._consume(An.tokens.ident,"identity expected.");this._consume(An.tokens.equal,"Expected '=' for type alias.");let t=this._type_decl();if(null===t)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);const r=new Zr(e.toString(),t);return this._context.aliases.set(r.name,r),r}_type_decl(){if(this._check([An.tokens.ident,...An.texel_format,An.keywords.bool,An.keywords.f32,An.keywords.i32,An.keywords.u32])){const e=this._advance(),t=e.toString();return this._context.structs.has(t)?this._context.structs.get(t):this._context.aliases.has(t)?this._context.aliases.get(t).type:new en(e.toString())}let e=this._texture_sampler_types();if(e)return e;if(this._check(An.template_types)){let e=this._advance().toString(),t=null,r=null;return this._match(An.tokens.less_than)&&(t=this._type_decl(),r=null,this._match(An.tokens.comma)&&(r=this._consume(An.access_mode,"Expected access_mode for pointer").toString()),this._consume(An.tokens.greater_than,"Expected '>' for type.")),new rn(e,t,r)}if(this._match(An.keywords.ptr)){let e=this._previous().toString();this._consume(An.tokens.less_than,"Expected '<' for pointer.");const t=this._consume(An.storage_class,"Expected storage_class for pointer");this._consume(An.tokens.comma,"Expected ',' for pointer.");const r=this._type_decl();let n=null;return this._match(An.tokens.comma)&&(n=this._consume(An.access_mode,"Expected access_mode for pointer").toString()),this._consume(An.tokens.greater_than,"Expected '>' for pointer."),new nn(e,t.toString(),r,n)}const t=this._attribute();if(this._match(An.keywords.array)){let e=null,r=-1;const n=this._previous();if(this._match(An.tokens.less_than)){e=this._type_decl(),this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);let t="";this._match(An.tokens.comma)&&(t=this._shift_expression().evaluate(this._context).toString()),this._consume(An.tokens.greater_than,"Expected '>' for array."),r=t?parseInt(t):0}return new sn(n.toString(),t,e,r)}return null}_texture_sampler_types(){if(this._match(An.sampler_type))return new an(this._previous().toString(),null,null);if(this._match(An.depth_texture_type))return new an(this._previous().toString(),null,null);if(this._match(An.sampled_texture_type)||this._match(An.multisampled_texture_type)){const e=this._previous();this._consume(An.tokens.less_than,"Expected '<' for sampler type.");const t=this._type_decl();return this._consume(An.tokens.greater_than,"Expected '>' for sampler type."),new an(e.toString(),t,null)}if(this._match(An.storage_texture_type)){const e=this._previous();this._consume(An.tokens.less_than,"Expected '<' for sampler type.");const t=this._consume(An.texel_format,"Invalid texel format.").toString();this._consume(An.tokens.comma,"Expected ',' after texel format.");const r=this._consume(An.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(An.tokens.greater_than,"Expected '>' for sampler type."),new an(e.toString(),t,r)}return null}_attribute(){let e=[];for(;this._match(An.tokens.attr);){const t=this._consume(An.attribute_name,"Expected attribute name"),r=new Pn(t.toString(),null);if(this._match(An.tokens.paren_left)){if(r.value=this._consume(An.literal_or_ident,"Expected attribute value").toString(),this._check(An.tokens.comma)){this._advance();do{const e=this._consume(An.literal_or_ident,"Expected attribute value").toString();r.value instanceof Array||(r.value=[r.value]),r.value.push(e)}while(this._match(An.tokens.comma))}this._consume(An.tokens.paren_right,"Expected ')'")}e.push(r)}for(;this._match(An.tokens.attr_left);){if(!this._check(An.tokens.attr_right))do{const t=this._consume(An.attribute_name,"Expected attribute name"),r=new Pn(t.toString(),null);if(this._match(An.tokens.paren_left)){if(r.value=[this._consume(An.literal_or_ident,"Expected attribute value").toString()],this._check(An.tokens.comma)){this._advance();do{const e=this._consume(An.literal_or_ident,"Expected attribute value").toString();r.value.push(e)}while(this._match(An.tokens.comma))}this._consume(An.tokens.paren_right,"Expected ')'")}e.push(r)}while(this._match(An.tokens.comma));this._consume(An.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==e.length?null:e}}class In{constructor(e,t){this.name=e,this.attributes=t,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class Cn{constructor(e,t,r){this.name=e,this.type=t,this.attributes=r,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class Rn extends In{constructor(e,t){super(e,t),this.members=[],this.align=0}get isStruct(){return!0}}class zn extends In{constructor(e,t){super(e,t),this.count=0,this.stride=0}get isArray(){return!0}}class Dn extends In{constructor(e,t,r,n){super(e,r),this.format=t,this.access=n}get isTemplate(){return!0}}!function(e){e[e.Uniform=0]="Uniform",e[e.Storage=1]="Storage",e[e.Texture=2]="Texture",e[e.Sampler=3]="Sampler",e[e.StorageTexture=4]="StorageTexture"}(Mr||(Mr={}));class Bn{constructor(e,t,r,n,i,s,a){this.name=e,this.type=t,this.group=r,this.binding=n,this.attributes=i,this.resourceType=s,this.access=a}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class Nn{constructor(e,t){this.name=e,this.type=t}}class Gn{constructor(e,t){this.align=e,this.size=t}}class jn{constructor(e,t,r,n){this.name=e,this.type=t,this.locationType=r,this.location=n,this.interpolation=null}}class Ln{constructor(e,t,r,n){this.name=e,this.type=t,this.locationType=r,this.location=n}}class Vn{constructor(e,t=null){this.stage=null,this.inputs=[],this.outputs=[],this.resources=[],this.name=e,this.stage=t}}class qn{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class Fn{constructor(e,t,r,n){this.name=e,this.type=t,this.attributes=r,this.id=n}}class Yn{constructor(e){this.resources=null,this.node=e}}class Hn{constructor(e){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new qn,this._types=new Map,this._functions=new Map,e&&this.update(e)}_isStorageTexture(e){return"texture_storage_1d"==e.name||"texture_storage_2d"==e.name||"texture_storage_2d_array"==e.name||"texture_storage_3d"==e.name}update(e){const t=(new On).parse(e);for(const e of t)e instanceof Cr&&this._functions.set(e.name,new Yn(e));for(const e of t)if(e instanceof tn){const t=this._getTypeInfo(e,null);t instanceof Rn&&this.structs.push(t)}else if(e instanceof Zr)this.aliases.push(this._getAliasInfo(e));else if(e instanceof Gr){const t=e,r=this._getAttributeNum(t.attributes,"id",0),n=null!=t.type?this._getTypeInfo(t.type,t.attributes):null;this.overrides.push(new Fn(t.name,n,t.attributes,r))}else if(this._isUniformVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new Bn(t.name,i,r,n,t.attributes,Mr.Uniform,t.access);this.uniforms.push(s)}else if(this._isStorageVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=this._isStorageTexture(i),a=new Bn(t.name,i,r,n,t.attributes,s?Mr.StorageTexture:Mr.Storage,t.access);this.storage.push(a)}else if(this._isTextureVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=this._isStorageTexture(i),a=new Bn(t.name,i,r,n,t.attributes,s?Mr.StorageTexture:Mr.Texture,t.access);s?this.storage.push(a):this.textures.push(a)}else if(this._isSamplerVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new Bn(t.name,i,r,n,t.attributes,Mr.Sampler,t.access);this.samplers.push(s)}else if(e instanceof Cr){const t=this._getAttribute(e,"vertex"),r=this._getAttribute(e,"fragment"),n=this._getAttribute(e,"compute"),i=t||r||n;if(i){const t=new Vn(e.name,null==i?void 0:i.name);t.inputs=this._getInputs(e.args),t.outputs=this._getOutputs(e.returnType),t.resources=this._findResources(e),this.entry[i.name].push(t)}}}_findResource(e){for(const t of this.uniforms)if(t.name==e)return t;for(const t of this.storage)if(t.name==e)return t;for(const t of this.textures)if(t.name==e)return t;for(const t of this.samplers)if(t.name==e)return t;return null}_findResources(e){const t=[],r=this,n=[];return e.search((e=>{if(e instanceof Ur)n.push({});else if(e instanceof Or)n.pop();else if(e instanceof Nr){if(n.length>0){const t=e;n[n.length-1][t.name]=t}}else if(e instanceof jr){if(n.length>0){const t=e;n[n.length-1][t.name]=t}}else if(e instanceof fn){const i=e;if(n.length>0&&n[n.length-1][i.name])return;const s=r._findResource(i.name);s&&t.push(s)}else if(e instanceof ln){const n=e,i=r._functions.get(n.name);i&&(null===i.resources&&(i.resources=r._findResources(i.node)),t.push(...i.resources))}})),[...new Map(t.map((e=>[e.name,e]))).values()]}getBindGroups(){const e=[];function t(t,r){t>=e.length&&(e.length=t+1),void 0===e[t]&&(e[t]=[]),r>=e[t].length&&(e[t].length=r+1)}for(const r of this.uniforms)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.storage)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.textures)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.samplers)t(r.group,r.binding),e[r.group][r.binding]=r;return e}_getOutputs(e,t=void 0){if(void 0===t&&(t=[]),e instanceof tn)this._getStructOutputs(e,t);else{const r=this._getOutputInfo(e);null!==r&&t.push(r)}return t}_getStructOutputs(e,t){for(const r of e.members)if(r.type instanceof tn)this._getStructOutputs(r.type,t);else{const e=this._getAttribute(r,"location")||this._getAttribute(r,"builtin");if(null!==e){const n=this._getTypeInfo(r.type,r.type.attributes),i=this._parseInt(e.value),s=new Ln(r.name,n,e.name,i);t.push(s)}}}_getOutputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const r=this._getTypeInfo(e,e.attributes),n=this._parseInt(t.value);return new Ln("",r,t.name,n)}return null}_getInputs(e,t=void 0){void 0===t&&(t=[]);for(const r of e)if(r.type instanceof tn)this._getStructInputs(r.type,t);else{const e=this._getInputInfo(r);null!==e&&t.push(e)}return t}_getStructInputs(e,t){for(const r of e.members)if(r.type instanceof tn)this._getStructInputs(r.type,t);else{const e=this._getInputInfo(r);null!==e&&t.push(e)}}_getInputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const r=this._getAttribute(e,"interpolation"),n=this._getTypeInfo(e.type,e.attributes),i=this._parseInt(t.value),s=new jn(e.name,n,t.name,i);return null!==r&&(s.interpolation=this._parseString(r.value)),s}return null}_parseString(e){return e instanceof Array&&(e=e[0]),e}_parseInt(e){e instanceof Array&&(e=e[0]);const t=parseInt(e);return isNaN(t)?e:t}_getAlias(e){for(const t of this.aliases)if(t.name==e)return t.type;return null}_getAliasInfo(e){return new Nn(e.name,this._getTypeInfo(e.type,null))}_getTypeInfo(e,t){if(this._types.has(e))return this._types.get(e);if(e instanceof sn){const r=e,n=this._getTypeInfo(r.format,r.attributes),i=new zn(r.name,t);return i.format=n,i.count=r.count,this._types.set(e,i),this._updateTypeInfo(i),i}if(e instanceof tn){const r=e,n=new Rn(r.name,t);for(const e of r.members){const t=this._getTypeInfo(e.type,e.attributes);n.members.push(new Cn(e.name,t,e.attributes))}return this._types.set(e,n),this._updateTypeInfo(n),n}if(e instanceof an){const r=e,n=r.format instanceof en,i=r.format?n?this._getTypeInfo(r.format,null):new In(r.format,null):null,s=new Dn(r.name,i,t,r.access);return this._types.set(e,s),this._updateTypeInfo(s),s}if(e instanceof rn){const r=e,n=r.format?this._getTypeInfo(r.format,null):null,i=new Dn(r.name,n,t,r.access);return this._types.set(e,i),this._updateTypeInfo(i),i}const r=new In(e.name,t);return this._types.set(e,r),this._updateTypeInfo(r),r}_updateTypeInfo(e){var t,r;const n=this._getTypeSize(e);if(e.size=null!==(t=null==n?void 0:n.size)&&void 0!==t?t:0,e instanceof zn){const t=this._getTypeSize(e.format);e.stride=null!==(r=null==t?void 0:t.size)&&void 0!==r?r:0,this._updateTypeInfo(e.format)}e instanceof Rn&&this._updateStructInfo(e)}_updateStructInfo(e){var t;let r=0,n=0,i=0,s=0;for(let a=0,o=e.members.length;a<o;++a){const o=e.members[a],u=this._getTypeSize(o);if(!u)continue;null!==(t=this._getAlias(o.type.name))&&void 0!==t||o.type;const c=u.align,l=u.size;r=this._roundUp(c,r+n),n=l,i=r,s=Math.max(s,c),o.offset=r,o.size=l,this._updateTypeInfo(o.type)}e.size=this._roundUp(s,i+n),e.align=s}_getTypeSize(e){var t;if(null==e)return null;const r=this._getAttributeNum(e.attributes,"size",0),n=this._getAttributeNum(e.attributes,"align",0);if(e instanceof Cn&&(e=e.type),e instanceof In){const t=this._getAlias(e.name);null!==t&&(e=t)}{const t=Hn._typeInfo[e.name];if(void 0!==t){const i="f16"===e.format?2:1;return new Gn(Math.max(n,t.align/i),Math.max(r,t.size/i))}}{const t=Hn._typeInfo[e.name.substring(0,e.name.length-1)];if(t){const i="h"===e.name[e.name.length-1]?2:1;return new Gn(Math.max(n,t.align/i),Math.max(r,t.size/i))}}if(e instanceof zn){let i=e,s=8,a=8;const o=this._getTypeSize(i.format);return null!==o&&(a=o.size,s=o.align),a=i.count*this._getAttributeNum(null!==(t=null==e?void 0:e.attributes)&&void 0!==t?t:null,"stride",this._roundUp(s,a)),r&&(a=r),new Gn(Math.max(n,s),Math.max(r,a))}if(e instanceof Rn){let t=0,i=0,s=0,a=0,o=0;for(const r of e.members){const e=this._getTypeSize(r.type);null!==e&&(t=Math.max(e.align,t),s=this._roundUp(e.align,s+a),a=e.size,o=s)}return i=this._roundUp(t,o+a),new Gn(Math.max(n,t),Math.max(r,i))}return null}_isUniformVar(e){return e instanceof Nr&&"uniform"==e.storage}_isStorageVar(e){return e instanceof Nr&&"storage"==e.storage}_isTextureVar(e){return e instanceof Nr&&null!==e.type&&-1!=Hn._textureTypes.indexOf(e.type.name)}_isSamplerVar(e){return e instanceof Nr&&null!==e.type&&-1!=Hn._samplerTypes.indexOf(e.type.name)}_getAttribute(e,t){const r=e;if(!r||!r.attributes)return null;const n=r.attributes;for(let e of n)if(e.name==t)return e;return null}_getAttributeNum(e,t,r){if(null===e)return r;for(let n of e)if(n.name==t){let e=null!==n&&null!==n.value?n.value:r;return e instanceof Array&&(e=e[0]),"number"==typeof e?e:"string"==typeof e?parseInt(e):r}return r}_roundUp(e,t){return Math.ceil(t/e)*e}}function Wn(e,t){const r=function(e){return Array.isArray(e)||xr(e)?[...e,1,1].slice(0,3):function(e){return[e.width,e.height||1,e.depthOrArrayLayers||1]}(e)}(e),n=Math.max(...r.slice(0,"3d"===t?3:2));return 1+Math.log2(n)|0}Hn._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},Hn._textureTypes=An.any_texture_type.map((e=>e.name)),Hn._samplerTypes=An.sampler_type.map((e=>e.name));const $n=new WeakMap;const Xn=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function Zn(e){return xr(e)||Array.isArray(e)||function(e){const t=e;return xr(t.data)||Array.isArray(t.data)}(e)}function Kn(e){switch(e){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Xn.entries()].map((([e,{formats:[t,r]}])=>[[t,e],[r,e]])).flat());const Qn={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},Jn=/([a-z]+)(\d+)([a-z]+)/;function ei(e){const[,t,r,n]=Jn.exec(e),i=t.length,s=parseInt(r)/8;return{channels:t,numChannels:i,bytesPerChannel:s,bytesPerElement:i*s,Type:Qn[`${r}${n}`]}}function ti(e,t,r,n={}){r.forEach(((r,i)=>{const s=[0,0,i+(n.baseArrayLayer||0)];if(Zn(r))!function(e,t,r,n){const i=function(e,t){if(xr(e))return e;const{Type:r}=ei(t);return new r(e)}(r.data||r,t.format),s=function(e,t){return[e.width,e.height,e.depthOrArrayLayers].map((e=>Math.max(1,Math.floor(e/1))))}(t),{bytesPerElement:a}=ei(t.format),o=n.origin||[0,0,0];e.queue.writeTexture({texture:t,origin:o},i,{bytesPerRow:a*s[0],rowsPerImage:s[1]},s)}(e,t,r,{origin:s});else{const i=r,{flipY:a,premultipliedAlpha:o,colorSpace:u}=n;e.queue.copyExternalImageToTexture({source:i,flipY:a},{texture:t,premultipliedAlpha:o,colorSpace:u,origin:s},ri(i,n))}})),t.mipLevelCount>1&&function(e,t,r){let n=$n.get(e);n||(n={pipelineByFormatAndView:{},moduleByViewType:{}},$n.set(e,n));let{sampler:i,uniformBuffer:s,uniformValues:a}=n;const{pipelineByFormatAndView:o,moduleByViewType:u}=n;r=r||function(e){switch(e.dimension){case"1d":return"1d";case"3d":return"3d";default:return e.depthOrArrayLayers>1?"2d-array":"2d"}}(t);let c=u[r];if(!c){const t=function(e){let t,r;switch(e){case"2d":t="texture_2d<f32>",r="textureSample(ourTexture, ourSampler, fsInput.texcoord)";break;case"2d-array":t="texture_2d_array<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              fsInput.texcoord,\n              uni.layer)";break;case"cube":t="texture_cube<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1))";break;case"cube-array":t="texture_cube_array<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1), uni.layer)";break;default:throw new Error(`unsupported view: ${e}`)}return`\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        struct Uniforms {\n          layer: u32,\n        };\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: ${t};\n        @group(0) @binding(2) var<uniform> uni: Uniforms;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          _ = uni.layer; // make sure this is used so all pipelines have the same bindings\n          return ${r};\n        }\n      `}(r);c=e.createShaderModule({label:`mip level generation for ${r}`,code:t}),u[r]=c}i||(i=e.createSampler({minFilter:"linear",magFilter:"linear"}),s=e.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),a=new Uint32Array(1),Object.assign(n,{sampler:i,uniformBuffer:s,uniformValues:a}));const l=`${t.format}.${r}`;o[l]||(o[l]=e.createRenderPipeline({label:`mip level generator pipeline for ${r}`,layout:"auto",vertex:{module:c,entryPoint:"vs"},fragment:{module:c,entryPoint:"fs",targets:[{format:t.format}]}}));const f=o[l];for(let n=1;n<t.mipLevelCount;++n)for(let o=0;o<t.depthOrArrayLayers;++o){a[0]=o,e.queue.writeBuffer(s,0,a);const u=e.createBindGroup({layout:f.getBindGroupLayout(0),entries:[{binding:0,resource:i},{binding:1,resource:t.createView({dimension:r,baseMipLevel:n-1,mipLevelCount:1})},{binding:2,resource:{buffer:s}}]}),c={label:"mip gen renderPass",colorAttachments:[{view:t.createView({dimension:"2d",baseMipLevel:n,mipLevelCount:1,baseArrayLayer:o,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},l=e.createCommandEncoder({label:"mip gen encoder"}),d=l.beginRenderPass(c);d.setPipeline(f),d.setBindGroup(0,u),d.draw(3),d.end();const h=l.finish();e.queue.submit([h])}}(e,t)}function ri(e,t){if(e instanceof HTMLVideoElement)return[e.videoWidth,e.videoHeight,1];{const r=e,{width:n,height:i}=r;if(n>0&&i>0&&!Zn(e))return[n,i,1];const s=t.format||"rgba8unorm",{bytesPerElement:a,bytesPerChannel:o}=ei(s),u=xr(e)||Array.isArray(e)?e:e.data;return function(e,t,r,n="2d"){if(r%1!=0)throw new Error("can't guess dimensions");if(e||t){if(t){if(!e&&(e=r/t)%1)throw new Error("can't guess dimensions")}else if((t=r/e)%1)throw new Error("can't guess dimensions")}else{const i=Math.sqrt(r/("cube"===n?6:1));i%1==0?(e=i,t=i):(e=r,t=1)}const i=r/e/t;if(i%1)throw new Error("can't guess dimensions");return[e,t,i]}(n,i,(xr(u)?u.byteLength:u.length*o)/a)}}async function ni(e,t,r={}){const n=await Promise.all(t.map((e=>async function(e,t={}){const r=await fetch(e),n=await r.blob(),i={...t,...void 0!==t.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(n,i)}(e))));return function(e,t,r={}){const n=ri(t[0],r);n[2]=n[2]>1?n[2]:t.length;const i=e.createTexture({dimension:Kn(r.dimension),format:r.format||"rgba8unorm",mipLevelCount:r.mipLevelCount?r.mipLevelCount:r.mips?Wn(n):1,size:n,usage:(r.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return ti(e,i,t,r),i}(e,n,r)}async function ii(e,t,r={}){return ni(e,[t],r)}const si="r8unorm",ai=async(e,t,r)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");const n=await(async(e,t)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");const r=e.createTexture({size:{width:t.width,height:t.height,depthOrArrayLayers:t.depthOrArrayLayers},format:t.format,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:t.mipLevelCount}),n=e.createCommandEncoder();for(let e=0;e<t.mipLevelCount;e++)for(let i=0;i<t.depthOrArrayLayers>>e;i++)n.copyTextureToTexture({texture:t,mipLevel:e,origin:{x:0,y:0,z:i}},{texture:r,mipLevel:e,origin:{x:0,y:0,z:i}},{width:t.width>>e,height:t.height>>e,depthOrArrayLayers:1});return e.queue.submit([n.finish()]),await e.queue.onSubmittedWorkDone(),r})(e,t),i=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),s=e.createBuffer({size:256*t.depthOrArrayLayers,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.UNIFORM,label:"z indices buffer"}),a=Array.from({length:t.depthOrArrayLayers},((e,t)=>t));for(let t=0;t<a.length;t++)e.queue.writeBuffer(s,256*t,new Uint32Array([a[t]]).buffer);const o=e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[i]}),vertex:{module:e.createShaderModule({code:"\n          struct VertexOutput {\n            @builtin(position) Position : vec4<f32>,\n          }\n          const pos = array(\n              vec2( 1.0,  1.0),\n              vec2( 1.0, -1.0),\n              vec2(-1.0, -1.0),\n              vec2( 1.0,  1.0),\n              vec2(-1.0, -1.0),\n              vec2(-1.0,  1.0),\n            );\n          @vertex\n          fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n            var output : VertexOutput;\n            output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n            return output;\n          }"}),entryPoint:"vertex_main"},fragment:{module:e.createShaderModule({code:"\n          @group(0) @binding(0) var voxels : texture_3d<f32>;\n          @group(0) @binding(1) var<uniform> zIndex: u32;\n          @fragment\r\nfn fragment_main(@builtin(position) position : vec4<f32>) -> @location(0) vec4<f32> {\r\n  let srcTexel = vec3(vec2<u32>(position.xy),zIndex);\r\n  var colours = array<f32, 8>();\r\n  var isOctantEmpty = true;\r\n  for(var x = u32(0); x < 2; x++){\r\n    for(var y = u32(0); y < 2; y++){\r\n      for(var z = u32(0); z < 2; z++){\r\n        let voxelX = srcTexel.x * 2 + x;\r\n        let voxelY = srcTexel.y * 2 + y;\r\n        let voxelZ = srcTexel.z * 2 + z;\r\n        var voxelId = vec3<u32>(voxelX,voxelY,voxelZ);\r\n        var voxel = textureLoad(voxels,voxelId,0).r;\r\n        if(voxel > 0){\r\n          var index = x + y * 2 + z * 4;\r\n          colours[index] = voxel;\r\n          isOctantEmpty = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // If all voxels in the octant are empty, keep it blank\r\n  if(isOctantEmpty){\r\n    discard;\r\n  }\r\n\r\n  // Get the most common colour in the octant\r\n  var mostCommonColour = f32(0);\r\n  var mostCommonColourCount = u32(0);\r\n  for(var i = u32(0); i < 8; i = i + 1u){\r\n    var colour = colours[i];\r\n    var count = u32(0);\r\n    for(var j = u32(0); j < 8; j = j + 1u){\r\n      if(colour > 0 && colour == colours[j]){\r\n        count++;\r\n      }\r\n    }\r\n    if(count > mostCommonColourCount){\r\n      mostCommonColour = colour;\r\n      mostCommonColourCount = count;\r\n    }\r\n  }\r\n\r\n  return vec4(mostCommonColour, 0,0,0);\r\n}\r\n\r\n\n        "}),entryPoint:"fragment_main",targets:[{format:t.format}]}}),u=e.createCommandEncoder(),c=Math.max(1,t.depthOrArrayLayers>>r);for(let a=0;a<c;a++){const c=e.createBindGroup({layout:i,entries:[{binding:0,resource:t.createView({label:`${r} mip level of volume texture`,dimension:"3d",baseMipLevel:r-1,mipLevelCount:1})},{binding:1,resource:{buffer:s,offset:256*a,size:4}}]}),l=u.beginRenderPass({colorAttachments:[{view:n.createView({label:"volume slice for rendering mips",baseArrayLayer:a,arrayLayerCount:1,baseMipLevel:r,mipLevelCount:1,dimension:"2d-array"}),loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});l.setPipeline(o),l.setBindGroup(0,c),l.draw(6),l.end()}return e.queue.submit([u.finish()]),await e.queue.onSubmittedWorkDone(),await(async(e,t)=>{if("2d"!==t.dimension)throw new Error("Input texture should be a 2D texture");const r=e.createTexture({size:{width:t.width,height:t.height,depthOrArrayLayers:t.depthOrArrayLayers},format:t.format,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d",mipLevelCount:t.mipLevelCount}),n=e.createCommandEncoder();for(let e=0;e<t.mipLevelCount;e++)for(let i=0;i<t.depthOrArrayLayers>>e;i++)n.copyTextureToTexture({texture:t,mipLevel:e,origin:{x:0,y:0,z:i}},{texture:r,mipLevel:e,origin:{x:0,y:0,z:i}},{width:t.width>>e,height:t.height>>e,depthOrArrayLayers:1});return e.queue.submit([n.finish()]),await e.queue.onSubmittedWorkDone(),r})(e,n)},oi={format:si,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d"},ui=(e,t)=>Math.ceil(e/t)*t,ci=Math.pow(2,3),li=ci,fi=256;class di{#i={};#s;#a;#o;constructor(e){this.#o=e,this.#s=e.createTexture({size:{width:li,height:li,depthOrArrayLayers:li},...oi,label:"Volume atlas containing ",mipLevelCount:4}),this.#a=e.createTexture({size:{width:fi,height:1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,label:"Palette texture",mipLevelCount:1})}get dictionary(){return this.#i}addVolume=async(e,t,r)=>{if(this.#i[r])throw new Error(`Error adding volume to atlas: volume with label ${r} already exists`);const n=this.#o.createCommandEncoder(),{width:i,height:s,depthOrArrayLayers:a}=e,o=ui(i,ci),u=ui(s,ci),c=ui(a,ci),l=this.#s.width+o;if(l>this.#o.limits.maxTextureDimension3D)throw new Error(`Error adding volume to atlas: adding volume would exceed device max texture dimension of ${this.#o.limits.maxTextureDimension3D}`);const f=Math.max(this.#s.height,u),d=Math.max(this.#s.depthOrArrayLayers,c),h=this.#o.createTexture({size:{width:l,height:f,depthOrArrayLayers:d},mipLevelCount:this.#s.mipLevelCount,...oi,label:`${this.#s.label}, ${e.label||"unnamed volume"}`}),p=this.#s.width;n.copyTextureToTexture({texture:this.#s},{texture:h},{width:this.#s.width,height:this.#s.height,depthOrArrayLayers:this.#s.depthOrArrayLayers}),n.copyTextureToTexture({texture:e,mipLevel:0,origin:{x:0,y:0,z:0}},{texture:h,mipLevel:0,origin:{x:p,y:0,z:0}},{width:e.width,height:e.height,depthOrArrayLayers:e.depthOrArrayLayers}),this.#s=h;const m=this.#a.height;this.#i[r]={location:[p,0,0],size:[i,s,a],paletteIndex:m};const g=this.#o.createTexture({size:{width:fi,height:this.#a.height+1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,label:"Palette texture",mipLevelCount:1});n.copyTextureToTexture({texture:this.#a},{texture:g},{width:fi,height:this.#a.height,depthOrArrayLayers:1}),n.copyTextureToTexture({texture:t},{texture:g,origin:{x:0,y:m,z:0}},{width:fi,height:1,depthOrArrayLayers:1}),this.#a=g,this.#o.queue.submit([n.finish()]),await this.#o.queue.onSubmittedWorkDone(),this.#s=await(async(e,t)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");let r=t;for(let n=1;n<t.mipLevelCount;n++)r=await ai(e,r,n);return r})(this.#o,this.#s),(async(e,t,r)=>{const n=document.getElementById("debug-canvas");n.style.imageRendering="pixelated",n.width=r.width,n.height=r.height;const i=n.getContext("webgpu");i.configure({device:e,format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT});const s=e.createCommandEncoder(),a=e.createShaderModule({code:gr}),o=e.createRenderPipeline({label:"write texture to canvas",layout:"auto",vertex:{module:a,entryPoint:"vertex_main"},fragment:{module:a,entryPoint:"fragment_main",targets:[{format:"rgba8unorm"}]}}),u=s.beginRenderPass({label:"write texture to canvas",colorAttachments:[{view:i.getCurrentTexture().createView(),loadOp:"clear",clearValue:[.3,.3,.3,.3],storeOp:"store"}]}),c=e.createBindGroup({layout:o.getBindGroupLayout(0),entries:[{binding:1,resource:r.createView({label:"texture being written to canvas"})}]});u.setPipeline(o),u.setBindGroup(0,c),u.draw(6),u.end(),e.queue.submit([s.finish()])})(this.#o,0,this.#a)};get atlasTextureView(){return this.#s.createView({label:this.#s.label})}get paletteTextureView(){return this.#a.createView({label:this.#a.label})}}const hi="// Constants\r\nconst infinity : f32 = 99999999.0;\r\n\r\n// Utility functions\r\nfn degreesToRadians(degrees : f32) -> f32 {\r\n    return degrees * (3.1415926535897932385 / 180.0);\r\n}\r\n\r\nfn unitVector(v : vec3<f32>) -> vec3<f32> {\r\n    return v / length(v);\r\n}\r\n\r\nfn lengthSquared(v : vec3<f32>) -> f32 {\r\n    return v.x * v.x + v.y * v.y + v.z * v.z;\r\n}\r\n\r\nfn random(co : vec2<f32>) -> f32 {\r\n    return fract(sin(dot(co, vec2<f32>(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nfn randomMinMax(co : vec2<f32>, min : f32, max : f32) -> f32 {\r\n    return min + (max - min) * random(co);\r\n}\r\n\r\nfn randomFloat3(co : vec2<f32>) -> vec3<f32> {\r\n    return vec3<f32>(random(co), random(co * 2.0), random(co * 3.0));\r\n}\r\n\r\nfn randomFloat3MinMax(co : vec2<f32>, min : f32, max : f32) -> vec3<f32> {\r\n    return vec3<f32>(randomMinMax(co, min, max), randomMinMax(co * 2.0, min, max), randomMinMax(co * 3.0, min, max));\r\n}\r\n\r\nfn randomInUnitSphere(co : vec2<f32>) -> vec3<f32> {\r\n    var p : vec3<f32> = randomFloat3MinMax(co, -1.0, 1.0);\r\n    while (lengthSquared(p) < 1.0) {\r\n        p = randomFloat3MinMax(co, -1.0, 1.0);\r\n    }\r\n    return p;\r\n}\r\n\r\nfn randomInUnitDisk(seed : vec2<f32>) -> vec2<f32> {\r\n    let r = sqrt(random(seed));\r\n    let theta = 2.0 * 3.14159265359 * random(vec2<f32>(seed.y, seed.x));\r\n    return vec2<f32>(cos(theta), sin(theta)) * r;\r\n}\r\n\r\nfn randomInPlanarUnitDisk(seed : vec2<f32>, normal: vec3<f32>) -> vec3<f32> {\r\n    let disk = randomInUnitDisk(seed);\r\n    var diskNormal = cross(normal, vec3<f32>(0.0, 1.0, 0.0));\r\n    if (length(diskNormal) < 0.01) {\r\n        diskNormal = cross(normal, vec3<f32>(1.0, 0.0, 0.0));\r\n    }\r\n    diskNormal = normalize(diskNormal);\r\n    let diskTangent = cross(diskNormal, normal);\r\n    return disk.x * diskTangent + disk.y * diskNormal;\r\n}\r\n\r\nfn reflect(v : vec3<f32>, n : vec3<f32>) -> vec3<f32> {\r\n    return v - 2.0 * dot(v, n) * n;\r\n}\r\n\r\nfn randomUnitVector(co : vec2<f32>) -> vec3<f32> {\r\n    return unitVector(randomInUnitSphere(co));\r\n}\r\n\r\nfn nearZero(e : vec3<f32>) -> bool {\r\n    const s : f32 = 1e-8;\r\n    return (abs(e.x) < s) && (abs(e.y) < s) && (abs(e.z) < s);\r\n}\r\n\r\nfn randomInHemisphere(co : vec2<f32>, normal : vec3<f32>) -> vec3<f32> {\r\n    let inUnitSphere = randomUnitVector(co);\r\n    if (dot(inUnitSphere, normal) > 0.0) {\r\n        return inUnitSphere;\r\n    }\r\n    return -inUnitSphere;\r\n}\r\n\r\n// Function to perturb the normal vector within the hemisphere\r\nfn perturbDirection(normal: vec3<f32>, scatterAmount: f32, co: vec2<f32>) -> vec3<f32> {\r\n    // Generate a random vector in a hemisphere\r\n    let hemisphereVector : vec3<f32> = randomInHemisphere(co, normal);\r\n\r\n    // Combine the perturbation with the original normal\r\n    let perturbedDir : vec3<f32> = normalize(normal + scatterAmount * hemisphereVector);\r\n\r\n    return perturbedDir;\r\n}\r\n\r\nfn permute4(x: vec4<f32>) -> vec4<f32> { return ((x * 34. + 1.) * x) % vec4<f32>(289.); }\r\nfn taylorInvSqrt4(r: vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r; }\r\nfn fade3(t: vec3<f32>) -> vec3<f32> { return t * t * t * (t * (t * 6. - 15.) + 10.); }\r\n\r\nfn perlinNoise3(P: vec3<f32>) -> f32 {\r\n    var Pi0 : vec3<f32> = floor(P); // Integer part for indexing\r\n    var Pi1 : vec3<f32> = Pi0 + vec3<f32>(1.); // Integer part + 1\r\n    Pi0 = Pi0 % vec3<f32>(289.);\r\n    Pi1 = Pi1 % vec3<f32>(289.);\r\n    let Pf0 = fract(P); // Fractional part for interpolation\r\n    let Pf1 = Pf0 - vec3<f32>(1.); // Fractional part - 1.\r\n    let ix = vec4<f32>(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n    let iy = vec4<f32>(Pi0.yy, Pi1.yy);\r\n    let iz0 = Pi0.zzzz;\r\n    let iz1 = Pi1.zzzz;\r\n\r\n    let ixy = permute4(permute4(ix) + iy);\r\n    let ixy0 = permute4(ixy + iz0);\r\n    let ixy1 = permute4(ixy + iz1);\r\n\r\n    var gx0: vec4<f32> = ixy0 / 7.;\r\n    var gy0: vec4<f32> = fract(floor(gx0) / 7.) - 0.5;\r\n    gx0 = fract(gx0);\r\n    var gz0: vec4<f32> = vec4<f32>(0.5) - abs(gx0) - abs(gy0);\r\n    var sz0: vec4<f32> = step(gz0, vec4<f32>(0.));\r\n    gx0 = gx0 + sz0 * (step(vec4<f32>(0.), gx0) - 0.5);\r\n    gy0 = gy0 + sz0 * (step(vec4<f32>(0.), gy0) - 0.5);\r\n\r\n    var gx1: vec4<f32> = ixy1 / 7.;\r\n    var gy1: vec4<f32> = fract(floor(gx1) / 7.) - 0.5;\r\n    gx1 = fract(gx1);\r\n    var gz1: vec4<f32> = vec4<f32>(0.5) - abs(gx1) - abs(gy1);\r\n    var sz1: vec4<f32> = step(gz1, vec4<f32>(0.));\r\n    gx1 = gx1 - sz1 * (step(vec4<f32>(0.), gx1) - 0.5);\r\n    gy1 = gy1 - sz1 * (step(vec4<f32>(0.), gy1) - 0.5);\r\n\r\n    var g000: vec3<f32> = vec3<f32>(gx0.x, gy0.x, gz0.x);\r\n    var g100: vec3<f32> = vec3<f32>(gx0.y, gy0.y, gz0.y);\r\n    var g010: vec3<f32> = vec3<f32>(gx0.z, gy0.z, gz0.z);\r\n    var g110: vec3<f32> = vec3<f32>(gx0.w, gy0.w, gz0.w);\r\n    var g001: vec3<f32> = vec3<f32>(gx1.x, gy1.x, gz1.x);\r\n    var g101: vec3<f32> = vec3<f32>(gx1.y, gy1.y, gz1.y);\r\n    var g011: vec3<f32> = vec3<f32>(gx1.z, gy1.z, gz1.z);\r\n    var g111: vec3<f32> = vec3<f32>(gx1.w, gy1.w, gz1.w);\r\n\r\n    let norm0 = taylorInvSqrt4(\r\n        vec4<f32>(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n    g000 = g000 * norm0.x;\r\n    g010 = g010 * norm0.y;\r\n    g100 = g100 * norm0.z;\r\n    g110 = g110 * norm0.w;\r\n    let norm1 = taylorInvSqrt4(\r\n        vec4<f32>(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n    g001 = g001 * norm1.x;\r\n    g011 = g011 * norm1.y;\r\n    g101 = g101 * norm1.z;\r\n    g111 = g111 * norm1.w;\r\n\r\n    let n000 = dot(g000, Pf0);\r\n    let n100 = dot(g100, vec3<f32>(Pf1.x, Pf0.yz));\r\n    let n010 = dot(g010, vec3<f32>(Pf0.x, Pf1.y, Pf0.z));\r\n    let n110 = dot(g110, vec3<f32>(Pf1.xy, Pf0.z));\r\n    let n001 = dot(g001, vec3<f32>(Pf0.xy, Pf1.z));\r\n    let n101 = dot(g101, vec3<f32>(Pf1.x, Pf0.y, Pf1.z));\r\n    let n011 = dot(g011, vec3<f32>(Pf0.x, Pf1.yz));\r\n    let n111 = dot(g111, Pf1);\r\n\r\n    var fade_xyz: vec3<f32> = fade3(Pf0);\r\n    let temp = vec4<f32>(f32(fade_xyz.z)); // simplify after chrome bug fix\r\n    let n_z = mix(vec4<f32>(n000, n100, n010, n110), vec4<f32>(n001, n101, n011, n111), temp);\r\n    let n_yz = mix(n_z.xy, n_z.zw, vec2f(f32(fade_xyz.y))); // simplify after chrome bug fix\r\n    let n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r\n    return 2.2 * n_xyz;\r\n}",pi={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},mi={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},gi={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}},vi={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},xi={binding:4,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},yi={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},_i={binding:6,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},bi={binding:7,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},wi={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},Ti={binding:9,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},ki=[pi,mi,gi,vi,xi,yi,_i,bi,wi,{binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:11,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:12,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:13,visibility:GPUShaderStage.COMPUTE,sampler:{}},{binding:14,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},{binding:15,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:16,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},{binding:17,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:18,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}}],Si=async()=>(async({shaderCode:e,effectEntryPoint:t,compositeEntryPoint:r,downscale:n,label:i})=>{if(!Number.isInteger(n))throw new Error("Downscale must be an integer");const c=Wi.createBindGroupLayout({entries:ki}),l=Wi.createBindGroupLayout({entries:[...ki,Ti]}),f=`\nstruct Time {\n  frame: u32,\n  deltaTime: f32,\n  elapsed: f32\n};\n\n@group(0) @binding(0) var depthTex : texture_2d<f32>;\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\n@group(0) @binding(2) var outputTex : texture_storage_2d<rgba8unorm, write>;\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(4) var voxels : texture_3d<f32>;\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(6) var<storage> voxelObjects : array<VoxelObject>;\n@group(0) @binding(7) var<uniform> sunDirection : vec3<f32>;\n@group(0) @binding(8) var linearSampler : sampler;\n@group(0) @binding(9) var intermediaryTexture : texture_2d<f32>;\n@group(0) @binding(10) var normalTex : texture_2d<f32>;\n@group(0) @binding(11) var blueNoiseTex : texture_2d<f32>;\n@group(0) @binding(12) var<uniform> time : Time;\n@group(0) @binding(13) var nearestSampler : sampler;\n@group(0) @binding(14) var velocityAndWaterTex : texture_2d<f32>;\n@group(0) @binding(15) var<storage> bvhNodes: array<BVHNode>;\n@group(0) @binding(16) var worldPosTex : texture_2d<f32>;\n@group(0) @binding(17) var albedoTex : texture_2d<f32>;\n@group(0) @binding(18) var skyCube : texture_cube<f32>;\n\nconst DOWNSCALE = ${n};\nstruct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  previousInverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\n${hi}\n${u}\n${s}\n${a}\n${o}\nconst MAX_COARSE_RAY_STEPS = 64;\r\n\r\nfn rayMarchCoarse(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>) -> bool {\r\n    let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\r\n    var voxelSize = vec3<f32>(1.0);\r\n    var objectPos = objectRayOrigin;\r\n    var currentIndex = vec3<i32>(round(objectPos));\r\n    var tDelta = voxelSize / abs(objectRayDirection);\r\n    var tIncrement = min(tDelta.x, min(tDelta.y, tDelta.z));\r\n\r\n    for(var i = 0; i < MAX_COARSE_RAY_STEPS; i++)\r\n    {\r\n      let samplePosition = objectPos + voxelObject.atlasLocation;\r\n      let uv = samplePosition / vec3<f32>(textureDimensions(voxels));\r\n      let mipSample0 = textureSampleLevel(voxels, nearestSampler, uv, 0.0);\r\n\r\n      if(mipSample0.a > 0.0){\r\n          return true;\r\n      }\r\n\r\n      objectPos += objectRayDirection * tIncrement;\r\n      currentIndex = vec3<i32>(round(objectPos));\r\n//      if(!isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n//          break;\r\n//      }\r\n    }\r\n    return false;\r\n}\r\n\r\nfn rayMarchTransformedCoarse(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> bool {\r\n    var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n    let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n    return rayMarchCoarse(voxelObject, objectRayDirection, objectRayOrigin);\r\n}\r\n\r\n// Used for shadows, return first hit\r\nfn rayMarchBVHCoarse(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, maxDistance: f32) -> bool {\r\n  // Create a stack to store the nodes to visit\r\n      var stack = stack_new();\r\n      stack_push(&stack, 0);\r\n\r\n      var iterations = 0;\r\n      var nodeIndex = 0;\r\n\r\n      while (stack.head > 0u && iterations < 32) {\r\n        let node = bvhNodes[nodeIndex];\r\n        if(node.objectCount == 0){\r\n          nodeIndex = stack_pop(&stack);\r\n        }\r\n        // valid leaf, raymarch it\r\n        else if(node.objectCount == 1){\r\n            // Raymarch the voxel object if it's a leaf node\r\n            let voxelObject = voxelObjects[node.leftIndex]; // left index represents the voxel object index for leaf nodes\r\n            let AABBDist = getDistanceToNode(rayOrigin, rayDirection, node);\r\n            if(rayMarchTransformedCoarse(voxelObject, rayDirection, rayOrigin + rayDirection * AABBDist)){\r\n              return true;\r\n            }\r\n            // Pop the stack and continue\r\n            nodeIndex = stack_pop(&stack);\r\n        }\r\n        else{\r\n          let leftDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.leftIndex]);\r\n          let rightDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.rightIndex]);\r\n          let hitLeft = leftDist >= 0.0 && leftDist < maxDistance;\r\n          let hitRight = rightDist >= 0.0 && rightDist < maxDistance;\r\n          if(hitLeft){\r\n            var nearIndex = node.leftIndex;\r\n            // We hit both left and right, choose the closest one\r\n            if(hitRight){\r\n              if(leftDist < rightDist){\r\n                // left is closer, push right to stack\r\n                stack_push(&stack, node.rightIndex);\r\n              } else {\r\n                // right is closer, push left to stack\r\n                stack_push(&stack, node.leftIndex);\r\n                nearIndex = node.rightIndex;\r\n              }\r\n            }\r\n            nodeIndex = nearIndex;\r\n          }\r\n          // We only hit the right Node\r\n          else if(hitRight){\r\n            nodeIndex = node.rightIndex;\r\n          }\r\n          // We didn't hit any node, pop the stack\r\n          else{\r\n            nodeIndex = stack_pop(&stack);\r\n          }\r\n        }\r\n\r\n        iterations += 1;\r\n      }\r\n\r\n      return false;\r\n}\n${e}`,d=Wi.createComputePipeline({label:i,layout:Wi.createPipelineLayout({bindGroupLayouts:[c]}),compute:{module:Wi.createShaderModule({code:f}),entryPoint:t}}),h=Wi.createComputePipeline({label:`${i} - composite`,layout:Wi.createPipelineLayout({bindGroupLayouts:[l]}),compute:{module:Wi.createShaderModule({code:f}),entryPoint:r}});let p,m,g=Wi.createSampler({magFilter:"nearest",minFilter:"nearest"}),v=Wi.createSampler({magFilter:"linear",minFilter:"linear"});return{render:({outputTextures:e,timestampWrites:t,viewProjectionMatricesBuffer:r,volumeAtlas:i,cameraPositionBuffer:s,transformationMatrixBuffer:a,sunDirectionBuffer:o,blueNoiseTexture:u,timeBuffer:f,bvhBuffer:x,commandEncoder:y})=>{p||(p=Wi.createTexture({size:[e.finalTexture.width,e.finalTexture.height,e.finalTexture.depthOrArrayLayers],format:e.finalTexture.format,usage:e.finalTexture.usage})),m||(m=Wi.createTexture({size:[e.finalTexture.width/n,e.finalTexture.height/n,e.finalTexture.depthOrArrayLayers],format:e.finalTexture.format,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING})),y.copyTextureToTexture({texture:e.finalTexture},{texture:p},{width:e.finalTexture.width,height:e.finalTexture.height,depthOrArrayLayers:1});const _=[{binding:0,resource:e.depthTexture.createView()},{binding:1,resource:p.createView()},{binding:3,resource:{buffer:r}},{binding:4,resource:i.atlasTextureView},{binding:5,resource:{buffer:s}},{binding:6,resource:{buffer:a}},{binding:7,resource:{buffer:o}},{binding:8,resource:v},{binding:10,resource:e.normalTexture.createView()},{binding:11,resource:u.createView()},{binding:12,resource:{buffer:f}},{binding:13,resource:g},{binding:14,resource:e.velocityTexture.createView()},{binding:15,resource:{buffer:x}},{binding:16,resource:e.worldPositionTexture.createView()},{binding:17,resource:e.albedoTexture.createView()},{binding:18,resource:e.skyTexture.createView({dimension:"cube"})}],b={layout:c,entries:[..._,{binding:2,resource:m.createView()}]},w={layout:l,entries:[..._,{binding:2,resource:e.finalTexture.createView()},{binding:9,resource:m.createView()}]},T=Wi.createBindGroup(b),k=Wi.createBindGroup(w),S=y.beginComputePass({timestampWrites:t});return S.setPipeline(d),S.setBindGroup(0,T),S.dispatchWorkgroups(Math.ceil(m.width/8),Math.ceil(m.height/8)),S.setPipeline(h),S.setBindGroup(0,k),S.dispatchWorkgroups(Math.ceil(e.finalTexture.width/8),Math.ceil(e.finalTexture.height/8)),S.end(),[y.finish()]},label:i}})({shaderCode:"\r\n\r\nfn shadowRay(worldPos: vec3<f32>, shadowRayDirection: vec3<f32>) -> bool {\r\n    return rayMarchBVH(worldPos, shadowRayDirection).hit;\r\n}\r\n\r\n\r\nconst SUN_COLOR = vec3<f32>(0.9);\r\nconst MOON_COLOR = vec3<f32>(0.5, 0.5, 1.0);\r\nconst SKY_AMBIENT_INTENSITY = 0.1;\r\nconst SUBPIXEL_SAMPLE_POSITIONS: array<vec2<f32>, 8> = array<vec2<f32>, 8>(\r\n  vec2<f32>(0.25, 0.25),\r\n  vec2<f32>(0.75, 0.25),\r\n  vec2<f32>(0.25, 0.75),\r\n  vec2<f32>(0.75, 0.75),\r\n  vec2<f32>(0.125, 0.125),\r\n  vec2<f32>(0.375, 0.125),\r\n  vec2<f32>(0.625, 0.125),\r\n  vec2<f32>(0.875, 0.125)\r\n);\r\nconst BLUE_NOISE_SIZE = 511;\r\nconst SUN_DIRECTION: vec3<f32> = vec3<f32>(1.0,-1.0,-1.0);\r\nconst SKY_COLOUR: vec3<f32> = vec3<f32>(0.6, 0.8, 0.9);\r\nconst SHADOW_ACNE_OFFSET: f32 = 0.005;\r\nconst SCATTER_AMOUNT: f32 = 0.75;\r\nconst POSITION_SCATTER_AMOUNT: f32 = 0.01;\r\n\r\nfn blinnPhong(normal: vec3<f32>, lightDirection: vec3<f32>, viewDirection: vec3<f32>, specularStrength: f32, shininess: f32, lightColour: vec3<f32>) -> vec3<f32> {\r\n  let halfDirection = normalize(lightDirection + viewDirection);\r\n  let diffuse = max(dot(normal, lightDirection), 0.0);\r\n  let specular = pow(max(dot(normal, halfDirection), 0.0), shininess);\r\n  return (diffuse + specular * specularStrength) * lightColour;\r\n}\r\n\r\nstruct Light {\r\n  direction: vec3<f32>,\r\n  colour: vec3<f32>,\r\n};\r\n\r\n// Function to remap the blue noise value to a sample index\r\nfn remapToSampleIndex(blueNoiseValue: f32, numSamples: u32) -> u32 {\r\n    // Map blue noise value to the index range [0, numSamples)\r\n    return u32(blueNoiseValue * f32(numSamples));\r\n}\r\n\r\nfn randomInCosineWeightedHemisphere(r: vec2<f32>, normal: vec3<f32>) -> vec3<f32> {\r\n  let r1 = 2.0 * PI * r.x;\r\n  let r2 = r.y;\r\n  let r2s = sqrt(r2);\r\n  let w = normal;\r\n  let u = normalize(cross((select(vec3<f32>(1.0, 0.0, 0.0), vec3<f32>(0.0, 1.0, 0.0),abs(w.x) > 0.1)), w));\r\n  let v = cross(w, u);\r\n  return normalize(u * cos(r1) * r2s + v * sin(r1) * r2s + w * sqrt(1.0 - r2));\r\n}\r\n\r\nconst SAMPLES_PER_PIXEL = 1u;\r\nconst SAMPLE_OFFSETS: array<vec2<i32>, 4> = array<vec2<i32>, 4>(\r\n  vec2<i32>(0, 0),\r\n  vec2<i32>(1, 1),\r\n  vec2<i32>(0, 1),\r\n  vec2<i32>(1, 0),\r\n);\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let texSize = textureDimensions(outputTex);\r\n  let pixel = vec2<i32>(GlobalInvocationID.xy * DOWNSCALE);\r\n  let outputPixel = vec2<i32>(GlobalInvocationID.xy);\r\n  var blueNoisePixel = outputPixel % BLUE_NOISE_SIZE;\r\n  var normalSample = textureLoad(normalTex, pixel, 0).rgb;\r\n  var worldPos = textureLoad(worldPosTex, pixel, 0).rgb + normalSample * SHADOW_ACNE_OFFSET;\r\n  var output = vec4<f32>(0.0);\r\n  var count = 0.0;\r\n  for(var i = 0u; i < SAMPLES_PER_PIXEL; i++){\r\n    var samplePixel =  outputPixel + SAMPLE_OFFSETS[i + time.frame % 3];\r\n    samplePixel.x += i32(time.frame) * 32;\r\n    samplePixel.y += i32(time.frame) * 16;\r\n    blueNoisePixel = samplePixel % BLUE_NOISE_SIZE;\r\n    if(time.frame % 2 == 0){\r\n      blueNoisePixel.y = BLUE_NOISE_SIZE - blueNoisePixel.y;\r\n    }\r\n    if(time.frame % 3 == 0){\r\n      blueNoisePixel.x = BLUE_NOISE_SIZE - blueNoisePixel.x;\r\n    }\r\n    var r = textureLoad(blueNoiseTex, blueNoisePixel, 0).rg;\r\n    var shadowRayDirection = randomInCosineWeightedHemisphere(r, normalSample);\r\n    shadowRayDirection = mix(sunDirection, shadowRayDirection, SCATTER_AMOUNT);\r\n    if(shadowRay(worldPos, shadowRayDirection)){\r\n        output += vec4(0.0);\r\n        count += 1.0;\r\n    } else{\r\n        let sky = textureSampleLevel(skyCube, linearSampler, shadowRayDirection, 0.0) * 2.0;\r\n        output += sky;\r\n        count += 1.0;\r\n    }\r\n  }\r\n  output /= count;\r\n  textureStore(outputTex, outputPixel, output);\r\n}\r\n\r\nconst PI = 3.1415926535897932384626433832795;\r\n\r\nfn polarToCartesian(angle: f32, radius: f32) -> vec2<f32> {\r\n  let radians = angle * PI / 180.0;\r\n  let x = radius * cos(radians);\r\n  let y = radius * sin(radians);\r\n  return vec2<f32>(x, y);\r\n}\r\n\r\nconst BLUR_RADIUS = 1.0;\r\n\r\n// 3x3 Gaussian blur kernel, weight in z component\r\nconst BLUR_SAMPLE_POSITIONS_AND_GAUSSIAN_WEIGHTS: array<vec3<f32>, 9> = array<vec3<f32>, 9>(\r\n  vec3<f32>(0.0, 0.0, 4.0 / 16.0),\r\n  vec3<f32>(1.0, 0.0, 2.0 / 16.0),\r\n  vec3<f32>(-1.0, 0.0, 2.0 / 16.0),\r\n  vec3<f32>(0.0, 1.0, 2.0 / 16.0),\r\n  vec3<f32>(0.0, -1.0, 2.0 / 16.0),\r\n  vec3<f32>(1.0, 1.0, 1.0 / 16.0),\r\n  vec3<f32>(-1.0, 1.0, 1.0 / 16.0),\r\n  vec3<f32>(1.0, -1.0, 1.0 / 16.0),\r\n  vec3<f32>(-1.0, -1.0, 1.0 / 16.0),\r\n);\r\n\r\n// 5x5 Gaussian blur kernel, weight in z component\r\nconst BLUR_SAMPLE_POSITIONS_AND_GAUSSIAN_WEIGHTS_5x5: array<vec3<f32>, 25> = array<vec3<f32>, 25>(\r\n  vec3<f32>(0.0, 0.0, 41.0 / 273.0),\r\n  vec3<f32>(1.0, 0.0, 26.0 / 273.0),\r\n  vec3<f32>(-1.0, 0.0, 26.0 / 273.0),\r\n  vec3<f32>(0.0, 1.0, 26.0 / 273.0),\r\n  vec3<f32>(0.0, -1.0, 26.0 / 273.0),\r\n  vec3<f32>(1.0, 1.0, 16.0 / 273.0),\r\n  vec3<f32>(-1.0, 1.0, 16.0 / 273.0),\r\n  vec3<f32>(1.0, -1.0, 16.0 / 273.0),\r\n  vec3<f32>(-1.0, -1.0, 16.0 / 273.0),\r\n  vec3<f32>(2.0, 0.0, 7.0 / 273.0),\r\n  vec3<f32>(-2.0, 0.0, 7.0 / 273.0),\r\n  vec3<f32>(0.0, 2.0, 7.0 / 273.0),\r\n  vec3<f32>(0.0, -2.0, 7.0 / 273.0),\r\n  vec3<f32>(2.0, 1.0, 4.0 / 273.0),\r\n  vec3<f32>(-2.0, 1.0, 4.0 / 273.0),\r\n  vec3<f32>(2.0, -1.0, 4.0 / 273.0),\r\n  vec3<f32>(-2.0, -1.0, 4.0 / 273.0),\r\n  vec3<f32>(1.0, 2.0, 4.0 / 273.0),\r\n  vec3<f32>(-1.0, 2.0, 4.0 / 273.0),\r\n  vec3<f32>(1.0, -2.0, 4.0 / 273.0),\r\n  vec3<f32>(-1.0, -2.0, 4.0 / 273.0),\r\n  vec3<f32>(2.0, 2.0, 1.0 / 273.0),\r\n  vec3<f32>(-2.0, 2.0, 1.0 / 273.0),\r\n  vec3<f32>(2.0, -2.0, 1.0 / 273.0),\r\n  vec3<f32>(-2.0, -2.0, 1.0 / 273.0),\r\n);\r\n\r\n\r\nconst DEPTH_SENSITIVITY = 100.0;\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn composite(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let texSize = textureDimensions(outputTex);\r\n  let texelSize = 1.0 / vec2<f32>(texSize);\r\n  let pixel = GlobalInvocationID.xy;\r\n  let shadowSamplePixel = vec2<i32>(GlobalInvocationID.xy / DOWNSCALE);\r\n  let shadowSampleUV = (vec2<f32>(pixel)) / vec2<f32>(texSize);\r\n  let outputPixel = GlobalInvocationID.xy;\r\n  let albedoSample = textureLoad(inputTex, pixel, 0);\r\n  let normalRef = textureLoad(normalTex, pixel, 0).rgb;\r\n  let depthRef = textureLoad(depthTex, pixel, 0).r;\r\n  let shadowRef = textureSampleLevel(intermediaryTexture, linearSampler, shadowSampleUV, 0.0);\r\n\r\n  var outputColour = vec4<f32>(0.0);\r\n  var totalWeight = 0.0;\r\n\r\n  for(var i = 0u; i < 25; i++){\r\n    let foo = BLUR_SAMPLE_POSITIONS_AND_GAUSSIAN_WEIGHTS_5x5[i];\r\n    let offset = foo.xy * texelSize;\r\n    let sampleUV = shadowSampleUV + offset * BLUR_RADIUS;\r\n    let samplePixel = vec2<i32>(sampleUV * vec2<f32>(texSize));\r\n    let normalSample = textureSampleLevel(normalTex, linearSampler, sampleUV, 0.0).rgb;\r\n    let depthSample = textureLoad(depthTex, samplePixel, 0).r;\r\n    let shadowSample = textureSampleLevel(intermediaryTexture, linearSampler, sampleUV, 0.0);\r\n\r\n    let relativeDepthDifference = abs(depthSample - depthRef) / depthRef;\r\n    let depthWeight = clamp(1.0 - relativeDepthDifference * DEPTH_SENSITIVITY, 0,1);\r\n    let normalWeight = dot(normalSample, normalRef);\r\n    let gaussWeight = foo.z;\r\n\r\n    let weight =  gaussWeight * normalWeight * depthWeight;\r\n\r\n    totalWeight += weight;\r\n    outputColour += shadowSample * weight;\r\n  }\r\n  outputColour /= totalWeight;\r\n\r\n//  textureStore(outputTex, outputPixel, shadowRef);\r\n  textureStore(outputTex, pixel,outputColour * albedoSample);\r\n}\r\n",effectEntryPoint:"main",compositeEntryPoint:"composite",downscale:1,label:"shadows"}),Pi="const PI\t \t= 3.141592;\r\nconst EPSILON_NRM = 0.0001; // TODO: use resolution to normalize\r\n\r\nstruct Time {\r\n  frame: u32,\r\n  deltaTime: f32,\r\n  elapsed: f32\r\n};\r\n\r\n// Cloud parameters\r\nconst EARTH_RADIUS = 6300e3;\r\nconst CLOUD_START = 600.0;\r\nconst CLOUD_HEIGHT = 800.0;\r\nconst SUN_POWER = vec3(1.0,0.9,0.6) * 500.;\r\nconst LOW_SCATTER = vec3(1.0, 0.7, 0.5);\r\nconst MAX_DISTANCE = 10000.0;\r\n\r\n@group(0) @binding(0) var depth : texture_2d<f32>;\r\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\r\n@group(0) @binding(2) var outputTex : texture_storage_2d<rgba8unorm, write>;\r\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\r\n@group(0) @binding(4) var<uniform> sunDirection : vec3<f32>;\r\n@group(0) @binding(5) var<uniform> time : Time;\r\n@group(0) @binding(6) var blueNoiseTex : texture_2d<f32>;\r\n@group(0) @binding(7) var pebbleTex : texture_2d<f32>;\r\n@group(0) @binding(8) var linearSampler : sampler;\r\n@group(0) @binding(9) var<uniform> cameraPosition : vec3<f32>;\r\n@group(0) @binding(10) var worldPosTex : texture_2d<f32>;\r\n@group(1) @binding(1) var skyCube : texture_cube<f32>;\r\n@group(1) @binding(2) var skyCubeWrite : texture_storage_2d_array<rgba8unorm, write>;\r\n@group(1) @binding(3) var lastSkyCube : texture_2d_array<f32>;\r\n\r\n\r\n\r\n// Noise generation functions (by iq)\r\nfn hash( n: f32 ) -> f32\r\n{\r\n    return fract(sin(n)*43758.5453);\r\n}\r\n\r\nfn hash2( p: vec2<f32> ) -> f32 {\r\n    return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123);\r\n}\r\n\r\nfn sampleBlueNoise( uv: vec2<f32> ) -> vec2<f32>\r\n{\r\n    return textureSampleLevel(blueNoiseTex, linearSampler, uv, 0.0).rg;\r\n}\r\n\r\nfn samplePebbles( uv: vec2<f32> ) -> f32\r\n{\r\n  return textureSampleLevel(pebbleTex, linearSampler, uv, 0.0).r;\r\n}\r\n\r\nfn noise3( x:vec3<f32> ) -> f32\r\n{\r\n  var p = floor(x);\r\n  var f = fract(x);\r\n  f = f*f*(3.0 - 2.0 *f);\r\n\tlet uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\r\n\tlet rg = sampleBlueNoise((uv+0.5)/256.0).yx;\r\n\treturn mix( rg.x, rg.y, f.z );\r\n}\r\n\r\nfn noise2( p:vec2<f32> ) -> f32\r\n{\r\n  let i = floor( p );\r\n  var f = fract( p );\r\n\tf = f*f*(3.0 - 2.0*f);\r\n  return -1.0+2.0*mix( mix( hash2( i + vec2(0.0,0.0) ),\r\n                     hash2( i + vec2(1.0,0.0) ), f.x),\r\n                mix( hash2( i + vec2(0.0,1.0) ),\r\n                     hash2( i + vec2(1.0,1.0) ), f.x), f.y);\r\n}\r\n\r\nfn fbm( p: vec3<f32> ) -> f32\r\n{\r\n    var pCopy = p;\r\n    let m = mat3x3<f32>( 0.00,  0.80,  0.60,\r\n              -0.80,  0.36, -0.48,\r\n              -0.60, -0.48,  0.64 );\r\n    var f = 0.5000*noise3( pCopy );\r\n    pCopy = m*pCopy*2.02;\r\n    f += 0.2500*noise3( pCopy );\r\n    pCopy = m*pCopy*2.03;\r\n    f += 0.1250*noise3( pCopy );\r\n    return f;\r\n}\r\n\r\nfn intersectSphere(origin: vec3<f32>, dir: vec3<f32>, spherePos: vec3<f32>, sphereRad: f32) -> f32\r\n{\r\n\tlet oc = origin - spherePos;\r\n\tlet b = 2.0 * dot(dir, oc);\r\n\tlet c = dot(oc, oc) - sphereRad*sphereRad;\r\n\tlet disc = b * b - 4.0 * c;\r\n\tif (disc < 0.0)\r\n\t{\r\n\t  return -1.0;\r\n\t}\r\n\r\n//    float q = (-b + ((b < 0.0) ? -sqrt(disc) : sqrt(disc))) / 2.0;\r\n  let q = (-b + select(sqrt(disc), -sqrt(disc), b < 0.0)) / 2.0;\r\n\tvar t0 = q;\r\n\tvar t1 = c / q;\r\n\tif (t0 > t1) {\r\n\t\tvar temp = t0;\r\n\t\tt0 = t1;\r\n\t\tt1 = temp;\r\n\t}\r\n\tif (t1 < 0.0){\r\n\t  return -1.0;\r\n\t}\r\n\r\n  return select(t0, t1, t0 < 0.0);\r\n}\r\n\r\n// TODO: pass time buffer\r\n\r\n// return the density of clouds at a given point, and height\r\nfn clouds(p: vec3<f32>, t: f32) -> vec2<f32>\r\n{\r\n    var pCopy = p;\r\n    let atmoHeight = length(p - vec3(0.0, -EARTH_RADIUS, 0.0)) - EARTH_RADIUS;\r\n    let cloudHeight = clamp((atmoHeight-CLOUD_START)/(CLOUD_HEIGHT), 0.0, 1.0);\r\n    pCopy.z += t*40;\r\n    let largeWeather = clamp((samplePebbles(-0.00005*pCopy.zx) - 0.18)*5.0, 0.0, 2.0);\r\n    //let largeWeather = 1.0;\r\n    pCopy.x += t*32;\r\n    var weather = largeWeather*max(0.0,samplePebbles(0.0002*pCopy.zx) - 0.28)/0.72;\r\n    weather *= smoothstep(0.0, 0.5, cloudHeight) * smoothstep(1.0, 0.5, cloudHeight);\r\n    let cloudShape = pow(weather, 0.3+1.5*smoothstep(0.2, 0.5, cloudHeight));\r\n    if(cloudShape <= 0.0){\r\n        return vec2(0.0, cloudHeight);\r\n    }\r\n    pCopy.x += t*48;\r\n\t  var den= max(0.0, cloudShape - 0.7*fbm(p*.01));\r\n    if(den <= 0.0){\r\n        return vec2(0.0, cloudHeight);\r\n    }\r\n    pCopy.y += t*60;\r\n    den= max(0.0, den - 0.2*fbm(p*0.05));\r\n    return vec2(largeWeather*0.2*min(1.0, 5.0*den), cloudHeight);\r\n}\r\n\r\n// From https://www.shadertoy.com/view/4sjBDG\r\nfn numericalMieFit( costh: f32) -> f32\r\n{\r\n    // This function was optimized to minimize (delta*delta)/reference in order to capture\r\n    // the low intensity behavior.\r\n    var bestParams = array<f32, 10>();\r\n    bestParams[0]=9.805233e-06;\r\n    bestParams[1]=-6.500000e+01;\r\n    bestParams[2]=-5.500000e+01;\r\n    bestParams[3]=8.194068e-01;\r\n    bestParams[4]=1.388198e-01;\r\n    bestParams[5]=-8.370334e+01;\r\n    bestParams[6]=7.810083e+00;\r\n    bestParams[7]=2.054747e-03;\r\n    bestParams[8]=2.600563e-02;\r\n    bestParams[9]=-4.552125e-12;\r\n\r\n    var p1 = costh + bestParams[3];\r\n    let expValues = exp(vec4(bestParams[1] *costh+bestParams[2], bestParams[5] *p1*p1, bestParams[6] *costh, bestParams[9] *costh));\r\n    let expValWeight= vec4(bestParams[0], bestParams[4], bestParams[7], bestParams[8]);\r\n    return dot(expValues, expValWeight);\r\n}\r\n\r\nfn lightRay(p: vec3<f32>, phaseFunction: f32, dC: f32, mu: f32, sun_direction: vec3<f32>, cloudHeight: f32, t: f32) -> f32\r\n{\r\n    let nbSampleLight = 6;\r\n\t  let zMaxl         = 200.;\r\n    let stepL         = zMaxl/f32(nbSampleLight);\r\n    var pCopy = p;\r\n    var cloudHeightCopy = 0.0;\r\n\r\n    var lighRayDen = 0.0;\r\n    pCopy += sun_direction*stepL*hash(dot(pCopy, vec3(12.256, 2.646, 6.356)) + t * 4);\r\n    for(var j=0; j<nbSampleLight; j++)\r\n    {\r\n        let cloudsResult = clouds( pCopy + sun_direction*f32(j)*stepL, time.elapsed);\r\n        lighRayDen += cloudsResult.x;\r\n        cloudHeightCopy = cloudsResult.y;\r\n    }\r\n    let scatterAmount = mix(0.008, 1.0, smoothstep(0.96, 0.0, mu));\r\n    let beersLaw = exp(-stepL*lighRayDen)+0.5*scatterAmount*exp(-0.1*stepL*lighRayDen)+scatterAmount*0.4*exp(-0.02*stepL*lighRayDen);\r\n    return beersLaw * phaseFunction * mix(0.05 + 1.5*pow(min(1.0, dC*8.5), 0.3+5.5*cloudHeightCopy), 1.0, clamp(lighRayDen*0.4, 0.0, 1.0));\r\n}\r\n\r\n\r\nfn Schlick (f0: f32, VoH: f32 ) -> f32\r\n{\r\n\treturn f0+(1.-f0)*pow(1.0-VoH,5.0);\r\n}\r\n\r\nfn skyRay(org: vec3<f32>, dir: vec3<f32>,sun_direction: vec3<f32>) -> vec3<f32>\r\n{\r\n\r\n  let ATM_START = EARTH_RADIUS+CLOUD_START;\r\n\tlet ATM_END = ATM_START+CLOUD_HEIGHT;\r\n\r\n  let nbSample = 8;\r\n  var color = vec3(0.0);\r\n  let distToAtmStart = intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_START);\r\n  let distToAtmEnd = intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_END);\r\n  var p = org + distToAtmStart * dir;\r\n\r\n  let stepS = (distToAtmEnd-distToAtmStart) / f32(nbSample);\r\n  var T = 1.;\r\n  let mu = dot(sun_direction, dir);\r\n  let phaseFunction = numericalMieFit(mu);\r\n  p += dir*stepS*hash(dot(dir, vec3(12.256, 2.646, 6.356)) + time.elapsed * 4);\r\n  if(dir.y > 0.01){\r\n    for(var i=0; i<nbSample; i++)\r\n    {\r\n      if(distance(p, org) > MAX_DISTANCE){\r\n        break;\r\n      }\r\n      let cloudResult = clouds(p, time.elapsed);\r\n      let cloudHeight = cloudResult.y;\r\n      let density = cloudResult.x;\r\n      if(density>0.)\r\n      {\r\n        let intensity = lightRay(p, phaseFunction, density, mu, sun_direction, cloudHeight, time.elapsed);\r\n        let ambient = (0.5 + 0.6*cloudHeight)*vec3(0.2, 0.5, 1.0)*6.5 + vec3(0.8) * max(0.0, 1.0 - 2.0*cloudHeight);\r\n        var radiance = ambient + SUN_POWER*intensity;\r\n        radiance*=density;\r\n        color += T*(radiance - radiance * exp(-density * stepS)) / density;   // By Seb Hillaire\r\n        T *= exp(-density*stepS);\r\n        if( T <= 0.05){\r\n          break;\r\n        }\r\n      }\r\n      p += dir*stepS;\r\n    }\r\n  }\r\n\r\n  let pC = org + intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_END+1000.0)*dir;\r\n  // high clouds\r\n  color += T*vec3(3.0)*max(0.0, fbm(vec3(1.0, 1.0, 1.8)*pC*0.002) - 0.4);\r\n\r\n\tvar background = 6.0*mix(vec3(0.2, 0.52, 1.0), vec3(0.8, 0.95, 1.0), pow(0.5+0.5*mu, 15.0))+mix(vec3(3.5), vec3(0.0), min(1.0, 2.3*dir.y));\r\n  background += T*vec3(1e4*smoothstep(0.9998, 1.0, mu));\r\n  color += background * T;\r\n\r\n  return color;\r\n}\r\n\r\nfn D_GGX(r: f32,  NoH: f32, h: vec3<f32>) -> f32\r\n{\r\n    let a = NoH * r;\r\n    let k = r / ((1.0 - NoH * NoH) + a * a);\r\n    return k * k * (1.0 / PI);\r\n}\r\n\r\nfn HenyeyGreenstein(mu: f32, inG: f32) -> f32\r\n{\r\n\treturn (1.-inG * inG)/(pow(1.+inG*inG - 2.0 * inG*mu, 1.5)*4.0* PI);\r\n}\r\n\r\nfn tonemapACES( x: vec3<f32> ) -> vec3<f32>\r\n{\r\n    let a = 2.51;\r\n    let b = 0.03;\r\n    let c = 2.43;\r\n    let d = 0.59;\r\n    let e = 0.14;\r\n    return (x*(a*x+b))/(x*(c*x+d)+e);\r\n}\r\n\r\n\r\nfn sample_sky(rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> vec3<f32> {\r\n    return skyRay(rayOrigin, rayDirection,sunDirection);\r\n}\r\n\r\nstruct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  previousInverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\r\n\r\n// Function to mimic the ease_out_expo function\r\nfn ease_out_expo(x: f32) -> f32 {\r\n    let t: f32 = x;\r\n    let b: f32 = 0.0;\r\n    let c: f32 = 1.0;\r\n    let d: f32 = 1.0; // Set the duration within the function\r\n    let intermediate_result: f32 = c * (-pow(2.0, -10.0 * t / d) + 1.0) + b;\r\n    return select(intermediate_result, b + c, t == d);\r\n}\r\n\r\nconst SKY_COLOUR: vec3<f32> = vec3<f32>(0.6, 0.8, 0.9);\r\nconst START_DISTANCE: f32 = 0.0;\r\nconst FOG_DENSITY: f32 = 0.01;\r\nconst NEAR: f32 = 0.5;\r\nconst FAR: f32 = 10000.0;\r\n\r\nfn rotateY(v: vec3<f32>, angle: f32) -> vec3<f32> {\r\n    let s = sin(angle);\r\n    let c = cos(angle);\r\n    return vec3<f32>(\r\n        v.x * c - v.z * s,\r\n        v.y,\r\n        v.x * s + v.z * c\r\n    );\r\n}\r\n\r\nfn rotateX(v: vec3<f32>, angle: f32) -> vec3<f32> {\r\n    let s = sin(angle);\r\n    let c = cos(angle);\r\n    return vec3<f32>(\r\n        v.x,\r\n        v.y * c - v.z * s,\r\n        v.y * s + v.z * c\r\n    );\r\n}\r\n\r\n// Rotate ray around the y axis, incrementally increasing the x rotation to form a spiral patttern\r\nfn spiralBlurCubeSample(rayDirection: vec3<f32>) -> vec4<f32>\r\n{\r\n  var weights = 0.0;\r\n  var output = vec4(0.0);\r\n  for(var i = 0; i < 6; i++){\r\n    var r = rayDirection.xy + vec2(f32(i) * 0.0001);\r\n    var sampleRayDirection = mix(rayDirection,randomInHemisphere(r, rayDirection),0.003);\r\n    output += textureSampleLevel(skyCube, linearSampler, sampleRayDirection, 0.0);\r\n    weights += 1.0;\r\n  }\r\n  return output / weights;\r\n}\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n    let resolution = textureDimensions(depth);\r\n    let pixel = GlobalInvocationID.xy;\r\n    var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\r\n    let rayDirection = calculateRayDirection(uv,viewProjections.inverseViewProjection);\r\n    let rayOrigin = cameraPosition;\r\n//    let sky = textureSampleLevel(skyCube, linearSampler, rayDirection, 0.0).rgb;\r\n    let sky = spiralBlurCubeSample(rayDirection).rgb;\r\n\r\n    var color = sky;\r\n\r\n    if(all(textureLoad(worldPosTex, pixel, 0).rgb < vec3(0.00001))){\r\n      let output = vec4(color, 1);\r\n      textureStore(outputTex, pixel, output);\r\n      return;\r\n    }\r\n\r\n}\r\n\r\nfn getDebugColor(index: u32) -> vec4<f32> {\r\n  let colors = array<vec4<f32>, 8>(\r\n    vec4<f32>(1.0, 0.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(1.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(0.5, 0.5, 0.5, 1.0)\r\n  );\r\n  return colors[index % 8];\r\n}\r\n\r\nfn getCubeRayDirection(uv: vec2<f32>, faceIndex: u32) -> vec3<f32>\r\n{\r\n  let uMapped = uv.x * 2.0 - 1.0;\r\n  let vMapped = uv.y * 2.0 - 1.0;\r\n\r\n  switch(faceIndex)\r\n  {\r\n    case 0{return vec3<f32>(1.0, -vMapped, -uMapped);}\r\n    case 1{return vec3<f32>(-1.0, -vMapped, uMapped);}\r\n    case 2{return vec3<f32>(uMapped, 1.0, vMapped);}\r\n    case 3{return vec3<f32>(uMapped, -1.0, -vMapped);}\r\n    case 4{return vec3<f32>(uMapped, -vMapped, 1.0);}\r\n    case 5{return vec3<f32>(-uMapped, -vMapped, -1.0);}\r\n    default{return vec3<f32>(0.0);}\r\n  }\r\n}\r\n\r\nfn getFramePixelOffset() -> vec2<u32>\r\n{\r\n  let frameIndex = time.frame % 4;\r\n  let x = frameIndex % 2;\r\n  let y = frameIndex / 2;\r\n  return vec2<u32>(x, y);\r\n}\r\n\r\nconst offsets = array<vec2<i32>,8>(\r\n  vec2(-1,-1), vec2(-1, 1),\r\n\tvec2(1, -1), vec2(1, 1),\r\n\tvec2(1, 0), vec2(0, -1),\r\n\tvec2(0, 1), vec2(-1, 0)\r\n);\r\n\r\nfn RGBToYCoCg( RGB: vec3<f32> ) -> vec3<f32>\r\n{\r\n\tlet Y = dot(RGB, vec3(  1, 2,  1 )) * 0.25;\r\n\tlet Co= dot(RGB, vec3(  2, 0, -2 )) * 0.25 + ( 0.5 * 256.0/255.0 );\r\n\tlet Cg= dot(RGB, vec3( -1, 2, -1 )) * 0.25 + ( 0.5 * 256.0/255.0 );\r\n\treturn vec3(Y, Co, Cg);\r\n}\r\n\r\nfn YCoCgToRGB( YCoCg: vec3<f32> ) -> vec3<f32>\r\n{\r\n\tlet Y= YCoCg.x;\r\n\tlet Co= YCoCg.y - ( 0.5 * 256.0 / 255.0 );\r\n\tlet Cg= YCoCg.z - ( 0.5 * 256.0 / 255.0 );\r\n\tlet R= Y + Co-Cg;\r\n\tlet G= Y + Cg;\r\n\tlet B= Y - Co-Cg;\r\n\treturn vec3(R,G,B);\r\n}\r\n\r\nconst gaussianWeights = array<f32, 25>(\r\n  0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\r\n  0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\r\n  0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\r\n  0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\r\n  0.003765, 0.015019, 0.023792, 0.015019, 0.003765\r\n);\r\n\r\n\r\nconst gaussianOffsets = array<vec2<i32>, 25>(\r\n  vec2(-2, -2), vec2(-1, -2), vec2(0, -2), vec2(1, -2), vec2(2, -2),\r\n  vec2(-2, -1), vec2(-1, -1), vec2(0, -1), vec2(1, -1), vec2(2, -1),\r\n  vec2(-2, 0), vec2(-1, 0), vec2(0, 0), vec2(1, 0), vec2(2, 0),\r\n  vec2(-2, 1), vec2(-1, 1), vec2(0, 1), vec2(1, 1), vec2(2, 1),\r\n  vec2(-2, 2), vec2(-1, 2), vec2(0, 2), vec2(1, 2), vec2(2, 2)\r\n);\r\n\r\nfn gaussianBlurHistorySample( pixel: vec2<u32>, cubeFaceIndex: u32 ) -> vec3<f32>\r\n{\r\n  let textureSize = textureDimensions(lastSkyCube).xy;\r\n  var color = vec3<f32>(0.0);\r\n  var weights = 0.0;\r\n  for(var i = 0; i < 25; i++)\r\n  {\r\n    let samplePixel = vec2<i32>(pixel) + gaussianOffsets[i];\r\n    if(any(samplePixel < vec2(0)) || any(samplePixel >= vec2<i32>(textureSize))){\r\n      continue;\r\n    }\r\n    color += RGBToYCoCg(textureLoad(lastSkyCube, samplePixel, cubeFaceIndex, 0).rgb) * gaussianWeights[i];\r\n    weights += gaussianWeights[i];\r\n  }\r\n\r\n  return color / weights;\r\n}\r\n\r\nfn polarToCartesian(angle: f32, radius: f32) -> vec2<f32> {\r\n  let radians = angle * PI / 180.0;\r\n  let x = radius * cos(radians);\r\n  let y = radius * sin(radians);\r\n  return vec2<f32>(x, y);\r\n}\r\n\r\nfn spiralBlurHistorySample( pixel: vec2<u32>, cubeFaceIndex: u32 ) -> vec3<f32>\r\n{\r\n  var weights = 0.0;\r\n  var output = vec3<f32>(0.0);\r\n   let textureSize = textureDimensions(lastSkyCube).xy;\r\n  for(var i = 0; i <= 6; i++){\r\n      let angle = (i % 6) * 60; // 0, 90, 180, 270\r\n      let radius = (i + 1) / 2;\r\n      let samplePixel = vec2<i32>(pixel) + vec2<i32>(polarToCartesian(f32(angle), f32(radius)));\r\n      if(any(samplePixel < vec2(0)) || any(samplePixel >= vec2<i32>(textureSize))){\r\n        continue;\r\n      }\r\n      output += RGBToYCoCg(textureLoad(lastSkyCube, samplePixel, cubeFaceIndex, 0).rgb);\r\n      weights += 1.0;\r\n    }\r\n\r\n    return output / weights;\r\n}\r\n\r\nconst HISTORY_BLEND = 0.9;\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn writeToCube(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let cubeFaceIndex = GlobalInvocationID.z;\r\n  var pixel = GlobalInvocationID.xy;\r\n  pixel *= 2;\r\n  pixel += getFramePixelOffset();\r\n  var rayDirection = getCubeRayDirection(vec2<f32>(pixel) / vec2<f32>(textureDimensions(skyCubeWrite).xy), cubeFaceIndex);\r\n  rayDirection = normalize(rayDirection);\r\n  let sky = sample_sky(rayDirection, cameraPosition);\r\n  let mu = dot(sunDirection, rayDirection);\r\n  let fogDistance = intersectSphere(cameraPosition, rayDirection, vec3(0.0, -EARTH_RADIUS, 0.0), EARTH_RADIUS+160.0);\r\n  let fogPhase = 0.5*HenyeyGreenstein(mu, 0.7)+0.5*HenyeyGreenstein(mu, -0.6);\r\n  var colour = sky;\r\n  colour = mix(fogPhase*0.1*LOW_SCATTER*SUN_POWER+10.0*vec3(0.55, 0.8, 1.0), colour, exp(-0.0003*fogDistance));\r\n  colour = tonemapACES(colour * 0.1);\r\n  let newSample = RGBToYCoCg(colour);\r\n//  var history = RGBToYCoCg(textureLoad(lastSkyCube, pixel, cubeFaceIndex, 0).rgb);\r\nvar history = spiralBlurHistorySample(pixel, cubeFaceIndex);\r\n\r\n  var colorAvg = newSample;\r\n  var colorVar = newSample*newSample;\r\n  // Marco Salvi's Implementation (by Chris Wyman)\r\n  let textureSize = textureDimensions(skyCubeWrite).xy;\r\n  for(var i = 0; i < 8; i++)\r\n  {\r\n    let samplePixel = vec2<i32>(pixel) + offsets[i];\r\n    if(any(samplePixel < vec2(0)) || any(samplePixel >= vec2<i32>(textureSize))){\r\n      continue;\r\n    }\r\n    let fetch = RGBToYCoCg(textureLoad(lastSkyCube, samplePixel, cubeFaceIndex, 0).xyz);\r\n    colorAvg += fetch;\r\n    colorVar += fetch*fetch;\r\n  }\r\n  colorAvg /= 9.0;\r\n  colorVar /= 9.0;\r\n  let gColorBoxSigma = 0.75;\r\n  let sigma = sqrt(max(vec3(0.0), colorVar - colorAvg*colorAvg));\r\n  let colorMin = colorAvg - gColorBoxSigma * sigma;\r\n  let colorMax = colorAvg + gColorBoxSigma * sigma;\r\n  history = clamp(history, colorMin, colorMax);\r\n  colour = YCoCgToRGB(mix(newSample, history, HISTORY_BLEND));\r\n  textureStore(skyCubeWrite, pixel, cubeFaceIndex, vec4(colour,1));\r\n}",Mi=async()=>{const e={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},t={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},r={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}},n={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},i={binding:4,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},s={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},a={binding:6,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},o={binding:7,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},c={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},l={binding:9,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},f={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}},d={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d-array"}},h={binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d-array"}},p={binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},m=Wi.createBindGroupLayout({entries:[e,t,r,n,i,s,a,o,c,l,p]}),g=Wi.createBindGroupLayout({entries:[f]}),v=Wi.createBindGroupLayout({entries:[d,h]}),x=Wi.createComputePipeline({layout:Wi.createPipelineLayout({bindGroupLayouts:[m,g]}),compute:{module:Wi.createShaderModule({code:`${hi}${u}${Pi}`}),entryPoint:"main"}}),y=Wi.createComputePipeline({layout:Wi.createPipelineLayout({bindGroupLayouts:[m,v]}),compute:{module:Wi.createShaderModule({code:`${hi}${u}${Pi}`}),entryPoint:"writeToCube"}});let _;const b=Wi.createSampler({minFilter:"linear",magFilter:"linear",addressModeU:"repeat",addressModeV:"repeat"}),w=await ii(Wi,"pebbles.png",{usage:GPUTextureUsage.COPY_SRC}),T=await ii(Wi,"rgba-noise.png",{usage:GPUTextureUsage.COPY_SRC}),k=Wi.createTexture({size:[768,768,6],format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING});return{render:({outputTextures:e,timestampWrites:t,viewProjectionMatricesBuffer:r,sunDirectionBuffer:n,timeBuffer:i,cameraPositionBuffer:s})=>{_||(_=Wi.createTexture({size:[e.finalTexture.width,e.finalTexture.height,e.finalTexture.depthOrArrayLayers],format:e.finalTexture.format,usage:e.finalTexture.usage}));const a=Wi.createCommandEncoder();a.copyTextureToTexture({texture:e.finalTexture},{texture:_},{width:e.finalTexture.width,height:e.finalTexture.height,depthOrArrayLayers:1});const o=Wi.createBindGroup({layout:m,entries:[{binding:0,resource:e.depthTexture.createView()},{binding:1,resource:_.createView()},{binding:2,resource:e.finalTexture.createView()},{binding:3,resource:{buffer:r}},{binding:4,resource:{buffer:n}},{binding:5,resource:{buffer:i}},{binding:6,resource:T.createView()},{binding:7,resource:w.createView()},{binding:8,resource:b},{binding:9,resource:{buffer:s}},{binding:10,resource:e.worldPositionTexture.createView()}]}),u=a.beginComputePass({timestampWrites:t});u.setPipeline(y),u.setBindGroup(0,o),u.setBindGroup(1,Wi.createBindGroup({layout:v,entries:[{binding:2,resource:e.skyTexture.createView({dimension:"2d-array"})},{binding:3,resource:k.createView({dimension:"2d-array"})}]})),u.dispatchWorkgroups(e.skyTexture.width/16,e.skyTexture.height/16,6),u.setPipeline(x),u.setBindGroup(0,o),u.setBindGroup(1,Wi.createBindGroup({layout:g,entries:[{binding:1,resource:e.skyTexture.createView({dimension:"cube"})}]}));const c=e.depthTexture.width,l=e.depthTexture.height,f=Math.ceil(c/8),d=Math.ceil(l/8);return u.dispatchWorkgroups(f,d),u.end(),a.copyTextureToTexture({texture:e.skyTexture},{texture:k},{width:e.skyTexture.width,height:e.skyTexture.height,depthOrArrayLayers:e.skyTexture.depthOrArrayLayers}),[a.finish()]},label:"sky"}},Ai={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let Ei;const Ui=new Uint8Array(16);function Oi(){if(!Ei&&(Ei="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!Ei))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Ei(Ui)}const Ii=[];for(let e=0;e<256;++e)Ii.push((e+256).toString(16).slice(1));const Ci=function(e,t,r){if(Ai.randomUUID&&!t&&!e)return Ai.randomUUID();const n=(e=e||{}).random||(e.rng||Oi)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){r=r||0;for(let e=0;e<16;++e)t[r+e]=n[e];return t}return function(e,t=0){return Ii[e[t+0]]+Ii[e[t+1]]+Ii[e[t+2]]+Ii[e[t+3]]+"-"+Ii[e[t+4]]+Ii[e[t+5]]+"-"+Ii[e[t+6]]+Ii[e[t+7]]+"-"+Ii[e[t+8]]+Ii[e[t+9]]+"-"+Ii[e[t+10]]+Ii[e[t+11]]+Ii[e[t+12]]+Ii[e[t+13]]+Ii[e[t+14]]+Ii[e[t+15]]}(n)};class Ri extends hr{#u;#c;#l;#f;#d;constructor({position:e,rotation:t,scale:r,size:n,atlasLocation:i,name:s="unnamed",paletteIndex:a}){super({position:e,rotation:t,scale:r}),this.#u=Ci(),this.#c=s,this.#l=n,this.#f=i,this.#d=a}get objectSpaceCorners(){return[ue.create(0,0,0),ue.create(0,0,this.#l[2]),ue.create(0,this.#l[1],0),ue.create(0,this.#l[1],this.#l[2]),ue.create(this.#l[0],0,0),ue.create(this.#l[0],0,this.#l[2]),ue.create(this.#l[0],this.#l[1],0),ue.create(this.#l[0],this.#l[1],this.#l[2])]}get worldSpaceCorners(){return this.objectSpaceCorners.map((e=>ue.transformMat4(e,this.transform)))}get AABB(){return(e=>{let t=ue.create(1/0,1/0,1/0),r=ue.create(-1/0,-1/0,-1/0);for(const n of e)t=ue.min(t,n),r=ue.max(r,n);return{min:t,max:r}})(this.worldSpaceCorners)}get size(){return this.#l}toArray(){return[...this.transform,...this.inverseTransform,...this.previousTransform,...this.previousInverseTransform,...this.#l,0,...this.#f,this.#d]}}class zi{index;dataView;constructor(e){this.dataView=new DataView(e),this.index=0}readUint8(){const e=this.dataView.getUint8(this.index);return this.index++,e}readUint32(){const e=this.dataView.getUint32(this.index,!0);return this.index+=4,e}readFloat32(){const e=this.dataView.getFloat32(this.index,!0);return this.index+=4,e}skip(e){this.index+=e}}const Di=e=>0===e;let Bi=[];const Ni=["street-scene","Dragon","monu10","teapot"],Gi=e=>{const[t,r,n]=e,i=[0,0,0,1],s=[t,0,0,1],a=[0,r,0,1],o=[t,r,0,1],u=[0,0,n,1],c=[t,0,n,1],l=[0,r,n,1],f=[t,r,n,1];let d=[i,s,a,a,s,o].flat(),h=[u,l,c,c,l,f].flat(),p=[a,o,l,l,o,f].flat(),m=[i,u,s,s,u,c].flat(),g=[s,c,o,o,c,f].flat(),v=[i,a,u,u,a,l].flat();return new Float32Array([...d,...h,...p,...m,...g,...v])},ji=async()=>{const e=Wi.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),t=Wi.createPipelineLayout({bindGroupLayouts:[e]}),r=Gi([1,1,1]).length,n=Wi.createRenderPipeline({layout:t,vertex:{module:Wi.createShaderModule({code:"\n        @binding(0) @group(0) var<uniform> modelViewProjectionMatrix : mat4x4f;\n        \n        struct VertexOutput {\n          @builtin(position) position : vec4f,\n        }\n        \n        @vertex\n        fn main(\n          @location(0) objectPos : vec4f,\n        ) -> VertexOutput {\n          var output : VertexOutput;\n          output.position =modelViewProjectionMatrix * objectPos;\n          return output;\n        }\n\n       "}),entryPoint:"main",buffers:[{arrayStride:16,attributes:[{shaderLocation:0,offset:0,format:"float32x4"}]}]},fragment:{module:Wi.createShaderModule({code:"\n        @fragment\n        fn main() -> @location(0) vec4f {\n          return vec4(0,0,1.0,1);\n        }\n        "}),entryPoint:"main",targets:[{format:"rgba8unorm"}]},primitive:{topology:"line-list",cullMode:"back"}}),i=Wi.createBuffer({size:16*r*Bi.length,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,label:"vertices buffer"}),s=Wi.createBuffer({size:256*Bi.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"mvp buffer"});return{render:({commandEncoder:t,outputTextures:a,transformationMatrixBuffer:o,volumeAtlas:u,viewProjectionMatricesBuffer:c,timestampWrites:l,bvhBuffer:f,lights:d})=>{let h=[];for(let t=0;t<Bi.length;t++){const n=Gi(Bi[t].size),a=256*t;Wi.queue.writeBuffer(i,16*t*r,n.buffer,n.byteOffset);const o=Wi.createBindGroup({layout:e,entries:[{binding:0,resource:{buffer:s,offset:a}}]});h.push(o);const u=Bi[t].transform,c=ke.mul(ke.scale(rs.projectionMatrix,[-1,1,1]),rs.viewMatrix),l=new Float32Array(ke.mul(c,u));Wi.queue.writeBuffer(s,a,l.buffer,l.byteOffset,l.byteLength)}const p=t.beginRenderPass({colorAttachments:[{view:a.finalTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"load",storeOp:"store"}],timestampWrites:l});p.setPipeline(n);for(let e=0;e<Bi.length;e++){const t=h[e];p.setBindGroup(0,t),p.setVertexBuffer(0,i,16*r*e,16*r),p.draw(r)}return p.end(),[t.finish()]},label:"outlines"}},Li=e=>{let t=ue.create(1/0,1/0,1/0),r=ue.create(-1/0,-1/0,-1/0);for(const{AABB:n}of e)t=ue.min(n.min,t),r=ue.max(n.max,r);return{min:t,max:r}},Vi=e=>{const t=Li(e),r=(t.max[0]-t.min[0])*(t.max[1]-t.min[1])*(t.max[2]-t.min[2]);return e.length*r},qi=(44,16,16*Math.ceil(2.75));class Fi{#o;#h;#p;#m;#g;constructor(e,t){this.#o=e,this.#p=t.map(((e,t)=>({AABB:e.AABB,objectIndex:t}))),this.#m=0,this.#h=new Array(2*t.length-1),this.#v(this.#p,0),this.#g=e.createBuffer({size:this.#h.length*qi,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1,label:"bvh buffer"}),this.#x()}get gpuBuffer(){return this.#g}update(e){this.#p=e.map(((e,t)=>({AABB:e.AABB,objectIndex:t}))),this.#m=0,this.#v(this.#p,0),this.#x()}#v(e,t){if(0===this.#p.length)return;if(1===e.length)return void(this.#h[t]={leftChildIndex:this.#p.indexOf(e[0]),rightChildIndex:-1,objectCount:1,AABBMax:e[0].AABB.max,AABBMin:e[0].AABB.min});const r=Li(e);let n=-1,i=-1;const{left:s,right:a}=(e=>{let t=1/0,r=-1;const n=Math.floor(e.length/2);for(let i=1;i<e.length;i++){const s=e.slice(0,i),a=e.slice(i),o=Vi(s)+Vi(a),u=1e3*Math.abs(i-n)+1*o;u<t&&(t=u,r=i)}return{left:e.slice(0,r),right:e.slice(r)}})(e);s.length>0&&(n=++this.#m,this.#v(s,n)),a.length>0&&(i=++this.#m,this.#v(a,i)),this.#h[t]={leftChildIndex:n,rightChildIndex:i,objectCount:e.length,AABBMax:r.max,AABBMin:r.min}}#x(){return this.#h.forEach(((e,t)=>{const r=t*qi,n=new ArrayBuffer(qi),i=new DataView(n);i.setInt32(0,e.leftChildIndex,!0),i.setInt32(4,e.rightChildIndex,!0),i.setUint32(8,e.objectCount,!0),i.setFloat32(16,e.AABBMin[0],!0),i.setFloat32(20,e.AABBMin[1],!0),i.setFloat32(24,e.AABBMin[2],!0),i.setFloat32(32,e.AABBMax[0],!0),i.setFloat32(36,e.AABBMax[1],!0),i.setFloat32(40,e.AABBMax[2],!0),this.#o.queue.writeBuffer(this.#g,r,n,0,qi)})),this.#g}}const Yi=async()=>{const e=Wi.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float",viewDimension:"3d"}},{binding:4,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:5,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:6,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float",viewDimension:"2d"}}]}),t=Wi.createPipelineLayout({bindGroupLayouts:[e]}),r=Wi.createRenderPipeline({layout:t,vertex:{module:Wi.createShaderModule({code:`\n        ${u}\n        struct VoxelObject {\r\n  transform: mat4x4<f32>,\r\n  inverseTransform: mat4x4<f32>,\r\n  previousTransform: mat4x4<f32>,\r\n  previousInverseTransform: mat4x4<f32>,\r\n  size : vec3<f32>,\r\n  atlasLocation : vec3<f32>,\r\n  paletteIndex : f32,\r\n}\r\n\r\n@binding(0) @group(0) var<uniform> modelViewProjectionMatrix : mat4x4f;\r\n@group(0) @binding(4) var<storage> voxelObject : VoxelObject;\r\n\r\nstruct VertexOutput {\r\n  @builtin(position) position : vec4f,\r\n  @location(0) objectPos : vec3f,\r\n  @location(1) worldPos : vec3f,\r\n  @location(2) @interpolate(linear) ndc : vec3f,\r\n}\r\n\r\n@vertex\r\nfn main(\r\n  @location(0) objectPos : vec4f,\r\n) -> VertexOutput {\r\n  var output : VertexOutput;\r\n  var clipPosition = modelViewProjectionMatrix * objectPos;\r\n//  clipPosition.z = -clipPosition.z;\r\n  output.position = clipPosition;\r\n  output.worldPos = (voxelObject.transform * objectPos).xyz;\r\n  output.objectPos = objectPos.xyz;\r\n  output.ndc = clipPosition.xyz / clipPosition.w;\r\n  output.ndc.y = -output.ndc.y;\r\n  return output;\r\n}\r\n`}),entryPoint:"main",buffers:[{arrayStride:16,attributes:[{shaderLocation:0,offset:0,format:"float32x4"}]}]},fragment:{module:Wi.createShaderModule({code:`\n        ${u}\n        ${s}\n        ${a}\n        struct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\r\n\r\n@group(0) @binding(2) var<uniform> viewProjections : ViewProjectionMatrices;\r\n@group(0) @binding(3) var voxels : texture_3d<f32>;\r\n@group(0) @binding(4) var<storage> voxelObject : VoxelObject;\r\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\r\n@group(0) @binding(6) var palette : texture_2d<f32>;\r\n\r\n\r\nconst IDENTITY_MATRIX = mat4x4<f32>(\r\n  vec4<f32>(1.0, 0.0, 0.0, 0.0),\r\n  vec4<f32>(0.0, 1.0, 0.0, 0.0),\r\n  vec4<f32>(0.0, 0.0, 1.0, 0.0),\r\n  vec4<f32>(0.0, 0.0, 0.0, 1.0)\r\n);\r\n\r\nstruct GBufferOutput {\r\n  @location(0) albedo : vec4f,\r\n  @location(1) normal : vec4f,\r\n  @location(2) worldPosition : vec4f,\r\n  @location(3) velocity : vec4f,\r\n  @builtin(frag_depth) depth : f32,\r\n}\r\n//\r\n//fn getVelocity(rayMarchResult: RayMarchResult, viewProjections: ViewProjectionMatrices) -> vec3<f32> {\r\n//  let vp = viewProjections.viewProjection;\r\n//    let previousVp = viewProjections.previousViewProjection;\r\n//    let modelMatrix = rayMarchResult.modelMatrix;\r\n//    let previousModelMatrix = rayMarchResult.previousModelMatrix;\r\n//\r\n//    // Get current object space position of the current pixel\r\n//    let objectPos = rayMarchResult.objectPos.xyz;\r\n//    let objectClipSpace = vp * modelMatrix * vec4(objectPos.xyz, 1.0);\r\n//    let objectNDC = objectClipSpace.xyz / objectClipSpace.w;\r\n//\r\n//    // Get previous position of the current object space position\r\n//    let previousObjectClipSpace = previousVp * previousModelMatrix * vec4(objectPos.xyz, 1.0);\r\n//    let previousObjectNDC = previousObjectClipSpace.xyz / previousObjectClipSpace.w;\r\n//\r\n//    // Get velocity based on the difference between the current and previous positions\r\n//    var velocity = objectNDC - previousObjectNDC;\r\n//    velocity.y = -velocity.y;\r\n//  return velocity;\r\n//}\r\n\r\nfn normaliseValue(min: f32, max: f32, value: f32) -> f32 {\r\n  return (value - min) / (max - min);\r\n}\r\n\r\n@fragment\r\nfn main(\r\n\r\n//  @location(0) objectPos : vec3f,\r\n//   @location(1) worldPos : vec3f,\r\n    @location(2) @interpolate(linear) ndc : vec3f\r\n) -> GBufferOutput\r\n {\r\n    var output : GBufferOutput;\r\n    var screenUV = ndc.xy * 0.5 + 0.5;\r\n    var inverseViewProjection = viewProjections.inverseViewProjection;\r\n    let rayDirection = calculateRayDirection(screenUV,inverseViewProjection);\r\n\r\n    var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(cameraPosition, 1.0)).xyz;\r\n\r\n    let isInBounds = all(objectRayOrigin >= vec3(0.0)) && all(objectRayOrigin <= voxelObject.size - vec3(1));\r\n\r\n    let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n    var tNear = 0.0;\r\n    if(!isInBounds){\r\n      tNear = boxIntersection(objectRayOrigin, objectRayDirection, voxelObject.size * 0.5).tNear - 0.00001;\r\n    }\r\n    var worldPos = transformPosition(voxelObject.transform, objectRayOrigin + objectRayDirection * tNear);\r\n    var result = rayMarchOctree(voxelObject, rayDirection, worldPos, 2);\r\n//    var result = rayMarchTransformed(voxelObject, rayDirection, worldPos, 0);\r\n    if(!result.hit){\r\n      discard;\r\n      return output;\r\n    }\r\n\r\n\r\n    let objectPos = objectRayOrigin + objectRayDirection * result.t;\r\n    worldPos = transformPosition(voxelObject.transform, objectPos);\r\n\r\n    output.albedo =  vec4(abs(result.worldPos * 0.25) % 1.0, 1.0);\r\n//    output.albedo = vec4(f32(result.stepsTaken)) * 0.02;\r\n//       let paletteX = i32(result.colour.r * 255.0);\r\n//        let paletteY = i32(voxelObject.paletteIndex);\r\n//    output.albedo = textureLoad(palette, vec2(paletteX, paletteY), 0);\r\n    output.normal = vec4(result.normal, 1);\r\n    output.worldPosition = vec4(worldPos, 1);\r\n//    output.velocity = vec4(getVelocity(result, viewProjections), 1);\r\n\r\n    let raymarchedDistance = length(result.worldPos - cameraPosition);\r\n\r\n    let near = 0.1;\r\n    let far = 10000.0;\r\n    let linearDepth = normaliseValue(near, far, raymarchedDistance);\r\n    output.depth = linearDepth;\r\n    return output;\r\n}\n        `}),entryPoint:"main",targets:[{format:"rgba8unorm"},{format:"rgba16float"},{format:"rgba32float"},{format:"rgba16float"}]},primitive:{topology:"triangle-list",cullMode:"front"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth32float"}});return{render:({commandEncoder:t,outputTextures:n,transformationMatrixBuffer:i,volumeAtlas:s,viewProjectionMatricesBuffer:a,timestampWrites:o,cameraPositionBuffer:u})=>{const c=Bi,l=[{view:n.albedoTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:n.normalTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:n.worldPositionTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:n.velocityTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],f={view:n.depthTexture.createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"},d=Wi.createBuffer({size:576*c.length,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,label:"vertices buffer"}),h=Wi.createBuffer({size:256*c.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"mvp buffer"}),p=Wi.createBuffer({size:512*c.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"voxel objects in raster"});let m=[];for(let t=0;t<c.length;t++){const r=Wi.createBindGroup({layout:e,entries:[{binding:0,resource:{buffer:h,offset:256*t}},{binding:2,resource:{buffer:a}},{binding:3,resource:s.atlasTextureView},{binding:4,resource:{buffer:p,offset:512*t}},{binding:5,resource:{buffer:u}},{binding:6,resource:s.paletteTextureView}]});m.push(r);const n=c[t],i=ke.mul(ke.scale(rs.projectionMatrix,[-1,1,1]),rs.viewMatrix),o=new Float32Array(ke.mul(i,n.transform));Wi.queue.writeBuffer(h,256*t,o.buffer,o.byteOffset,o.byteLength);const l=new Float32Array(n.toArray());Wi.queue.writeBuffer(p,512*t,l.buffer,l.byteOffset,l.byteLength);const f=new Float32Array(Gi(n.size));Wi.queue.writeBuffer(d,576*t,f.buffer,f.byteOffset,f.byteLength)}const g=t.beginRenderPass({colorAttachments:l,depthStencilAttachment:f,timestampWrites:o});g.setPipeline(r);for(let e=0;e<c.length;e++){const t=m[e];g.setVertexBuffer(0,d,576*e,576),g.setBindGroup(0,t),g.draw(36)}return g.end(),t.copyTextureToTexture({texture:n.albedoTexture},{texture:n.finalTexture},{width:n.finalTexture.width,height:n.finalTexture.height,depthOrArrayLayers:1}),[t.finish()]},label:"hello triangle"}},Hi=new class{#r;#y;#_;#b;constructor(){this.#r=new fr(1),this.#y=new fr(0),this.#_=new fr(0),this.#b=new fr(.6)}set targetScale(e){this.#r.target=e}set targetTranslateX(e){this.#y.target=e}set targetRotateY(e){this.#_.target=e}set targetSunRotateY(e){this.#b.target=e}get targetScale(){return this.#r.target}get targetTranslateX(){return this.#y.target}get targetRotateY(){return this.#_.target}get targetSunRotateY(){return this.#b.target}get sunRotateY(){return this.#b.value}get scale(){return this.#r.value}get translateX(){return this.#y.value}};let Wi,$i,Xi,Zi,Ki=B.create(4,4),Qi=0,Ji=Qi,es=0,ts=0,rs=new mr({fieldOfView:Math.PI/180*90,position:ue.create(-31,6,-50),direction:ue.create(0,0,-.5)});const ns=new class{logElement;isMouseDown=!1;constructor(){document.getElementById("reset").addEventListener("click",(e=>{window.dispatchEvent(new CustomEvent("resetcamera")),document.getElementById("captures").innerHTML=""})),document.getElementById("capture").addEventListener("click",(e=>{const t=new Image;t.id=performance.now().toString(),t.src=Xi.toDataURL(),document.getElementById("captures").appendChild(t).addEventListener("click",(e=>{e.target,console.log(e.target)}))})),document.addEventListener("wheel",(e=>{rs.fieldOfView+=.001*e.deltaY,rs.fieldOfView=Math.max(Math.min(rs.fieldOfView,2),.1)})),["fov","scale","translate","sun"].forEach((e=>{document.getElementById(e).addEventListener("input",(t=>{const r=t.target;window.dispatchEvent(new CustomEvent(`change${e}`,{detail:r.value}))}))})),this.logElement=document.getElementById("log"),window.addEventListener("changefov",(e=>{rs.fieldOfView=parseFloat(e.detail)})),window.addEventListener("changetranslate",(e=>{Hi.targetTranslateX=.01*parseFloat(e.detail)})),window.addEventListener("changesun",(e=>{Hi.targetSunRotateY=parseFloat(e.detail)})),window.addEventListener("changescale",(e=>{Hi.targetScale=parseFloat(e.detail)})),window.addEventListener("resetcamera",(()=>{Hi.targetTranslateX=0,Hi.targetScale=1,Hi.targetRotateY=0})),document.getElementById("webgpu-canvas").addEventListener("mousedown",(()=>{this.isMouseDown=!0})),document.getElementById("webgpu-canvas").addEventListener("mouseup",(()=>{this.isMouseDown=!1})),document.getElementById("webgpu-canvas").addEventListener("mouseleave",(()=>{this.isMouseDown=!1})),window.addEventListener("mousemove",(e=>{this.isMouseDown&&(Hi.targetRotateY-=.005*e.movementX)}))}log(e){this.logElement.innerHTML=e}},is=(()=>{let e={};const t=t=>{const r=e[t];return r?r.reduce(((e,t)=>e+t))/r.length:0};return{addSample:(t,r)=>{e[t]||(e[t]=[]),e[t].push(r)>50&&e[t].shift()},clearEntry:t=>{e[t]&&(e[t]=[0])},toString:()=>Object.keys(e).map((e=>`${e}: ${t(e).toFixed(2)}ms`)).join("\n"),toHTML:()=>Object.keys(e).map((e=>`<div class="debug-row">\n                    <div>\n                        ${e}\n                    </div>\n                   <div>${t(e).toFixed(2)}ms</div>\n                </div>`)).join("\n")}})();let ss,as,os;is.addSample("frame time",0);let us=Array.from({length:200}).map((()=>({position:[-80*Math.random(),50*Math.random(),-200*Math.random()],size:4,color:ue.normalize(ue.create(Math.random(),Math.random(),Math.random()))})));(async()=>{if(!navigator.gpu)return void console.error("WebGPU not supported");const e=await navigator.gpu.requestAdapter();if(!Wi)try{Wi=await e.requestDevice({requiredFeatures:["timestamp-query"],requiredLimits:{maxColorAttachmentBytesPerSample:64}})}catch(t){Wi=await e.requestDevice()}console.debug(Wi.limits),as=Wi.createTexture({dimension:"2d",size:[768,768,6],format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING}),Zi=new di(Wi),await(async(e,t)=>{const r=await fetch("./Tavern.json"),n=(await r.json()).children.filter((e=>Ni.includes(e.name))),i=new Set(n.map((e=>e.name))),s=Array.from(i);let a=e.createCommandEncoder();console.time("Load all volumes");{let r=await Promise.all(s.map((t=>(async(e,t,r)=>{console.time(`Fetch ${t}`);const n=await fetch(`./Tavern/${t}.vxm`);console.timeEnd(`Fetch ${t}`);const i=(e=>{console.time("convert vxm");const t=new zi(e);let r,n=[],i="",s=[];if(i=String.fromCodePoint(t.readUint8(),t.readUint8(),t.readUint8(),t.readUint8()),"VXMC"!==i&&"VXMA"!==i)throw new Error(`Incorrect magic: ${i}`);if(i[3].charCodeAt(0)>="0".charCodeAt(0)&&i[3].charCodeAt(0)<="9".charCodeAt(0))r=i[3].charCodeAt(0)-"0".charCodeAt(0);else{if(!(i[3].charCodeAt(0)>="A".charCodeAt(0)&&i[3].charCodeAt(0)<="C".charCodeAt(0)))throw new Error("Unsupported version found");r=10+i[3].charCodeAt(0)-"A".charCodeAt(0)}if(r<11||r>12)throw new Error(`Could not load vxm file: Unsupported version found (${r})`);let a=[0,0,0];a[0]=t.readUint32(),a[1]=t.readUint32(),a[2]=t.readUint32();let o=[.5,0,.5];if(o[0]=t.readFloat32(),o[1]=t.readFloat32(),o[2]=t.readFloat32(),t.readUint8()>0){let e=0,r=0;t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),e=t.readUint32(),r=t.readUint32();let n=e*r;t.skip(4*n)}r>=8&&t.skip(16);let u=t.readUint32();for(let e=0;e<u;++e){let e=t.readUint32(),r=t.readUint32();if(e>2048||r>2048)throw new Error("Size of texture exceeds the max allowed value");let n=t.readUint32();t.skip(n);for(let e=0;e<6;++e){let e=t.readUint32();e>262144&&console.warn(`Size of quads exceeds the max allowed value: ${e}`);let r=4*e*20;t.skip(r)}}t.skip(1024),t.skip(1024);let c=t.readUint8();for(let e=0;e<c;++e)t.skip(1024),t.readUint8(),t.readUint8();let l=t.readUint8();for(let e=0;e<l;++e){let r=t.readUint8(),i=t.readUint8(),s=t.readUint8(),a=t.readUint8();a=1===t.readUint8()?2:255,n[e]={r:s,g:i,b:r,a}}let f=1;r>=12&&(f=t.readUint8());let d={min:ue.create(9999,9999,9999),max:ue.create(0,0,0)};for(let e=0;e<f;++e){let n=0,i=!0,o="";if(r>=12){for(;;){const e=t.readUint8();if(Di(e))break;o=`${o}${String.fromCharCode(e)}`}i=t.readUint8()>0}else o=`Layer ${e}`;for(;;){let e=t.readUint8();if(0===e)break;let r=t.readUint8();if(255!==r)if(r>=l)n+=e;else{for(let t=n;t<n+e;t++){let e=Math.floor(t/(a[1]*a[2])),n=Math.floor(t/a[2]%a[1]),i=Math.floor(t%a[2]);d.min=ue.min(d.min,[e,n,i]),d.max=ue.max(d.max,[e,n,i]),s.push({x:e,y:n,z:i,c:r})}n+=e}else n+=e}}s=s.map((({x:e,y:t,z:r,c:n})=>({x:e-d.min[0],y:t-d.min[1],z:r-d.min[2],c:n})));const h=ue.sub(d.max,d.min);return console.log({bounds:d,trimmedSize:h}),console.timeEnd("convert vxm"),{VOX:s.length,SIZE:[h[0]+1,h[1]+1,h[2]+1],XYZI:s,RGBA:n}})(await n.arrayBuffer());console.time(`Create texture from voxels for ${t}`);let s=await(async(e,t)=>{const r=e.createTexture({size:{width:t.SIZE[0],height:t.SIZE[1],depthOrArrayLayers:t.SIZE[2]},format:si,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:4}),n=r.width*r.height*r.depthOrArrayLayers,i=e.createBuffer({size:4*n*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE}),s=e.createBuffer({size:256*t.SIZE[2],usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.UNIFORM,label:"voxels buffer"}),a=Array.from({length:t.SIZE[2]},((e,t)=>t));for(let t=0;t<a.length;t++)e.queue.writeBuffer(s,256*t,new Uint32Array([a[t]]).buffer);for(let r=0;r<t.XYZI.length;r++){const{x:n,y:s,z:a,c}=t.XYZI[r],l=(o=t.SIZE,(u=[n,s,a])[0]+u[1]*o[0]+u[2]*(o[0]*o[1]));e.queue.writeBuffer(i,16*l,new Uint32Array([n,s,a,c]).buffer)}var o,u;const c=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"storage"}}]}),l=e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[c]}),vertex:{module:e.createShaderModule({code:"\n          struct VertexOutput {\n            @builtin(position) Position : vec4<f32>,\n          }\n          \n          @vertex\n          fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n            const pos = array(\n              vec2( 1.0,  1.0),\n              vec2( 1.0, -1.0),\n              vec2(-1.0, -1.0),\n              vec2( 1.0,  1.0),\n              vec2(-1.0, -1.0),\n              vec2(-1.0,  1.0),\n            );\n            var output : VertexOutput;\n            output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n            return output;\n          }"}),entryPoint:"vertex_main"},fragment:{module:e.createShaderModule({code:"\n          @group(0) @binding(0) var<uniform> zIndex: u32;\n          @group(0) @binding(1) var<storage, read_write> voxelBuffer: array<vec4<u32>>;\n          \n          override sizeX: u32;\n          override sizeY: u32;\n          override sizeZ: u32;\n           \n          fn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\n            return position.x + position.y * size.x + position.z * (size.x * size.y);\n          }\n          \n          @fragment\n          fn fragment_main(@builtin(position) position : vec4<f32>) -> @location(0) vec4<f32> { \n            let voxelPosition = vec3(position.xy, f32(zIndex));\n            let voxelIndex = convert3DTo1D(vec3<u32>(sizeX, sizeY, sizeZ), vec3<u32>(voxelPosition));\n            let voxel = voxelBuffer[voxelIndex];\n            let normalisedPaletteIndex = f32(voxel.a) / 255.0;\n            return vec4(normalisedPaletteIndex,0,0,0);\n          }\n        "}),entryPoint:"fragment_main",targets:[{format:si}],constants:{sizeX:t.SIZE[0],sizeY:t.SIZE[1],sizeZ:t.SIZE[2]}}}),f=e.createCommandEncoder();for(let t=0;t<r.depthOrArrayLayers;t++){const n=e.createBindGroup({label:"create-texture-from-voxels",layout:c,entries:[{binding:0,resource:{buffer:s,offset:256*t,size:4}},{binding:1,resource:{buffer:i}}]}),a=f.beginRenderPass({colorAttachments:[{view:r.createView({baseArrayLayer:t,arrayLayerCount:1,mipLevelCount:1,dimension:"2d"}),loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});a.setPipeline(l),a.setBindGroup(0,n),a.draw(6),a.end()}return e.queue.submit([f.finish()]),await e.queue.onSubmittedWorkDone(),r})(r,i);console.timeEnd(`Create texture from voxels for ${t}`),console.time(`Create palette texture for ${t}`);const a=await(async(e,t)=>{const r=e.createTexture({size:{width:256,height:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC,dimension:"2d",mipLevelCount:1}),n=e.createBuffer({label:"palette buffer",size:1024,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC});t.RGBA.forEach((({r:t,g:r,b:i,a:s},a)=>{const o=new Uint8Array([t,r,i,s]);e.queue.writeBuffer(n,4*a,o)}));const i=e.createCommandEncoder();return i.copyBufferToTexture({buffer:n},{texture:r},[255,1,1]),e.queue.submit([i.finish()]),r})(r,i);return console.timeEnd(`Create palette texture for ${t}`),{name:t,texture:s,palette:a}})(0,t,e))));for(const{name:n,texture:i,palette:s}of r)console.time(`Add volume for ${n}`),await t.addVolume(i,s,n),a=e.createCommandEncoder(),console.timeEnd(`Add volume for ${n}`)}console.timeEnd("Load all volumes");const o=t.dictionary;let u=[];for(const e of n){const t=o[e.name];if(!t)return void console.warn(`Volume not found for child ${e.name}, skipping...`);"Candle"===e.name&&u.push(e.position);const{position:r,rotation:n,scale:i,name:s}=e,{size:a,location:c,paletteIndex:l}=t;Bi.push(new Ri({position:r,rotation:n,scale:i,size:a,atlasLocation:c,name:s,paletteIndex:l}))}console.log({volumes:o}),console.debug(`Tavern created with ${Bi.length} items`)})(Wi,Zi);const s=[Yi(),c(),Si(),Mi(),ji(),vr(Wi)],a=await Promise.all(s);((e,s)=>{let a,o,u,c,l,f,d,h,p,m,g,v,x,y,_,b=ke.create(),w=ke.create();Xi=document.getElementById("webgpu-canvas"),Xi.style.imageRendering="pixelated",$i=Xi.getContext("webgpu"),$i.configure({device:e,format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT}),e.features.has("timestamp-query")&&(y=e.createQuerySet({type:"timestamp",count:2*s.length}),_=e.createBuffer({label:"timestamp query",size:8*y.count,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}));const T=()=>{c&&(c=null),a&&(a=null),o&&(o=null),l&&(l=null),u&&(u=null),d&&(d=null);const{clientWidth:e,clientHeight:t}=Xi.parentElement,r=B.create(1*e,1*t);Ki=B.mulScalar(r,1),Xi.width=r[0],Xi.height=r[1],Xi.style.transform="scale(1)"};(async()=>{f||(f=await ii(e,"blue-noise-rg.png",{usage:GPUTextureUsage.COPY_SRC}))})(),x=new Fi(e,Bi);const k=i(e,[0,0,0,0],"camera position");setInterval((()=>{ns.log(is.toHTML())}),500);const S=T=>{0===Qi&&(Qi=T);const P=T-Qi;if(es=P-Ji,is.addSample("frame time",es),Ji=P,ts++,(()=>{const t=[...rs.viewProjectionMatrix,...w,...rs.inverseViewProjectionMatrix,...b,...rs.projectionMatrix,...rs.inverseProjectionMatrix];g?n(g,t):g=i(e,t,"view matrices buffer")})(),(()=>{const t=Bi;document.getElementById("objectcount").innerHTML=`Objects: ${t.length} / ${Bi.length} in view`;const r=t.flatMap((e=>e.toArray()));m?n(m,r):(m=i(e,r,"voxel object"),m=e.createBuffer({size:new Float32Array(r).byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1,label:"voxel objects transforms buffer"}))})(),!m||!f)return void(os=requestAnimationFrame(S));Xe.updateAll(),x.update(Bi);const M=ke.getTranslation(rs.inverseViewMatrix);document.getElementById("resolution").innerHTML=Ki.join(" x "),h||(h=r([ts,0,0],"time buffer")),e.queue.writeBuffer(h,4,new Float32Array([es])),e.queue.writeBuffer(h,0,new Uint32Array([ts])),e.queue.writeBuffer(h,8,new Float32Array([Ji/1e3])),p?t(p,[Ki[0],Ki[1]]):p=r([Ki[0],Ki[1]]),(()=>{const e=ke.identity();ke.rotateY(e,Hi.sunRotateY,e);const t=ue.normalize(ue.transformMat4(ue.create(0,.5,-1),e));v?n(v,[t[0],t[1],t[2]]):v=r([t[0],t[1],t[2]],"sun buffer")})(),n(k,M),o||(o=e.createTexture({size:[Ki[0],Ki[1],1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC})),a||(a=e.createTexture({size:[Ki[0],Ki[1],1],format:"rgba16float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT})),c||(c=e.createTexture({size:[Ki[0],Ki[1],1],format:"depth32float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC})),l||(l=e.createTexture({size:[Ki[0],Ki[1],1],format:"rgba16float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT})),u||(u=e.createTexture({size:[Ki[0],Ki[1],1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT})),d||(d=e.createTexture({size:[Ki[0],Ki[1],1],format:"rgba32float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT}));let A=[];ss=Zi.atlasTextureView,ss?(s.forEach(((t,r)=>{const{render:n,label:i}=t;if(!1===document.getElementById(`flag-${i}`)?.checked)return;const s=e.createCommandEncoder();let b;e.features.has("timestamp-query")&&s.clearBuffer(_),e.features.has("timestamp-query")&&(b={querySet:y,beginningOfPassWriteIndex:2*r,endOfPassWriteIndex:2*r+1}),x.update(Bi),n({commandEncoder:s,resolutionBuffer:p,timeBuffer:h,outputTextures:{finalTexture:u,albedoTexture:o,normalTexture:a,depthTexture:c,skyTexture:as,velocityTexture:l,worldPositionTexture:d},cameraPositionBuffer:k,volumeAtlas:Zi,transformationMatrixBuffer:m,viewProjectionMatricesBuffer:g,timestampWrites:b,sunDirectionBuffer:v,blueNoiseTexture:f,bvhBuffer:x.gpuBuffer,lights:us}).forEach((e=>{A.push(e)}))})),e.features.has("timestamp-query")&&(t=>{const r=e.createCommandEncoder();r.resolveQuerySet(y,0,y.count,_,0),t.push(r.finish());const n=_.size,i=e.createBuffer({size:n,label:"gpu read buffer",usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),a=e.createCommandEncoder();a.copyBufferToBuffer(_,0,i,0,n);const o=a.finish();e.queue.submit([o]),i.mapAsync(GPUMapMode.READ).then((()=>i.getMappedRange())).then((e=>{const t=new BigInt64Array(e),r=[];t.forEach((e=>{r.push(Number(e)/1e6)})),r.reduce(((e,t,n)=>(n%2==0&&e.push(r[n+1]-t),e)),[]).forEach(((e,t)=>{const r=s[t].label,n=`flag-${r}`,i=document.getElementById(n)?.checked;r&&i?is.addSample(r,e):is.clearEntry(r)}))}))})(A),e.queue.submit(A),os=requestAnimationFrame(S),b=rs.inverseViewProjectionMatrix,w=rs.viewProjectionMatrix):os=requestAnimationFrame(S)};T(),window.onresize=T,os=requestAnimationFrame(S)})(Wi,await Promise.all(a)),document.getElementById("flags").innerHTML=a.reduce(((e,t)=>{if(!t.label)return e;const r=`flag-${t.label}`;return`${e}<div class="debug-row">\n                    <label for="${r}">\n                        ${t.label}\n                    </label>\n                    <div>\n                        <input id="${r}" type="checkbox" checked>\n                   </div>\n                </div>`}),"")})()})();