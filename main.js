(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{UI:()=>Ai,Ji:()=>xi,mL:()=>gi,Eh:()=>Ti,jO:()=>_i,Lz:()=>Pi,sZ:()=>yi,PM:()=>bi,gw:()=>vi});const t=(e,t)=>{const n=new Uint32Array(t);_i.queue.writeBuffer(e,0,n.buffer,0,t.length*Uint32Array.BYTES_PER_ELEMENT)},n=(e,n)=>{const r=new Uint32Array(e),i=_i.createBuffer({size:r.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:n});return t(i,e),i},r=(e,t)=>{if(t instanceof Float32Array)_i.queue.writeBuffer(e,0,t.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT);else{const n=new Float32Array(t);_i.queue.writeBuffer(e,0,n.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT)}},i=(e,t,n)=>{const i=new Float32Array(t),s=e.createBuffer({size:i.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:n});return r(s,t),s},s="struct BoxIntersectionResult {\n    tNear: f32,\n    tFar: f32,\n    normal: vec3<f32>,\n    isHit: bool,\n}\n\nfn simpleBoxIntersection(\n    ro: vec3<f32>,\n    rd: vec3<f32>,\n    boxSize: vec3<f32>,\n) -> f32 {\n  let m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n  let n = m*ro;   // can precompute if traversing a set of aligned boxes\n  let k = abs(m)*boxSize;\n  let t1 = -n - k;\n  let t2 = -n + k;\n  let tN = max( max( t1.x, t1.y ), t1.z );\n  let tF = min( min( t2.x, t2.y ), t2.z );\n  if( tN>tF || tF<0.0) {\n    return -1.0; // no intersection\n  }\n  return tN;\n}\n\nfn boxIntersection(\n    ro: vec3<f32>,\n    rd: vec3<f32>,\n    boxSize: vec3<f32>,\n) -> BoxIntersectionResult {\n    var result = BoxIntersectionResult();\n    result.isHit = false;\n    result.tNear = -1.0;\n    result.tFar = -1.0;\n\n    let offsetRayOrigin = ro - boxSize;\n    let m: vec3<f32> = 1.0 / rd;\n    let n: vec3<f32> = m * offsetRayOrigin;\n    let k: vec3<f32> = abs(m) * boxSize;\n    let t1: vec3<f32> = -n - k;\n    let t2: vec3<f32> = -n + k;\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\n    if (tN > tF || tF < 0.0) {\n        return result;\n    }\n    // Check if the ray starts inside the volume\n    let insideVolume = tN < 0.0;\n    var normal = select(\n        step(vec3<f32>(tN), t1),\n        step(t2, vec3<f32>(tF)),\n        tN < 0.0,\n    );\n    normal *= -sign(rd);\n    // Check if the intersection is in the correct direction, only if inside the volume\n    if (insideVolume && dot(normal, rd) < 0.0) {\n        return result;\n    }\n    result.tNear = tN;\n    result.tFar = tF;\n    result.normal = normal;\n    result.isHit = true;\n    return result;\n}\n\nfn planeIntersection(\n    ro: vec3<f32>,\n    rd: vec3<f32>,\n    planeNormal: vec3<f32>,\n    planeDistance: f32,\n) -> BoxIntersectionResult {\n    var result = BoxIntersectionResult();\n    let denom = dot(planeNormal, rd);\n    if (abs(denom) > 0.0001) {\n        let t = -(dot(planeNormal, ro) + planeDistance) / denom;\n        if (t > 0.0) {\n            result.isHit = true;\n            result.tNear = t;\n            result.tFar = t;\n            result.normal = planeNormal;\n        }\n    }\n    return result;\n}\n\nfn get3x3From4x4(m: mat4x4<f32>) -> mat3x3<f32> {\n    return mat3x3<f32>(\n        m[0].xyz,\n        m[1].xyz,\n        m[2].xyz,\n    );\n}\n\n\nfn intersectOBB(\n    ro: vec3<f32>,\n    rd: vec3<f32>,\n    boxSize: vec3<f32>,\n    boxOrientation: mat3x3<f32>,\n) -> BoxIntersectionResult {\n    var result = BoxIntersectionResult();\n    result.isHit = false;\n    result.tNear = -1.0;\n    result.tFar = -1.0;\n\n    let offsetRayOrigin = ro - boxSize;\n    let m: vec3<f32> = 1.0 / rd;\n    let n: vec3<f32> = m * offsetRayOrigin;\n    let k: vec3<f32> = abs(m) * boxSize;\n    let t1: vec3<f32> = -n - k;\n    let t2: vec3<f32> = -n + k;\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\n    if (tN > tF || tF < 0.0) {\n        return result;\n    }\n    // Check if the ray starts inside the volume\n    let insideVolume = tN < 0.0;\n    var normal = select(\n        step(vec3<f32>(tN), t1),\n        step(t2, vec3<f32>(tF)),\n        tN < 0.0,\n    );\n    normal *= -sign(rd);\n    // Check if the intersection is in the correct direction, only if inside the volume\n    if (insideVolume && dot(normal, rd) < 0.0) {\n        return result;\n    }\n    result.tNear = tN;\n    result.tFar = tF;\n    result.normal = normal;\n    result.isHit = true;\n    return result;\n}",o="const EPSILON = 0.0001;\nconst MAX_RAY_STEPS = 256;\nconst FAR_PLANE = 10000.0;\nconst NEAR_PLANE = 0.5;\n\n\n// Function to transform a normal vector from object to world space\nfn transformNormal(inverseTransform: mat4x4<f32>, normal: vec3<f32>) -> vec3<f32> {\n    let worldNormal = normalize((vec4<f32>(normal, 0.0) * inverseTransform).xyz);\n    return worldNormal;\n}\n\n// Function to transform an object space position to world space\nfn transformPosition(transform: mat4x4<f32>, position: vec3<f32>) -> vec3<f32> {\n    let worldPosition = (transform * vec4<f32>(position, 1.0)).xyz;\n    return worldPosition;\n}\n\nfn getMaxMipLevel(size: vec3<f32>) -> u32 {\n  return u32(log2(max(size.x, max(size.y, size.z))));\n}\n\nstruct BVHNode {\n  leftIndex: i32,\n  rightIndex: i32,\n  objectCount: u32,\n  AABBMin: vec3<f32>,\n  AABBMax: vec3<f32>\n}\n\nstruct Brick {\n  voxels: array<u32, 16>\n}\nstruct VoxelObject {\n  transform: mat4x4<f32>,\n  inverseTransform: mat4x4<f32>,\n  previousTransform: mat4x4<f32>,\n  previousInverseTransform: mat4x4<f32>,\n  size : vec3<f32>,\n  atlasLocation : vec3<f32>,\n  brickOffset : u32,\n}\n\nstruct RayMarchResult {\n  colour: vec3<f32>,\n  normal: vec3<f32>,\n  objectPos: vec3<f32>,\n  worldPos: vec3<f32>,\n  hit: bool,\n  modelMatrix: mat4x4<f32>,\n  previousModelMatrix: mat4x4<f32>,\n  inverseModelMatrix: mat4x4<f32>,\n  previousInverseModelMatrix: mat4x4<f32>,\n  stepsTaken: i32,\n  isWater: bool\n}\n\nfn isInBounds(position: vec3<i32>, size: vec3<i32>) -> bool {\n  return all(position >= vec3(0)) && all(position <= size - vec3(1));\n}\n\nfn getMipLevelFromVoxelSize(voxelSize: vec3<f32>) -> u32 {\n  return u32(log2(max(voxelSize.x, max(voxelSize.y, voxelSize.z))));\n}\n\nfn convert1DTo3D(size: vec3<u32>, index: u32) -> vec3<u32> {\n  return vec3(\n    index % size.x,\n    index / size.y,\n    index / (size.x * size.y)\n  );\n}\n\nfn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\n  return position.x + position.y * size.x + position.z * (size.x * size.y);\n}\n\n\nfn doesBrickContainVoxels(brick: Brick) -> bool {\n  for(var i = 0; i < 16; i++){\n    if(brick.voxels[i] > 0){\n      return true;\n    }\n  }\n  return false;\n}\n\nfn getBit(value: u32, bitIndex: u32) -> bool {\n  return (value & (1u << bitIndex)) != 0;\n}\n\n// gets bit in 512bit bitmask in a brick\n// bitIndex is the index of the bit in the bitmask, 0-511\nfn getBitInBrick(brick: Brick, bitIndex: u32) -> bool {\n  let maskIndex = bitIndex / 32;\n  let bitIndexInMask = bitIndex % 32;\n  return getBit(brick.voxels[maskIndex], bitIndexInMask);\n}\n\nstruct BrickMarchResult {\n  hit: bool,\n  normal: vec3<f32>,\n  t: f32\n}\n\n// plane degined by p (p.xyz must be normalized)\nfn plaIntersect( ro:vec3<f32>, rd: vec3<f32>, p:vec4<f32>) -> f32\n{\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n//vec4 PlaneMarch(vec3 p0, vec3 d) {\n//  float t = 0;\n//  while (t <= maxDistToCheck) {\n//    vec3 p = p0 + d * t;\n//    vec4 c = textureLod(voxels, p / voxelGridSize, 0);\n//    if (c.a > 0) {\n//      return c;\n//    }\n//\n//    vec3 deltas = (step(0, d) - fract(p)) / d;\n//    t += max(mincomp(deltas), epsilon);\n//  }\n//\n//  return vec4(0);\n//}\n\n// TODO: start at surface of brick\n// ray march one brick, offseting the ray origin by the brick position\nfn rayMarchBrick(brick: Brick, rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> BrickMarchResult {\n     var output = BrickMarchResult(false, vec3(0), 0.0);\n     let rayDirSign = sign(rayDirection);\n     var startIndex = vec3<i32>(floor(rayOrigin));\n     var currentIndex = startIndex;\n\n    let intersectDist = plaIntersect(rayOrigin, rayDirection, vec4(0., 0., 1, 8.0));\n//    let isIntersect = intersectDist > 0.0;\n//\n//    let isVoxel = currentIndex.y < 4;\n//    if(isVoxel && isIntersect){\n//      output.hit = true;\n////    output.normal = (rayOrigin) / 8.0;\n//      output.normal = vec3<f32>(currentIndex) / 8.0;\n//    }\n\n   for(var i = 0; i < 24 && !output.hit; i++)\n   {\n     let tMax = vec3<f32>(currentIndex - startIndex) / rayDirection;\n     let mask = vec3<i32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\n     let tCurrent = min(tMax.x, min(tMax.y, tMax.z));\n     let bitIndex = convert3DTo1D(vec3(8), vec3<u32>(currentIndex));\n//     if(true){\n     if(currentIndex.y < 6){\n        output.hit = true;\n//        output.normal = (rayOrigin) / 8.0;\n        output.normal = vec3<f32>(currentIndex) / 8.0;\n//        output.normal = vec3(rayDirection.y);\n        output.t = tCurrent;\n     }\n     currentIndex += mask;\n   }\n  return output;\n}\n\nfn rayMarchAtMip(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\n  var output = RayMarchResult();\n  let rayDirSign = sign(objectRayDirection);\n  let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\n  let brickAtlasLocation = vec3<u32>(atlasLocation) / 8;\n  var brickRayOrigin = objectRayOrigin / 8.0;\n  let brickMapSize = textureDimensions(voxels) / 8;\n  let objectSizeInBricks = vec3<i32>(ceil(vec3<f32>(voxelObject.size / f32(8))));\n  var shiftedRayOrigin = brickRayOrigin - objectRayDirection * EPSILON;\n  var objectPos = shiftedRayOrigin;\n  var currentIndex = vec3<i32>(floor(objectPos));\n  let longestDimension = max(voxelObject.size.x, max(voxelObject.size.y, voxelObject.size.z));\n  let maxRaySteps = i32(longestDimension * 3);\n\n  // RAYMARCH\n  for(var i = 0; i < maxRaySteps && !output.hit; i++)\n  {\n    var scaledRayOrigin = shiftedRayOrigin;\n    var scaledObjectPos = floor(objectPos);\n    var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\n    var tMax =  (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\n    let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\n    var objectNormal = mask * -rayDirSign;\n\n    var tCurrent = min(tMax.x, min(tMax.y, tMax.z));\n    objectPos = brickRayOrigin + objectRayDirection * tCurrent;\n    currentIndex = vec3<i32>(floor(objectPos));\n\n   if(!isInBounds(currentIndex, objectSizeInBricks)){\n     break;\n    }\n\n    let brickSamplePosition = vec3<u32>(currentIndex) + brickAtlasLocation;\n    let brickSample = brickBuffer[convert3DTo1D(brickMapSize, brickSamplePosition)];\n\n\n    if(doesBrickContainVoxels(brickSample)){\n        output.objectPos = objectPos * 8;\n        output.hit = true;\n        output.worldPos = (voxelObject.transform *  vec4(output.objectPos, 1.0)).xyz;\n        output.colour = abs(output.worldPos) %1.0;\n//\n//        let brickPosition = vec3<f32>(currentIndex);\n//        let brickSurfacePosition = objectPos * 8 - brickPosition * 8;\n//        let brickRayResult = rayMarchBrick(brickSample, objectRayDirection, brickSurfacePosition);\n//        if(brickRayResult.hit){\n//          output.hit = true;\n//          output.objectPos =  vec3<f32>(brickRayResult.position) + vec3<f32>(brickSamplePosition);\n//          output.worldPos = (voxelObject.transform *  vec4(output.objectPos, 1.0)).xyz;\n//          output.normal = transformNormal(voxelObject.inverseTransform, brickRayResult.normal);\n//          output.modelMatrix = voxelObject.transform;\n//          output.inverseModelMatrix = voxelObject.inverseTransform;\n//          output.previousModelMatrix = voxelObject.previousTransform;\n//          output.previousInverseModelMatrix = voxelObject.previousInverseTransform;\n////          output.colour = vec3(1.0);\n////          output.colour = output.objectPos % 1.0;\n//          output.colour = vec3<f32>(abs(output.worldPos) % 1.0);\n//        }\n    }\n\n    output.stepsTaken = i;\n  }\n  return output;\n}\n\nfn rayMarchTransformed(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\n      var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\n      let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\n      return  rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, 0);\n}\n\nconst STACK_LEN: u32 = 32u;\nstruct Stack {\n  arr: array<i32, STACK_LEN>,\n\thead: u32,\n}\n\nfn stack_new() -> Stack {\n    var arr: array<i32, STACK_LEN>;\n    return Stack(arr, 0u);\n}\n\nfn stack_push(stack: ptr<function, Stack>, val: i32) {\n    (*stack).arr[(*stack).head] = val;\n    (*stack).head += 1u;\n}\n\nfn stack_pop(stack: ptr<function, Stack>) -> i32 {\n    (*stack).head -= 1u;\n    return (*stack).arr[(*stack).head];\n}\n\nconst colours = array<vec3<f32>, 6>(\n  vec3<f32>(1.0, 0.0, 0.0),\n  vec3<f32>(0.0, 1.0, 0.0),\n  vec3<f32>(0.0, 0.0, 1.0),\n  vec3<f32>(1.0, 1.0, 0.0),\n  vec3<f32>(1.0, 0.0, 1.0),\n  vec3<f32>(0.0, 1.0, 1.0)\n);\n\nfn debugColourFromIndex(index: i32) -> vec3<f32> {\n  return colours[index % 6];\n}\n\nfn getDistanceToNode(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, node: BVHNode) -> f32 {\n  if(all(rayOrigin >= node.AABBMin) && all(rayOrigin <= node.AABBMax)){\n    return 0.0;\n  }\n  let boxSize = (node.AABBMax - node.AABBMin) / 2;\n  let intersection = boxIntersection(rayOrigin - node.AABBMin, rayDirection, boxSize);\n  if(intersection.isHit){\n    return intersection.tNear;\n  }\n  return -1.0;\n\n}\n",a="fn calculateRayDirection(uv: vec2<f32>, inverseProjection: mat4x4<f32>) -> vec3<f32> {\n  let clipSpace = vec2(1.0 - uv.x, 1.0 - uv.y) * 2.0 - 1.0;\n  let viewRay = vec3<f32>(clipSpace, 1.0);\n  let viewRayView = inverseProjection * vec4(viewRay, 1.0);\n  return normalize(viewRayView.xyz);\n}\n",c=async()=>{const e={binding:4,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},t={binding:5,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm",viewDimension:"2d"}},n={binding:7,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba16float",viewDimension:"2d"}},r=(GPUShaderStage.COMPUTE,{binding:9,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}),i={binding:10,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},c={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},u={binding:11,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},l=_i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},c,e,t,n,{binding:8,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},r,i,u]}),h=_i.createComputePipeline({layout:_i.createPipelineLayout({bindGroupLayouts:[l]}),compute:{module:_i.createShaderModule({code:`\n          struct IndirectArgs {\n            count: atomic<u32>\n          };\n          @group(0) @binding(10) var<storage> bvhNodes: array<BVHNode>;\n          @group(0) @binding(11) var<storage> brickBuffer: array<Brick>;\n          @group(0) @binding(12) var<storage, read_write> groupsToFullyTrace: array<vec2<u32>>;\n          @group(0) @binding(13) var<storage, read_write> indirectArgs: IndirectArgs;\n          ${a}\n          ${s}\n          ${o}\n          const BRICK_SIZE = 8;\nconst MAX_STEPS = 256;\n\n\nstruct BVHLeafNode {\n  voxelObjectIndex: i32, // this is the index of the voxelObject for leaf nodes\n  brickIndex: i32,\n  objectCount: u32,\n  AABBMin: vec3<f32>,\n  AABBMax: vec3<f32>\n}\n\nfn castNodeToLeafNode(node: BVHNode) -> BVHLeafNode {\n  return BVHLeafNode(node.leftIndex, node.rightIndex, node.objectCount, node.AABBMin, node.AABBMax);\n}\n\nfn getBrickMapIndex(objectPos: vec3<f32>) -> i32{\n  return i32(objectPos.x / BRICK_SIZE) + i32(objectPos.y / BRICK_SIZE) * BRICK_SIZE + i32(objectPos.z / BRICK_SIZE) * BRICK_SIZE * BRICK_SIZE;\n}\n\nfn getBrickDebugColour(brickMapIndex: i32) -> vec3<f32>{\n  let x = f32(brickMapIndex % BRICK_SIZE) / f32(BRICK_SIZE);\n  let y = f32(brickMapIndex / BRICK_SIZE % BRICK_SIZE) / f32(BRICK_SIZE);\n  let z = f32(brickMapIndex / (BRICK_SIZE * BRICK_SIZE)) / f32(BRICK_SIZE);\n  return vec3<f32>(x, y, z);\n}\n\n// Stack-based BVH traversal\nfn rayMarchBVH(rayOrigin: vec3<f32>, rayDirection: vec3<f32>) -> RayMarchResult {\n  var closestIntersection = RayMarchResult();\n  closestIntersection.worldPos = rayOrigin + rayDirection * FAR_PLANE;\n\n  // Create a stack to store the nodes to visit\n  var stack = stack_new();\n  stack_push(&stack, 0);\n\n  // Track closest raymarch distance will let us skip nodes that are further than the closest raymarched object\n  var closestRaymarchDist = 1e30f;\n  var iterations = 0;\n  var nodeIndex = 0;\n\n  while (stack.head > 0u && iterations < MAX_STEPS) {\n    let node = bvhNodes[nodeIndex];\n    if(node.objectCount == 0){\n      nodeIndex = stack_pop(&stack);\n    }\n    // valid leaf, raymarch it\n    else if(node.objectCount == 1){\n        let leafNode = castNodeToLeafNode(node);\n        // Raymarch the voxel object if it's a leaf node\n        let boxSize = (node.AABBMax - node.AABBMin) / 2;\n        let brickOrigin = node.AABBMin;\n        let intersection = boxIntersection(rayOrigin - brickOrigin, rayDirection, boxSize);\n        let AABBDist = intersection.tNear - EPSILON;\n        let voxelObject = voxelObjects[leafNode.voxelObjectIndex]; // left index represents the voxel object index for leaf nodes\n        let brick = brickBuffer[leafNode.brickIndex + i32(voxelObject.brickOffset)];\n        if(AABBDist > closestRaymarchDist){\n          nodeIndex = stack_pop(&stack);\n          continue;\n        }\n        let worldPos = rayOrigin + rayDirection * AABBDist;\n        let objectPos = (voxelObject.inverseTransform * vec4(worldPos, 1.0)).xyz;\n        let objectRayOrigin = (voxelObject.inverseTransform * vec4(rayOrigin, 1.0)).xyz;\n        let objectBrickOrigin = (voxelObject.inverseTransform * vec4(brickOrigin, 1.0)).xyz;\n        let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\n\n        let brickPos = ((rayOrigin - brickOrigin) + rayDirection * AABBDist) * 8.0;\n\n        // Get the ray origin and direction in object space\n        let result = rayMarchBrick(brick, rayDirection, brickPos);\n\n        if(result.hit && objectBrickOrigin.x % 2 == 0 && objectBrickOrigin.y % 2 == 0){\n//            closestIntersection.colour = objectBrickOrigin / voxelObject.size;\n            closestIntersection.colour = result.normal;\n            closestRaymarchDist = AABBDist;\n            closestIntersection.worldPos = worldPos;\n        }\n\n\n        nodeIndex = stack_pop(&stack);\n    }\n    else{\n      let leftDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.leftIndex]);\n      let rightDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.rightIndex]);\n      let hitLeft = leftDist >= 0.0 && leftDist < closestRaymarchDist;\n      let hitRight = rightDist >= 0.0 && rightDist < closestRaymarchDist;\n      if(hitLeft){\n        var nearIndex = node.leftIndex;\n        // We hit both left and right, choose the closest one\n        if(hitRight){\n          if(leftDist < rightDist){\n            // left is closer, push right to stack\n            stack_push(&stack, node.rightIndex);\n          } else {\n            // right is closer, push left to stack\n            stack_push(&stack, node.leftIndex);\n            nearIndex = node.rightIndex;\n          }\n        }\n        nodeIndex = nearIndex;\n      }\n      // We only hit the right Node\n      else if(hitRight){\n        nodeIndex = node.rightIndex;\n      }\n      // We didn't hit any node, pop the stack\n      else{\n        nodeIndex = stack_pop(&stack);\n      }\n    }\n\n    iterations += 1;\n//    closestIntersection.colour += vec3<f32>(0.0075);\n  }\n\n  return closestIntersection;\n}\n\nfn rayMarchBVHFirstHit(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, maxDistance: f32) -> bool {\n    // Create a stack to store the nodes to visit\n    var stack = stack_new();\n    stack_push(&stack, 0);\n\n\n    var iterations = 0;\n    var nodeIndex = 0;\n\n    while (stack.head > 0u && iterations < 128) {\n      let node = bvhNodes[nodeIndex];\n      if(node.objectCount == 0){\n        nodeIndex = stack_pop(&stack);\n      }\n      // valid leaf, raymarch it\n      else if(node.objectCount == 1){\n          // Raymarch the voxel object if it's a leaf node\n          let voxelObject = voxelObjects[node.leftIndex]; // left index represents the voxel object index for leaf nodes\n          let AABBDist = getDistanceToNode(rayOrigin, rayDirection, node);\n          if(AABBDist > maxDistance){\n            nodeIndex = stack_pop(&stack);\n            continue;\n          }\n          let raymarchResult = rayMarchTransformed(voxelObject, rayDirection, rayOrigin + rayDirection * AABBDist, 0);\n          if(raymarchResult.hit && distance(raymarchResult.worldPos, rayOrigin) < maxDistance){\n            return true;\n          }\n          // Pop the stack and continue\n          nodeIndex = stack_pop(&stack);\n      }\n      else{\n        let leftDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.leftIndex]);\n        let rightDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.rightIndex]);\n        let hitLeft = leftDist >= 0.0 && leftDist < maxDistance;\n        let hitRight = rightDist >= 0.0 && rightDist < maxDistance;\n        if(hitLeft){\n          var nearIndex = node.leftIndex;\n          // We hit both left and right, choose the closest one\n          if(hitRight){\n            if(leftDist < rightDist){\n              // left is closer, push right to stack\n              stack_push(&stack, node.rightIndex);\n            } else {\n              // right is closer, push left to stack\n              stack_push(&stack, node.leftIndex);\n              nearIndex = node.rightIndex;\n            }\n          }\n          nodeIndex = nearIndex;\n        }\n        // We only hit the right Node\n        else if(hitRight){\n          nodeIndex = node.rightIndex;\n        }\n        // We didn't hit any node, pop the stack\n        else{\n          nodeIndex = stack_pop(&stack);\n        }\n      }\n\n      iterations += 1;\n    }\n\n    return false;\n}\n          struct ViewProjectionMatrices {\n  viewProjection : mat4x4<f32>,\n  previousViewProjection : mat4x4<f32>,\n  inverseViewProjection : mat4x4<f32>,\n  previousInverseViewProjection : mat4x4<f32>,\n  projection : mat4x4<f32>,\n  inverseProjection: mat4x4<f32>\n};\n\n@group(0) @binding(0) var voxels : texture_3d<f32>;\n@group(0) @binding(2) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(3) var<storage> voxelObjects : array<VoxelObject>;\n// TODO: maybe make a G-Buffer bind group to resuse across shaders\n@group(0) @binding(4) var normalTex : texture_storage_2d<rgba16float, write>;\n@group(0) @binding(5) var albedoTex : texture_storage_2d<rgba8unorm, write>;\n//@group(0) @binding(6) var depthRead : texture_2d<f32>;\n//@group(0) @binding(6) var depthWrite : texture_storage_2d<rgba32float, write>;\n@group(0) @binding(7) var velocityTex : texture_storage_2d<rgba16float, write>;\n@group(0) @binding(8) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(9) var<uniform> sunDirection : vec3<f32>;\n\n\nfn plainIntersect(ro: vec3<f32>, rd: vec3<f32>, p: vec4<f32>) -> f32 {\n    return -(dot(ro, p.xyz) + p.w) / dot(rd, p.xyz);\n}\n\nfn getVelocity(rayMarchResult: RayMarchResult, viewProjections: ViewProjectionMatrices) -> vec3<f32> {\n  let vp = viewProjections.viewProjection;\n    let previousVp = viewProjections.previousViewProjection;\n    let modelMatrix = rayMarchResult.modelMatrix;\n    let previousModelMatrix = rayMarchResult.previousModelMatrix;\n\n    // Get current object space position of the current pixel\n    let objectPos = rayMarchResult.objectPos.xyz;\n    let objectClipSpace = vp * modelMatrix * vec4(objectPos.xyz, 1.0);\n    let objectNDC = objectClipSpace.xyz / objectClipSpace.w;\n\n    // Get previous position of the current object space position\n    let previousObjectClipSpace = previousVp * previousModelMatrix * vec4(objectPos.xyz, 1.0);\n    let previousObjectNDC = previousObjectClipSpace.xyz / previousObjectClipSpace.w;\n\n    // Get velocity based on the difference between the current and previous positions\n    var velocity = objectNDC - previousObjectNDC;\n    velocity.y = -velocity.y;\n  return velocity;\n}\n\nfn getLeftChildIndex(index: i32) -> i32 {\n  return index * 2 + 1;\n}\n\nfn getRightChildIndex(index: i32) -> i32 {\n  return index * 2 + 2;\n}\n\nfn getParentIndex(index: i32) -> i32 {\n  return (index - 1) / 2;\n}\n\n\nfn dirIsNegative(dir: vec3<f32>, axis: i32) -> bool {\n  return dir[axis] < 0.0;\n}\n\nfn getDebugColour(index: i32) -> vec3<f32> {\n  let colours = array<vec3<f32>, 6>(\n    vec3<f32>(1.0, 0.0, 0.0),\n    vec3<f32>(0.0, 1.0, 0.0),\n    vec3<f32>(0.0, 0.0, 1.0),\n    vec3<f32>(1.0, 1.0, 0.0),\n    vec3<f32>(1.0, 0.0, 1.0),\n    vec3<f32>(0.0, 1.0, 1.0)\n  );\n  return colours[index % 6];\n}\n\n\nfn customNormalize(value: f32, min: f32, max: f32) -> f32 {\n    return (value - min) / (max - min);\n}\n\nfn catmullRomSpline(t: f32, p0: f32, p1: f32, p2: f32, p3: f32) -> f32 {\n  let t2 = t * t;\n  let t3 = t2 * t;\n  return 0.5 * (\n    (2.0 * p1) +\n    (-p0 + p2) * t +\n    (2.0 * p0 - 5.0 * p1 + 4.0 * p2 - p3) * t2 +\n    (-p0 + 3.0 * p1 - 3.0 * p2 + p3) * t3\n  );\n}\n\n/*\n\nx o x\no x o\nx o x\n\nx o x o x\no x o x o\nx o x o x\no x o x o\nx o x o x\n\nIncremental sampling pattern\n1 o o o 2 o o o 1\no o o o o o o o o\no o 2 o o o 2 o o\no o o o o o o o o\n2 o o o 1 o o o 2\no o o o o o o o o\no o 2 o o o 2 o o\no o o o o o o o o\n1 o o o 2 o o o 1\n\n*/\n\nconst SPATIAL_KERNEL_SIZE = 9;\nconst SPATIAL_SAMPLE_COUNT = 5;\n\nconst KERNEL_CORNER_OFFSETS = array<vec2<u32>, SPATIAL_SAMPLE_COUNT>(\n  // First set\n  vec2(0,0),\n  vec2(8,0),\n  vec2(0,8),\n  vec2(8,8),\n  vec2(4,4)\n);\n\n// TODO: incrementally sample more points if variance is high\n@compute @workgroup_size(8, 8, 1)\nfn adaptive(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n) {\n  let resolution = textureDimensions(albedoTex);\n  let originPixel = GlobalInvocationID.xy * (SPATIAL_KERNEL_SIZE);\n  var albedos = array<vec3<f32>, SPATIAL_SAMPLE_COUNT>();\n  var normals = array<vec3<f32>, SPATIAL_SAMPLE_COUNT>();\n  var depths = array<f32, SPATIAL_SAMPLE_COUNT>();\n  var worldPositions = array<vec3<f32>, SPATIAL_SAMPLE_COUNT>();\n  var velocities = array<vec3<f32>, SPATIAL_SAMPLE_COUNT>();\n\n  // first kernel\n  for(var i = 0u; i < SPATIAL_SAMPLE_COUNT; i++){\n    let pixelOffset = KERNEL_CORNER_OFFSETS[i];\n//    let pixelOffset = getSpatialPosition(i, 3) * 4;\n    let pixel = originPixel + pixelOffset;\n\n    textureStore(albedoTex, pixel, vec4(1.0,0.0,0.0,1.0));\n    textureStore(normalTex, pixel, vec4(0.0,0.0,0.0,1.0));\n//    textureStore(depthWrite, pixel, vec4(0.0,0.0,0.0,FAR_PLANE));\n    textureStore(velocityTex, pixel, vec4(0,0,0,0));\n\n    var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\n    let rayDirection = calculateRayDirection(uv,viewProjections.inverseViewProjection);\n    var rayOrigin = cameraPosition;\n    var closestIntersection = RayMarchResult();\n    closestIntersection.worldPos = rayOrigin + rayDirection * FAR_PLANE;\n\n    // Floor plane for debugging\n    let planeY = 0.0;\n    let planeIntersect = planeIntersection(rayOrigin, rayDirection, vec3(0,1,0), planeY);\n    if(planeIntersect.isHit){\n      closestIntersection.worldPos = rayOrigin + rayDirection * planeIntersect.tNear;\n      closestIntersection.worldPos.y = planeY;\n      closestIntersection.hit = planeIntersect.isHit;\n      closestIntersection.normal = planeIntersect.normal;\n      closestIntersection.colour = vec3(0.15,0.3,0.1);\n      // TODO: hit water here\n    }\n\n    let maxMipLevel = u32(0);\n    let minMipLevel = u32(0);\n    var mipLevel = maxMipLevel;\n\n    let bvhResult = rayMarchBVH(rayOrigin, rayDirection);\n//    if(bvhResult.hit){\n      closestIntersection = bvhResult;\n//    }\n\n    let normal = closestIntersection.normal;\n    let depth = distance(cameraPosition, closestIntersection.worldPos);\n    let albedo = closestIntersection.colour;\n    let velocity = getVelocity(closestIntersection, viewProjections);\n\n    normals[i] = normal;\n    albedos[i] = albedo;\n    depths[i] = depth;\n    worldPositions[i] = closestIntersection.worldPos;\n    velocities[i] = velocity;\n  }\n\n  // Get averages\n  var normal = vec3<f32>(0.0,0.0,0.0);\n  var albedo = vec3<f32>(0.0,0.0,0.0);\n  var worldPos = vec3<f32>(0.0,0.0,0.0);\n  for(var i = 0; i < SPATIAL_SAMPLE_COUNT; i++){\n    normal += normals[i];\n    albedo += albedos[i];\n    worldPos += worldPositions[i];\n  }\n  normal /= f32(SPATIAL_SAMPLE_COUNT);\n  albedo /= f32(SPATIAL_SAMPLE_COUNT);\n  worldPos /= f32(SPATIAL_SAMPLE_COUNT);\n\n  var normalDiff = vec3<f32>(0.0,0.0,0.0);\n  var albedoDiff = vec3<f32>(0.0,0.0,0.0);\n  var worldPosDiff = vec3<f32>(0.0,0.0,0.0);\n  for (var i = 0; i < SPATIAL_SAMPLE_COUNT; i++){\n    normalDiff += abs(normals[i] - normal);\n    albedoDiff += abs(albedos[i] - albedo);\n    worldPosDiff += abs(worldPositions[i] - worldPos);\n  }\n\n  let depthWeight = 0.001;\n  let normalWeight = 1.0;\n  let albedoWeight = 1.0;\n\n\n  var totalDiff = length(normalDiff) + length(albedoDiff) + length(worldPosDiff) * depthWeight;\n  if(totalDiff > 0.05){\n//if(true){\n    // Difference is too high, sample more points\n    let bufferIndex = atomicAdd(&indirectArgs.count, 1);\n    groupsToFullyTrace[bufferIndex] = originPixel;\n    return;\n  }\n  // TODO: linear interpolation instead of average colour\n  for(var x = 0u; x < SPATIAL_KERNEL_SIZE; x++){\n    for(var y = 0u; y < SPATIAL_KERNEL_SIZE; y++){\n      var totalWeight = 0.0;\n      var totalNormal = vec3<f32>(0.0,0.0,0.0);\n      var totalAlbedo = vec3<f32>(0.0,0.0,0.0);\n      var totalDepth = 0.0;\n      var totalWorldPos = vec3<f32>(0.0,0.0,0.0);\n      var totalVelocity = vec3<f32>(0.0,0.0,0.0);\n      var weights = array<f32, SPATIAL_SAMPLE_COUNT>();\n      let pixel = originPixel + vec2<u32>(x,y);\n\n      var minWeight = 9999999999.0;\n      var maxWeight = 0.0;\n      for(var i = 0u; i < SPATIAL_SAMPLE_COUNT; i ++){\n        let d = distance(vec2(f32(x),f32(y)), vec2<f32>(KERNEL_CORNER_OFFSETS[i]));\n        let weight = 1.0 - d;\n        minWeight = min(minWeight, weight);\n        maxWeight = max(maxWeight, weight);\n        weights[i] = weight;\n      }\n\n      for(var i = 0u; i < SPATIAL_SAMPLE_COUNT; i ++){\n        let weight = customNormalize(weights[i], minWeight, maxWeight);\n        totalNormal += normals[i] * weight;\n        totalAlbedo += albedos[i] * weight;\n        totalDepth += depths[i] * weight;\n        totalWorldPos += worldPositions[i] * weight;\n        totalVelocity += velocities[i] * weight;\n        totalWeight += weight;\n      }\n\n//      textureStore(albedoTex, pixel, vec4((totalWorldPos / totalWeight) % 1, 1));\n      textureStore(albedoTex, pixel, vec4(totalAlbedo / totalWeight, 1));\n      textureStore(normalTex, pixel, vec4(totalNormal / totalWeight,1));\n//      textureStore(depthWrite, pixel, vec4(totalWorldPos / totalWeight, totalDepth / totalWeight));\n      textureStore(velocityTex, pixel, vec4(totalVelocity / totalWeight,0));\n    }\n  }\n}\n\n\nconst GROUPS_X = 8;\nconst GROUPS_Y = 8;\n\n@compute @workgroup_size(GROUPS_X, GROUPS_Y, 1)\nfn main(\n  @builtin(local_invocation_index) LocalInvocationIndex : u32,\n  @builtin(workgroup_id) WorkgroupID : vec3<u32>,\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>,\n) {\n  let resolution = textureDimensions(albedoTex);\n//  let pixel = WorkgroupID.xy * vec2(GROUPS_X, GROUPS_Y) + vec2(LocalInvocationIndex % GROUPS_X, LocalInvocationIndex / GROUPS_X);\n  let pixel = GlobalInvocationID.xy;\n  var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\n  let rayDirection = calculateRayDirection(uv,viewProjections.inverseViewProjection);\n  var rayOrigin = cameraPosition;\n  var closestIntersection = RayMarchResult();\n  closestIntersection.worldPos = rayOrigin + rayDirection * FAR_PLANE;\n  closestIntersection.colour = rayDirection;\n\n  let maxMipLevel = u32(0);\n  let minMipLevel = u32(0);\n  var mipLevel = maxMipLevel;\n\n  let bvhResult = rayMarchBVH(rayOrigin, rayDirection);\n//  if(bvhResult.hit){\n    closestIntersection = bvhResult;\n//  }\n\n  let normal = closestIntersection.normal;\n  let depth = distance(cameraPosition, closestIntersection.worldPos);\n  let albedo = closestIntersection.colour;\n  let velocity = getVelocity(closestIntersection, viewProjections);\n  let worldPos = closestIntersection.worldPos;\n\n  let objectPos = (voxelObjects[0].inverseTransform * vec4(worldPos, 1.0)).xyz;\n\n  textureStore(albedoTex, pixel, vec4(albedo, 1));\n  textureStore(normalTex, pixel, vec4(normal,1));\n  textureStore(velocityTex, pixel, vec4(velocity ,0));\n}\n\n@compute @workgroup_size(SPATIAL_KERNEL_SIZE, SPATIAL_KERNEL_SIZE, 1)\nfn fullTrace(\n  @builtin(local_invocation_id) LocalInvocationID : vec3<u32>,\n  @builtin(workgroup_id) WorkgroupID : vec3<u32>,\n) {\n   let resolution = textureDimensions(albedoTex);\n  let pixelOffset = LocalInvocationID.xy;\n  let groupOrigin = groupsToFullyTrace[WorkgroupID.x];\n  let pixel = groupOrigin + pixelOffset;\n\n  var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\n  let rayDirection = calculateRayDirection(uv,viewProjections.inverseViewProjection);\n  var rayOrigin = cameraPosition;\n  var closestIntersection = RayMarchResult();\n  closestIntersection.worldPos = rayOrigin + rayDirection * FAR_PLANE;\n  closestIntersection.colour = rayDirection;\n\n  // Floor plane for debugging\n  let planeY = 0.0;\n  let planeIntersect = planeIntersection(rayOrigin, rayDirection, vec3(0,1,0), planeY);\n  if(planeIntersect.isHit){\n    closestIntersection.worldPos = rayOrigin + rayDirection * planeIntersect.tNear;\n    closestIntersection.worldPos.y = planeY;\n    closestIntersection.hit = planeIntersect.isHit;\n    closestIntersection.normal = planeIntersect.normal;\n    closestIntersection.colour = vec3(0.15,0.3,0.1);\n    // TODO: hit water here\n  }\n\n  let maxMipLevel = u32(0);\n  let minMipLevel = u32(0);\n  var mipLevel = maxMipLevel;\n\n  let bvhResult = rayMarchBVH(rayOrigin, rayDirection);\n  if(bvhResult.hit){\n    closestIntersection = bvhResult;\n  }\n\n  let normal = closestIntersection.normal;\n  let depth = distance(cameraPosition, closestIntersection.worldPos);\n  let albedo = closestIntersection.colour;\n  let velocity = getVelocity(closestIntersection, viewProjections);\n  let worldPos = closestIntersection.worldPos;\n\n  textureStore(albedoTex, pixel, vec4(albedo, 1));\n//  textureStore(albedoTex, pixel, vec4(0,0,1, 1));\n  textureStore(normalTex, pixel, vec4(normal,1));\n//  textureStore(depthWrite, pixel, depth);\n  textureStore(velocityTex, pixel, vec4(velocity ,0));\n}\n`}),entryPoint:"main"}});return{render:({commandEncoder:e,outputTextures:t,cameraPositionBuffer:n,volumeAtlas:r,transformationMatrixBuffer:i,viewProjectionMatricesBuffer:s,timestampWrites:o,sunDirectionBuffer:a,bvhBuffer:c})=>{let u=e.beginComputePass({timestampWrites:o});const d=_i.createBindGroup({layout:l,entries:[{binding:0,resource:r.getAtlasTextureView()},{binding:2,resource:{buffer:n}},{binding:3,resource:{buffer:i}},{binding:4,resource:t.normalTexture.createView()},{binding:5,resource:t.albedoTexture.createView()},{binding:7,resource:t.velocityTexture.createView()},{binding:8,resource:{buffer:s}},{binding:9,resource:{buffer:a}},{binding:10,resource:{buffer:c}},{binding:11,resource:{buffer:r.getBrickMapBuffer()}}]}),f=Math.ceil(bi[0]/8),m=Math.ceil(bi[1]/8);return u.setPipeline(h),u.setBindGroup(0,d),u.dispatchWorkgroups(f,m),u.end(),e.copyTextureToTexture({texture:t.albedoTexture},{texture:t.finalTexture},{width:t.finalTexture.width,height:t.finalTexture.height,depthOrArrayLayers:1}),[e.finish()]},label:"raymarched g-buffer"}};let u=1e-6,l=Float32Array;function h(e=0,t=0){const n=new l(2);return void 0!==e&&(n[0]=e,void 0!==t&&(n[1]=t)),n}let d=Float32Array;function f(e,t,n){const r=new d(3);return void 0!==e&&(r[0]=e,void 0!==t&&(r[1]=t,void 0!==n&&(r[2]=n))),r}const m=h;function p(e,t,n){return(n=n||new l(2))[0]=e[0]-t[0],n[1]=e[1]-t[1],n}const g=p;function _(e,t,n){return(n=n||new l(2))[0]=e[0]*t,n[1]=e[1]*t,n}const y=_;function x(e,t){return(t=t||new l(2))[0]=1/e[0],t[1]=1/e[1],t}const v=x;function b(e,t){return e[0]*t[0]+e[1]*t[1]}function w(e){const t=e[0],n=e[1];return Math.sqrt(t*t+n*n)}const k=w;function T(e){const t=e[0],n=e[1];return t*t+n*n}const M=T;function I(e,t){const n=e[0]-t[0],r=e[1]-t[1];return Math.sqrt(n*n+r*r)}const A=I;function S(e,t){const n=e[0]-t[0],r=e[1]-t[1];return n*n+r*r}const P=S;function E(e,t){return(t=t||new l(2))[0]=e[0],t[1]=e[1],t}const B=E;function O(e,t,n){return(n=n||new l(2))[0]=e[0]*t[0],n[1]=e[1]*t[1],n}const U=O;function z(e,t,n){return(n=n||new l(2))[0]=e[0]/t[0],n[1]=e[1]/t[1],n}const R=z;var D=Object.freeze({__proto__:null,create:h,setDefaultType:function(e){const t=l;return l=e,t},fromValues:m,set:function(e,t,n){return(n=n||new l(2))[0]=e,n[1]=t,n},ceil:function(e,t){return(t=t||new l(2))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(e,t){return(t=t||new l(2))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},round:function(e,t){return(t=t||new l(2))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},clamp:function(e,t=0,n=1,r){return(r=r||new l(2))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r},add:function(e,t,n){return(n=n||new l(2))[0]=e[0]+t[0],n[1]=e[1]+t[1],n},addScaled:function(e,t,n,r){return(r=r||new l(2))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r},angle:function(e,t){const n=e[0],r=e[1],i=e[0],s=e[1],o=Math.sqrt(n*n+r*r)*Math.sqrt(i*i+s*s),a=o&&b(e,t)/o;return Math.acos(a)},subtract:p,sub:g,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<u&&Math.abs(e[1]-t[1])<u},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]},lerp:function(e,t,n,r){return(r=r||new l(2))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r},lerpV:function(e,t,n,r){return(r=r||new l(2))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r},max:function(e,t,n){return(n=n||new l(2))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n},min:function(e,t,n){return(n=n||new l(2))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n},mulScalar:_,scale:y,divScalar:function(e,t,n){return(n=n||new l(2))[0]=e[0]/t,n[1]=e[1]/t,n},inverse:x,invert:v,cross:function(e,t,n){n=n||new d(3);const r=e[0]*t[1]-e[1]*t[0];return n[0]=0,n[1]=0,n[2]=r,n},dot:b,length:w,len:k,lengthSq:T,lenSq:M,distance:I,dist:A,distanceSq:S,distSq:P,normalize:function(e,t){t=t||new l(2);const n=e[0],r=e[1],i=Math.sqrt(n*n+r*r);return i>1e-5?(t[0]=n/i,t[1]=r/i):(t[0]=0,t[1]=0),t},negate:function(e,t){return(t=t||new l(2))[0]=-e[0],t[1]=-e[1],t},copy:E,clone:B,multiply:O,mul:U,divide:z,div:R,random:function(e=1,t){t=t||new l(2);const n=2*Math.random()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t},zero:function(e){return(e=e||new l(2))[0]=0,e[1]=0,e},transformMat4:function(e,t,n){n=n||new l(2);const r=e[0],i=e[1];return n[0]=r*t[0]+i*t[4]+t[12],n[1]=r*t[1]+i*t[5]+t[13],n},transformMat3:function(e,t,n){n=n||new l(2);const r=e[0],i=e[1];return n[0]=t[0]*r+t[4]*i+t[8],n[1]=t[1]*r+t[5]*i+t[9],n}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);const j=f;function N(e,t,n){return(n=n||new d(3))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n}const C=N;function V(e,t,n){return(n=n||new d(3))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n}const L=V;function G(e,t){return(t=t||new d(3))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}const q=G;function F(e,t,n){n=n||new d(3);const r=e[2]*t[0]-e[0]*t[2],i=e[0]*t[1]-e[1]*t[0];return n[0]=e[1]*t[2]-e[2]*t[1],n[1]=r,n[2]=i,n}function $(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function Y(e){const t=e[0],n=e[1],r=e[2];return Math.sqrt(t*t+n*n+r*r)}const W=Y;function X(e){const t=e[0],n=e[1],r=e[2];return t*t+n*n+r*r}const Z=X;function H(e,t){const n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(n*n+r*r+i*i)}const K=H;function Q(e,t){const n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return n*n+r*r+i*i}const J=Q;function ee(e,t){t=t||new d(3);const n=e[0],r=e[1],i=e[2],s=Math.sqrt(n*n+r*r+i*i);return s>1e-5?(t[0]=n/s,t[1]=r/s,t[2]=i/s):(t[0]=0,t[1]=0,t[2]=0),t}function te(e,t){return(t=t||new d(3))[0]=e[0],t[1]=e[1],t[2]=e[2],t}const ne=te;function re(e,t,n){return(n=n||new d(3))[0]=e[0]*t[0],n[1]=e[1]*t[1],n[2]=e[2]*t[2],n}const ie=re;function se(e,t,n){return(n=n||new d(3))[0]=e[0]/t[0],n[1]=e[1]/t[1],n[2]=e[2]/t[2],n}const oe=se;var ae=Object.freeze({__proto__:null,create:f,setDefaultType:function(e){const t=d;return d=e,t},fromValues:j,set:function(e,t,n,r){return(r=r||new d(3))[0]=e,r[1]=t,r[2]=n,r},ceil:function(e,t){return(t=t||new d(3))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(e,t){return(t=t||new d(3))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},round:function(e,t){return(t=t||new d(3))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},clamp:function(e,t=0,n=1,r){return(r=r||new d(3))[0]=Math.min(n,Math.max(t,e[0])),r[1]=Math.min(n,Math.max(t,e[1])),r[2]=Math.min(n,Math.max(t,e[2])),r},add:function(e,t,n){return(n=n||new d(3))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n},addScaled:function(e,t,n,r){return(r=r||new d(3))[0]=e[0]+t[0]*n,r[1]=e[1]+t[1]*n,r[2]=e[2]+t[2]*n,r},angle:function(e,t){const n=e[0],r=e[1],i=e[2],s=e[0],o=e[1],a=e[2],c=Math.sqrt(n*n+r*r+i*i)*Math.sqrt(s*s+o*o+a*a),u=c&&$(e,t)/c;return Math.acos(u)},subtract:N,sub:C,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<u&&Math.abs(e[1]-t[1])<u&&Math.abs(e[2]-t[2])<u},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},lerp:function(e,t,n,r){return(r=r||new d(3))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r},lerpV:function(e,t,n,r){return(r=r||new d(3))[0]=e[0]+n[0]*(t[0]-e[0]),r[1]=e[1]+n[1]*(t[1]-e[1]),r[2]=e[2]+n[2]*(t[2]-e[2]),r},max:function(e,t,n){return(n=n||new d(3))[0]=Math.max(e[0],t[0]),n[1]=Math.max(e[1],t[1]),n[2]=Math.max(e[2],t[2]),n},min:function(e,t,n){return(n=n||new d(3))[0]=Math.min(e[0],t[0]),n[1]=Math.min(e[1],t[1]),n[2]=Math.min(e[2],t[2]),n},mulScalar:V,scale:L,divScalar:function(e,t,n){return(n=n||new d(3))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n},inverse:G,invert:q,cross:F,dot:$,length:Y,len:W,lengthSq:X,lenSq:Z,distance:H,dist:K,distanceSq:Q,distSq:J,normalize:ee,negate:function(e,t){return(t=t||new d(3))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},copy:te,clone:ne,multiply:re,mul:ie,divide:se,div:oe,random:function(e=1,t){t=t||new d(3);const n=2*Math.random()*Math.PI,r=2*Math.random()-1,i=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*i,t[1]=Math.sin(n)*i,t[2]=r*e,t},zero:function(e){return(e=e||new d(3))[0]=0,e[1]=0,e[2]=0,e},transformMat4:function(e,t,n){n=n||new d(3);const r=e[0],i=e[1],s=e[2],o=t[3]*r+t[7]*i+t[11]*s+t[15]||1;return n[0]=(t[0]*r+t[4]*i+t[8]*s+t[12])/o,n[1]=(t[1]*r+t[5]*i+t[9]*s+t[13])/o,n[2]=(t[2]*r+t[6]*i+t[10]*s+t[14])/o,n},transformMat4Upper3x3:function(e,t,n){n=n||new d(3);const r=e[0],i=e[1],s=e[2];return n[0]=r*t[0]+i*t[4]+s*t[8],n[1]=r*t[1]+i*t[5]+s*t[9],n[2]=r*t[2]+i*t[6]+s*t[10],n},transformMat3:function(e,t,n){n=n||new d(3);const r=e[0],i=e[1],s=e[2];return n[0]=r*t[0]+i*t[4]+s*t[8],n[1]=r*t[1]+i*t[5]+s*t[9],n[2]=r*t[2]+i*t[6]+s*t[10],n},transformQuat:function(e,t,n){n=n||new d(3);const r=t[0],i=t[1],s=t[2],o=2*t[3],a=e[0],c=e[1],u=e[2],l=i*u-s*c,h=s*a-r*u,f=r*c-i*a;return n[0]=a+l*o+2*(i*f-s*h),n[1]=c+h*o+2*(s*l-r*f),n[2]=u+f*o+2*(r*h-i*l),n},getTranslation:function(e,t){return(t=t||new d(3))[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,n){const r=4*t;return(n=n||new d(3))[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},getScaling:function(e,t){t=t||new d(3);const n=e[0],r=e[1],i=e[2],s=e[4],o=e[5],a=e[6],c=e[8],u=e[9],l=e[10];return t[0]=Math.sqrt(n*n+r*r+i*i),t[1]=Math.sqrt(s*s+o*o+a*a),t[2]=Math.sqrt(c*c+u*u+l*l),t}});let ce=Float32Array;function ue(e,t){return(t=t||new ce(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}const le=ue;function he(e){return(e=e||new ce(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function de(e,t){t=t||new ce(16);const n=e[0],r=e[1],i=e[2],s=e[3],o=e[4],a=e[5],c=e[6],u=e[7],l=e[8],h=e[9],d=e[10],f=e[11],m=e[12],p=e[13],g=e[14],_=e[15],y=d*_,x=g*f,v=c*_,b=g*u,w=c*f,k=d*u,T=i*_,M=g*s,I=i*f,A=d*s,S=i*u,P=c*s,E=l*p,B=m*h,O=o*p,U=m*a,z=o*h,R=l*a,D=n*p,j=m*r,N=n*h,C=l*r,V=n*a,L=o*r,G=y*a+b*h+w*p-(x*a+v*h+k*p),q=x*r+T*h+A*p-(y*r+M*h+I*p),F=v*r+M*a+S*p-(b*r+T*a+P*p),$=k*r+I*a+P*h-(w*r+A*a+S*h),Y=1/(n*G+o*q+l*F+m*$);return t[0]=Y*G,t[1]=Y*q,t[2]=Y*F,t[3]=Y*$,t[4]=Y*(x*o+v*l+k*m-(y*o+b*l+w*m)),t[5]=Y*(y*n+M*l+I*m-(x*n+T*l+A*m)),t[6]=Y*(b*n+T*o+P*m-(v*n+M*o+S*m)),t[7]=Y*(w*n+A*o+S*l-(k*n+I*o+P*l)),t[8]=Y*(E*u+U*f+z*_-(B*u+O*f+R*_)),t[9]=Y*(B*s+D*f+C*_-(E*s+j*f+N*_)),t[10]=Y*(O*s+j*u+V*_-(U*s+D*u+L*_)),t[11]=Y*(R*s+N*u+L*f-(z*s+C*u+V*f)),t[12]=Y*(O*d+R*g+B*c-(z*g+E*c+U*d)),t[13]=Y*(N*g+E*i+j*d-(D*d+C*g+B*i)),t[14]=Y*(D*c+L*g+U*i-(V*g+O*i+j*c)),t[15]=Y*(V*d+z*i+C*c-(N*c+L*d+R*i)),t}const fe=de;function me(e,t,n){n=n||new ce(16);const r=e[0],i=e[1],s=e[2],o=e[3],a=e[4],c=e[5],u=e[6],l=e[7],h=e[8],d=e[9],f=e[10],m=e[11],p=e[12],g=e[13],_=e[14],y=e[15],x=t[0],v=t[1],b=t[2],w=t[3],k=t[4],T=t[5],M=t[6],I=t[7],A=t[8],S=t[9],P=t[10],E=t[11],B=t[12],O=t[13],U=t[14],z=t[15];return n[0]=r*x+a*v+h*b+p*w,n[1]=i*x+c*v+d*b+g*w,n[2]=s*x+u*v+f*b+_*w,n[3]=o*x+l*v+m*b+y*w,n[4]=r*k+a*T+h*M+p*I,n[5]=i*k+c*T+d*M+g*I,n[6]=s*k+u*T+f*M+_*I,n[7]=o*k+l*T+m*M+y*I,n[8]=r*A+a*S+h*P+p*E,n[9]=i*A+c*S+d*P+g*E,n[10]=s*A+u*S+f*P+_*E,n[11]=o*A+l*S+m*P+y*E,n[12]=r*B+a*O+h*U+p*z,n[13]=i*B+c*O+d*U+g*z,n[14]=s*B+u*O+f*U+_*z,n[15]=o*B+l*O+m*U+y*z,n}const pe=me;let ge,_e,ye;function xe(e,t,n){n=n||new ce(16);let r=e[0],i=e[1],s=e[2];const o=Math.sqrt(r*r+i*i+s*s);r/=o,i/=o,s/=o;const a=r*r,c=i*i,u=s*s,l=Math.cos(t),h=Math.sin(t),d=1-l;return n[0]=a+(1-a)*l,n[1]=r*i*d+s*h,n[2]=r*s*d-i*h,n[3]=0,n[4]=r*i*d-s*h,n[5]=c+(1-c)*l,n[6]=i*s*d+r*h,n[7]=0,n[8]=r*s*d+i*h,n[9]=i*s*d-r*h,n[10]=u+(1-u)*l,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}const ve=xe;function be(e,t,n,r){r=r||new ce(16);let i=t[0],s=t[1],o=t[2];const a=Math.sqrt(i*i+s*s+o*o);i/=a,s/=a,o/=a;const c=i*i,u=s*s,l=o*o,h=Math.cos(n),d=Math.sin(n),f=1-h,m=c+(1-c)*h,p=i*s*f+o*d,g=i*o*f-s*d,_=i*s*f-o*d,y=u+(1-u)*h,x=s*o*f+i*d,v=i*o*f+s*d,b=s*o*f-i*d,w=l+(1-l)*h,k=e[0],T=e[1],M=e[2],I=e[3],A=e[4],S=e[5],P=e[6],E=e[7],B=e[8],O=e[9],U=e[10],z=e[11];return r[0]=m*k+p*A+g*B,r[1]=m*T+p*S+g*O,r[2]=m*M+p*P+g*U,r[3]=m*I+p*E+g*z,r[4]=_*k+y*A+x*B,r[5]=_*T+y*S+x*O,r[6]=_*M+y*P+x*U,r[7]=_*I+y*E+x*z,r[8]=v*k+b*A+w*B,r[9]=v*T+b*S+w*O,r[10]=v*M+b*P+w*U,r[11]=v*I+b*E+w*z,e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r}const we=be;var ke=Object.freeze({__proto__:null,setDefaultType:function(e){const t=ce;return ce=e,t},create:function(e,t,n,r,i,s,o,a,c,u,l,h,d,f,m,p){const g=new ce(16);return void 0!==e&&(g[0]=e,void 0!==t&&(g[1]=t,void 0!==n&&(g[2]=n,void 0!==r&&(g[3]=r,void 0!==i&&(g[4]=i,void 0!==s&&(g[5]=s,void 0!==o&&(g[6]=o,void 0!==a&&(g[7]=a,void 0!==c&&(g[8]=c,void 0!==u&&(g[9]=u,void 0!==l&&(g[10]=l,void 0!==h&&(g[11]=h,void 0!==d&&(g[12]=d,void 0!==f&&(g[13]=f,void 0!==m&&(g[14]=m,void 0!==p&&(g[15]=p)))))))))))))))),g},set:function(e,t,n,r,i,s,o,a,c,u,l,h,d,f,m,p,g){return(g=g||new ce(16))[0]=e,g[1]=t,g[2]=n,g[3]=r,g[4]=i,g[5]=s,g[6]=o,g[7]=a,g[8]=c,g[9]=u,g[10]=l,g[11]=h,g[12]=d,g[13]=f,g[14]=m,g[15]=p,g},fromMat3:function(e,t){return(t=t||new ce(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=0,t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=0,t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromQuat:function(e,t){t=t||new ce(16);const n=e[0],r=e[1],i=e[2],s=e[3],o=n+n,a=r+r,c=i+i,u=n*o,l=r*o,h=r*a,d=i*o,f=i*a,m=i*c,p=s*o,g=s*a,_=s*c;return t[0]=1-h-m,t[1]=l+_,t[2]=d-g,t[3]=0,t[4]=l-_,t[5]=1-u-m,t[6]=f+p,t[7]=0,t[8]=d+g,t[9]=f-p,t[10]=1-u-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},negate:function(e,t){return(t=t||new ce(16))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=-e[7],t[8]=-e[8],t[9]=-e[9],t[10]=-e[10],t[11]=-e[11],t[12]=-e[12],t[13]=-e[13],t[14]=-e[14],t[15]=-e[15],t},copy:ue,clone:le,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<u&&Math.abs(e[1]-t[1])<u&&Math.abs(e[2]-t[2])<u&&Math.abs(e[3]-t[3])<u&&Math.abs(e[4]-t[4])<u&&Math.abs(e[5]-t[5])<u&&Math.abs(e[6]-t[6])<u&&Math.abs(e[7]-t[7])<u&&Math.abs(e[8]-t[8])<u&&Math.abs(e[9]-t[9])<u&&Math.abs(e[10]-t[10])<u&&Math.abs(e[11]-t[11])<u&&Math.abs(e[12]-t[12])<u&&Math.abs(e[13]-t[13])<u&&Math.abs(e[14]-t[14])<u&&Math.abs(e[15]-t[15])<u},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},identity:he,transpose:function(e,t){if((t=t||new ce(16))===e){let n;return n=e[1],e[1]=e[4],e[4]=n,n=e[2],e[2]=e[8],e[8]=n,n=e[3],e[3]=e[12],e[12]=n,n=e[6],e[6]=e[9],e[9]=n,n=e[7],e[7]=e[13],e[13]=n,n=e[11],e[11]=e[14],e[14]=n,t}const n=e[0],r=e[1],i=e[2],s=e[3],o=e[4],a=e[5],c=e[6],u=e[7],l=e[8],h=e[9],d=e[10],f=e[11],m=e[12],p=e[13],g=e[14],_=e[15];return t[0]=n,t[1]=o,t[2]=l,t[3]=m,t[4]=r,t[5]=a,t[6]=h,t[7]=p,t[8]=i,t[9]=c,t[10]=d,t[11]=g,t[12]=s,t[13]=u,t[14]=f,t[15]=_,t},inverse:de,determinant:function(e){const t=e[0],n=e[1],r=e[2],i=e[3],s=e[4],o=e[5],a=e[6],c=e[7],u=e[8],l=e[9],h=e[10],d=e[11],f=e[12],m=e[13],p=e[14],g=e[15],_=h*g,y=p*d,x=a*g,v=p*c,b=a*d,w=h*c,k=r*g,T=p*i,M=r*d,I=h*i,A=r*c,S=a*i;return t*(_*o+v*l+b*m-(y*o+x*l+w*m))+s*(y*n+k*l+I*m-(_*n+T*l+M*m))+u*(x*n+T*o+A*m-(v*n+k*o+S*m))+f*(w*n+M*o+S*l-(b*n+I*o+A*l))},invert:fe,multiply:me,mul:pe,setTranslation:function(e,t,n){return e!==(n=n||he())&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11]),n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n},getTranslation:function(e,t){return(t=t||f())[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,n){const r=4*t;return(n=n||f())[0]=e[r+0],n[1]=e[r+1],n[2]=e[r+2],n},setAxis:function(e,t,n,r){r!==e&&(r=ue(e,r));const i=4*n;return r[i+0]=t[0],r[i+1]=t[1],r[i+2]=t[2],r},getScaling:function(e,t){t=t||f();const n=e[0],r=e[1],i=e[2],s=e[4],o=e[5],a=e[6],c=e[8],u=e[9],l=e[10];return t[0]=Math.sqrt(n*n+r*r+i*i),t[1]=Math.sqrt(s*s+o*o+a*a),t[2]=Math.sqrt(c*c+u*u+l*l),t},perspective:function(e,t,n,r,i){i=i||new ce(16);const s=Math.tan(.5*Math.PI-.5*e);if(i[0]=s/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=s,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,r===1/0)i[10]=-1,i[14]=-n;else{const e=1/(n-r);i[10]=r*e,i[14]=r*n*e}return i},ortho:function(e,t,n,r,i,s,o){return(o=o||new ce(16))[0]=2/(t-e),o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=2/(r-n),o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=1/(i-s),o[11]=0,o[12]=(t+e)/(e-t),o[13]=(r+n)/(n-r),o[14]=i/(i-s),o[15]=1,o},frustum:function(e,t,n,r,i,s,o){const a=t-e,c=r-n,u=i-s;return(o=o||new ce(16))[0]=2*i/a,o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=2*i/c,o[6]=0,o[7]=0,o[8]=(e+t)/a,o[9]=(r+n)/c,o[10]=s/u,o[11]=-1,o[12]=0,o[13]=0,o[14]=i*s/u,o[15]=0,o},aim:function(e,t,n,r){return r=r||new ce(16),ge=ge||f(),_e=_e||f(),ye=ye||f(),ee(N(t,e,ye),ye),ee(F(n,ye,ge),ge),ee(F(ye,ge,_e),_e),r[0]=ge[0],r[1]=ge[1],r[2]=ge[2],r[3]=0,r[4]=_e[0],r[5]=_e[1],r[6]=_e[2],r[7]=0,r[8]=ye[0],r[9]=ye[1],r[10]=ye[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},cameraAim:function(e,t,n,r){return r=r||new ce(16),ge=ge||f(),_e=_e||f(),ye=ye||f(),ee(N(e,t,ye),ye),ee(F(n,ye,ge),ge),ee(F(ye,ge,_e),_e),r[0]=ge[0],r[1]=ge[1],r[2]=ge[2],r[3]=0,r[4]=_e[0],r[5]=_e[1],r[6]=_e[2],r[7]=0,r[8]=ye[0],r[9]=ye[1],r[10]=ye[2],r[11]=0,r[12]=e[0],r[13]=e[1],r[14]=e[2],r[15]=1,r},lookAt:function(e,t,n,r){return r=r||new ce(16),ge=ge||f(),_e=_e||f(),ye=ye||f(),ee(N(e,t,ye),ye),ee(F(n,ye,ge),ge),ee(F(ye,ge,_e),_e),r[0]=ge[0],r[1]=_e[0],r[2]=ye[0],r[3]=0,r[4]=ge[1],r[5]=_e[1],r[6]=ye[1],r[7]=0,r[8]=ge[2],r[9]=_e[2],r[10]=ye[2],r[11]=0,r[12]=-(ge[0]*e[0]+ge[1]*e[1]+ge[2]*e[2]),r[13]=-(_e[0]*e[0]+_e[1]*e[1]+_e[2]*e[2]),r[14]=-(ye[0]*e[0]+ye[1]*e[1]+ye[2]*e[2]),r[15]=1,r},translation:function(e,t){return(t=t||new ce(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},translate:function(e,t,n){n=n||new ce(16);const r=t[0],i=t[1],s=t[2],o=e[0],a=e[1],c=e[2],u=e[3],l=e[4],h=e[5],d=e[6],f=e[7],m=e[8],p=e[9],g=e[10],_=e[11],y=e[12],x=e[13],v=e[14],b=e[15];return e!==n&&(n[0]=o,n[1]=a,n[2]=c,n[3]=u,n[4]=l,n[5]=h,n[6]=d,n[7]=f,n[8]=m,n[9]=p,n[10]=g,n[11]=_),n[12]=o*r+l*i+m*s+y,n[13]=a*r+h*i+p*s+x,n[14]=c*r+d*i+g*s+v,n[15]=u*r+f*i+_*s+b,n},rotationX:function(e,t){t=t||new ce(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateX:function(e,t,n){n=n||new ce(16);const r=e[4],i=e[5],s=e[6],o=e[7],a=e[8],c=e[9],u=e[10],l=e[11],h=Math.cos(t),d=Math.sin(t);return n[4]=h*r+d*a,n[5]=h*i+d*c,n[6]=h*s+d*u,n[7]=h*o+d*l,n[8]=h*a-d*r,n[9]=h*c-d*i,n[10]=h*u-d*s,n[11]=h*l-d*o,e!==n&&(n[0]=e[0],n[1]=e[1],n[2]=e[2],n[3]=e[3],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotationY:function(e,t){t=t||new ce(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=n,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateY:function(e,t,n){n=n||new ce(16);const r=e[0],i=e[1],s=e[2],o=e[3],a=e[8],c=e[9],u=e[10],l=e[11],h=Math.cos(t),d=Math.sin(t);return n[0]=h*r-d*a,n[1]=h*i-d*c,n[2]=h*s-d*u,n[3]=h*o-d*l,n[8]=h*a+d*r,n[9]=h*c+d*i,n[10]=h*u+d*s,n[11]=h*l+d*o,e!==n&&(n[4]=e[4],n[5]=e[5],n[6]=e[6],n[7]=e[7],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},rotationZ:function(e,t){t=t||new ce(16);const n=Math.cos(e),r=Math.sin(e);return t[0]=n,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=n,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateZ:function(e,t,n){n=n||new ce(16);const r=e[0],i=e[1],s=e[2],o=e[3],a=e[4],c=e[5],u=e[6],l=e[7],h=Math.cos(t),d=Math.sin(t);return n[0]=h*r+d*a,n[1]=h*i+d*c,n[2]=h*s+d*u,n[3]=h*o+d*l,n[4]=h*a-d*r,n[5]=h*c-d*i,n[6]=h*u-d*s,n[7]=h*l-d*o,e!==n&&(n[8]=e[8],n[9]=e[9],n[10]=e[10],n[11]=e[11],n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},axisRotation:xe,rotation:ve,axisRotate:be,rotate:we,scaling:function(e,t){return(t=t||new ce(16))[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},scale:function(e,t,n){n=n||new ce(16);const r=t[0],i=t[1],s=t[2];return n[0]=r*e[0],n[1]=r*e[1],n[2]=r*e[2],n[3]=r*e[3],n[4]=i*e[4],n[5]=i*e[5],n[6]=i*e[6],n[7]=i*e[7],n[8]=s*e[8],n[9]=s*e[9],n[10]=s*e[10],n[11]=s*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n},uniformScaling:function(e,t){return(t=t||new ce(16))[0]=e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},uniformScale:function(e,t,n){return(n=n||new ce(16))[0]=t*e[0],n[1]=t*e[1],n[2]=t*e[2],n[3]=t*e[3],n[4]=t*e[4],n[5]=t*e[5],n[6]=t*e[6],n[7]=t*e[7],n[8]=t*e[8],n[9]=t*e[9],n[10]=t*e[10],n[11]=t*e[11],e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n}});let Te=Float32Array;function Me(e,t,n,r){const i=new Te(4);return void 0!==e&&(i[0]=e,void 0!==t&&(i[1]=t,void 0!==n&&(i[2]=n,void 0!==r&&(i[3]=r)))),i}const Ie=Me;function Ae(e,t,n){n=n||new Te(4);const r=.5*t,i=Math.sin(r);return n[0]=i*e[0],n[1]=i*e[1],n[2]=i*e[2],n[3]=Math.cos(r),n}function Se(e,t,n){n=n||new Te(4);const r=e[0],i=e[1],s=e[2],o=e[3],a=t[0],c=t[1],u=t[2],l=t[3];return n[0]=r*l+o*a+i*u-s*c,n[1]=i*l+o*c+s*a-r*u,n[2]=s*l+o*u+r*c-i*a,n[3]=o*l-r*a-i*c-s*u,n}const Pe=Se;function Ee(e,t,n,r){r=r||new Te(4);const i=e[0],s=e[1],o=e[2],a=e[3];let c,l,h=t[0],d=t[1],f=t[2],m=t[3],p=i*h+s*d+o*f+a*m;if(p<0&&(p=-p,h=-h,d=-d,f=-f,m=-m),1-p>u){const e=Math.acos(p),t=Math.sin(e);c=Math.sin((1-n)*e)/t,l=Math.sin(n*e)/t}else c=1-n,l=n;return r[0]=c*i+l*h,r[1]=c*s+l*d,r[2]=c*o+l*f,r[3]=c*a+l*m,r}function Be(e,t){return(t=t||new Te(4))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}const Oe=Be;function Ue(e,t,n){return(n=n||new Te(4))[0]=e[0]-t[0],n[1]=e[1]-t[1],n[2]=e[2]-t[2],n[3]=e[3]-t[3],n}const ze=Ue;function Re(e,t,n){return(n=n||new Te(4))[0]=e[0]*t,n[1]=e[1]*t,n[2]=e[2]*t,n[3]=e[3]*t,n}const De=Re;function je(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function Ne(e){const t=e[0],n=e[1],r=e[2],i=e[3];return Math.sqrt(t*t+n*n+r*r+i*i)}const Ce=Ne;function Ve(e){const t=e[0],n=e[1],r=e[2],i=e[3];return t*t+n*n+r*r+i*i}const Le=Ve;function Ge(e,t){t=t||new Te(4);const n=e[0],r=e[1],i=e[2],s=e[3],o=Math.sqrt(n*n+r*r+i*i+s*s);return o>1e-5?(t[0]=n/o,t[1]=r/o,t[2]=i/o,t[3]=s/o):(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}let qe,Fe,$e,Ye,We;var Xe=Object.freeze({__proto__:null,create:Me,setDefaultType:function(e){const t=Te;return Te=e,t},fromValues:Ie,set:function(e,t,n,r,i){return(i=i||new Te(4))[0]=e,i[1]=t,i[2]=n,i[3]=r,i},fromAxisAngle:Ae,toAxisAngle:function(e,t){t=t||f(4);const n=2*Math.acos(e[3]),r=Math.sin(.5*n);return r>u?(t[0]=e[0]/r,t[1]=e[1]/r,t[2]=e[2]/r):(t[0]=1,t[1]=0,t[2]=0),{angle:n,axis:t}},angle:function(e,t){const n=je(e,t);return Math.acos(2*n*n-1)},multiply:Se,mul:Pe,rotateX:function(e,t,n){n=n||new Te(4);const r=.5*t,i=e[0],s=e[1],o=e[2],a=e[3],c=Math.sin(r),u=Math.cos(r);return n[0]=i*u+a*c,n[1]=s*u+o*c,n[2]=o*u-s*c,n[3]=a*u-i*c,n},rotateY:function(e,t,n){n=n||new Te(4);const r=.5*t,i=e[0],s=e[1],o=e[2],a=e[3],c=Math.sin(r),u=Math.cos(r);return n[0]=i*u-o*c,n[1]=s*u+a*c,n[2]=o*u+i*c,n[3]=a*u-s*c,n},rotateZ:function(e,t,n){n=n||new Te(4);const r=.5*t,i=e[0],s=e[1],o=e[2],a=e[3],c=Math.sin(r),u=Math.cos(r);return n[0]=i*u+s*c,n[1]=s*u-i*c,n[2]=o*u+a*c,n[3]=a*u-o*c,n},slerp:Ee,inverse:function(e,t){t=t||new Te(4);const n=e[0],r=e[1],i=e[2],s=e[3],o=n*n+r*r+i*i+s*s,a=o?1/o:0;return t[0]=-n*a,t[1]=-r*a,t[2]=-i*a,t[3]=s*a,t},conjugate:function(e,t){return(t=t||new Te(4))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t},fromMat:function(e,t){t=t||new Te(4);const n=e[0]+e[5]+e[10];if(n>0){const r=Math.sqrt(n+1);t[3]=.5*r;const i=.5/r;t[0]=(e[6]-e[9])*i,t[1]=(e[8]-e[2])*i,t[2]=(e[1]-e[4])*i}else{let n=0;e[5]>e[0]&&(n=1),e[10]>e[4*n+n]&&(n=2);const r=(n+1)%3,i=(n+2)%3,s=Math.sqrt(e[4*n+n]-e[4*r+r]-e[4*i+i]+1);t[n]=.5*s;const o=.5/s;t[3]=(e[4*r+i]-e[4*i+r])*o,t[r]=(e[4*r+n]+e[4*n+r])*o,t[i]=(e[4*i+n]+e[4*n+i])*o}return t},fromEuler:function(e,t,n,r,i){i=i||new Te(4);const s=.5*e,o=.5*t,a=.5*n,c=Math.sin(s),u=Math.cos(s),l=Math.sin(o),h=Math.cos(o),d=Math.sin(a),f=Math.cos(a);switch(r){case"xyz":i[0]=c*h*f+u*l*d,i[1]=u*l*f-c*h*d,i[2]=u*h*d+c*l*f,i[3]=u*h*f-c*l*d;break;case"xzy":i[0]=c*h*f-u*l*d,i[1]=u*l*f-c*h*d,i[2]=u*h*d+c*l*f,i[3]=u*h*f+c*l*d;break;case"yxz":i[0]=c*h*f+u*l*d,i[1]=u*l*f-c*h*d,i[2]=u*h*d-c*l*f,i[3]=u*h*f+c*l*d;break;case"yzx":i[0]=c*h*f+u*l*d,i[1]=u*l*f+c*h*d,i[2]=u*h*d-c*l*f,i[3]=u*h*f-c*l*d;break;case"zxy":i[0]=c*h*f-u*l*d,i[1]=u*l*f+c*h*d,i[2]=u*h*d+c*l*f,i[3]=u*h*f-c*l*d;break;case"zyx":i[0]=c*h*f-u*l*d,i[1]=u*l*f+c*h*d,i[2]=u*h*d-c*l*f,i[3]=u*h*f+c*l*d;break;default:throw new Error(`Unknown rotation order: ${r}`)}return i},copy:Be,clone:Oe,add:function(e,t,n){return(n=n||new Te(4))[0]=e[0]+t[0],n[1]=e[1]+t[1],n[2]=e[2]+t[2],n[3]=e[3]+t[3],n},subtract:Ue,sub:ze,mulScalar:Re,scale:De,divScalar:function(e,t,n){return(n=n||new Te(4))[0]=e[0]/t,n[1]=e[1]/t,n[2]=e[2]/t,n[3]=e[3]/t,n},dot:je,lerp:function(e,t,n,r){return(r=r||new Te(4))[0]=e[0]+n*(t[0]-e[0]),r[1]=e[1]+n*(t[1]-e[1]),r[2]=e[2]+n*(t[2]-e[2]),r[3]=e[3]+n*(t[3]-e[3]),r},length:Ne,len:Ce,lengthSq:Ve,lenSq:Le,normalize:Ge,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<u&&Math.abs(e[1]-t[1])<u&&Math.abs(e[2]-t[2])<u&&Math.abs(e[3]-t[3])<u},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},identity:function(e){return(e=e||new Te(4))[0]=0,e[1]=0,e[2]=0,e[3]=1,e},rotationTo:function(e,t,n){n=n||new Te(4),qe=qe||f(),Fe=Fe||f(1,0,0),$e=$e||f(0,1,0);const r=$(e,t);return r<-.999999?(F(Fe,e,qe),W(qe)<1e-6&&F($e,e,qe),ee(qe,qe),Ae(qe,Math.PI,n),n):r>.999999?(n[0]=0,n[1]=0,n[2]=0,n[3]=1,n):(F(e,t,qe),n[0]=qe[0],n[1]=qe[1],n[2]=qe[2],n[3]=1+r,Ge(n,n))},sqlerp:function(e,t,n,r,i,s){return s=s||new Te(4),Ye=Ye||new Te(4),We=We||new Te(4),Ee(e,r,i,Ye),Ee(t,n,i,We),Ee(Ye,We,2*i*(1-i),s),s}});Float32Array;const Ze={duration:.3,delay:0,endDelay:0,repeat:0,easing:"ease"},He=e=>1e3*e,Ke=e=>e/1e3,Qe=()=>{},Je=e=>e;function et(e,t=!0){if(e&&"finished"!==e.playState)try{e.stop?e.stop():(t&&e.commitStyles(),e.cancel())}catch(e){}}const tt=e=>e(),nt=(e,t,n=Ze.duration)=>new Proxy({animations:e.map(tt).filter(Boolean),duration:n,options:t},rt),rt={get:(e,t)=>{const n=e.animations[0];switch(t){case"duration":return e.duration;case"currentTime":return Ke((null==n?void 0:n[t])||0);case"playbackRate":case"playState":return null==n?void 0:n[t];case"finished":return e.finished||(e.finished=Promise.all(e.animations.map(it)).catch(Qe)),e.finished;case"stop":return()=>{e.animations.forEach((e=>et(e)))};case"forEachNative":return t=>{e.animations.forEach((n=>t(n,e)))};default:return void 0===(null==n?void 0:n[t])?void 0:()=>e.animations.forEach((e=>e[t]()))}},set:(e,t,n)=>{switch(t){case"currentTime":n=He(n);case"playbackRate":for(let r=0;r<e.animations.length;r++)e.animations[r][t]=n;return!0}return!1}},it=e=>e.finished,st=e=>"object"==typeof e&&Boolean(e.createAnimation),ot=e=>"number"==typeof e,at=e=>Array.isArray(e)&&!ot(e[0]),ct=(e,t,n)=>-n*e+n*t+e,ut=(e,t,n)=>t-e==0?1:(n-e)/(t-e);function lt(e,t){const n=e[e.length-1];for(let r=1;r<=t;r++){const i=ut(0,t,r);e.push(ct(n,1,i))}}const ht=(e,t,n)=>Math.min(Math.max(n,e),t);const dt=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e,ft=1e-7,mt=12;function pt(e,t,n,r){if(e===t&&n===r)return Je;return i=>0===i||1===i?i:dt(function(e,t,n,r,i){let s,o,a=0;do{o=t+(n-t)/2,s=dt(o,r,i)-e,s>0?n=o:t=o}while(Math.abs(s)>ft&&++a<mt);return o}(i,0,1,e,n),t,r)}const gt=e=>"function"==typeof e,_t=e=>Array.isArray(e)&&ot(e[0]),yt={ease:pt(.25,.1,.25,1),"ease-in":pt(.42,0,1,1),"ease-in-out":pt(.42,0,.58,1),"ease-out":pt(0,0,.58,1)},xt=/\((.*?)\)/;function vt(e){if(gt(e))return e;if(_t(e))return pt(...e);if(yt[e])return yt[e];if(e.startsWith("steps")){const t=xt.exec(e);if(t){const e=t[1].split(",");return((e,t="end")=>n=>{const r=(n="end"===t?Math.min(n,.999):Math.max(n,.001))*e,i="end"===t?Math.floor(r):Math.ceil(r);return ht(0,1,i/e)})(parseFloat(e[0]),e[1].trim())}}return Je}class bt{constructor(e,t=[0,1],{easing:n,duration:r=Ze.duration,delay:i=Ze.delay,endDelay:s=Ze.endDelay,repeat:o=Ze.repeat,offset:a,direction:c="normal",autoplay:u=!0}={}){if(this.startTime=null,this.rate=1,this.t=0,this.cancelTimestamp=null,this.easing=Je,this.duration=0,this.totalDuration=0,this.repeat=0,this.playState="idle",this.finished=new Promise(((e,t)=>{this.resolve=e,this.reject=t})),n=n||Ze.easing,st(n)){const e=n.createAnimation(t);n=e.easing,t=e.keyframes||t,r=e.duration||r}this.repeat=o,this.easing=at(n)?Je:vt(n),this.updateDuration(r);const l=function(e,t=function(e){const t=[0];return lt(t,e-1),t}(e.length),n=Je){const r=e.length,i=r-t.length;return i>0&&lt(t,i),i=>{let s=0;for(;s<r-2&&!(i<t[s+1]);s++);let o=ht(0,1,ut(t[s],t[s+1],i));const a=function(e,t){return at(e)?e[((e,t,n)=>{const r=t-e;return((n-e)%r+r)%r+e})(0,e.length,t)]:e}(n,s);return o=a(o),ct(e[s],e[s+1],o)}}(t,a,at(n)?n.map(vt):Je);this.tick=t=>{var n;let r=0;r=void 0!==this.pauseTime?this.pauseTime:(t-this.startTime)*this.rate,this.t=r,r/=1e3,r=Math.max(r-i,0),"finished"===this.playState&&void 0===this.pauseTime&&(r=this.totalDuration);const o=r/this.duration;let a=Math.floor(o),u=o%1;!u&&o>=1&&(u=1),1===u&&a--;const h=a%2;("reverse"===c||"alternate"===c&&h||"alternate-reverse"===c&&!h)&&(u=1-u);const d=r>=this.totalDuration?1:Math.min(u,1),f=l(this.easing(d));e(f),void 0===this.pauseTime&&("finished"===this.playState||r>=this.totalDuration+s)?(this.playState="finished",null===(n=this.resolve)||void 0===n||n.call(this,f)):"idle"!==this.playState&&(this.frameRequestId=requestAnimationFrame(this.tick))},u&&this.play()}play(){const e=performance.now();this.playState="running",void 0!==this.pauseTime?this.startTime=e-this.pauseTime:this.startTime||(this.startTime=e),this.cancelTimestamp=this.startTime,this.pauseTime=void 0,this.frameRequestId=requestAnimationFrame(this.tick)}pause(){this.playState="paused",this.pauseTime=this.t}finish(){this.playState="finished",this.tick(0)}stop(){var e;this.playState="idle",void 0!==this.frameRequestId&&cancelAnimationFrame(this.frameRequestId),null===(e=this.reject)||void 0===e||e.call(this,!1)}cancel(){this.stop(),this.tick(this.cancelTimestamp)}reverse(){this.rate*=-1}commitStyles(){}updateDuration(e){this.duration=e,this.totalDuration=e*(this.repeat+1)}get currentTime(){return this.t}set currentTime(e){void 0!==this.pauseTime||0===this.rate?this.pauseTime=e:this.startTime=performance.now()-e/this.rate}get playbackRate(){return this.rate}set playbackRate(e){this.rate=e}}class wt{setAnimation(e){this.animation=e,null==e||e.finished.then((()=>this.clearAnimation())).catch((()=>{}))}clearAnimation(){this.animation=this.generator=void 0}}const kt=new WeakMap;function Tt(e){return kt.has(e)||kt.set(e,{transforms:[],values:new Map}),kt.get(e)}const Mt=["","X","Y","Z"],It={x:"translateX",y:"translateY",z:"translateZ"},At={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:e=>e+"deg"},St={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:e=>e+"px"},rotate:At,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:Je},skew:At},Pt=new Map,Et=e=>`--motion-${e}`,Bt=["x","y","z"];["translate","scale","rotate","skew"].forEach((e=>{Mt.forEach((t=>{Bt.push(e+t),Pt.set(Et(e+t),St[e])}))}));const Ot=(e,t)=>Bt.indexOf(e)-Bt.indexOf(t),Ut=new Set(Bt),zt=e=>Ut.has(e),Rt=e=>e.sort(Ot).reduce(Dt,"").trim(),Dt=(e,t)=>`${e} ${t}(var(${Et(t)}))`,jt=e=>e.startsWith("--"),Nt=new Set,Ct=(e,t)=>document.createElement("div").animate(e,t),Vt={cssRegisterProperty:()=>"undefined"!=typeof CSS&&Object.hasOwnProperty.call(CSS,"registerProperty"),waapi:()=>Object.hasOwnProperty.call(Element.prototype,"animate"),partialKeyframes:()=>{try{Ct({opacity:[1]})}catch(e){return!1}return!0},finished:()=>Boolean(Ct({opacity:[0,1]},{duration:.001}).finished),linearEasing:()=>{try{Ct({opacity:0},{easing:"linear(0, 1)"})}catch(e){return!1}return!0}},Lt={},Gt={};for(const e in Vt)Gt[e]=()=>(void 0===Lt[e]&&(Lt[e]=Vt[e]()),Lt[e]);const qt=(e,t)=>gt(e)?Gt.linearEasing()?`linear(${((e,t)=>{let n="";const r=Math.round(t/.015);for(let t=0;t<r;t++)n+=e(ut(0,r-1,t))+", ";return n.substring(0,n.length-2)})(e,t)})`:Ze.easing:_t(e)?Ft(e):e,Ft=([e,t,n,r])=>`cubic-bezier(${e}, ${t}, ${n}, ${r})`;function $t(e){return It[e]&&(e=It[e]),zt(e)?Et(e):e}const Yt=(e,t)=>{t=$t(t);let n=jt(t)?e.style.getPropertyValue(t):getComputedStyle(e)[t];if(!n&&0!==n){const e=Pt.get(t);e&&(n=e.initialValue)}return n},Wt=(e,t,n)=>{t=$t(t),jt(t)?e.style.setProperty(t,n):e.style[t]=n},Xt=e=>"string"==typeof e;function Zt(e,t){var n;let r=(null==t?void 0:t.toDefaultUnit)||Je;const i=e[e.length-1];if(Xt(i)){const e=(null===(n=i.match(/(-?[\d.]+)([a-z%]*)/))||void 0===n?void 0:n[2])||"";e&&(r=t=>t+e)}return r}function Ht(e,t,n,r={},i){const s=window.__MOTION_DEV_TOOLS_RECORD,o=!1!==r.record&&s;let a,{duration:c=Ze.duration,delay:u=Ze.delay,endDelay:l=Ze.endDelay,repeat:h=Ze.repeat,easing:d=Ze.easing,persist:f=!1,direction:m,offset:p,allowWebkitAcceleration:g=!1,autoplay:_=!0}=r;const y=Tt(e),x=zt(t);let v=Gt.waapi();x&&((e,t)=>{It[t]&&(t=It[t]);const{transforms:n}=Tt(e);var r,i;i=t,-1===(r=n).indexOf(i)&&r.push(i),e.style.transform=Rt(n)})(e,t);const b=$t(t),w=function(e,t){return e.has(t)||e.set(t,new wt),e.get(t)}(y.values,b),k=Pt.get(b);return et(w.animation,!(st(d)&&w.generator)&&!1!==r.record),()=>{const y=()=>{var t,n;return null!==(n=null!==(t=Yt(e,b))&&void 0!==t?t:null==k?void 0:k.initialValue)&&void 0!==n?n:0};let T=function(e,t){for(let n=0;n<e.length;n++)null===e[n]&&(e[n]=n?e[n-1]:t());return e}((e=>Array.isArray(e)?e:[e])(n),y);const M=Zt(T,k);if(st(d)){const e=d.createAnimation(T,"opacity"!==t,y,b,w);d=e.easing,T=e.keyframes||T,c=e.duration||c}if(jt(b)&&(Gt.cssRegisterProperty()?function(e){if(!Nt.has(e)){Nt.add(e);try{const{syntax:t,initialValue:n}=Pt.has(e)?Pt.get(e):{};CSS.registerProperty({name:e,inherits:!1,syntax:t,initialValue:n})}catch(e){}}}(b):v=!1),x&&!Gt.linearEasing()&&(gt(d)||at(d)&&d.some(gt))&&(v=!1),v){k&&(T=T.map((e=>ot(e)?k.toDefaultUnit(e):e))),1!==T.length||Gt.partialKeyframes()&&!o||T.unshift(y());const t={delay:He(u),duration:He(c),endDelay:He(l),easing:at(d)?void 0:qt(d,c),direction:m,iterations:h+1,fill:"both"};a=e.animate({[b]:T,offset:p,easing:at(d)?d.map((e=>qt(e,c))):void 0},t),a.finished||(a.finished=new Promise(((e,t)=>{a.onfinish=e,a.oncancel=t})));const n=T[T.length-1];a.finished.then((()=>{f||(Wt(e,b,n),a.cancel())})).catch(Qe),g||(a.playbackRate=1.000001)}else if(i&&x)T=T.map((e=>"string"==typeof e?parseFloat(e):e)),1===T.length&&T.unshift(parseFloat(y())),a=new i((t=>{Wt(e,b,M?M(t):t)}),T,Object.assign(Object.assign({},r),{duration:c,easing:d}));else{const t=T[T.length-1];Wt(e,b,k&&ot(t)?k.toDefaultUnit(t):t)}return o&&s(e,t,T,{duration:c,delay:u,easing:d,repeat:h,offset:p},"motion-one"),w.setAnimation(a),a&&!_&&a.pause(),a}}const Kt=(e,t)=>e[t]?Object.assign(Object.assign({},e),e[t]):Object.assign({},e);function Qt(e,t,n){return gt(e)?e(t,n):e}const Jt=(en=bt,function(e,t,n={}){const r=(e=function(e,t){return"string"==typeof e?e=document.querySelectorAll(e):e instanceof Element&&(e=[e]),Array.from(e||[])}(e)).length;Boolean(r),Boolean(t);const i=[];for(let s=0;s<r;s++){const o=e[s];for(const e in t){const a=Kt(n,e);a.delay=Qt(a.delay,s,r);const c=Ht(o,e,t[e],a,en);i.push(c)}}return nt(i,n,n.duration)});var en;function tn(e,t={}){return nt([()=>{const n=new bt(e,[0,1],t);return n.finished.catch((()=>{})),n}],t,t.duration)}function nn(e,t,n){return(gt(e)?tn:Jt)(e,t,n)}function rn(e,t,n){const r=Math.max(t-5,0);return i=n-e(r),(s=t-r)?i*(1e3/s):0;var i,s}function sn(e){return ot(e)&&!isNaN(e)}function on(e){return Xt(e)?parseFloat(e):e}const an=function(e){const t=new WeakMap;return(e={})=>{const n=new Map,r=(t=0,r=100,i=0,s=!1)=>{const o=`${t}-${r}-${i}-${s}`;return n.has(o)||n.set(o,(({from:e=0,velocity:t=0,power:n=.8,decay:r=.325,bounceDamping:i,bounceStiffness:s,changeTarget:o,min:a,max:c,restDistance:u=.5,restSpeed:l})=>{r=He(r);const h={hasReachedTarget:!1,done:!1,current:e,target:e},d=e=>void 0===a?c:void 0===c||Math.abs(a-e)<Math.abs(c-e)?a:c;let f=n*t;const m=e+f,p=void 0===o?m:o(m);h.target=p,p!==m&&(f=p-e);const g=e=>-f*Math.exp(-e/r),_=e=>p+g(e),y=e=>{const t=g(e),n=_(e);h.done=Math.abs(t)<=u,h.current=h.done?p:n};let x,v;const b=e=>{var t;t=h.current,(void 0!==a&&t<a||void 0!==c&&t>c)&&(x=e,v=(({stiffness:e=100,damping:t=10,mass:n=1,from:r=0,to:i=1,velocity:s=0,restSpeed:o,restDistance:a}={})=>{s=s?Ke(s):0;const c={done:!1,hasReachedTarget:!1,current:r,target:i},u=i-r,l=Math.sqrt(e/n)/1e3,h=((e=100,t=10,n=1)=>t/(2*Math.sqrt(e*n)))(e,t,n),d=Math.abs(u)<5;let f;if(o||(o=d?.01:2),a||(a=d?.005:.5),h<1){const e=l*Math.sqrt(1-h*h);f=t=>i-Math.exp(-h*l*t)*((h*l*u-s)/e*Math.sin(e*t)+u*Math.cos(e*t))}else f=e=>i-Math.exp(-l*e)*(u+(l*u-s)*e);return e=>{c.current=f(e);const t=0===e?s:rn(f,e,c.current),n=Math.abs(t)<=o,u=Math.abs(i-c.current)<=a;var l,h,d;return c.done=n&&u,c.hasReachedTarget=(l=r,h=i,d=c.current,l<h&&d>=h||l>h&&d<=h),c}})({from:h.current,to:d(h.current),velocity:rn(_,e,h.current),damping:i,stiffness:s,restDistance:u,restSpeed:l}))};return b(0),e=>{let t=!1;return v||void 0!==x||(t=!0,y(e),b(e)),void 0!==x&&e>x?(h.hasReachedTarget=!0,v(e-x)):(h.hasReachedTarget=!1,!t&&y(e),h)}})(Object.assign({from:t,to:r,velocity:i},e))),n.get(o)},i=(e,n)=>(t.has(e)||t.set(e,function(e,t=Je){let n,r=10,i=e(0);const s=[t(i.current)];for(;!i.done&&r<1e4;)i=e(r),s.push(t(i.done?i.target:i.current)),void 0===n&&i.hasReachedTarget&&(n=r),r+=10;const o=r-10;return 1===s.length&&s.push(i.current),{keyframes:s,duration:o/1e3,overshootDuration:(null!=n?n:o)/1e3}}(e,n)),t.get(e));return{createAnimation:(e,t=!0,n,s,o)=>{let a,c,u,l=0,h=Je;const d=e.length;if(t)if(h=Zt(e,s?Pt.get($t(s)):void 0),u=on(e[d-1]),d>1&&null!==e[0])c=on(e[0]);else{const e=null==o?void 0:o.generator;if(e){const{animation:t,generatorStartTime:n}=o,r=(null==t?void 0:t.startTime)||n||0,i=(null==t?void 0:t.currentTime)||performance.now()-r,s=e(i).current;c=s,l=rn((t=>e(t).current),i,s)}else n&&(c=on(n()))}if(sn(c)&&sn(u)){const e=r(c,u,l,null==s?void 0:s.includes("scale"));a=Object.assign(Object.assign({},i(e,h)),{easing:"linear"}),o&&(o.generator=e,o.generatorStartTime=performance.now())}return a||(a={easing:"ease",duration:i(r(0,100)).overshootDuration}),a}}}}();class cn{position;targetPosition;rotation;targetRotation;scale;targetScale;constructor(e){this.position=e.position,this.rotation=e.rotation,this.targetPosition=this.position,this.targetRotation=this.rotation,this.scale=ae.create(1,1,1),this.targetScale=this.scale}update(){nn((e=>{this.position=ae.lerp(this.position,this.targetPosition,e)}),{easing:an({velocity:2e-4*Ti})}),nn((e=>{this.rotation=Xe.slerp(this.rotation,this.targetRotation,e)}),{easing:an({velocity:2e-4*Ti})}),nn((e=>{this.scale=ae.lerp(this.scale,this.targetScale,e)}),{easing:an({velocity:2e-4*Ti})})}}const un=new class{pressed={w:!1,a:!1,s:!1,d:!1,q:!1,e:!1," ":!1,shift:!1};constructor(){window.addEventListener("keydown",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!0})),window.addEventListener("keyup",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!1})),window.addEventListener("blur",(()=>{Object.keys(this.pressed).forEach((e=>{this.pressed[e]=!1}))}))}},ln=async e=>{const t=e.createShaderModule({code:"@group(0) @binding(0) var mySampler : sampler;\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\n//@group(0) @binding(2) var debugTexture : texture_2d<f32>;\n\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n}\n\n@vertex\nfn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  const pos = array(\n    vec2( 1.0,  1.0),\n    vec2( 1.0, -1.0),\n    vec2(-1.0, -1.0),\n    vec2( 1.0,  1.0),\n    vec2(-1.0, -1.0),\n    vec2(-1.0,  1.0),\n  );\n\n  const uv = array(\n    vec2(1.0, 0.0),\n    vec2(1.0, 1.0),\n    vec2(0.0, 1.0),\n    vec2(1.0, 0.0),\n    vec2(0.0, 1.0),\n    vec2(0.0, 0.0),\n  );\n\n  var output : VertexOutput;\n  output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n  output.fragUV = uv[VertexIndex];\n  return output;\n}\n\nfn get_debug_colour(index : i32) -> vec4<f32> {\n  let colours = array(\n    vec4<f32>(1.0, 0.0, 0.0, 1.0),\n    vec4<f32>(0.0, 1.0, 0.0, 1.0),\n    vec4<f32>(0.0, 0.0, 1.0, 1.0),\n    vec4<f32>(1.0, 1.0, 0.0, 1.0),\n    vec4<f32>(1.0, 0.0, 1.0, 1.0),\n    vec4<f32>(0.0, 1.0, 1.0, 1.0),\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\n    vec4<f32>(0.0, 0.0, 0.0, 1.0),\n  );\n  return colours[index % 8];\n}\n\n@fragment\nfn fragment_main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\n    let pixel = fragUV * vec2<f32>(textureDimensions(myTexture));\n    var colour = textureLoad(myTexture, vec2<u32>(pixel),0);\n    return abs(colour);\n}\n"}),n=e.createRenderPipeline({layout:"auto",vertex:{module:t,entryPoint:"vertex_main"},fragment:{module:t,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]}});return{render:t=>{const r=t.commandEncoder.beginRenderPass({timestampWrites:t.timestampWrites,colorAttachments:[{view:yi.getCurrentTexture().createView(),loadOp:"clear",clearValue:[.3,.3,.3,1],storeOp:"store"}]}),i=e.createBindGroup({layout:n.getBindGroupLayout(0),entries:[{binding:1,resource:t.outputTextures.finalTexture.createView()}]});return r.setPipeline(n),r.setBindGroup(0,i),r.draw(6),r.end(),[t.commandEncoder.finish()]},label:"fullscreen quad"}},hn=e=>e&&"number"==typeof e.length&&e.buffer instanceof ArrayBuffer&&"number"==typeof e.byteLength,dn={i32:{numElements:1,align:4,size:4,type:"i32",View:Int32Array},u32:{numElements:1,align:4,size:4,type:"u32",View:Uint32Array},f32:{numElements:1,align:4,size:4,type:"f32",View:Float32Array},f16:{numElements:1,align:2,size:2,type:"u16",View:Uint16Array},vec2f:{numElements:2,align:8,size:8,type:"f32",View:Float32Array},vec2i:{numElements:2,align:8,size:8,type:"i32",View:Int32Array},vec2u:{numElements:2,align:8,size:8,type:"u32",View:Uint32Array},vec2h:{numElements:2,align:4,size:4,type:"u16",View:Uint16Array},vec3i:{numElements:3,align:16,size:12,type:"i32",View:Int32Array},vec3u:{numElements:3,align:16,size:12,type:"u32",View:Uint32Array},vec3f:{numElements:3,align:16,size:12,type:"f32",View:Float32Array},vec3h:{numElements:3,align:8,size:6,type:"u16",View:Uint16Array},vec4i:{numElements:4,align:16,size:16,type:"i32",View:Int32Array},vec4u:{numElements:4,align:16,size:16,type:"u32",View:Uint32Array},vec4f:{numElements:4,align:16,size:16,type:"f32",View:Float32Array},vec4h:{numElements:4,align:8,size:8,type:"u16",View:Uint16Array},mat2x2f:{numElements:4,align:8,size:16,type:"f32",View:Float32Array},mat2x2h:{numElements:4,align:4,size:8,type:"u16",View:Uint16Array},mat3x2f:{numElements:6,align:8,size:24,type:"f32",View:Float32Array},mat3x2h:{numElements:6,align:4,size:12,type:"u16",View:Uint16Array},mat4x2f:{numElements:8,align:8,size:32,type:"f32",View:Float32Array},mat4x2h:{numElements:8,align:4,size:16,type:"u16",View:Uint16Array},mat2x3f:{numElements:8,align:16,size:32,pad:[3,1],type:"f32",View:Float32Array},mat2x3h:{numElements:8,align:8,size:16,pad:[3,1],type:"u16",View:Uint16Array},mat3x3f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x3h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x3f:{numElements:16,align:16,size:64,pad:[3,1],type:"f32",View:Float32Array},mat4x3h:{numElements:16,align:8,size:32,pad:[3,1],type:"u16",View:Uint16Array},mat2x4f:{numElements:8,align:16,size:32,type:"f32",View:Float32Array},mat2x4h:{numElements:8,align:8,size:16,type:"u16",View:Uint16Array},mat3x4f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x4h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x4f:{numElements:16,align:16,size:64,type:"f32",View:Float32Array},mat4x4h:{numElements:16,align:8,size:32,type:"u16",View:Uint16Array},bool:{numElements:0,align:1,size:0,type:"bool",View:Uint32Array}},fn={...dn,"atomic<i32>":dn.i32,"atomic<u32>":dn.u32,"vec2<i32>":dn.vec2i,"vec2<u32>":dn.vec2u,"vec2<f32>":dn.vec2f,"vec2<f16>":dn.vec2h,"vec3<i32>":dn.vec3i,"vec3<u32>":dn.vec3u,"vec3<f32>":dn.vec3f,"vec3<f16>":dn.vec3h,"vec4<i32>":dn.vec4i,"vec4<u32>":dn.vec4u,"vec4<f32>":dn.vec4f,"vec4<f16>":dn.vec4h,"mat2x2<f32>":dn.mat2x2f,"mat2x2<f16>":dn.mat2x2h,"mat3x2<f32>":dn.mat3x2f,"mat3x2<f16>":dn.mat3x2h,"mat4x2<f32>":dn.mat4x2f,"mat4x2<f16>":dn.mat4x2h,"mat2x3<f32>":dn.mat2x3f,"mat2x3<f16>":dn.mat2x3h,"mat3x3<f32>":dn.mat3x3f,"mat3x3<f16>":dn.mat3x3h,"mat4x3<f32>":dn.mat4x3f,"mat4x3<f16>":dn.mat4x3h,"mat2x4<f32>":dn.mat2x4f,"mat2x4<f16>":dn.mat2x4h,"mat3x4<f32>":dn.mat3x4f,"mat3x4<f16>":dn.mat3x4h,"mat4x4<f32>":dn.mat4x4f,"mat4x4<f16>":dn.mat4x4h},mn=(pn=fn,Object.keys(pn));var pn,gn,_n,yn,xn,vn;!function(e=[],t){const n=new Set;for(const r of mn){const i=fn[r];n.has(i)||(n.add(i),i.flatten=e.includes(r)?t:!t)}}(),new WeakMap;class bn{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class wn{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(e){throw new Error("Cannot evaluate node")}evaluateString(e){return this.evaluate(e).toString()}search(e){}searchBlock(e,t){if(e){t(kn.instance);for(const n of e)n instanceof Array?this.searchBlock(n,t):n.search(t);t(Tn.instance)}}}class kn extends wn{}kn.instance=new kn;class Tn extends wn{}Tn.instance=new Tn;class Mn extends wn{constructor(){super()}}class In extends Mn{constructor(e,t,n,r){super(),this.name=e,this.args=t,this.returnType=n,this.body=r}get astNodeType(){return"function"}search(e){this.searchBlock(this.body,e)}}class An extends Mn{constructor(e){super(),this.expression=e}get astNodeType(){return"staticAssert"}search(e){this.expression.search(e)}}class Sn extends Mn{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"while"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class Pn extends Mn{constructor(e){super(),this.body=e}get astNodeType(){return"continuing"}search(e){this.searchBlock(this.body,e)}}class En extends Mn{constructor(e,t,n,r){super(),this.init=e,this.condition=t,this.increment=n,this.body=r}get astNodeType(){return"for"}search(e){var t,n,r;null===(t=this.init)||void 0===t||t.search(e),null===(n=this.condition)||void 0===n||n.search(e),null===(r=this.increment)||void 0===r||r.search(e),this.searchBlock(this.body,e)}}class Bn extends Mn{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"var"}search(e){var t;e(this),null===(t=this.value)||void 0===t||t.search(e)}}class On extends Mn{constructor(e,t,n){super(),this.name=e,this.type=t,this.value=n}get astNodeType(){return"override"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class Un extends Mn{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"let"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class zn extends Mn{constructor(e,t,n,r,i){super(),this.name=e,this.type=t,this.storage=n,this.access=r,this.value=i}get astNodeType(){return"const"}evaluate(e){return this.value.evaluate(e)}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}!function(e){e.increment="++",e.decrement="--"}(gn||(gn={})),function(e){e.parse=function(t){const n=t;if("parse"==n)throw new Error("Invalid value for IncrementOperator");return e[n]}}(gn||(gn={}));class Rn extends Mn{constructor(e,t){super(),this.operator=e,this.variable=t}get astNodeType(){return"increment"}search(e){this.variable.search(e)}}!function(e){e.assign="=",e.addAssign="+=",e.subtractAssin="-=",e.multiplyAssign="*=",e.divideAssign="/=",e.moduloAssign="%=",e.andAssign="&=",e.orAssign="|=",e.xorAssign="^=",e.shiftLeftAssign="<<=",e.shiftRightAssign=">>="}(_n||(_n={})),function(e){e.parse=function(e){const t=e;if("parse"==t)throw new Error("Invalid value for AssignOperator");return t}}(_n||(_n={}));class Dn extends Mn{constructor(e,t,n){super(),this.operator=e,this.variable=t,this.value=n}get astNodeType(){return"assign"}search(e){this.value.search(e)}}class jn extends Mn{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"call"}}class Nn extends Mn{constructor(e,t){super(),this.body=e,this.continuing=t}get astNodeType(){return"loop"}}class Cn extends Mn{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"body"}}class Vn extends Mn{constructor(e,t,n,r){super(),this.condition=e,this.body=t,this.elseif=n,this.else=r}get astNodeType(){return"if"}search(e){this.condition.search(e),this.searchBlock(this.body,e),this.searchBlock(this.elseif,e),this.searchBlock(this.else,e)}}class Ln extends Mn{constructor(e){super(),this.value=e}get astNodeType(){return"return"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class Gn extends Mn{constructor(e){super(),this.name=e}get astNodeType(){return"enable"}}class qn extends Mn{constructor(e,t){super(),this.name=e,this.type=t}get astNodeType(){return"alias"}}class Fn extends Mn{constructor(){super()}get astNodeType(){return"discard"}}class $n extends Mn{constructor(){super()}get astNodeType(){return"break"}}class Yn extends Mn{constructor(){super()}get astNodeType(){return"continue"}}class Wn extends Mn{constructor(e){super(),this.name=e}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class Xn extends Wn{constructor(e,t){super(e),this.members=t}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(e){for(let t=0;t<this.members.length;t++)if(this.members[t].name==e)return t;return-1}}class Zn extends Wn{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"template"}}class Hn extends Wn{constructor(e,t,n,r){super(e),this.storage=t,this.type=n,this.access=r}get astNodeType(){return"pointer"}}class Kn extends Wn{constructor(e,t,n,r){super(e),this.attributes=t,this.format=n,this.count=r}get astNodeType(){return"array"}get isArray(){return!0}}class Qn extends Wn{constructor(e,t,n){super(e),this.format=t,this.access=n}get astNodeType(){return"sampler"}}class Jn extends wn{constructor(){super()}}class er extends Jn{constructor(e){super(),this.value=e}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class tr extends Jn{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"createExpr"}}class nr extends Jn{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"callExpr"}evaluate(e){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(e));case"acos":return Math.acos(this.args[0].evaluate(e));case"acosh":return Math.acosh(this.args[0].evaluate(e));case"asin":return Math.asin(this.args[0].evaluate(e));case"asinh":return Math.asinh(this.args[0].evaluate(e));case"atan":return Math.atan(this.args[0].evaluate(e));case"atan2":return Math.atan2(this.args[0].evaluate(e),this.args[1].evaluate(e));case"atanh":return Math.atanh(this.args[0].evaluate(e));case"ceil":return Math.ceil(this.args[0].evaluate(e));case"clamp":return Math.min(Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e)),this.args[2].evaluate(e));case"cos":return Math.cos(this.args[0].evaluate(e));case"degrees":return 180*this.args[0].evaluate(e)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(e)-this.args[1].evaluate(e),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(e));case"exp2":return Math.pow(2,this.args[0].evaluate(e));case"floor":return Math.floor(this.args[0].evaluate(e));case"fma":return this.args[0].evaluate(e)*this.args[1].evaluate(e)+this.args[2].evaluate(e);case"fract":case"modf":return this.args[0].evaluate(e)-Math.floor(this.args[0].evaluate(e));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(e));case"log":return Math.log(this.args[0].evaluate(e));case"log2":return Math.log2(this.args[0].evaluate(e));case"max":return Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e));case"min":return Math.min(this.args[0].evaluate(e),this.args[1].evaluate(e));case"mix":return this.args[0].evaluate(e)*(1-this.args[2].evaluate(e))+this.args[1].evaluate(e)*this.args[2].evaluate(e);case"pow":return Math.pow(this.args[0].evaluate(e),this.args[1].evaluate(e));case"radians":return this.args[0].evaluate(e)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(e));case"sign":return Math.sign(this.args[0].evaluate(e));case"sin":return Math.sin(this.args[0].evaluate(e));case"sinh":return Math.sinh(this.args[0].evaluate(e));case"saturate":return Math.min(Math.max(this.args[0].evaluate(e),0),1);case"smoothstep":return this.args[0].evaluate(e)*this.args[0].evaluate(e)*(3-2*this.args[0].evaluate(e));case"sqrt":return Math.sqrt(this.args[0].evaluate(e));case"step":return this.args[0].evaluate(e)<this.args[1].evaluate(e)?0:1;case"tan":return Math.tan(this.args[0].evaluate(e));case"tanh":return Math.tanh(this.args[0].evaluate(e));case"trunc":return Math.trunc(this.args[0].evaluate(e));default:throw new Error("Non const function: "+this.name)}}search(e){for(const t of this.args)t.search(e);e(this)}}class rr extends Jn{constructor(e){super(),this.name=e}get astNodeType(){return"varExpr"}search(e){e(this)}}class ir extends Jn{constructor(e,t){super(),this.name=e,this.initializer=t}get astNodeType(){return"constExpr"}evaluate(e){var t,n;if(this.initializer instanceof tr){const r=null===(t=this.postfix)||void 0===t?void 0:t.evaluateString(e),i=null===(n=this.initializer.type)||void 0===n?void 0:n.name,s=e.structs.get(i),o=null==s?void 0:s.getMemberIndex(r);if(-1!=o)return this.initializer.args[o].evaluate(e);console.log(o)}return this.initializer.evaluate(e)}search(e){this.initializer.search(e)}}class sr extends Jn{constructor(e){super(),this.value=e}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class or extends Jn{constructor(e,t){super(),this.type=e,this.value=t}get astNodeType(){return"bitcastExpr"}search(e){this.value.search(e)}}class ar extends Jn{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"typecastExpr"}evaluate(e){return this.args[0].evaluate(e)}search(e){this.searchBlock(this.args,e)}}class cr extends Jn{constructor(e){super(),this.contents=e}get astNodeType(){return"groupExpr"}evaluate(e){return this.contents[0].evaluate(e)}search(e){this.searchBlock(this.contents,e)}}class ur extends Jn{constructor(){super()}}class lr extends ur{constructor(e,t){super(),this.operator=e,this.right=t}get astNodeType(){return"unaryOp"}evaluate(e){switch(this.operator){case"+":return this.right.evaluate(e);case"-":return-this.right.evaluate(e);case"!":return this.right.evaluate(e)?0:1;case"~":return~this.right.evaluate(e);default:throw new Error("Unknown unary operator: "+this.operator)}}search(e){this.right.search(e)}}class hr extends ur{constructor(e,t,n){super(),this.operator=e,this.left=t,this.right=n}get astNodeType(){return"binaryOp"}evaluate(e){switch(this.operator){case"+":return this.left.evaluate(e)+this.right.evaluate(e);case"-":return this.left.evaluate(e)-this.right.evaluate(e);case"*":return this.left.evaluate(e)*this.right.evaluate(e);case"/":return this.left.evaluate(e)/this.right.evaluate(e);case"%":return this.left.evaluate(e)%this.right.evaluate(e);case"==":return this.left.evaluate(e)==this.right.evaluate(e)?1:0;case"!=":return this.left.evaluate(e)!=this.right.evaluate(e)?1:0;case"<":return this.left.evaluate(e)<this.right.evaluate(e)?1:0;case">":return this.left.evaluate(e)>this.right.evaluate(e)?1:0;case"<=":return this.left.evaluate(e)<=this.right.evaluate(e)?1:0;case">=":return this.left.evaluate(e)>=this.right.evaluate(e)?1:0;case"&&":return this.left.evaluate(e)&&this.right.evaluate(e)?1:0;case"||":return this.left.evaluate(e)||this.right.evaluate(e)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}search(e){this.left.search(e),this.right.search(e)}}class dr extends wn{constructor(){super()}}class fr extends dr{constructor(e,t){super(),this.selector=e,this.body=t}get astNodeType(){return"case"}search(e){this.searchBlock(this.body,e)}}class mr extends dr{constructor(e){super(),this.body=e}get astNodeType(){return"default"}search(e){this.searchBlock(this.body,e)}}class pr extends wn{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"argument"}}class gr extends wn{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"elseif"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class _r extends wn{constructor(e,t,n){super(),this.name=e,this.type=t,this.attributes=n}get astNodeType(){return"member"}}class yr extends wn{constructor(e,t){super(),this.name=e,this.value=t}get astNodeType(){return"attribute"}}!function(e){e[e.token=0]="token",e[e.keyword=1]="keyword",e[e.reserved=2]="reserved"}(xn||(xn={}));class xr{constructor(e,t,n){this.name=e,this.type=t,this.rule=n}toString(){return this.name}}class vr{}yn=vr,vr.none=new xr("",xn.reserved,""),vr.eof=new xr("EOF",xn.token,""),vr.reserved={asm:new xr("asm",xn.reserved,"asm"),bf16:new xr("bf16",xn.reserved,"bf16"),do:new xr("do",xn.reserved,"do"),enum:new xr("enum",xn.reserved,"enum"),f16:new xr("f16",xn.reserved,"f16"),f64:new xr("f64",xn.reserved,"f64"),handle:new xr("handle",xn.reserved,"handle"),i8:new xr("i8",xn.reserved,"i8"),i16:new xr("i16",xn.reserved,"i16"),i64:new xr("i64",xn.reserved,"i64"),mat:new xr("mat",xn.reserved,"mat"),premerge:new xr("premerge",xn.reserved,"premerge"),regardless:new xr("regardless",xn.reserved,"regardless"),typedef:new xr("typedef",xn.reserved,"typedef"),u8:new xr("u8",xn.reserved,"u8"),u16:new xr("u16",xn.reserved,"u16"),u64:new xr("u64",xn.reserved,"u64"),unless:new xr("unless",xn.reserved,"unless"),using:new xr("using",xn.reserved,"using"),vec:new xr("vec",xn.reserved,"vec"),void:new xr("void",xn.reserved,"void")},vr.keywords={array:new xr("array",xn.keyword,"array"),atomic:new xr("atomic",xn.keyword,"atomic"),bool:new xr("bool",xn.keyword,"bool"),f32:new xr("f32",xn.keyword,"f32"),i32:new xr("i32",xn.keyword,"i32"),mat2x2:new xr("mat2x2",xn.keyword,"mat2x2"),mat2x3:new xr("mat2x3",xn.keyword,"mat2x3"),mat2x4:new xr("mat2x4",xn.keyword,"mat2x4"),mat3x2:new xr("mat3x2",xn.keyword,"mat3x2"),mat3x3:new xr("mat3x3",xn.keyword,"mat3x3"),mat3x4:new xr("mat3x4",xn.keyword,"mat3x4"),mat4x2:new xr("mat4x2",xn.keyword,"mat4x2"),mat4x3:new xr("mat4x3",xn.keyword,"mat4x3"),mat4x4:new xr("mat4x4",xn.keyword,"mat4x4"),ptr:new xr("ptr",xn.keyword,"ptr"),sampler:new xr("sampler",xn.keyword,"sampler"),sampler_comparison:new xr("sampler_comparison",xn.keyword,"sampler_comparison"),struct:new xr("struct",xn.keyword,"struct"),texture_1d:new xr("texture_1d",xn.keyword,"texture_1d"),texture_2d:new xr("texture_2d",xn.keyword,"texture_2d"),texture_2d_array:new xr("texture_2d_array",xn.keyword,"texture_2d_array"),texture_3d:new xr("texture_3d",xn.keyword,"texture_3d"),texture_cube:new xr("texture_cube",xn.keyword,"texture_cube"),texture_cube_array:new xr("texture_cube_array",xn.keyword,"texture_cube_array"),texture_multisampled_2d:new xr("texture_multisampled_2d",xn.keyword,"texture_multisampled_2d"),texture_storage_1d:new xr("texture_storage_1d",xn.keyword,"texture_storage_1d"),texture_storage_2d:new xr("texture_storage_2d",xn.keyword,"texture_storage_2d"),texture_storage_2d_array:new xr("texture_storage_2d_array",xn.keyword,"texture_storage_2d_array"),texture_storage_3d:new xr("texture_storage_3d",xn.keyword,"texture_storage_3d"),texture_depth_2d:new xr("texture_depth_2d",xn.keyword,"texture_depth_2d"),texture_depth_2d_array:new xr("texture_depth_2d_array",xn.keyword,"texture_depth_2d_array"),texture_depth_cube:new xr("texture_depth_cube",xn.keyword,"texture_depth_cube"),texture_depth_cube_array:new xr("texture_depth_cube_array",xn.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new xr("texture_depth_multisampled_2d",xn.keyword,"texture_depth_multisampled_2d"),texture_external:new xr("texture_external",xn.keyword,"texture_external"),u32:new xr("u32",xn.keyword,"u32"),vec2:new xr("vec2",xn.keyword,"vec2"),vec3:new xr("vec3",xn.keyword,"vec3"),vec4:new xr("vec4",xn.keyword,"vec4"),bitcast:new xr("bitcast",xn.keyword,"bitcast"),block:new xr("block",xn.keyword,"block"),break:new xr("break",xn.keyword,"break"),case:new xr("case",xn.keyword,"case"),continue:new xr("continue",xn.keyword,"continue"),continuing:new xr("continuing",xn.keyword,"continuing"),default:new xr("default",xn.keyword,"default"),discard:new xr("discard",xn.keyword,"discard"),else:new xr("else",xn.keyword,"else"),enable:new xr("enable",xn.keyword,"enable"),fallthrough:new xr("fallthrough",xn.keyword,"fallthrough"),false:new xr("false",xn.keyword,"false"),fn:new xr("fn",xn.keyword,"fn"),for:new xr("for",xn.keyword,"for"),function:new xr("function",xn.keyword,"function"),if:new xr("if",xn.keyword,"if"),let:new xr("let",xn.keyword,"let"),const:new xr("const",xn.keyword,"const"),loop:new xr("loop",xn.keyword,"loop"),while:new xr("while",xn.keyword,"while"),private:new xr("private",xn.keyword,"private"),read:new xr("read",xn.keyword,"read"),read_write:new xr("read_write",xn.keyword,"read_write"),return:new xr("return",xn.keyword,"return"),storage:new xr("storage",xn.keyword,"storage"),switch:new xr("switch",xn.keyword,"switch"),true:new xr("true",xn.keyword,"true"),alias:new xr("alias",xn.keyword,"alias"),type:new xr("type",xn.keyword,"type"),uniform:new xr("uniform",xn.keyword,"uniform"),var:new xr("var",xn.keyword,"var"),override:new xr("override",xn.keyword,"override"),workgroup:new xr("workgroup",xn.keyword,"workgroup"),write:new xr("write",xn.keyword,"write"),r8unorm:new xr("r8unorm",xn.keyword,"r8unorm"),r8snorm:new xr("r8snorm",xn.keyword,"r8snorm"),r8uint:new xr("r8uint",xn.keyword,"r8uint"),r8sint:new xr("r8sint",xn.keyword,"r8sint"),r16uint:new xr("r16uint",xn.keyword,"r16uint"),r16sint:new xr("r16sint",xn.keyword,"r16sint"),r16float:new xr("r16float",xn.keyword,"r16float"),rg8unorm:new xr("rg8unorm",xn.keyword,"rg8unorm"),rg8snorm:new xr("rg8snorm",xn.keyword,"rg8snorm"),rg8uint:new xr("rg8uint",xn.keyword,"rg8uint"),rg8sint:new xr("rg8sint",xn.keyword,"rg8sint"),r32uint:new xr("r32uint",xn.keyword,"r32uint"),r32sint:new xr("r32sint",xn.keyword,"r32sint"),r32float:new xr("r32float",xn.keyword,"r32float"),rg16uint:new xr("rg16uint",xn.keyword,"rg16uint"),rg16sint:new xr("rg16sint",xn.keyword,"rg16sint"),rg16float:new xr("rg16float",xn.keyword,"rg16float"),rgba8unorm:new xr("rgba8unorm",xn.keyword,"rgba8unorm"),rgba8unorm_srgb:new xr("rgba8unorm_srgb",xn.keyword,"rgba8unorm_srgb"),rgba8snorm:new xr("rgba8snorm",xn.keyword,"rgba8snorm"),rgba8uint:new xr("rgba8uint",xn.keyword,"rgba8uint"),rgba8sint:new xr("rgba8sint",xn.keyword,"rgba8sint"),bgra8unorm:new xr("bgra8unorm",xn.keyword,"bgra8unorm"),bgra8unorm_srgb:new xr("bgra8unorm_srgb",xn.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new xr("rgb10a2unorm",xn.keyword,"rgb10a2unorm"),rg11b10float:new xr("rg11b10float",xn.keyword,"rg11b10float"),rg32uint:new xr("rg32uint",xn.keyword,"rg32uint"),rg32sint:new xr("rg32sint",xn.keyword,"rg32sint"),rg32float:new xr("rg32float",xn.keyword,"rg32float"),rgba16uint:new xr("rgba16uint",xn.keyword,"rgba16uint"),rgba16sint:new xr("rgba16sint",xn.keyword,"rgba16sint"),rgba16float:new xr("rgba16float",xn.keyword,"rgba16float"),rgba32uint:new xr("rgba32uint",xn.keyword,"rgba32uint"),rgba32sint:new xr("rgba32sint",xn.keyword,"rgba32sint"),rgba32float:new xr("rgba32float",xn.keyword,"rgba32float"),static_assert:new xr("static_assert",xn.keyword,"static_assert")},vr.tokens={decimal_float_literal:new xr("decimal_float_literal",xn.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new xr("hex_float_literal",xn.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new xr("int_literal",xn.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new xr("uint_literal",xn.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new xr("ident",xn.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new xr("and",xn.token,"&"),and_and:new xr("and_and",xn.token,"&&"),arrow:new xr("arrow ",xn.token,"->"),attr:new xr("attr",xn.token,"@"),attr_left:new xr("attr_left",xn.token,"[["),attr_right:new xr("attr_right",xn.token,"]]"),forward_slash:new xr("forward_slash",xn.token,"/"),bang:new xr("bang",xn.token,"!"),bracket_left:new xr("bracket_left",xn.token,"["),bracket_right:new xr("bracket_right",xn.token,"]"),brace_left:new xr("brace_left",xn.token,"{"),brace_right:new xr("brace_right",xn.token,"}"),colon:new xr("colon",xn.token,":"),comma:new xr("comma",xn.token,","),equal:new xr("equal",xn.token,"="),equal_equal:new xr("equal_equal",xn.token,"=="),not_equal:new xr("not_equal",xn.token,"!="),greater_than:new xr("greater_than",xn.token,">"),greater_than_equal:new xr("greater_than_equal",xn.token,">="),shift_right:new xr("shift_right",xn.token,">>"),less_than:new xr("less_than",xn.token,"<"),less_than_equal:new xr("less_than_equal",xn.token,"<="),shift_left:new xr("shift_left",xn.token,"<<"),modulo:new xr("modulo",xn.token,"%"),minus:new xr("minus",xn.token,"-"),minus_minus:new xr("minus_minus",xn.token,"--"),period:new xr("period",xn.token,"."),plus:new xr("plus",xn.token,"+"),plus_plus:new xr("plus_plus",xn.token,"++"),or:new xr("or",xn.token,"|"),or_or:new xr("or_or",xn.token,"||"),paren_left:new xr("paren_left",xn.token,"("),paren_right:new xr("paren_right",xn.token,")"),semicolon:new xr("semicolon",xn.token,";"),star:new xr("star",xn.token,"*"),tilde:new xr("tilde",xn.token,"~"),underscore:new xr("underscore",xn.token,"_"),xor:new xr("xor",xn.token,"^"),plus_equal:new xr("plus_equal",xn.token,"+="),minus_equal:new xr("minus_equal",xn.token,"-="),times_equal:new xr("times_equal",xn.token,"*="),division_equal:new xr("division_equal",xn.token,"/="),modulo_equal:new xr("modulo_equal",xn.token,"%="),and_equal:new xr("and_equal",xn.token,"&="),or_equal:new xr("or_equal",xn.token,"|="),xor_equal:new xr("xor_equal",xn.token,"^="),shift_right_equal:new xr("shift_right_equal",xn.token,">>="),shift_left_equal:new xr("shift_left_equal",xn.token,"<<=")},vr.storage_class=[yn.keywords.function,yn.keywords.private,yn.keywords.workgroup,yn.keywords.uniform,yn.keywords.storage],vr.access_mode=[yn.keywords.read,yn.keywords.write,yn.keywords.read_write],vr.sampler_type=[yn.keywords.sampler,yn.keywords.sampler_comparison],vr.sampled_texture_type=[yn.keywords.texture_1d,yn.keywords.texture_2d,yn.keywords.texture_2d_array,yn.keywords.texture_3d,yn.keywords.texture_cube,yn.keywords.texture_cube_array],vr.multisampled_texture_type=[yn.keywords.texture_multisampled_2d],vr.storage_texture_type=[yn.keywords.texture_storage_1d,yn.keywords.texture_storage_2d,yn.keywords.texture_storage_2d_array,yn.keywords.texture_storage_3d],vr.depth_texture_type=[yn.keywords.texture_depth_2d,yn.keywords.texture_depth_2d_array,yn.keywords.texture_depth_cube,yn.keywords.texture_depth_cube_array,yn.keywords.texture_depth_multisampled_2d],vr.texture_external_type=[yn.keywords.texture_external],vr.any_texture_type=[...yn.sampled_texture_type,...yn.multisampled_texture_type,...yn.storage_texture_type,...yn.depth_texture_type,...yn.texture_external_type],vr.texel_format=[yn.keywords.r8unorm,yn.keywords.r8snorm,yn.keywords.r8uint,yn.keywords.r8sint,yn.keywords.r16uint,yn.keywords.r16sint,yn.keywords.r16float,yn.keywords.rg8unorm,yn.keywords.rg8snorm,yn.keywords.rg8uint,yn.keywords.rg8sint,yn.keywords.r32uint,yn.keywords.r32sint,yn.keywords.r32float,yn.keywords.rg16uint,yn.keywords.rg16sint,yn.keywords.rg16float,yn.keywords.rgba8unorm,yn.keywords.rgba8unorm_srgb,yn.keywords.rgba8snorm,yn.keywords.rgba8uint,yn.keywords.rgba8sint,yn.keywords.bgra8unorm,yn.keywords.bgra8unorm_srgb,yn.keywords.rgb10a2unorm,yn.keywords.rg11b10float,yn.keywords.rg32uint,yn.keywords.rg32sint,yn.keywords.rg32float,yn.keywords.rgba16uint,yn.keywords.rgba16sint,yn.keywords.rgba16float,yn.keywords.rgba32uint,yn.keywords.rgba32sint,yn.keywords.rgba32float],vr.const_literal=[yn.tokens.int_literal,yn.tokens.uint_literal,yn.tokens.decimal_float_literal,yn.tokens.hex_float_literal,yn.keywords.true,yn.keywords.false],vr.literal_or_ident=[yn.tokens.ident,yn.tokens.int_literal,yn.tokens.uint_literal,yn.tokens.decimal_float_literal,yn.tokens.hex_float_literal],vr.element_count_expression=[yn.tokens.int_literal,yn.tokens.uint_literal,yn.tokens.ident],vr.template_types=[yn.keywords.vec2,yn.keywords.vec3,yn.keywords.vec4,yn.keywords.mat2x2,yn.keywords.mat2x3,yn.keywords.mat2x4,yn.keywords.mat3x2,yn.keywords.mat3x3,yn.keywords.mat3x4,yn.keywords.mat4x2,yn.keywords.mat4x3,yn.keywords.mat4x4,yn.keywords.atomic,yn.keywords.bitcast,...yn.any_texture_type],vr.attribute_name=[yn.tokens.ident,yn.keywords.block],vr.assignment_operators=[yn.tokens.equal,yn.tokens.plus_equal,yn.tokens.minus_equal,yn.tokens.times_equal,yn.tokens.division_equal,yn.tokens.modulo_equal,yn.tokens.and_equal,yn.tokens.or_equal,yn.tokens.xor_equal,yn.tokens.shift_right_equal,yn.tokens.shift_left_equal],vr.increment_operators=[yn.tokens.plus_plus,yn.tokens.minus_minus];class br{constructor(e,t,n){this.type=e,this.lexeme=t,this.line=n}toString(){return this.lexeme}isTemplateType(){return-1!=vr.template_types.indexOf(this.type)}isArrayType(){return this.type==vr.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class wr{constructor(e){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=e?e:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new br(vr.eof,"",this._line)),this._tokens}scanToken(){let e=this._advance();if("\n"==e)return this._line++,!0;if(this._isWhitespace(e))return!0;if("/"==e){if("/"==this._peekAhead()){for(;"\n"!=e;){if(this._isAtEnd())return!0;e=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let t=1;for(;t>0;){if(this._isAtEnd())return!0;if(e=this._advance(),"\n"==e)this._line++;else if("*"==e){if("/"==this._peekAhead()&&(this._advance(),t--,0==t))return!0}else"/"==e&&"*"==this._peekAhead()&&(this._advance(),t++)}return!0}}let t=vr.none;for(;;){let n=this._findType(e);const r=this._peekAhead();if(">"==e&&(">"==r||"="==r)){let e=!1,t=this._tokens.length-1;for(let n=0;n<5&&t>=0;++n,--t)if(this._tokens[t].type===vr.tokens.less_than){t>0&&this._tokens[t-1].isArrayOrTemplateType()&&(e=!0);break}if(e)return this._addToken(n),!0}if(n===vr.none){let r=e,i=0;const s=2;for(let e=0;e<s;++e)if(r+=this._peekAhead(e),n=this._findType(r),n!==vr.none){i=e;break}if(n===vr.none)return t!==vr.none&&(this._current--,this._addToken(t),!0);e=r,this._current+=i+1}if(t=n,this._isAtEnd())break;e+=this._advance()}return t!==vr.none&&(this._addToken(t),!0)}_findType(e){for(const t in vr.keywords){const n=vr.keywords[t];if(this._match(e,n.rule))return n}for(const t in vr.tokens){const n=vr.tokens[t];if(this._match(e,n.rule))return n}return vr.none}_match(e,t){if("string"==typeof t){if(t==e)return!0}else{const n=t.exec(e);if(n&&0==n.index&&n[0]==e)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(e){return" "==e||"\t"==e||"\r"==e}_advance(e=0){let t=this._source[this._current];return e=e||0,e++,this._current+=e,t}_peekAhead(e=0){return e=e||0,this._current+e>=this._source.length?"\0":this._source[this._current+e]}_addToken(e){const t=this._source.substring(this._start,this._current);this._tokens.push(new br(e,t,this._line))}}class kr{constructor(){this._tokens=[],this._current=0,this._context=new bn}parse(e){this._initialize(e);let t=[];for(;!this._isAtEnd();){const e=this._global_decl_or_directive();if(!e)break;t.push(e)}return t}_initialize(e){if(e)if("string"==typeof e){const t=new wr(e);this._tokens=t.scanTokens()}else this._tokens=e;else this._tokens=[];this._current=0}_error(e,t){return console.error(e,t),{token:e,message:t,toString:function(){return`${t}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==vr.eof}_match(e){if(e instanceof xr)return!!this._check(e)&&(this._advance(),!0);for(let t=0,n=e.length;t<n;++t){const n=e[t];if(this._check(n))return this._advance(),!0}return!1}_consume(e,t){if(this._check(e))return this._advance();throw this._error(this._peek(),t)}_check(e){if(this._isAtEnd())return!1;const t=this._peek();if(e instanceof Array){let n=t.type;return-1!=e.indexOf(n)}return t.type==e}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(vr.tokens.semicolon)&&!this._isAtEnd(););if(this._match(vr.keywords.alias)){const e=this._type_alias();return this._consume(vr.tokens.semicolon,"Expected ';'"),e}if(this._match(vr.keywords.enable)){const e=this._enable_directive();return this._consume(vr.tokens.semicolon,"Expected ';'"),e}const e=this._attribute();if(this._check(vr.keywords.var)){const t=this._global_variable_decl();return null!=t&&(t.attributes=e),this._consume(vr.tokens.semicolon,"Expected ';'."),t}if(this._check(vr.keywords.override)){const t=this._override_variable_decl();return null!=t&&(t.attributes=e),this._consume(vr.tokens.semicolon,"Expected ';'."),t}if(this._check(vr.keywords.let)){const t=this._global_let_decl();return null!=t&&(t.attributes=e),this._consume(vr.tokens.semicolon,"Expected ';'."),t}if(this._check(vr.keywords.const)){const t=this._global_const_decl();return null!=t&&(t.attributes=e),this._consume(vr.tokens.semicolon,"Expected ';'."),t}if(this._check(vr.keywords.struct)){const t=this._struct_decl();return null!=t&&(t.attributes=e),t}if(this._check(vr.keywords.fn)){const t=this._function_decl();return null!=t&&(t.attributes=e),t}return null}_function_decl(){if(!this._match(vr.keywords.fn))return null;const e=this._consume(vr.tokens.ident,"Expected function name.").toString();this._consume(vr.tokens.paren_left,"Expected '(' for function arguments.");const t=[];if(!this._check(vr.tokens.paren_right))do{if(this._check(vr.tokens.paren_right))break;const e=this._attribute(),n=this._consume(vr.tokens.ident,"Expected argument name.").toString();this._consume(vr.tokens.colon,"Expected ':' for argument type.");const r=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=r,t.push(new pr(n,i,e)))}while(this._match(vr.tokens.comma));this._consume(vr.tokens.paren_right,"Expected ')' after function arguments.");let n=null;if(this._match(vr.tokens.arrow)){const e=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=e)}const r=this._compound_statement();return new In(e,t,n,r)}_compound_statement(){const e=[];for(this._consume(vr.tokens.brace_left,"Expected '{' for block.");!this._check(vr.tokens.brace_right);){const t=this._statement();null!==t&&e.push(t)}return this._consume(vr.tokens.brace_right,"Expected '}' for block."),e}_statement(){for(;this._match(vr.tokens.semicolon)&&!this._isAtEnd(););if(this._check(vr.keywords.if))return this._if_statement();if(this._check(vr.keywords.switch))return this._switch_statement();if(this._check(vr.keywords.loop))return this._loop_statement();if(this._check(vr.keywords.for))return this._for_statement();if(this._check(vr.keywords.while))return this._while_statement();if(this._check(vr.keywords.continuing))return this._continuing_statement();if(this._check(vr.keywords.static_assert))return this._static_assert_statement();if(this._check(vr.tokens.brace_left))return this._compound_statement();let e=null;return e=this._check(vr.keywords.return)?this._return_statement():this._check([vr.keywords.var,vr.keywords.let,vr.keywords.const])?this._variable_statement():this._match(vr.keywords.discard)?new Fn:this._match(vr.keywords.break)?new $n:this._match(vr.keywords.continue)?new Yn:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=e&&this._consume(vr.tokens.semicolon,"Expected ';' after statement."),e}_static_assert_statement(){if(!this._match(vr.keywords.static_assert))return null;let e=this._optional_paren_expression();return new An(e)}_while_statement(){if(!this._match(vr.keywords.while))return null;let e=this._optional_paren_expression();const t=this._compound_statement();return new Sn(e,t)}_continuing_statement(){if(!this._match(vr.keywords.continuing))return null;const e=this._compound_statement();return new Pn(e)}_for_statement(){if(!this._match(vr.keywords.for))return null;this._consume(vr.tokens.paren_left,"Expected '('.");const e=this._check(vr.tokens.semicolon)?null:this._for_init();this._consume(vr.tokens.semicolon,"Expected ';'.");const t=this._check(vr.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(vr.tokens.semicolon,"Expected ';'.");const n=this._check(vr.tokens.paren_right)?null:this._for_increment();this._consume(vr.tokens.paren_right,"Expected ')'.");const r=this._compound_statement();return new En(e,t,n,r)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(vr.keywords.var)){const e=this._variable_decl();if(null===e)throw this._error(this._peek(),"Variable declaration expected.");let t=null;return this._match(vr.tokens.equal)&&(t=this._short_circuit_or_expression()),new Bn(e.name,e.type,e.storage,e.access,t)}if(this._match(vr.keywords.let)){const e=this._consume(vr.tokens.ident,"Expected name for let.").toString();let t=null;if(this._match(vr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(vr.tokens.equal,"Expected '=' for let.");const n=this._short_circuit_or_expression();return new Un(e,t,null,null,n)}if(this._match(vr.keywords.const)){const e=this._consume(vr.tokens.ident,"Expected name for const.").toString();let t=null;if(this._match(vr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(vr.tokens.equal,"Expected '=' for const.");const n=this._short_circuit_or_expression();return new zn(e,t,null,null,n)}return null}_increment_decrement_statement(){const e=this._current,t=this._unary_expression();if(null==t)return null;if(!this._check(vr.increment_operators))return this._current=e,null;const n=this._consume(vr.increment_operators,"Expected increment operator");return new Rn(n.type===vr.tokens.plus_plus?gn.increment:gn.decrement,t)}_assignment_statement(){let e=null;if(this._check(vr.tokens.brace_right))return null;let t=this._match(vr.tokens.underscore);if(t||(e=this._unary_expression()),!t&&null==e)return null;const n=this._consume(vr.assignment_operators,"Expected assignment operator."),r=this._short_circuit_or_expression();return new Dn(_n.parse(n.lexeme),e,r)}_func_call_statement(){if(!this._check(vr.tokens.ident))return null;const e=this._current,t=this._consume(vr.tokens.ident,"Expected function name."),n=this._argument_expression_list();return null===n?(this._current=e,null):new jn(t.lexeme,n)}_loop_statement(){if(!this._match(vr.keywords.loop))return null;this._consume(vr.tokens.brace_left,"Expected '{' for loop.");const e=[];let t=this._statement();for(;null!==t;){if(Array.isArray(t))for(let n of t)e.push(n);else e.push(t);t=this._statement()}let n=null;return this._match(vr.keywords.continuing)&&(n=this._compound_statement()),this._consume(vr.tokens.brace_right,"Expected '}' for loop."),new Nn(e,n)}_switch_statement(){if(!this._match(vr.keywords.switch))return null;const e=this._optional_paren_expression();this._consume(vr.tokens.brace_left,"Expected '{' for switch.");const t=this._switch_body();if(null==t||0==t.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(vr.tokens.brace_right,"Expected '}' for switch."),new Cn(e,t)}_switch_body(){const e=[];if(this._match(vr.keywords.case)){const t=this._case_selectors();this._match(vr.tokens.colon),this._consume(vr.tokens.brace_left,"Exected '{' for switch case.");const n=this._case_body();this._consume(vr.tokens.brace_right,"Exected '}' for switch case."),e.push(new fr(t,n))}if(this._match(vr.keywords.default)){this._match(vr.tokens.colon),this._consume(vr.tokens.brace_left,"Exected '{' for switch default.");const t=this._case_body();this._consume(vr.tokens.brace_right,"Exected '}' for switch default."),e.push(new mr(t))}if(this._check([vr.keywords.default,vr.keywords.case])){const t=this._switch_body();e.push(t[0])}return e}_case_selectors(){var e,t,n,r;const i=[null!==(t=null===(e=this._shift_expression())||void 0===e?void 0:e.evaluate(this._context).toString())&&void 0!==t?t:""];for(;this._match(vr.tokens.comma);)i.push(null!==(r=null===(n=this._shift_expression())||void 0===n?void 0:n.evaluate(this._context).toString())&&void 0!==r?r:"");return i}_case_body(){if(this._match(vr.keywords.fallthrough))return this._consume(vr.tokens.semicolon,"Expected ';'"),[];let e=this._statement();if(null==e)return[];e instanceof Array||(e=[e]);const t=this._case_body();return 0==t.length?e:[...e,t[0]]}_if_statement(){if(!this._match(vr.keywords.if))return null;const e=this._optional_paren_expression(),t=this._compound_statement();let n=[];this._match_elseif()&&(n=this._elseif_statement(n));let r=null;return this._match(vr.keywords.else)&&(r=this._compound_statement()),new Vn(e,t,n,r)}_match_elseif(){return this._tokens[this._current].type===vr.keywords.else&&this._tokens[this._current+1].type===vr.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(e=[]){const t=this._optional_paren_expression(),n=this._compound_statement();return e.push(new gr(t,n)),this._match_elseif()&&this._elseif_statement(e),e}_return_statement(){if(!this._match(vr.keywords.return))return null;const e=this._short_circuit_or_expression();return new Ln(e)}_short_circuit_or_expression(){let e=this._short_circuit_and_expr();for(;this._match(vr.tokens.or_or);)e=new hr(this._previous().toString(),e,this._short_circuit_and_expr());return e}_short_circuit_and_expr(){let e=this._inclusive_or_expression();for(;this._match(vr.tokens.and_and);)e=new hr(this._previous().toString(),e,this._inclusive_or_expression());return e}_inclusive_or_expression(){let e=this._exclusive_or_expression();for(;this._match(vr.tokens.or);)e=new hr(this._previous().toString(),e,this._exclusive_or_expression());return e}_exclusive_or_expression(){let e=this._and_expression();for(;this._match(vr.tokens.xor);)e=new hr(this._previous().toString(),e,this._and_expression());return e}_and_expression(){let e=this._equality_expression();for(;this._match(vr.tokens.and);)e=new hr(this._previous().toString(),e,this._equality_expression());return e}_equality_expression(){const e=this._relational_expression();return this._match([vr.tokens.equal_equal,vr.tokens.not_equal])?new hr(this._previous().toString(),e,this._relational_expression()):e}_relational_expression(){let e=this._shift_expression();for(;this._match([vr.tokens.less_than,vr.tokens.greater_than,vr.tokens.less_than_equal,vr.tokens.greater_than_equal]);)e=new hr(this._previous().toString(),e,this._shift_expression());return e}_shift_expression(){let e=this._additive_expression();for(;this._match([vr.tokens.shift_left,vr.tokens.shift_right]);)e=new hr(this._previous().toString(),e,this._additive_expression());return e}_additive_expression(){let e=this._multiplicative_expression();for(;this._match([vr.tokens.plus,vr.tokens.minus]);)e=new hr(this._previous().toString(),e,this._multiplicative_expression());return e}_multiplicative_expression(){let e=this._unary_expression();for(;this._match([vr.tokens.star,vr.tokens.forward_slash,vr.tokens.modulo]);)e=new hr(this._previous().toString(),e,this._unary_expression());return e}_unary_expression(){return this._match([vr.tokens.minus,vr.tokens.bang,vr.tokens.tilde,vr.tokens.star,vr.tokens.and])?new lr(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const e=this._primary_expression(),t=this._postfix_expression();return t&&(e.postfix=t),e}_postfix_expression(){if(this._match(vr.tokens.bracket_left)){const e=this._short_circuit_or_expression();this._consume(vr.tokens.bracket_right,"Expected ']'.");const t=this._postfix_expression();return t&&(e.postfix=t),e}if(this._match(vr.tokens.period)){const e=this._consume(vr.tokens.ident,"Expected member name."),t=this._postfix_expression(),n=new er(e.lexeme);return t&&(n.postfix=t),n}return null}_getStruct(e){return this._context.aliases.has(e)?this._context.aliases.get(e).type:this._context.structs.has(e)?this._context.structs.get(e):null}_primary_expression(){if(this._match(vr.tokens.ident)){const e=this._previous().toString();if(this._check(vr.tokens.paren_left)){const t=this._argument_expression_list(),n=this._getStruct(e);return null!=n?new tr(n,t):new nr(e,t)}if(this._context.constants.has(e)){const t=this._context.constants.get(e);return new ir(e,t.value)}return new rr(e)}if(this._match(vr.const_literal))return new sr(parseFloat(this._previous().toString()));if(this._check(vr.tokens.paren_left))return this._paren_expression();if(this._match(vr.keywords.bitcast)){this._consume(vr.tokens.less_than,"Expected '<'.");const e=this._type_decl();this._consume(vr.tokens.greater_than,"Expected '>'.");const t=this._paren_expression();return new or(e,t)}const e=this._type_decl(),t=this._argument_expression_list();return new ar(e,t)}_argument_expression_list(){if(!this._match(vr.tokens.paren_left))return null;const e=[];do{if(this._check(vr.tokens.paren_right))break;const t=this._short_circuit_or_expression();e.push(t)}while(this._match(vr.tokens.comma));return this._consume(vr.tokens.paren_right,"Expected ')' for agument list"),e}_optional_paren_expression(){this._match(vr.tokens.paren_left);const e=this._short_circuit_or_expression();return this._match(vr.tokens.paren_right),new cr([e])}_paren_expression(){this._consume(vr.tokens.paren_left,"Expected '('.");const e=this._short_circuit_or_expression();return this._consume(vr.tokens.paren_right,"Expected ')'."),new cr([e])}_struct_decl(){if(!this._match(vr.keywords.struct))return null;const e=this._consume(vr.tokens.ident,"Expected name for struct.").toString();this._consume(vr.tokens.brace_left,"Expected '{' for struct body.");const t=[];for(;!this._check(vr.tokens.brace_right);){const e=this._attribute(),n=this._consume(vr.tokens.ident,"Expected variable name.").toString();this._consume(vr.tokens.colon,"Expected ':' for struct member type.");const r=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=r),this._check(vr.tokens.brace_right)?this._match(vr.tokens.comma):this._consume(vr.tokens.comma,"Expected ',' for struct member."),t.push(new _r(n,i,e))}this._consume(vr.tokens.brace_right,"Expected '}' after struct body.");const n=new Xn(e,t);return this._context.structs.set(e,n),n}_global_variable_decl(){const e=this._variable_decl();return e&&this._match(vr.tokens.equal)&&(e.value=this._const_expression()),e}_override_variable_decl(){const e=this._override_decl();return e&&this._match(vr.tokens.equal)&&(e.value=this._const_expression()),e}_global_const_decl(){if(!this._match(vr.keywords.const))return null;const e=this._consume(vr.tokens.ident,"Expected variable name");let t=null;if(this._match(vr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;if(this._match(vr.tokens.equal)){const e=this._short_circuit_or_expression();if(e instanceof tr)n=e;else if(e instanceof ir&&e.initializer instanceof tr)n=e.initializer;else try{const t=e.evaluate(this._context);n=new sr(t)}catch(t){n=e}}const r=new zn(e.toString(),t,"","",n);return this._context.constants.set(r.name,r),r}_global_let_decl(){if(!this._match(vr.keywords.let))return null;const e=this._consume(vr.tokens.ident,"Expected variable name");let t=null;if(this._match(vr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let n=null;return this._match(vr.tokens.equal)&&(n=this._const_expression()),new Un(e.toString(),t,"","",n)}_const_expression(){if(this._match(vr.const_literal))return new er(this._previous().toString());const e=this._type_decl();this._consume(vr.tokens.paren_left,"Expected '('.");let t=[];for(;!this._check(vr.tokens.paren_right)&&(t.push(this._const_expression()),this._check(vr.tokens.comma));)this._advance();return this._consume(vr.tokens.paren_right,"Expected ')'."),new tr(e,t)}_variable_decl(){if(!this._match(vr.keywords.var))return null;let e="",t="";this._match(vr.tokens.less_than)&&(e=this._consume(vr.storage_class,"Expected storage_class.").toString(),this._match(vr.tokens.comma)&&(t=this._consume(vr.access_mode,"Expected access_mode.").toString()),this._consume(vr.tokens.greater_than,"Expected '>'."));const n=this._consume(vr.tokens.ident,"Expected variable name");let r=null;if(this._match(vr.tokens.colon)){const e=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=e)}return new Bn(n.toString(),r,e,t,null)}_override_decl(){if(!this._match(vr.keywords.override))return null;const e=this._consume(vr.tokens.ident,"Expected variable name");let t=null;if(this._match(vr.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}return new On(e.toString(),t,null)}_enable_directive(){const e=this._consume(vr.tokens.ident,"identity expected.");return new Gn(e.toString())}_type_alias(){const e=this._consume(vr.tokens.ident,"identity expected.");this._consume(vr.tokens.equal,"Expected '=' for type alias.");let t=this._type_decl();if(null===t)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);const n=new qn(e.toString(),t);return this._context.aliases.set(n.name,n),n}_type_decl(){if(this._check([vr.tokens.ident,...vr.texel_format,vr.keywords.bool,vr.keywords.f32,vr.keywords.i32,vr.keywords.u32])){const e=this._advance(),t=e.toString();return this._context.structs.has(t)?this._context.structs.get(t):this._context.aliases.has(t)?this._context.aliases.get(t).type:new Wn(e.toString())}let e=this._texture_sampler_types();if(e)return e;if(this._check(vr.template_types)){let e=this._advance().toString(),t=null,n=null;return this._match(vr.tokens.less_than)&&(t=this._type_decl(),n=null,this._match(vr.tokens.comma)&&(n=this._consume(vr.access_mode,"Expected access_mode for pointer").toString()),this._consume(vr.tokens.greater_than,"Expected '>' for type.")),new Zn(e,t,n)}if(this._match(vr.keywords.ptr)){let e=this._previous().toString();this._consume(vr.tokens.less_than,"Expected '<' for pointer.");const t=this._consume(vr.storage_class,"Expected storage_class for pointer");this._consume(vr.tokens.comma,"Expected ',' for pointer.");const n=this._type_decl();let r=null;return this._match(vr.tokens.comma)&&(r=this._consume(vr.access_mode,"Expected access_mode for pointer").toString()),this._consume(vr.tokens.greater_than,"Expected '>' for pointer."),new Hn(e,t.toString(),n,r)}const t=this._attribute();if(this._match(vr.keywords.array)){let e=null,n=-1;const r=this._previous();if(this._match(vr.tokens.less_than)){e=this._type_decl(),this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);let t="";this._match(vr.tokens.comma)&&(t=this._shift_expression().evaluate(this._context).toString()),this._consume(vr.tokens.greater_than,"Expected '>' for array."),n=t?parseInt(t):0}return new Kn(r.toString(),t,e,n)}return null}_texture_sampler_types(){if(this._match(vr.sampler_type))return new Qn(this._previous().toString(),null,null);if(this._match(vr.depth_texture_type))return new Qn(this._previous().toString(),null,null);if(this._match(vr.sampled_texture_type)||this._match(vr.multisampled_texture_type)){const e=this._previous();this._consume(vr.tokens.less_than,"Expected '<' for sampler type.");const t=this._type_decl();return this._consume(vr.tokens.greater_than,"Expected '>' for sampler type."),new Qn(e.toString(),t,null)}if(this._match(vr.storage_texture_type)){const e=this._previous();this._consume(vr.tokens.less_than,"Expected '<' for sampler type.");const t=this._consume(vr.texel_format,"Invalid texel format.").toString();this._consume(vr.tokens.comma,"Expected ',' after texel format.");const n=this._consume(vr.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(vr.tokens.greater_than,"Expected '>' for sampler type."),new Qn(e.toString(),t,n)}return null}_attribute(){let e=[];for(;this._match(vr.tokens.attr);){const t=this._consume(vr.attribute_name,"Expected attribute name"),n=new yr(t.toString(),null);if(this._match(vr.tokens.paren_left)){if(n.value=this._consume(vr.literal_or_ident,"Expected attribute value").toString(),this._check(vr.tokens.comma)){this._advance();do{const e=this._consume(vr.literal_or_ident,"Expected attribute value").toString();n.value instanceof Array||(n.value=[n.value]),n.value.push(e)}while(this._match(vr.tokens.comma))}this._consume(vr.tokens.paren_right,"Expected ')'")}e.push(n)}for(;this._match(vr.tokens.attr_left);){if(!this._check(vr.tokens.attr_right))do{const t=this._consume(vr.attribute_name,"Expected attribute name"),n=new yr(t.toString(),null);if(this._match(vr.tokens.paren_left)){if(n.value=[this._consume(vr.literal_or_ident,"Expected attribute value").toString()],this._check(vr.tokens.comma)){this._advance();do{const e=this._consume(vr.literal_or_ident,"Expected attribute value").toString();n.value.push(e)}while(this._match(vr.tokens.comma))}this._consume(vr.tokens.paren_right,"Expected ')'")}e.push(n)}while(this._match(vr.tokens.comma));this._consume(vr.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==e.length?null:e}}class Tr{constructor(e,t){this.name=e,this.attributes=t,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class Mr{constructor(e,t,n){this.name=e,this.type=t,this.attributes=n,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class Ir extends Tr{constructor(e,t){super(e,t),this.members=[],this.align=0}get isStruct(){return!0}}class Ar extends Tr{constructor(e,t){super(e,t),this.count=0,this.stride=0}get isArray(){return!0}}class Sr extends Tr{constructor(e,t,n,r){super(e,n),this.format=t,this.access=r}get isTemplate(){return!0}}!function(e){e[e.Uniform=0]="Uniform",e[e.Storage=1]="Storage",e[e.Texture=2]="Texture",e[e.Sampler=3]="Sampler",e[e.StorageTexture=4]="StorageTexture"}(vn||(vn={}));class Pr{constructor(e,t,n,r,i,s,o){this.name=e,this.type=t,this.group=n,this.binding=r,this.attributes=i,this.resourceType=s,this.access=o}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class Er{constructor(e,t){this.name=e,this.type=t}}class Br{constructor(e,t){this.align=e,this.size=t}}class Or{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r,this.interpolation=null}}class Ur{constructor(e,t,n,r){this.name=e,this.type=t,this.locationType=n,this.location=r}}class zr{constructor(e,t=null){this.stage=null,this.inputs=[],this.outputs=[],this.resources=[],this.name=e,this.stage=t}}class Rr{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class Dr{constructor(e,t,n,r){this.name=e,this.type=t,this.attributes=n,this.id=r}}class jr{constructor(e){this.resources=null,this.node=e}}class Nr{constructor(e){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new Rr,this._types=new Map,this._functions=new Map,e&&this.update(e)}_isStorageTexture(e){return"texture_storage_1d"==e.name||"texture_storage_2d"==e.name||"texture_storage_2d_array"==e.name||"texture_storage_3d"==e.name}update(e){const t=(new kr).parse(e);for(const e of t)e instanceof In&&this._functions.set(e.name,new jr(e));for(const e of t)if(e instanceof Xn){const t=this._getTypeInfo(e,null);t instanceof Ir&&this.structs.push(t)}else if(e instanceof qn)this.aliases.push(this._getAliasInfo(e));else if(e instanceof On){const t=e,n=this._getAttributeNum(t.attributes,"id",0),r=null!=t.type?this._getTypeInfo(t.type,t.attributes):null;this.overrides.push(new Dr(t.name,r,t.attributes,n))}else if(this._isUniformVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new Pr(t.name,i,n,r,t.attributes,vn.Uniform,t.access);this.uniforms.push(s)}else if(this._isStorageVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=this._isStorageTexture(i),o=new Pr(t.name,i,n,r,t.attributes,s?vn.StorageTexture:vn.Storage,t.access);this.storage.push(o)}else if(this._isTextureVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=this._isStorageTexture(i),o=new Pr(t.name,i,n,r,t.attributes,s?vn.StorageTexture:vn.Texture,t.access);s?this.storage.push(o):this.textures.push(o)}else if(this._isSamplerVar(e)){const t=e,n=this._getAttributeNum(t.attributes,"group",0),r=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),s=new Pr(t.name,i,n,r,t.attributes,vn.Sampler,t.access);this.samplers.push(s)}else if(e instanceof In){const t=this._getAttribute(e,"vertex"),n=this._getAttribute(e,"fragment"),r=this._getAttribute(e,"compute"),i=t||n||r;if(i){const t=new zr(e.name,null==i?void 0:i.name);t.inputs=this._getInputs(e.args),t.outputs=this._getOutputs(e.returnType),t.resources=this._findResources(e),this.entry[i.name].push(t)}}}_findResource(e){for(const t of this.uniforms)if(t.name==e)return t;for(const t of this.storage)if(t.name==e)return t;for(const t of this.textures)if(t.name==e)return t;for(const t of this.samplers)if(t.name==e)return t;return null}_findResources(e){const t=[],n=this,r=[];return e.search((e=>{if(e instanceof kn)r.push({});else if(e instanceof Tn)r.pop();else if(e instanceof Bn){if(r.length>0){const t=e;r[r.length-1][t.name]=t}}else if(e instanceof Un){if(r.length>0){const t=e;r[r.length-1][t.name]=t}}else if(e instanceof rr){const i=e;if(r.length>0&&r[r.length-1][i.name])return;const s=n._findResource(i.name);s&&t.push(s)}else if(e instanceof nr){const r=e,i=n._functions.get(r.name);i&&(null===i.resources&&(i.resources=n._findResources(i.node)),t.push(...i.resources))}})),[...new Map(t.map((e=>[e.name,e]))).values()]}getBindGroups(){const e=[];function t(t,n){t>=e.length&&(e.length=t+1),void 0===e[t]&&(e[t]=[]),n>=e[t].length&&(e[t].length=n+1)}for(const n of this.uniforms)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.storage)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.textures)t(n.group,n.binding),e[n.group][n.binding]=n;for(const n of this.samplers)t(n.group,n.binding),e[n.group][n.binding]=n;return e}_getOutputs(e,t=void 0){if(void 0===t&&(t=[]),e instanceof Xn)this._getStructOutputs(e,t);else{const n=this._getOutputInfo(e);null!==n&&t.push(n)}return t}_getStructOutputs(e,t){for(const n of e.members)if(n.type instanceof Xn)this._getStructOutputs(n.type,t);else{const e=this._getAttribute(n,"location")||this._getAttribute(n,"builtin");if(null!==e){const r=this._getTypeInfo(n.type,n.type.attributes),i=this._parseInt(e.value),s=new Ur(n.name,r,e.name,i);t.push(s)}}}_getOutputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getTypeInfo(e,e.attributes),r=this._parseInt(t.value);return new Ur("",n,t.name,r)}return null}_getInputs(e,t=void 0){void 0===t&&(t=[]);for(const n of e)if(n.type instanceof Xn)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}return t}_getStructInputs(e,t){for(const n of e.members)if(n.type instanceof Xn)this._getStructInputs(n.type,t);else{const e=this._getInputInfo(n);null!==e&&t.push(e)}}_getInputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const n=this._getAttribute(e,"interpolation"),r=this._getTypeInfo(e.type,e.attributes),i=this._parseInt(t.value),s=new Or(e.name,r,t.name,i);return null!==n&&(s.interpolation=this._parseString(n.value)),s}return null}_parseString(e){return e instanceof Array&&(e=e[0]),e}_parseInt(e){e instanceof Array&&(e=e[0]);const t=parseInt(e);return isNaN(t)?e:t}_getAlias(e){for(const t of this.aliases)if(t.name==e)return t.type;return null}_getAliasInfo(e){return new Er(e.name,this._getTypeInfo(e.type,null))}_getTypeInfo(e,t){if(this._types.has(e))return this._types.get(e);if(e instanceof Kn){const n=e,r=this._getTypeInfo(n.format,n.attributes),i=new Ar(n.name,t);return i.format=r,i.count=n.count,this._types.set(e,i),this._updateTypeInfo(i),i}if(e instanceof Xn){const n=e,r=new Ir(n.name,t);for(const e of n.members){const t=this._getTypeInfo(e.type,e.attributes);r.members.push(new Mr(e.name,t,e.attributes))}return this._types.set(e,r),this._updateTypeInfo(r),r}if(e instanceof Qn){const n=e,r=n.format instanceof Wn,i=n.format?r?this._getTypeInfo(n.format,null):new Tr(n.format,null):null,s=new Sr(n.name,i,t,n.access);return this._types.set(e,s),this._updateTypeInfo(s),s}if(e instanceof Zn){const n=e,r=n.format?this._getTypeInfo(n.format,null):null,i=new Sr(n.name,r,t,n.access);return this._types.set(e,i),this._updateTypeInfo(i),i}const n=new Tr(e.name,t);return this._types.set(e,n),this._updateTypeInfo(n),n}_updateTypeInfo(e){var t,n;const r=this._getTypeSize(e);if(e.size=null!==(t=null==r?void 0:r.size)&&void 0!==t?t:0,e instanceof Ar){const t=this._getTypeSize(e.format);e.stride=null!==(n=null==t?void 0:t.size)&&void 0!==n?n:0,this._updateTypeInfo(e.format)}e instanceof Ir&&this._updateStructInfo(e)}_updateStructInfo(e){var t;let n=0,r=0,i=0,s=0;for(let o=0,a=e.members.length;o<a;++o){const a=e.members[o],c=this._getTypeSize(a);if(!c)continue;null!==(t=this._getAlias(a.type.name))&&void 0!==t||a.type;const u=c.align,l=c.size;n=this._roundUp(u,n+r),r=l,i=n,s=Math.max(s,u),a.offset=n,a.size=l,this._updateTypeInfo(a.type)}e.size=this._roundUp(s,i+r),e.align=s}_getTypeSize(e){var t;if(null==e)return null;const n=this._getAttributeNum(e.attributes,"size",0),r=this._getAttributeNum(e.attributes,"align",0);if(e instanceof Mr&&(e=e.type),e instanceof Tr){const t=this._getAlias(e.name);null!==t&&(e=t)}{const t=Nr._typeInfo[e.name];if(void 0!==t){const i="f16"===e.format?2:1;return new Br(Math.max(r,t.align/i),Math.max(n,t.size/i))}}{const t=Nr._typeInfo[e.name.substring(0,e.name.length-1)];if(t){const i="h"===e.name[e.name.length-1]?2:1;return new Br(Math.max(r,t.align/i),Math.max(n,t.size/i))}}if(e instanceof Ar){let i=e,s=8,o=8;const a=this._getTypeSize(i.format);return null!==a&&(o=a.size,s=a.align),o=i.count*this._getAttributeNum(null!==(t=null==e?void 0:e.attributes)&&void 0!==t?t:null,"stride",this._roundUp(s,o)),n&&(o=n),new Br(Math.max(r,s),Math.max(n,o))}if(e instanceof Ir){let t=0,i=0,s=0,o=0,a=0;for(const n of e.members){const e=this._getTypeSize(n.type);null!==e&&(t=Math.max(e.align,t),s=this._roundUp(e.align,s+o),o=e.size,a=s)}return i=this._roundUp(t,a+o),new Br(Math.max(r,t),Math.max(n,i))}return null}_isUniformVar(e){return e instanceof Bn&&"uniform"==e.storage}_isStorageVar(e){return e instanceof Bn&&"storage"==e.storage}_isTextureVar(e){return e instanceof Bn&&null!==e.type&&-1!=Nr._textureTypes.indexOf(e.type.name)}_isSamplerVar(e){return e instanceof Bn&&null!==e.type&&-1!=Nr._samplerTypes.indexOf(e.type.name)}_getAttribute(e,t){const n=e;if(!n||!n.attributes)return null;const r=n.attributes;for(let e of r)if(e.name==t)return e;return null}_getAttributeNum(e,t,n){if(null===e)return n;for(let r of e)if(r.name==t){let e=null!==r&&null!==r.value?r.value:n;return e instanceof Array&&(e=e[0]),"number"==typeof e?e:"string"==typeof e?parseInt(e):n}return n}_roundUp(e,t){return Math.ceil(t/e)*e}}function Cr(e,t){const n=function(e){return Array.isArray(e)||hn(e)?[...e,1,1].slice(0,3):function(e){return[e.width,e.height||1,e.depthOrArrayLayers||1]}(e)}(e),r=Math.max(...n.slice(0,"3d"===t?3:2));return 1+Math.log2(r)|0}Nr._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},Nr._textureTypes=vr.any_texture_type.map((e=>e.name)),Nr._samplerTypes=vr.sampler_type.map((e=>e.name));const Vr=new WeakMap;const Lr=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function Gr(e){return hn(e)||Array.isArray(e)||function(e){const t=e;return hn(t.data)||Array.isArray(t.data)}(e)}function qr(e){switch(e){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Lr.entries()].map((([e,{formats:[t,n]}])=>[[t,e],[n,e]])).flat());const Fr={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},$r=/([a-z]+)(\d+)([a-z]+)/;function Yr(e){const[,t,n,r]=$r.exec(e),i=t.length,s=parseInt(n)/8;return{channels:t,numChannels:i,bytesPerChannel:s,bytesPerElement:i*s,Type:Fr[`${n}${r}`]}}function Wr(e,t,n,r={}){n.forEach(((n,i)=>{const s=[0,0,i+(r.baseArrayLayer||0)];if(Gr(n))!function(e,t,n,r){const i=function(e,t){if(hn(e))return e;const{Type:n}=Yr(t);return new n(e)}(n.data||n,t.format),s=function(e,t){return[e.width,e.height,e.depthOrArrayLayers].map((e=>Math.max(1,Math.floor(e/1))))}(t),{bytesPerElement:o}=Yr(t.format),a=r.origin||[0,0,0];e.queue.writeTexture({texture:t,origin:a},i,{bytesPerRow:o*s[0],rowsPerImage:s[1]},s)}(e,t,n,{origin:s});else{const i=n,{flipY:o,premultipliedAlpha:a,colorSpace:c}=r;e.queue.copyExternalImageToTexture({source:i,flipY:o},{texture:t,premultipliedAlpha:a,colorSpace:c,origin:s},Xr(i,r))}})),t.mipLevelCount>1&&function(e,t,n){let r=Vr.get(e);r||(r={pipelineByFormatAndView:{},moduleByViewType:{}},Vr.set(e,r));let{sampler:i,uniformBuffer:s,uniformValues:o}=r;const{pipelineByFormatAndView:a,moduleByViewType:c}=r;n=n||function(e){switch(e.dimension){case"1d":return"1d";case"3d":return"3d";default:return e.depthOrArrayLayers>1?"2d-array":"2d"}}(t);let u=c[n];if(!u){const t=function(e){let t,n;switch(e){case"2d":t="texture_2d<f32>",n="textureSample(ourTexture, ourSampler, fsInput.texcoord)";break;case"2d-array":t="texture_2d_array<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              fsInput.texcoord,\n              uni.layer)";break;case"cube":t="texture_cube<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1))";break;case"cube-array":t="texture_cube_array<f32>",n="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1), uni.layer)";break;default:throw new Error(`unsupported view: ${e}`)}return`\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        struct Uniforms {\n          layer: u32,\n        };\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: ${t};\n        @group(0) @binding(2) var<uniform> uni: Uniforms;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          _ = uni.layer; // make sure this is used so all pipelines have the same bindings\n          return ${n};\n        }\n      `}(n);u=e.createShaderModule({label:`mip level generation for ${n}`,code:t}),c[n]=u}i||(i=e.createSampler({minFilter:"linear",magFilter:"linear"}),s=e.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),o=new Uint32Array(1),Object.assign(r,{sampler:i,uniformBuffer:s,uniformValues:o}));const l=`${t.format}.${n}`;a[l]||(a[l]=e.createRenderPipeline({label:`mip level generator pipeline for ${n}`,layout:"auto",vertex:{module:u,entryPoint:"vs"},fragment:{module:u,entryPoint:"fs",targets:[{format:t.format}]}}));const h=a[l];for(let r=1;r<t.mipLevelCount;++r)for(let a=0;a<t.depthOrArrayLayers;++a){o[0]=a,e.queue.writeBuffer(s,0,o);const c=e.createBindGroup({layout:h.getBindGroupLayout(0),entries:[{binding:0,resource:i},{binding:1,resource:t.createView({dimension:n,baseMipLevel:r-1,mipLevelCount:1})},{binding:2,resource:{buffer:s}}]}),u={label:"mip gen renderPass",colorAttachments:[{view:t.createView({dimension:"2d",baseMipLevel:r,mipLevelCount:1,baseArrayLayer:a,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},l=e.createCommandEncoder({label:"mip gen encoder"}),d=l.beginRenderPass(u);d.setPipeline(h),d.setBindGroup(0,c),d.draw(3),d.end();const f=l.finish();e.queue.submit([f])}}(e,t)}function Xr(e,t){if(e instanceof HTMLVideoElement)return[e.videoWidth,e.videoHeight,1];{const n=e,{width:r,height:i}=n;if(r>0&&i>0&&!Gr(e))return[r,i,1];const s=t.format||"rgba8unorm",{bytesPerElement:o,bytesPerChannel:a}=Yr(s),c=hn(e)||Array.isArray(e)?e:e.data;return function(e,t,n,r="2d"){if(n%1!=0)throw new Error("can't guess dimensions");if(e||t){if(t){if(!e&&(e=n/t)%1)throw new Error("can't guess dimensions")}else if((t=n/e)%1)throw new Error("can't guess dimensions")}else{const i=Math.sqrt(n/("cube"===r?6:1));i%1==0?(e=i,t=i):(e=n,t=1)}const i=n/e/t;if(i%1)throw new Error("can't guess dimensions");return[e,t,i]}(r,i,(hn(c)?c.byteLength:c.length*a)/o)}}async function Zr(e,t,n={}){const r=await Promise.all(t.map((e=>async function(e,t={}){const n=await fetch(e),r=await n.blob(),i={...t,...void 0!==t.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(r,i)}(e))));return function(e,t,n={}){const r=Xr(t[0],n);r[2]=r[2]>1?r[2]:t.length;const i=e.createTexture({dimension:qr(n.dimension),format:n.format||"rgba8unorm",mipLevelCount:n.mipLevelCount?n.mipLevelCount:n.mips?Cr(r):1,size:r,usage:(n.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return Wr(e,i,t,n),i}(e,r,n)}const Hr={format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,dimension:"3d"},Kr=(e,t)=>Math.ceil(e/t)*t,Qr={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let Jr;const ei=new Uint8Array(16);function ti(){if(!Jr&&(Jr="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!Jr))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Jr(ei)}const ni=[];for(let e=0;e<256;++e)ni.push((e+256).toString(16).slice(1));const ri=function(e,t,n){if(Qr.randomUUID&&!t&&!e)return Qr.randomUUID();const r=(e=e||{}).random||(e.rng||ti)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=r[e];return t}return function(e,t=0){return ni[e[t+0]]+ni[e[t+1]]+ni[e[t+2]]+ni[e[t+3]]+"-"+ni[e[t+4]]+ni[e[t+5]]+"-"+ni[e[t+6]]+ni[e[t+7]]+"-"+ni[e[t+8]]+ni[e[t+9]]+"-"+ni[e[t+10]]+ni[e[t+11]]+ni[e[t+12]]+ni[e[t+13]]+ni[e[t+14]]+ni[e[t+15]]}(r)},ii=(e,t,n)=>{const r=Math.floor(t/32),i=t%32;return e[r]=((e,t,n)=>{let r=1<<t;return n?e|r:e&~r})(e[r],i,n),e};class si{id;name;transform;inverseTransform;previousTransform;previousInverseTransform;size;atlasLocation;atlasBrickMapOffset;worldSpaceCenter;constructor(e,t,n,r,i="unnamed"){this.id=ri(),this.name=i,this.transform=e,this.size=t,this.inverseTransform=ke.invert(this.transform),this.previousTransform=ke.clone(this.transform),this.previousInverseTransform=ke.clone(this.inverseTransform),this.atlasLocation=n,this.atlasBrickMapOffset=r;const s=ae.transformMat4(ae.create(),this.transform),o=ae.transformMat4(this.size,this.transform);this.worldSpaceCenter=ae.lerp(s,o,.5)}get objectSpaceCorners(){return[ae.create(0,0,0),ae.create(0,0,this.size[2]),ae.create(0,this.size[1],0),ae.create(0,this.size[1],this.size[2]),ae.create(this.size[0],0,0),ae.create(this.size[0],0,this.size[2]),ae.create(this.size[0],this.size[1],0),ae.create(this.size[0],this.size[1],this.size[2])]}getObjectSpaceBrickCorners(e){const t=ae.create(8,8,8),n=ae.multiply(e,t);return[ae.add(n,ae.create(0,0,0)),ae.add(n,ae.create(0,0,t[2])),ae.add(n,ae.create(0,t[1],0)),ae.add(n,ae.create(0,t[1],t[2])),ae.add(n,ae.create(t[0],0,0)),ae.add(n,ae.create(t[0],0,t[2])),ae.add(n,ae.create(t[0],t[1],0)),ae.add(n,ae.create(t[0],t[1],t[2]))]}get worldSpaceCorners(){return this.objectSpaceCorners.map((e=>ae.transformMat4(e,this.transform)))}getBrickWorldSpaceCorners(e){return this.getObjectSpaceBrickCorners(e).map((e=>ae.transformMat4(e,this.transform)))}get AABB(){let e=ae.create(1/0,1/0,1/0),t=ae.create(-1/0,-1/0,-1/0);for(const n of this.worldSpaceCorners)e=ae.min(e,n),t=ae.max(t,n);return{min:e,max:t}}getBrickAABB(e){const t=this.getBrickWorldSpaceCorners(e);let n=ae.create(1/0,1/0,1/0),r=ae.create(-1/0,-1/0,-1/0);for(const e of t)n=ae.min(n,e),r=ae.max(r,e);return{min:n,max:r}}get brickAABBs(){const e=vi.getVolumes()[this.name].brickMap;let t=[];return Object.entries(e).forEach((([e,n])=>{const r=(e=>{const[t,n,r]=e.split(",").map(Number);return ae.create(t,n,r)})(e);t.push(this.getBrickAABB(r))})),console.log({brickAABBs:t}),t}toArray(){return[...this.transform,...this.inverseTransform,...this.previousTransform,...this.previousInverseTransform,...this.size,0,...this.atlasLocation,0]}toDataView(){const e=this.toArray(),t=new ArrayBuffer(4*e.length+4),n=new DataView(t);for(let t=0;t<e.length;t++)n.setFloat32(4*t,e[t],!0);return n.setUint32(4*e.length,this.atlasBrickMapOffset,!0),n}}class oi{index;dataView;constructor(e){this.dataView=new DataView(e),this.index=0}readUint8(){const e=this.dataView.getUint8(this.index);return this.index++,e}readUint32(){const e=this.dataView.getUint32(this.index,!0);return this.index+=4,e}readFloat32(){const e=this.dataView.getFloat32(this.index,!0);return this.index+=4,e}skip(e){this.index+=e}}const ai=e=>0===e;let ci=[];const ui=["Keg"],li=e=>{const[t,n,r]=e,i=[0,0,0,1],s=[t,0,0,1],o=[0,n,0,1],a=[t,n,0,1],c=[0,0,r,1],u=[t,0,r,1],l=[0,n,r,1],h=[t,n,r,1];let d=[i,s,o,o,s,a].flat(),f=[c,l,u,u,l,h].flat(),m=[o,a,l,l,a,h].flat(),p=[i,c,s,s,c,u].flat(),g=[s,u,a,a,u,h].flat(),_=[i,o,c,c,o,l].flat();return new Float32Array([...d,...f,...m,...p,...g,..._])},hi=async()=>{const e=_i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),t=_i.createPipelineLayout({bindGroupLayouts:[e]}),n=li([1,1,1]).length,r=_i.createRenderPipeline({layout:t,vertex:{module:_i.createShaderModule({code:"\n        @binding(0) @group(0) var<uniform> modelViewProjectionMatrix : mat4x4f;\n        \n        struct VertexOutput {\n          @builtin(position) position : vec4f,\n        }\n        \n        @vertex\n        fn main(\n          @location(0) objectPos : vec4f,\n        ) -> VertexOutput {\n          var output : VertexOutput;\n          output.position =modelViewProjectionMatrix * objectPos;\n          return output;\n        }\n\n       "}),entryPoint:"main",buffers:[{arrayStride:16,attributes:[{shaderLocation:0,offset:0,format:"float32x4"}]}]},fragment:{module:_i.createShaderModule({code:"\n        @fragment\n        fn main() -> @location(0) vec4f {\n          return vec4(1.0);\n        }\n        "}),entryPoint:"main",targets:[{format:"rgba8unorm"}]},primitive:{topology:"line-list",cullMode:"back"}});return{render:({commandEncoder:t,outputTextures:i,transformationMatrixBuffer:s,volumeAtlas:o,viewProjectionMatricesBuffer:a,timestampWrites:c,bvhBuffer:u,lights:l})=>{let h=[];const d=_i.createBuffer({size:16*n*ci.length,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),f=_i.createBuffer({size:256*ci.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});for(let t=0;t<ci.length;t++){const r=li(ci[t].size),i=256*t;_i.queue.writeBuffer(d,16*t*n,r.buffer,r.byteOffset);const s=_i.createBindGroup({layout:e,entries:[{binding:0,resource:{buffer:f,offset:i}}]});h.push(s);const o=ci[t].transform,a=ke.mul(ke.scale(Ai.projectionMatrix,[-1,1,1]),Ai.viewMatrix),c=new Float32Array(ke.mul(a,o));_i.queue.writeBuffer(f,i,c.buffer,c.byteOffset,c.byteLength)}const m=t.beginRenderPass({colorAttachments:[{view:i.finalTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"load",storeOp:"store"}],timestampWrites:c});m.setPipeline(r);for(let e=0;e<ci.length;e++){const t=h[e];m.setBindGroup(0,t),m.setVertexBuffer(0,d,16*n*e,16*n),m.draw(n)}return m.end(),[t.finish()]},label:"outlines"}},di=e=>{let t=ae.create(1/0,1/0,1/0),n=ae.create(-1/0,-1/0,-1/0);for(const{AABB:r}of e)t=ae.min(r.min,t),n=ae.max(r.max,n);return{min:t,max:n}},fi=e=>{const t=di(e),n=(t.max[0]-t.min[0])*(t.max[1]-t.min[1])*(t.max[2]-t.min[2]);return e.length*n},mi=e=>{const[t,n,r]=e,i=[0,0,r,1],s=[t,0,r,1],o=[0,n,r,1],a=[0,0,0,1],c=[t,0,0,1],u=[0,n,0,1];let l=[i,s,o,[t,n,r,1]].flat(),h=[i,s,a,c].flat(),d=[i,o,a,u].flat();return new Float32Array([...l,...h,...d])},pi=async()=>{const e=_i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float",viewDimension:"3d"}},{binding:4,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:5,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:6,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"read-only-storage"}}]}),t=_i.createPipelineLayout({bindGroupLayouts:[e]}),n=_i.createRenderPipeline({layout:t,vertex:{module:_i.createShaderModule({code:`\n        ${a}\n        struct VoxelObject {\n  transform: mat4x4<f32>,\n  inverseTransform: mat4x4<f32>,\n  previousTransform: mat4x4<f32>,\n  previousInverseTransform: mat4x4<f32>,\n  size : vec3<f32>,\n  atlasLocation : vec3<f32>,\n  brickOffset : u32,\n}\n\n@binding(0) @group(0) var<uniform> modelViewProjectionMatrix : mat4x4f;\n@group(0) @binding(4) var<storage> voxelObject : VoxelObject;\n@binding(1) @group(0) var<uniform> modelMatrix : mat4x4f;\n\n\nstruct VertexOutput {\n  @builtin(position) position : vec4f,\n  @location(0) objectPos : vec3f,\n  @location(1) worldPos : vec3f,\n  @location(2) @interpolate(linear) ndc : vec3f,\n  @location(3) objectNormal : vec3f\n}\n\n// if vertex < 4 we are rendering an xy plane\n// if vertex < 8 we are rendering an xz plane\n// if vertex < 12 we are rendering an yz plane\n@vertex\nfn main(\n  @location(0) vertexPos : vec4f,\n  @builtin(instance_index) instanceIndex : u32,\n  @builtin(vertex_index) vertexIndex : u32\n) -> VertexOutput {\n  var output : VertexOutput;\n  var objectPos = vertexPos;\n  var objectNormal = vec3f(0.0, 0.0, 0.0);\n  if (vertexIndex < 4) {\n    objectPos.x *= voxelObject.size.x;\n    objectPos.y *= voxelObject.size.y;\n    objectPos.z += f32(instanceIndex) - 1;\n    objectNormal = vec3f(0.0, 0.0, 1.0);\n  } else if (vertexIndex < 8) {\n    objectPos.x *= voxelObject.size.x;\n    objectPos.z *= voxelObject.size.z;\n    objectPos.y += f32(instanceIndex);\n    objectNormal = vec3f(0.0, -1.0, 0.0);\n  } else {\n    objectPos.y *= voxelObject.size.y;\n    objectPos.z *= voxelObject.size.z;\n    objectPos.x += f32(instanceIndex);\n    objectNormal = vec3f(1.0, 0.0, 0.0);\n  }\n\n  var clipPosition = modelViewProjectionMatrix * objectPos;\n  output.position = clipPosition;\n  output.worldPos = (modelMatrix * objectPos).xyz;\n  output.objectPos = objectPos.xyz;\n  output.ndc = clipPosition.xyz / clipPosition.w;\n  output.ndc.y = -output.ndc.y;\n  output.objectNormal = objectNormal;\n//  output.objectNormal = (vec4<f32>(objectNormal, 0.0) * voxelObject.inverseTransform).xyz;\n  return output;\n}\n`}),entryPoint:"main",buffers:[{arrayStride:16,attributes:[{shaderLocation:0,offset:0,format:"float32x4"}]}]},fragment:{module:_i.createShaderModule({code:`\n        @group(0) @binding(6) var<storage> brickBuffer: array<Brick>;\n        ${a}\n        ${s}\n        ${o}\n        struct ViewProjectionMatrices {\n  viewProjection : mat4x4<f32>,\n  previousViewProjection : mat4x4<f32>,\n  inverseViewProjection : mat4x4<f32>,\n  projection : mat4x4<f32>,\n  inverseProjection: mat4x4<f32>\n};\n\n@group(0) @binding(2) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(3) var voxels : texture_3d<f32>;\n@group(0) @binding(4) var<storage> voxelObject : VoxelObject;\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(6) var depthStore : texture_storage_2d<r32float, write>;\n\nstruct GBufferOutput {\n  @location(0) albedo : vec4f,\n  @location(1) normal : vec4f,\n  @location(2) worldPosition : vec4f,\n  @location(3) velocity : vec4f,\n  @builtin(frag_depth) depth : f32,\n}\n\nfn normaliseValue(min: f32, max: f32, value: f32) -> f32 {\n  return (value - min) / (max - min);\n}\n\n@fragment\nfn main(\n  @location(0) objectPos : vec3f,\n  @builtin(front_facing) frontFacing : bool,\n  @location(3) unsignedObjectNormal : vec3f\n) -> GBufferOutput\n {\n   var output : GBufferOutput;\n   var objectNormal = unsignedObjectNormal;\n    if(!frontFacing) {\n      objectNormal = -objectNormal;\n    }\n\n   let voxelId = vec3<u32>(floor(objectPos + voxelObject.atlasLocation));\n   let voxel = textureLoad(voxels, voxelId, 0);\n   if(voxel.a == 0.0) {\n     discard;\n   }\n\n   let worldPos = (voxelObject.transform * vec4(objectPos,1)).xyz;\n   let near = 0.1;\n   let far = 10000.0;\n   let linearDepth = normaliseValue(near, far, distance(cameraPosition, worldPos));\n   output.albedo = voxel;\n   output.albedo = vec4(abs(objectNormal), voxel.a);\n   output.normal = vec4(0.0, 0.0, 1.0, 1.0);\n   output.worldPosition = vec4(worldPos, 1.0);\n   output.depth = linearDepth;\n   return output;\n}\n        `}),entryPoint:"main",targets:[{format:"rgba8unorm"},{format:"rgba16float"},{format:"rgba32float"},{format:"rgba16float"}]},primitive:{topology:"triangle-strip",cullMode:"none"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth32float"}});return{render:({commandEncoder:t,outputTextures:r,transformationMatrixBuffer:i,volumeAtlas:s,viewProjectionMatricesBuffer:o,timestampWrites:a,cameraPositionBuffer:c})=>{const u=ci,l=[{view:r.albedoTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:r.normalTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:r.worldPositionTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:r.velocityTexture.createView(),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],h={view:r.depthTexture.createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"},d=u.reduce(((e,t)=>e+mi(t.size).byteLength),0),f=_i.createBuffer({size:d,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST}),m=_i.createBuffer({size:256*u.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),p=_i.createBuffer({size:256*u.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),g=_i.createBuffer({size:512*u.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});let _=[];const y=new Float32Array(mi(ae.create(1,1,1)));_i.queue.writeBuffer(f,0,y.buffer,y.byteOffset,y.byteLength);for(let t=0;t<u.length;t++){const n=_i.createBindGroup({layout:e,entries:[{binding:0,resource:{buffer:m,offset:256*t}},{binding:1,resource:{buffer:p,offset:256*t}},{binding:2,resource:{buffer:o}},{binding:3,resource:s.getAtlasTextureView()},{binding:4,resource:{buffer:g,offset:512*t}},{binding:5,resource:{buffer:c}},{binding:6,resource:{buffer:s.getBrickMapBuffer()}}]});_.push(n);const r=u[t],i=ke.mul(ke.scale(Ai.projectionMatrix,[-1,1,1]),Ai.viewMatrix),a=new Float32Array(ke.mul(i,r.transform));_i.queue.writeBuffer(m,256*t,a.buffer,a.byteOffset,a.byteLength);const l=new Float32Array(r.transform);_i.queue.writeBuffer(p,256*t,l.buffer,l.byteOffset,l.byteLength);const h=new Float32Array(r.toArray());_i.queue.writeBuffer(g,512*t,h.buffer,h.byteOffset,h.byteLength)}const x=t.beginRenderPass({colorAttachments:l,depthStencilAttachment:h,timestampWrites:a});x.setPipeline(n);for(let e=0;e<u.length;e++){const t=_[e];x.setVertexBuffer(0,f,0),x.setBindGroup(0,t),x.draw(4,u[e].size[2]+1,0,0),x.draw(4,u[e].size[1]+1,4,0),x.draw(4,u[e].size[0]+1,8,0)}return x.end(),t.copyTextureToTexture({texture:r.albedoTexture},{texture:r.finalTexture},{width:r.finalTexture.width,height:r.finalTexture.height,depthOrArrayLayers:1}),[t.finish()]},label:"lattice"}},gi=new class{maxObjectCount;objectCount;scale;targetScale;translateX;targetTranslateX;rotateY;targetRotateY;sunRotateY;targetSunRotateY;constructor(){this.maxObjectCount=222,this.objectCount=222,this.scale=1,this.translateX=0,this.targetScale=1,this.targetTranslateX=0,this.rotateY=0,this.targetRotateY=0,this.sunRotateY=2.6,this.targetSunRotateY=2.6}update(){nn((e=>{const t=this.targetScale-this.scale;this.scale=this.scale+t*e}),{easing:an({velocity:2e-4*Ti})}),nn((e=>{const t=this.targetTranslateX-this.translateX;this.translateX=this.translateX+t*e}),{easing:an({velocity:2e-4*Ti})}),nn((e=>{const t=this.targetRotateY-this.rotateY;this.rotateY=this.rotateY+t*e}),{easing:an({velocity:2e-4*Ti})}),nn((e=>{const t=this.targetSunRotateY-this.sunRotateY;this.sunRotateY=this.sunRotateY+t*e}),{easing:an({velocity:2e-4*Ti})})}};let _i,yi,xi,vi,bi=D.create(4,4),wi=0,ki=wi,Ti=0,Mi=0;const Ii=Math.PI/180*90;let Ai=new class extends cn{fieldOfView;near=.5;far=1e4;constructor(e){super({position:e.position,rotation:Xe.fromMat(ke.lookAt(ae.create(),e.direction,ae.create(0,1,0)))}),this.fieldOfView=e.fieldOfView}get direction(){return ae.transformQuat(ae.create(0,0,1),this.rotation)}get right(){return ae.transformQuat(ae.create(1,0,0),this.rotation)}get left(){return ae.transformQuat(ae.create(-1,0,0),this.rotation)}get up(){return ae.transformQuat(ae.create(0,1,0),this.rotation)}get down(){return ae.transformQuat(ae.create(0,-1,0),this.rotation)}get viewMatrix(){const e=this.position;return ke.lookAt(e,ae.add(e,this.direction),this.up)}get inverseViewMatrix(){return ke.invert(this.viewMatrix)}get projectionMatrix(){return ke.perspective(this.fieldOfView,bi[0]/bi[1],this.near,this.far)}get inverseProjectionMatrix(){return ke.invert(this.projectionMatrix)}get viewProjectionMatrix(){return ke.mul(this.projectionMatrix,this.viewMatrix)}get inverseViewProjectionMatrix(){return ke.invert(this.viewProjectionMatrix)}}({fieldOfView:Ii,position:ae.create(-31,6,-50),direction:ae.create(0,0,-.5)});const Si=new class{logElement;isMouseDown=!1;constructor(){document.getElementById("reset").addEventListener("click",(e=>{window.dispatchEvent(new CustomEvent("resetcamera")),document.getElementById("captures").innerHTML=""})),document.getElementById("capture").addEventListener("click",(e=>{const t=new Image;t.id=performance.now().toString(),t.src=xi.toDataURL(),document.getElementById("captures").appendChild(t).addEventListener("click",(e=>{e.target,console.log(e.target)}))})),document.addEventListener("wheel",(e=>{Ai.fieldOfView+=.001*e.deltaY,Ai.fieldOfView=Math.max(Math.min(Ai.fieldOfView,2),.1)})),["fov","scale","translate","sun"].forEach((e=>{document.getElementById(e).addEventListener("input",(t=>{const n=t.target;window.dispatchEvent(new CustomEvent(`change${e}`,{detail:n.value}))}))})),this.logElement=document.getElementById("log"),window.addEventListener("changefov",(e=>{Ai.fieldOfView=parseFloat(e.detail)})),window.addEventListener("changetranslate",(e=>{gi.targetTranslateX=.01*parseFloat(e.detail)})),window.addEventListener("changesun",(e=>{gi.targetSunRotateY=parseFloat(e.detail)})),window.addEventListener("changescale",(e=>{gi.targetScale=parseFloat(e.detail)})),window.addEventListener("resetcamera",(()=>{gi.targetTranslateX=0,gi.targetScale=1,gi.targetRotateY=0})),document.getElementById("webgpu-canvas").addEventListener("mousedown",(()=>{this.isMouseDown=!0})),document.getElementById("webgpu-canvas").addEventListener("mouseup",(()=>{this.isMouseDown=!1})),document.getElementById("webgpu-canvas").addEventListener("mouseleave",(()=>{this.isMouseDown=!1})),window.addEventListener("mousemove",(e=>{this.isMouseDown&&(gi.targetRotateY-=.005*e.movementX)}))}log(e){this.logElement.innerHTML=e}},Pi=(()=>{let e={};const t=t=>{const n=e[t];return n?n.reduce(((e,t)=>e+t))/n.length:0};return{addSample:(t,n)=>{e[t]||(e[t]=[]),e[t].push(n)>50&&e[t].shift()},clearEntry:t=>{e[t]&&(e[t]=[0])},toString:()=>Object.keys(e).map((e=>`${e}: ${t(e).toFixed(2)}ms`)).join("\n"),toHTML:()=>Object.keys(e).map((e=>`<div class="debug-row">\n                    <div>\n                        ${e}\n                    </div>\n                   <div>${t(e).toFixed(2)}ms</div>\n                </div>`)).join("\n")}})();let Ei,Bi,Oi;Pi.addSample("frame time",0);let Ui=[[-16.468910217285156,2.6069962978363037,-44.74098205566406],[-12.986907958984375,2.6069962978363037,-44.74098205566406],[-12.131904602050781,3.019996166229248,-37.079986572265625],[-16.572906494140625,3.019996166229248,-37.079986572265625],[-6.14190673828125,3.019996166229248,-37.769989013671875],[-3.7419052124023438,4.989995956420898,-42.18998718261719],[-8.631904602050781,4.989995956420898,-27.739990234375],[-8.631904602050781,13.000996589660645,-39.90599060058594],[-14.261909484863281,13.000996589660645,-39.459991455078125],[-24.241905212402344,13.000996589660645,-39.459991455078125],[-26.64190673828125,13.000996589660645,-41.90998840332031],[-26.367904663085938,13.000996589660645,-47.74998474121094],[-34.231903076171875,13.995996475219727,-51.449981689453125],[-35.911903381347656,13.995996475219727,-51.699981689453125],[-43.89190673828125,13.995996475219727,-51.699981689453125],[-50.5819091796875,14.959996223449707,-32.77998352050781],[-42.77190399169922,12.995996475219727,-26.5479736328125],[-39.40190887451172,12.995996475219727,-26.5479736328125],[-35.27190399169922,12.995996475219727,-26.5479736328125],[-28.65190887451172,12.995996475219727,-25.0999755859375],[-24.13190460205078,14.989995956420898,-27.79998779296875],[-27.814903259277344,4.985996246337891,-12.99298095703125],[-27.814903259277344,4.985996246337891,-5.8699951171875],[-33.27190399169922,4.985996246337891,-3.629974365234375],[-42.121910095214844,4.985996246337891,-3.629974365234375],[-50.361907958984375,4.985996246337891,-12.3699951171875],[-50.361907958984375,4.985996246337891,-21.29998779296875],[-50.361907958984375,4.985996246337891,-29.42999267578125],[-35.84690856933594,3.9849960803985596,-51.3289794921875],[-34.194908142089844,3.9849960803985596,-51.58198547363281],[-29.941909790039062,4.9919962882995605,-50.47398376464844],[-23.481903076171875,4.9919962882995605,-50.47398376464844],[-5.621910095214844,4.9919962882995605,-50.47398376464844],[-26.703903198242188,23.975996017456055,-9.089996337890625]].map(((e,t)=>({position:[e[0],e[1]+1,e[2]],size:3,color:[1,.8,.4]})));const zi=(e,s)=>{let o,a,c,u,l,h,d,f,m,p,g,_,y,x,v=ke.create(),b=ke.create();xi=document.getElementById("webgpu-canvas"),xi.style.imageRendering="pixelated",yi=xi.getContext("webgpu"),yi.configure({device:e,format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT}),e.features.has("timestamp-query")&&(y=e.createQuerySet({type:"timestamp",count:2*s.length}),x=e.createBuffer({size:8*y.count,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}));let w=((e,t)=>{let n=[];const r=t.map(((e,t)=>e.brickAABBs.map(((e,n)=>({AABB:e,objectIndex:t,brickIndex:n}))))).flat();console.log({voxelObjects:t,allBricks:r});let i=0;const s=(e,r)=>{if(console.time(`build ${e.length} objects at ${r}`),0===t.length)return;const o=di(e);if(1===e.length)return n[r]={leftChildIndex:e[0].objectIndex,rightChildIndex:e[0].brickIndex,objectCount:e.length,AABBMax:o.max,AABBMin:o.min},void console.timeEnd(`build ${e.length} objects at ${r}`);let a=-1,c=-1;const{left:u,right:l}=(e=>{let t=1/0,n=-1;const r=Math.floor(e.length/2);console.time(`split ${e.length} objects`);for(let i=1;i<e.length;i++){const s=e.slice(0,i),o=e.slice(i),a=fi(s)+fi(o),c=Math.abs(i-r),u=1e3*c,l=1*a;console.debug({sahCost:a,balanceFactor:c,weightedBalanceFactor:u,weightedSAHCost:l});const h=u+l;h<t&&(t=h,n=i)}const i=e.slice(0,n),s=e.slice(n);return console.timeEnd(`split ${e.length} objects`),{left:i,right:s}})(e);u.length>0&&(a=++i,s(u,a)),l.length>0&&(c=++i,s(l,c)),n[r]={leftChildIndex:a,rightChildIndex:c,objectCount:e.length,AABBMax:o.max,AABBMin:o.min},console.timeEnd(`build ${e.length} objects at ${r}`)},o=performance.now();s(r,0);const a=performance.now();return Pi.addSample("create bvh",a-o),console.log({nodes:n}),((e,t)=>{const r=16*Math.ceil(2.75),i=e.createBuffer({size:t*r,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1});return n.forEach(((t,n)=>{const s=n*r,o=new ArrayBuffer(r),a=new DataView(o);a.setInt32(0,t.leftChildIndex,!0),a.setInt32(4,t.rightChildIndex,!0),a.setUint32(8,t.objectCount,!0),a.setFloat32(16,t.AABBMin[0],!0),a.setFloat32(20,t.AABBMin[1],!0),a.setFloat32(24,t.AABBMin[2],!0),a.setFloat32(32,t.AABBMax[0],!0),a.setFloat32(36,t.AABBMax[1],!0),a.setFloat32(40,t.AABBMax[2],!0),e.queue.writeBuffer(i,s,o,0,r)})),i})(e,n.length)})(e,ci);const k=()=>{u&&(u=null),o&&(o=null),a&&(a=null),l&&(l=null),c&&(c=null),d&&(d=null);const{clientWidth:e,clientHeight:t}=xi.parentElement,n=D.create(1*e,1*t);bi=D.mulScalar(n,1),xi.width=n[0],xi.height=n[1],xi.style.transform="scale(1)"};(async()=>{h||(h=await async function(e,t,n={}){return Zr(e,[t],n)}(e,"blue-noise-rg.png",{usage:GPUTextureUsage.COPY_SRC}))})(),setInterval((()=>{Si.log(Pi.toHTML())}),500);const T=k=>{0===wi&&(wi=k);const M=k-wi;if(Ti=M-ki,Pi.addSample("frame time",Ti),ki=M,Mi++,(()=>{const t=[...Ai.viewProjectionMatrix,...b,...Ai.inverseViewProjectionMatrix,...v,...Ai.projectionMatrix,...Ai.inverseProjectionMatrix];g?r(g,t):g=i(e,t)})(),(()=>{const t=ci;document.getElementById("objectcount").innerHTML=`Objects: ${t.length} / ${ci.length} in view`;const n=t.map((e=>e.toDataView())),r=n.reduce(((e,t)=>e+t.byteLength),0);p||(p=e.createBuffer({size:r,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1})),n.forEach(((t,n)=>{e.queue.writeBuffer(p,0,t.buffer,0,t.byteLength)}))})(),!p||!h)return void(Oi=requestAnimationFrame(T));(()=>{const e=.005*Ti,t=.04*Ti;let n=ae.zero();un.pressed.a&&(n=ae.add(n,Ai.left)),un.pressed.d&&(n=ae.add(n,Ai.right)),un.pressed.w&&(n=ae.add(n,Ai.direction)),un.pressed.s&&(n=ae.subtract(n,Ai.direction)),un.pressed.e&&(Ai.targetRotation=Xe.rotateY(Ai.targetRotation,e)),un.pressed.q&&(Ai.targetRotation=Xe.rotateY(Ai.targetRotation,-e)),un.pressed[" "]&&(n=ae.add(n,Ai.up)),un.pressed.shift&&(n=ae.add(n,Ai.down)),n=ae.normalize(n),Ai.targetPosition=ae.add(Ai.targetPosition,ae.mulScalar(n,t))})(),Ai.update(),gi.update();const I=ke.getTranslation(Ai.inverseViewMatrix);document.getElementById("resolution").innerHTML=bi.join(" x "),f||(f=n([Mi,0,0])),e.queue.writeBuffer(f,4,new Float32Array([Ti])),e.queue.writeBuffer(f,0,new Uint32Array([Mi])),e.queue.writeBuffer(f,8,new Float32Array([ki/1e3])),m?t(m,[bi[0],bi[1]]):m=n([bi[0],bi[1]]),(()=>{const e=ke.identity();ke.rotateY(e,gi.sunRotateY,e);const t=ae.normalize(ae.transformMat4(ae.create(0,.5,-1),e));_?r(_,[t[0],t[1],t[2]]):_=n([t[0],t[1],t[2]])})();const A=i(e,I,"camera position");a||(a=e.createTexture({size:[bi[0],bi[1],1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC})),o||(o=e.createTexture({size:[bi[0],bi[1],1],format:"rgba16float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT})),u||(u=e.createTexture({size:[bi[0],bi[1],1],format:"depth32float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC})),l||(l=e.createTexture({size:[bi[0],bi[1],1],format:"rgba16float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT})),c||(c=e.createTexture({size:[bi[0],bi[1],1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT})),d||(d=e.createTexture({size:[bi[0],bi[1],1],format:"rgba32float",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT}));let S=[];Ei=vi.getAtlasTextureView(),Ei?(s.forEach(((t,n)=>{const{render:r,label:i}=t;if(!1===document.getElementById(`flag-${i}`)?.checked)return;const s=e.createCommandEncoder();let v;e.features.has("timestamp-query")&&s.clearBuffer(x),e.features.has("timestamp-query")&&(v={querySet:y,beginningOfPassWriteIndex:2*n,endOfPassWriteIndex:2*n+1}),r({commandEncoder:s,resolutionBuffer:m,timeBuffer:f,outputTextures:{finalTexture:c,albedoTexture:a,normalTexture:o,depthTexture:u,skyTexture:Bi,velocityTexture:l,worldPositionTexture:d},cameraPositionBuffer:A,volumeAtlas:vi,transformationMatrixBuffer:p,viewProjectionMatricesBuffer:g,timestampWrites:v,sunDirectionBuffer:_,blueNoiseTexture:h,bvhBuffer:w,lights:Ui}).forEach((e=>{S.push(e)}))})),e.features.has("timestamp-query")&&(t=>{const n=e.createCommandEncoder();n.resolveQuerySet(y,0,y.count,x,0),t.push(n.finish());const r=x.size,i=e.createBuffer({size:r,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),o=e.createCommandEncoder();o.copyBufferToBuffer(x,0,i,0,r);const a=o.finish();e.queue.submit([a]),i.mapAsync(GPUMapMode.READ).then((()=>i.getMappedRange())).then((e=>{const t=new BigInt64Array(e),n=[];t.forEach((e=>{n.push(Number(e)/1e6)})),n.reduce(((e,t,r)=>(r%2==0&&e.push(n[r+1]-t),e)),[]).forEach(((e,t)=>{const n=s[t].label,r=`flag-${n}`,i=document.getElementById(r)?.checked;n&&i?Pi.addSample(n,e):Pi.clearEntry(n)}))}))})(S),e.queue.submit(S),Oi=requestAnimationFrame(T),v=Ai.inverseViewProjectionMatrix,b=Ai.viewProjectionMatrix):Oi=requestAnimationFrame(T)};k(),window.onresize=k,Oi=requestAnimationFrame(T)};(async()=>{if(!navigator.gpu)return void console.error("WebGPU not supported");const e=await navigator.gpu.requestAdapter();if(!_i)try{_i=await e.requestDevice({requiredFeatures:["timestamp-query"],requiredLimits:{maxColorAttachmentBytesPerSample:64}})}catch(t){_i=await e.requestDevice()}console.debug(_i.limits),Bi=_i.createTexture({dimension:"2d",size:[768,768,6],format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING}),vi=await(async e=>{let t={};const n=e.createCommandEncoder();let r=e.createTexture({size:{width:8,height:8,depthOrArrayLayers:8},...Hr,label:"Volume atlas containing ",mipLevelCount:1});e.queue.submit([n.finish()]),await e.queue.onSubmittedWorkDone();let i=await(async(e,t)=>{const n=Math.ceil(t.width/8)*Math.ceil(t.height/8)*Math.ceil(t.depthOrArrayLayers/8),r=e.createBuffer({size:64*n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE});console.log({SIZE:64*n});const i=e.createBindGroupLayout({entries:[{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:2,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}}]}),s=e.createComputePipeline({layout:e.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:e.createShaderModule({code:"/* 8x8x8 bits\n  vec4 for packing, 64 bytes in total\n*/\nstruct Brick {\n  voxels: array<u32, 16>\n}\n\n@group(0) @binding(0) var<storage, read_write> voxelBuffer: array<vec4<u32>>;\n@group(0) @binding(1) var<storage, read_write> brickMapBuffer: array<Brick>;\n@group(0) @binding(2) var voxels : texture_3d<f32>;\n\n\n// Size in each dimension, 8x8x8\nconst BRICK_SIZE = 8;\n\nfn convert1DTo3D(size: vec3<u32>, index: u32) -> vec3<u32> {\n  return vec3(\n    index % size.x,\n    index / size.y,\n    index / (size.x * size.y)\n  );\n}\n\nfn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\n  return position.x + position.y * size.x + position.z * (size.x * size.y);\n}\n\n// sets bit in a 32-bit integer\nfn setBit(value: ptr<function, u32>, bitIndex: u32, bit: bool){\n  let mask = 1u << bitIndex;\n  if(bit) {\n    *value = *value | mask;\n  } else {\n    *value = *value & ~mask;\n  }\n}\n\n\n\n// sets bit in 512bit bitmask in a brick\n// bitIndex is the index of the bit in the bitmask, 0-511\nfn setBitInBrick(brick: ptr<function, Brick>, bitIndex: u32, bit: bool) {\n  let maskIndex = bitIndex / 32;\n  let bitIndexInMask = bitIndex % 32;\n  setBit(&brick.voxels[maskIndex], bitIndexInMask, bit);\n}\n\nfn getBit(value: u32, bitIndex: u32) -> bool {\n  return (value & (1u << bitIndex)) != 0;\n}\n\n// gets bit in 512bit bitmask in a brick\n// bitIndex is the index of the bit in the bitmask, 0-511\nfn getBitInBrick(brick: Brick, bitIndex: u32) -> bool {\n  let maskIndex = bitIndex / 32;\n  let bitIndexInMask = bitIndex % 32;\n  return getBit(brick.voxels[maskIndex], bitIndexInMask);\n}\n\n@compute @workgroup_size(64, 1, 1)\n fn main(\n   @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n ) {\n    let index = GlobalInvocationID.x;\n    let voxel = voxelBuffer[index];\n    let position = voxel.xyz;\n    let brickIndex = convert3DTo1D(textureDimensions(voxels).xyz / BRICK_SIZE, position / BRICK_SIZE);\n    let brick = brickMapBuffer[brickIndex];\n\n    // TODO: set bits in brick\n    var newBrick = Brick();\n    var filled4Bytes = pack4xU8(vec4<u32>(255));\n    var fullBrickBitMask = array<u32, 16>(\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n      filled4Bytes,\n    );\n    newBrick.voxels = fullBrickBitMask;\n    brickMapBuffer[brickIndex] = newBrick;\n }\n\n@compute @workgroup_size(64,1,1)\nfn texture(\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n) {\n  let brickIndex = GlobalInvocationID.x;\n  let brickPosition = convert1DTo3D(textureDimensions(voxels) / BRICK_SIZE, brickIndex);\n  var newBrick = Brick();\n\n  for(var x = 0u; x < BRICK_SIZE; x++) {\n    for(var y = 0u; y < BRICK_SIZE; y++) {\n      for(var z = 0u; z < BRICK_SIZE; z++) {\n        let positionInBrick = vec3<u32>(x, y, z);\n        let position = brickPosition * BRICK_SIZE + positionInBrick;\n        let isVoxelFilled = textureLoad(voxels, position, 0).a > 0.0;\n        if(isVoxelFilled) {\n          let bitIndex = convert3DTo1D(vec3<u32>(BRICK_SIZE), positionInBrick);\n          setBitInBrick(&newBrick, bitIndex, true);\n        }\n      }\n    }\n  }\n  if(brickPosition.x == 0) {\n    newBrick.voxels[0] = pack4xU8(vec4<u32>(255));\n  }\n  brickMapBuffer[brickIndex] = newBrick;\n}\n"}),entryPoint:"texture"}}),o=e.createBindGroup({layout:i,entries:[{binding:1,resource:{buffer:r}},{binding:2,resource:t.createView()}]}),a=e.createCommandEncoder(),c=a.beginComputePass();return c.setPipeline(s),c.setBindGroup(0,o),c.dispatchWorkgroups(Math.ceil(n/64)),c.end(),e.queue.submit([a.finish()]),await e.queue.onSubmittedWorkDone(),r})(e,r);return{getVolumes:()=>t,addVolume:async(n,s,o,a)=>{if(t[a])throw new Error(`Error adding volume to atlas: volume with label ${a} already exists`);const{width:c,height:u,depthOrArrayLayers:l}=s,h=Kr(c,8),d=Kr(u,8),f=Kr(l,8);console.debug(`Adding ${a} to atlas`,{width:c,height:u,depthOrArrayLayers:l});const m=r.width+h;if(m>e.limits.maxTextureDimension3D)throw new Error(`Error adding volume to atlas: adding volume would exceed device max texture dimension of ${e.limits.maxTextureDimension3D}`);const p=Math.max(r.height,d),g=Math.max(r.depthOrArrayLayers,f),_=Math.max(s.mipLevelCount,r.mipLevelCount);console.debug(`Expanding atlas texture to [${m}, ${p}, ${g}], mip levels: ${_}`);const y=e.createTexture({size:{width:m,height:p,depthOrArrayLayers:g},mipLevelCount:_,...Hr,label:`${r.label}, ${s.label||"unnamed volume"}`}),x=r.width;n.copyTextureToTexture({texture:r},{texture:y},{width:r.width,height:r.height,depthOrArrayLayers:r.depthOrArrayLayers}),n.copyTextureToTexture({texture:s},{texture:y,origin:{x,y:0,z:0}},{width:c,height:u,depthOrArrayLayers:l});const v=i.size/64;r=y,t[a]={location:[x,0,0],size:[c,u,l],brickMapOffset:v,brickMap:o};const b=Object.values(o),w=new Uint32Array(b.reduce(((e,t)=>e+t.length),0));b.forEach(((e,t)=>{w.set(e,t)}));const k=e.createBuffer({size:i.size+w.buffer.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});n.copyBufferToBuffer(i,0,k,0,i.size),e.queue.writeBuffer(k,0,w,v),i=k,e.queue.submit([n.finish()]),await e.queue.onSubmittedWorkDone()},getVolume:e=>t[e],removeVolume:async n=>{if(!t[n])throw new Error(`Error removing volume from atlas: volume with label ${n} does not exist`);if(!r)throw new Error("Error removing from atlas: No atlas texture to remove volume from");const{location:i,size:s}=t[n],o=ae.add(i,s),a=ae.subtract(o,i);if(a[0]>r.width||a[1]>r.height||a[2]>r.depthOrArrayLayers)throw new Error(`Error removing from atlas: volume to remove (${a}) is larger than atlas texture (${r.width}, ${r.height}, ${r.depthOrArrayLayers})`);const c=e.createCommandEncoder(),u=c.beginComputePass(),l=e.createComputePipeline({layout:"auto",compute:{module:e.createShaderModule({code:"\n                @group(0) @binding(0) var texture : texture_storage_3d<rgba8unorm, write>;\n                override startX: u32 = 0;\n                override startY: u32 = 0;\n                override startZ: u32 = 0;\n                @compute @workgroup_size(1, 1, 1)\n                fn main(\n                  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n                ) {\n                  textureStore(texture, GlobalInvocationID + vec3(startX, startY, startZ), vec4(0.0));\n                }\n            "}),entryPoint:"main",constants:{startX:i[0],startY:i[1],startZ:i[2]}}});u.setPipeline(l),u.setBindGroup(0,e.createBindGroup({layout:l.getBindGroupLayout(0),entries:[{binding:0,resource:r.createView()}]})),u.dispatchWorkgroups(a[0],a[1],a[2]),u.end(),e.queue.submit([c.finish()]),await e.queue.onSubmittedWorkDone()},getAtlasTextureView:()=>{if(!r)return null;const e=r.createView();return e.label=r.label,e},getBrickMapBuffer:()=>i,dimensions:ae.create(r.width,r.height,r.depthOrArrayLayers)}})(_i),await(async(e,n)=>{const i=await fetch("./Tavern.json"),s=(await i.json()).children.filter((e=>ui.includes(e.name))),o=new Set(s.map((e=>e.name))),a=Array.from(o);let c=e.createCommandEncoder();console.time("Load all volumes");{let i=await Promise.all(a.map((n=>(async(e,n,i)=>{console.time(`Fetch ${n}`);const s=await fetch(`./Tavern/${n}.vxm`);console.timeEnd(`Fetch ${n}`);const o=(e=>{console.time("convert vxm");const t=new oi(e);let n,r=[],i="",s=[];if(i=String.fromCodePoint(t.readUint8(),t.readUint8(),t.readUint8(),t.readUint8()),"VXMC"!==i&&"VXMA"!==i)throw new Error(`Incorrect magic: ${i}`);if(i[3].charCodeAt(0)>="0".charCodeAt(0)&&i[3].charCodeAt(0)<="9".charCodeAt(0))n=i[3].charCodeAt(0)-"0".charCodeAt(0);else{if(!(i[3].charCodeAt(0)>="A".charCodeAt(0)&&i[3].charCodeAt(0)<="C".charCodeAt(0)))throw new Error("Unsupported version found");n=10+i[3].charCodeAt(0)-"A".charCodeAt(0)}if(n<11||n>12)throw new Error(`Could not load vxm file: Unsupported version found (${n})`);let o=[0,0,0];o[0]=t.readUint32(),o[1]=t.readUint32(),o[2]=t.readUint32();let a=[.5,0,.5];if(a[0]=t.readFloat32(),a[1]=t.readFloat32(),a[2]=t.readFloat32(),t.readUint8()>0){let e=0,n=0;t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),e=t.readUint32(),n=t.readUint32();let r=e*n;t.skip(4*r)}n>=8&&t.skip(16);let c=t.readUint32();for(let e=0;e<c;++e){let e=t.readUint32(),n=t.readUint32();if(e>2048||n>2048)throw new Error("Size of texture exceeds the max allowed value");let r=t.readUint32();t.skip(r);for(let e=0;e<6;++e){let e=t.readUint32();e>262144&&console.warn(`Size of quads exceeds the max allowed value: ${e}`);let n=4*e*20;t.skip(n)}}t.skip(1024),t.skip(1024);let u=t.readUint8();for(let e=0;e<u;++e)t.skip(1024),t.readUint8(),t.readUint8();let l=t.readUint8();for(let e=0;e<l;++e){let n=t.readUint8(),i=t.readUint8(),s=t.readUint8(),o=t.readUint8();o=1===t.readUint8()?2:255,r[e]={r:s,g:i,b:n,a:o}}let h=1;n>=12&&(h=t.readUint8());let d={min:ae.create(9999,9999,9999),max:ae.create(0,0,0)};for(let e=0;e<h;++e){let r=0,i=!0,a="";if(n>=12){for(;;){const e=t.readUint8();if(ai(e))break;a=`${a}${String.fromCharCode(e)}`}i=t.readUint8()>0}else a=`Layer ${e}`;for(;;){let e=t.readUint8();if(0===e)break;let n=t.readUint8();if(255!==n)if(n>=l)r+=e;else{for(let t=r;t<r+e;t++){let e=Math.floor(t/(o[1]*o[2])),r=Math.floor(t/o[2]%o[1]),i=Math.floor(t%o[2]);d.min=ae.min(d.min,[e,r,i]),d.max=ae.max(d.max,[e,r,i]),s.push({x:e,y:r,z:i,c:n})}r+=e}else r+=e}}s=s.map((({x:e,y:t,z:n,c:r})=>({x:e-d.min[0],y:t-d.min[1],z:n-d.min[2],c:r})));const f=ae.sub(d.max,d.min);return console.log({bounds:d,trimmedSize:f}),console.timeEnd("convert vxm"),{VOX:s.length,SIZE:[f[0]+1,f[1]+1,f[2]+1],XYZI:s,RGBA:r}})(await s.arrayBuffer());console.time(`Create texture from voxels for ${n}`);let a=await(async(e,n)=>{const i=e.createTexture({size:{width:n.SIZE[0],height:n.SIZE[1],depthOrArrayLayers:n.SIZE[2]},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d"}),s=e.createBuffer({size:4*n.XYZI.length*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE}),o=e.createBuffer({size:4*n.RGBA.length*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE});r(o,n.RGBA.map((e=>[e.r/255,e.g/255,e.b/255,e.a/255])).flat()),t(s,n.XYZI.map((e=>[e.x,e.y,e.z,e.c])).flat());const a=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,storageTexture:{access:"write-only",format:i.format,viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:2,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),c=e.createComputePipeline({layout:e.createPipelineLayout({bindGroupLayouts:[a]}),compute:{module:e.createShaderModule({code:"@group(0) @binding(0) var output : texture_storage_3d<rgba8unorm, write>;\n@group(0) @binding(1) var<storage, read_write> voxelBuffer: array<vec4<u32>>;\n@group(0) @binding(2) var<storage, read_write> paletteBuffer: array<vec4<f32>>;\n\n@compute @workgroup_size(64, 1, 1)\n fn main(\n   @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n ) {\n    let index = GlobalInvocationID.x;\n    let voxel = voxelBuffer[index];\n    let paletteIndex = voxel.w;\n    let position = voxel.xyz;\n    let color = paletteBuffer[paletteIndex];\n    textureStore(output, position, color);\n }"}),entryPoint:"main"}}),u=e.createBindGroup({layout:a,entries:[{binding:0,resource:i.createView()},{binding:1,resource:{buffer:s}},{binding:2,resource:{buffer:o}}]}),l=e.createCommandEncoder(),h=l.beginComputePass();return h.setPipeline(c),h.setBindGroup(0,u),h.dispatchWorkgroups(n.XYZI.length/64,1,1),h.end(),e.queue.submit([l.finish()]),await e.queue.onSubmittedWorkDone(),i})(i,o);console.timeEnd(`Create texture from voxels for ${n}`),console.time(`Create brick map for ${n}`);const c=(e=>{const t={};for(let n=0;n<e.XYZI.length;n++){const r=e.XYZI[n],i=ae.create(Math.floor(r.x/8),Math.floor(r.y/8),Math.floor(r.z/8)),s=`${i[0]},${i[1]},${i[2]}`;t[s]||(t[s]=new Uint32Array(16));const o=r.x%8+r.y%8*8+r.z%8*64;t[s]=ii(t[s],o,!0)}return t})(o);return console.log({brickMap:c}),console.timeEnd(`Create brick map for ${n}`),{name:n,texture:a,brickMap:c}})(0,n,e))));for(const{name:t,texture:r,brickMap:s}of i)console.time(`Add volume for ${t}`),await n.addVolume(c,r,s,t),c=e.createCommandEncoder(),console.timeEnd(`Add volume for ${t}`)}console.timeEnd("Load all volumes");const u=n.getVolumes();let l=[];for(const e of s){const t=u[e.name];if(!t)return void console.warn(`Volume not found for child ${e.name}, skipping...`);const n=ke.identity();"Candle"===e.name&&l.push(e.position),ke.translate(n,e.position,n),ke.scale(n,e.scale,n),ke.multiply(n,ke.fromQuat(e.rotation),n),ci.push(new si(n,t.size,t.location,t.brickMapOffset,e.name))}console.log({volumes:u,torchPositions:l}),console.debug(`Tavern created with ${ci.length} items`)})(_i,vi);const n=[c(),pi(),hi(),ln(_i)],i=await Promise.all(n);zi(_i,await Promise.all(i)),document.getElementById("flags").innerHTML=i.reduce(((e,t)=>{if(!t.label)return e;const n=`flag-${t.label}`;return`${e}<div class="debug-row">\n                    <label for="${n}">\n                        ${t.label}\n                    </label>\n                    <div>\n                        <input id="${n}" type="checkbox" checked>\n                   </div>\n                </div>`}),"")})()})();