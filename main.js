(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{UI:()=>Va,Ji:()=>Da,mL:()=>Oa,Eh:()=>La,jO:()=>Ua,zz:()=>Na,sZ:()=>Ca,PM:()=>Ra});const t=(e,t)=>{const r=new Uint32Array(t);Ua.queue.writeBuffer(e,0,r.buffer,0,t.length*Uint32Array.BYTES_PER_ELEMENT)},r=(e,r)=>{const n=new Uint32Array(e),i=Ua.createBuffer({size:n.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:r});return t(i,e),i},n=(e,t)=>{if(t instanceof Float32Array)Ua.queue.writeBuffer(e,0,t.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT);else{const r=new Float32Array(t);Ua.queue.writeBuffer(e,0,r.buffer,0,t.length*Float32Array.BYTES_PER_ELEMENT)}},i=(e,t,r)=>{const i=new Float32Array(t),a=e.createBuffer({size:i.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:r});return n(a,t),a};let a=1e-6,o=Float32Array;function s(e=0,t=0){const r=new o(2);return void 0!==e&&(r[0]=e,void 0!==t&&(r[1]=t)),r}let u=Float32Array;function c(e,t,r){const n=new u(3);return void 0!==e&&(n[0]=e,void 0!==t&&(n[1]=t,void 0!==r&&(n[2]=r))),n}const l=s;function d(e,t,r){return(r=r||new o(2))[0]=e[0]-t[0],r[1]=e[1]-t[1],r}const f=d;function h(e,t,r){return(r=r||new o(2))[0]=e[0]*t,r[1]=e[1]*t,r}const p=h;function m(e,t){return(t=t||new o(2))[0]=1/e[0],t[1]=1/e[1],t}const g=m;function v(e,t){return e[0]*t[0]+e[1]*t[1]}function x(e){const t=e[0],r=e[1];return Math.sqrt(t*t+r*r)}const y=x;function _(e){const t=e[0],r=e[1];return t*t+r*r}const b=_;function w(e,t){const r=e[0]-t[0],n=e[1]-t[1];return Math.sqrt(r*r+n*n)}const T=w;function S(e,t){const r=e[0]-t[0],n=e[1]-t[1];return r*r+n*n}const k=S;function P(e,t){return(t=t||new o(2))[0]=e[0],t[1]=e[1],t}const M=P;function E(e,t,r){return(r=r||new o(2))[0]=e[0]*t[0],r[1]=e[1]*t[1],r}const A=E;function O(e,t,r){return(r=r||new o(2))[0]=e[0]/t[0],r[1]=e[1]/t[1],r}const I=O;var U=Object.freeze({__proto__:null,create:s,setDefaultType:function(e){const t=o;return o=e,t},fromValues:l,set:function(e,t,r){return(r=r||new o(2))[0]=e,r[1]=t,r},ceil:function(e,t){return(t=t||new o(2))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t},floor:function(e,t){return(t=t||new o(2))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t},round:function(e,t){return(t=t||new o(2))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t},clamp:function(e,t=0,r=1,n){return(n=n||new o(2))[0]=Math.min(r,Math.max(t,e[0])),n[1]=Math.min(r,Math.max(t,e[1])),n},add:function(e,t,r){return(r=r||new o(2))[0]=e[0]+t[0],r[1]=e[1]+t[1],r},addScaled:function(e,t,r,n){return(n=n||new o(2))[0]=e[0]+t[0]*r,n[1]=e[1]+t[1]*r,n},angle:function(e,t){const r=e[0],n=e[1],i=e[0],a=e[1],o=Math.sqrt(r*r+n*n)*Math.sqrt(i*i+a*a),s=o&&v(e,t)/o;return Math.acos(s)},subtract:d,sub:f,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<a&&Math.abs(e[1]-t[1])<a},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]},lerp:function(e,t,r,n){return(n=n||new o(2))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n},lerpV:function(e,t,r,n){return(n=n||new o(2))[0]=e[0]+r[0]*(t[0]-e[0]),n[1]=e[1]+r[1]*(t[1]-e[1]),n},max:function(e,t,r){return(r=r||new o(2))[0]=Math.max(e[0],t[0]),r[1]=Math.max(e[1],t[1]),r},min:function(e,t,r){return(r=r||new o(2))[0]=Math.min(e[0],t[0]),r[1]=Math.min(e[1],t[1]),r},mulScalar:h,scale:p,divScalar:function(e,t,r){return(r=r||new o(2))[0]=e[0]/t,r[1]=e[1]/t,r},inverse:m,invert:g,cross:function(e,t,r){r=r||new u(3);const n=e[0]*t[1]-e[1]*t[0];return r[0]=0,r[1]=0,r[2]=n,r},dot:v,length:x,len:y,lengthSq:_,lenSq:b,distance:w,dist:T,distanceSq:S,distSq:k,normalize:function(e,t){t=t||new o(2);const r=e[0],n=e[1],i=Math.sqrt(r*r+n*n);return i>1e-5?(t[0]=r/i,t[1]=n/i):(t[0]=0,t[1]=0),t},negate:function(e,t){return(t=t||new o(2))[0]=-e[0],t[1]=-e[1],t},copy:P,clone:M,multiply:E,mul:A,divide:O,div:I,random:function(e=1,t){t=t||new o(2);const r=2*Math.random()*Math.PI;return t[0]=Math.cos(r)*e,t[1]=Math.sin(r)*e,t},zero:function(e){return(e=e||new o(2))[0]=0,e[1]=0,e},transformMat4:function(e,t,r){r=r||new o(2);const n=e[0],i=e[1];return r[0]=n*t[0]+i*t[4]+t[12],r[1]=n*t[1]+i*t[5]+t[13],r},transformMat3:function(e,t,r){r=r||new o(2);const n=e[0],i=e[1];return r[0]=t[0]*n+t[4]*i+t[8],r[1]=t[1]*n+t[5]*i+t[9],r}});Float32Array;new Map([[Float32Array,()=>new Float32Array(12)],[Float64Array,()=>new Float64Array(12)],[Array,()=>new Array(12).fill(0)]]).get(Float32Array);const C=c;function D(e,t,r){return(r=r||new u(3))[0]=e[0]-t[0],r[1]=e[1]-t[1],r[2]=e[2]-t[2],r}const z=D;function R(e,t,r){return(r=r||new u(3))[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r}const B=R;function G(e,t){return(t=t||new u(3))[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}const L=G;function N(e,t,r){r=r||new u(3);const n=e[2]*t[0]-e[0]*t[2],i=e[0]*t[1]-e[1]*t[0];return r[0]=e[1]*t[2]-e[2]*t[1],r[1]=n,r[2]=i,r}function V(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function j(e){const t=e[0],r=e[1],n=e[2];return Math.sqrt(t*t+r*r+n*n)}const F=j;function q(e){const t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n}const W=q;function H(e,t){const r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return Math.sqrt(r*r+n*n+i*i)}const Y=H;function $(e,t){const r=e[0]-t[0],n=e[1]-t[1],i=e[2]-t[2];return r*r+n*n+i*i}const X=$;function Z(e,t){t=t||new u(3);const r=e[0],n=e[1],i=e[2],a=Math.sqrt(r*r+n*n+i*i);return a>1e-5?(t[0]=r/a,t[1]=n/a,t[2]=i/a):(t[0]=0,t[1]=0,t[2]=0),t}function Q(e,t){return(t=t||new u(3))[0]=e[0],t[1]=e[1],t[2]=e[2],t}const K=Q;function J(e,t,r){return(r=r||new u(3))[0]=e[0]*t[0],r[1]=e[1]*t[1],r[2]=e[2]*t[2],r}const ee=J;function te(e,t,r){return(r=r||new u(3))[0]=e[0]/t[0],r[1]=e[1]/t[1],r[2]=e[2]/t[2],r}const re=te;var ne=Object.freeze({__proto__:null,create:c,setDefaultType:function(e){const t=u;return u=e,t},fromValues:C,set:function(e,t,r,n){return(n=n||new u(3))[0]=e,n[1]=t,n[2]=r,n},ceil:function(e,t){return(t=t||new u(3))[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t},floor:function(e,t){return(t=t||new u(3))[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t},round:function(e,t){return(t=t||new u(3))[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t},clamp:function(e,t=0,r=1,n){return(n=n||new u(3))[0]=Math.min(r,Math.max(t,e[0])),n[1]=Math.min(r,Math.max(t,e[1])),n[2]=Math.min(r,Math.max(t,e[2])),n},add:function(e,t,r){return(r=r||new u(3))[0]=e[0]+t[0],r[1]=e[1]+t[1],r[2]=e[2]+t[2],r},addScaled:function(e,t,r,n){return(n=n||new u(3))[0]=e[0]+t[0]*r,n[1]=e[1]+t[1]*r,n[2]=e[2]+t[2]*r,n},angle:function(e,t){const r=e[0],n=e[1],i=e[2],a=e[0],o=e[1],s=e[2],u=Math.sqrt(r*r+n*n+i*i)*Math.sqrt(a*a+o*o+s*s),c=u&&V(e,t)/u;return Math.acos(c)},subtract:D,sub:z,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<a&&Math.abs(e[1]-t[1])<a&&Math.abs(e[2]-t[2])<a},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]},lerp:function(e,t,r,n){return(n=n||new u(3))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n[2]=e[2]+r*(t[2]-e[2]),n},lerpV:function(e,t,r,n){return(n=n||new u(3))[0]=e[0]+r[0]*(t[0]-e[0]),n[1]=e[1]+r[1]*(t[1]-e[1]),n[2]=e[2]+r[2]*(t[2]-e[2]),n},max:function(e,t,r){return(r=r||new u(3))[0]=Math.max(e[0],t[0]),r[1]=Math.max(e[1],t[1]),r[2]=Math.max(e[2],t[2]),r},min:function(e,t,r){return(r=r||new u(3))[0]=Math.min(e[0],t[0]),r[1]=Math.min(e[1],t[1]),r[2]=Math.min(e[2],t[2]),r},mulScalar:R,scale:B,divScalar:function(e,t,r){return(r=r||new u(3))[0]=e[0]/t,r[1]=e[1]/t,r[2]=e[2]/t,r},inverse:G,invert:L,cross:N,dot:V,length:j,len:F,lengthSq:q,lenSq:W,distance:H,dist:Y,distanceSq:$,distSq:X,normalize:Z,negate:function(e,t){return(t=t||new u(3))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t},copy:Q,clone:K,multiply:J,mul:ee,divide:te,div:re,random:function(e=1,t){t=t||new u(3);const r=2*Math.random()*Math.PI,n=2*Math.random()-1,i=Math.sqrt(1-n*n)*e;return t[0]=Math.cos(r)*i,t[1]=Math.sin(r)*i,t[2]=n*e,t},zero:function(e){return(e=e||new u(3))[0]=0,e[1]=0,e[2]=0,e},transformMat4:function(e,t,r){r=r||new u(3);const n=e[0],i=e[1],a=e[2],o=t[3]*n+t[7]*i+t[11]*a+t[15]||1;return r[0]=(t[0]*n+t[4]*i+t[8]*a+t[12])/o,r[1]=(t[1]*n+t[5]*i+t[9]*a+t[13])/o,r[2]=(t[2]*n+t[6]*i+t[10]*a+t[14])/o,r},transformMat4Upper3x3:function(e,t,r){r=r||new u(3);const n=e[0],i=e[1],a=e[2];return r[0]=n*t[0]+i*t[4]+a*t[8],r[1]=n*t[1]+i*t[5]+a*t[9],r[2]=n*t[2]+i*t[6]+a*t[10],r},transformMat3:function(e,t,r){r=r||new u(3);const n=e[0],i=e[1],a=e[2];return r[0]=n*t[0]+i*t[4]+a*t[8],r[1]=n*t[1]+i*t[5]+a*t[9],r[2]=n*t[2]+i*t[6]+a*t[10],r},transformQuat:function(e,t,r){r=r||new u(3);const n=t[0],i=t[1],a=t[2],o=2*t[3],s=e[0],c=e[1],l=e[2],d=i*l-a*c,f=a*s-n*l,h=n*c-i*s;return r[0]=s+d*o+2*(i*h-a*f),r[1]=c+f*o+2*(a*d-n*h),r[2]=l+h*o+2*(n*f-i*d),r},getTranslation:function(e,t){return(t=t||new u(3))[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,r){const n=4*t;return(r=r||new u(3))[0]=e[n+0],r[1]=e[n+1],r[2]=e[n+2],r},getScaling:function(e,t){t=t||new u(3);const r=e[0],n=e[1],i=e[2],a=e[4],o=e[5],s=e[6],c=e[8],l=e[9],d=e[10];return t[0]=Math.sqrt(r*r+n*n+i*i),t[1]=Math.sqrt(a*a+o*o+s*s),t[2]=Math.sqrt(c*c+l*l+d*d),t}});let ie=Float32Array;function ae(e,t){return(t=t||new ie(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}const oe=ae;function se(e){return(e=e||new ie(16))[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function ue(e,t){t=t||new ie(16);const r=e[0],n=e[1],i=e[2],a=e[3],o=e[4],s=e[5],u=e[6],c=e[7],l=e[8],d=e[9],f=e[10],h=e[11],p=e[12],m=e[13],g=e[14],v=e[15],x=f*v,y=g*h,_=u*v,b=g*c,w=u*h,T=f*c,S=i*v,k=g*a,P=i*h,M=f*a,E=i*c,A=u*a,O=l*m,I=p*d,U=o*m,C=p*s,D=o*d,z=l*s,R=r*m,B=p*n,G=r*d,L=l*n,N=r*s,V=o*n,j=x*s+b*d+w*m-(y*s+_*d+T*m),F=y*n+S*d+M*m-(x*n+k*d+P*m),q=_*n+k*s+E*m-(b*n+S*s+A*m),W=T*n+P*s+A*d-(w*n+M*s+E*d),H=1/(r*j+o*F+l*q+p*W);return t[0]=H*j,t[1]=H*F,t[2]=H*q,t[3]=H*W,t[4]=H*(y*o+_*l+T*p-(x*o+b*l+w*p)),t[5]=H*(x*r+k*l+P*p-(y*r+S*l+M*p)),t[6]=H*(b*r+S*o+A*p-(_*r+k*o+E*p)),t[7]=H*(w*r+M*o+E*l-(T*r+P*o+A*l)),t[8]=H*(O*c+C*h+D*v-(I*c+U*h+z*v)),t[9]=H*(I*a+R*h+L*v-(O*a+B*h+G*v)),t[10]=H*(U*a+B*c+N*v-(C*a+R*c+V*v)),t[11]=H*(z*a+G*c+V*h-(D*a+L*c+N*h)),t[12]=H*(U*f+z*g+I*u-(D*g+O*u+C*f)),t[13]=H*(G*g+O*i+B*f-(R*f+L*g+I*i)),t[14]=H*(R*u+V*g+C*i-(N*g+U*i+B*u)),t[15]=H*(N*f+D*i+L*u-(G*u+V*f+z*i)),t}const ce=ue;function le(e,t,r){r=r||new ie(16);const n=e[0],i=e[1],a=e[2],o=e[3],s=e[4],u=e[5],c=e[6],l=e[7],d=e[8],f=e[9],h=e[10],p=e[11],m=e[12],g=e[13],v=e[14],x=e[15],y=t[0],_=t[1],b=t[2],w=t[3],T=t[4],S=t[5],k=t[6],P=t[7],M=t[8],E=t[9],A=t[10],O=t[11],I=t[12],U=t[13],C=t[14],D=t[15];return r[0]=n*y+s*_+d*b+m*w,r[1]=i*y+u*_+f*b+g*w,r[2]=a*y+c*_+h*b+v*w,r[3]=o*y+l*_+p*b+x*w,r[4]=n*T+s*S+d*k+m*P,r[5]=i*T+u*S+f*k+g*P,r[6]=a*T+c*S+h*k+v*P,r[7]=o*T+l*S+p*k+x*P,r[8]=n*M+s*E+d*A+m*O,r[9]=i*M+u*E+f*A+g*O,r[10]=a*M+c*E+h*A+v*O,r[11]=o*M+l*E+p*A+x*O,r[12]=n*I+s*U+d*C+m*D,r[13]=i*I+u*U+f*C+g*D,r[14]=a*I+c*U+h*C+v*D,r[15]=o*I+l*U+p*C+x*D,r}const de=le;let fe,he,pe;function me(e,t,r){r=r||new ie(16);let n=e[0],i=e[1],a=e[2];const o=Math.sqrt(n*n+i*i+a*a);n/=o,i/=o,a/=o;const s=n*n,u=i*i,c=a*a,l=Math.cos(t),d=Math.sin(t),f=1-l;return r[0]=s+(1-s)*l,r[1]=n*i*f+a*d,r[2]=n*a*f-i*d,r[3]=0,r[4]=n*i*f-a*d,r[5]=u+(1-u)*l,r[6]=i*a*f+n*d,r[7]=0,r[8]=n*a*f+i*d,r[9]=i*a*f-n*d,r[10]=c+(1-c)*l,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,r}const ge=me;function ve(e,t,r,n){n=n||new ie(16);let i=t[0],a=t[1],o=t[2];const s=Math.sqrt(i*i+a*a+o*o);i/=s,a/=s,o/=s;const u=i*i,c=a*a,l=o*o,d=Math.cos(r),f=Math.sin(r),h=1-d,p=u+(1-u)*d,m=i*a*h+o*f,g=i*o*h-a*f,v=i*a*h-o*f,x=c+(1-c)*d,y=a*o*h+i*f,_=i*o*h+a*f,b=a*o*h-i*f,w=l+(1-l)*d,T=e[0],S=e[1],k=e[2],P=e[3],M=e[4],E=e[5],A=e[6],O=e[7],I=e[8],U=e[9],C=e[10],D=e[11];return n[0]=p*T+m*M+g*I,n[1]=p*S+m*E+g*U,n[2]=p*k+m*A+g*C,n[3]=p*P+m*O+g*D,n[4]=v*T+x*M+y*I,n[5]=v*S+x*E+y*U,n[6]=v*k+x*A+y*C,n[7]=v*P+x*O+y*D,n[8]=_*T+b*M+w*I,n[9]=_*S+b*E+w*U,n[10]=_*k+b*A+w*C,n[11]=_*P+b*O+w*D,e!==n&&(n[12]=e[12],n[13]=e[13],n[14]=e[14],n[15]=e[15]),n}const xe=ve;var ye=Object.freeze({__proto__:null,setDefaultType:function(e){const t=ie;return ie=e,t},create:function(e,t,r,n,i,a,o,s,u,c,l,d,f,h,p,m){const g=new ie(16);return void 0!==e&&(g[0]=e,void 0!==t&&(g[1]=t,void 0!==r&&(g[2]=r,void 0!==n&&(g[3]=n,void 0!==i&&(g[4]=i,void 0!==a&&(g[5]=a,void 0!==o&&(g[6]=o,void 0!==s&&(g[7]=s,void 0!==u&&(g[8]=u,void 0!==c&&(g[9]=c,void 0!==l&&(g[10]=l,void 0!==d&&(g[11]=d,void 0!==f&&(g[12]=f,void 0!==h&&(g[13]=h,void 0!==p&&(g[14]=p,void 0!==m&&(g[15]=m)))))))))))))))),g},set:function(e,t,r,n,i,a,o,s,u,c,l,d,f,h,p,m,g){return(g=g||new ie(16))[0]=e,g[1]=t,g[2]=r,g[3]=n,g[4]=i,g[5]=a,g[6]=o,g[7]=s,g[8]=u,g[9]=c,g[10]=l,g[11]=d,g[12]=f,g[13]=h,g[14]=p,g[15]=m,g},fromMat3:function(e,t){return(t=t||new ie(16))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=0,t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=0,t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},fromQuat:function(e,t){t=t||new ie(16);const r=e[0],n=e[1],i=e[2],a=e[3],o=r+r,s=n+n,u=i+i,c=r*o,l=n*o,d=n*s,f=i*o,h=i*s,p=i*u,m=a*o,g=a*s,v=a*u;return t[0]=1-d-p,t[1]=l+v,t[2]=f-g,t[3]=0,t[4]=l-v,t[5]=1-c-p,t[6]=h+m,t[7]=0,t[8]=f+g,t[9]=h-m,t[10]=1-c-d,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},negate:function(e,t){return(t=t||new ie(16))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=-e[3],t[4]=-e[4],t[5]=-e[5],t[6]=-e[6],t[7]=-e[7],t[8]=-e[8],t[9]=-e[9],t[10]=-e[10],t[11]=-e[11],t[12]=-e[12],t[13]=-e[13],t[14]=-e[14],t[15]=-e[15],t},copy:ae,clone:oe,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<a&&Math.abs(e[1]-t[1])<a&&Math.abs(e[2]-t[2])<a&&Math.abs(e[3]-t[3])<a&&Math.abs(e[4]-t[4])<a&&Math.abs(e[5]-t[5])<a&&Math.abs(e[6]-t[6])<a&&Math.abs(e[7]-t[7])<a&&Math.abs(e[8]-t[8])<a&&Math.abs(e[9]-t[9])<a&&Math.abs(e[10]-t[10])<a&&Math.abs(e[11]-t[11])<a&&Math.abs(e[12]-t[12])<a&&Math.abs(e[13]-t[13])<a&&Math.abs(e[14]-t[14])<a&&Math.abs(e[15]-t[15])<a},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]&&e[4]===t[4]&&e[5]===t[5]&&e[6]===t[6]&&e[7]===t[7]&&e[8]===t[8]&&e[9]===t[9]&&e[10]===t[10]&&e[11]===t[11]&&e[12]===t[12]&&e[13]===t[13]&&e[14]===t[14]&&e[15]===t[15]},identity:se,transpose:function(e,t){if((t=t||new ie(16))===e){let r;return r=e[1],e[1]=e[4],e[4]=r,r=e[2],e[2]=e[8],e[8]=r,r=e[3],e[3]=e[12],e[12]=r,r=e[6],e[6]=e[9],e[9]=r,r=e[7],e[7]=e[13],e[13]=r,r=e[11],e[11]=e[14],e[14]=r,t}const r=e[0],n=e[1],i=e[2],a=e[3],o=e[4],s=e[5],u=e[6],c=e[7],l=e[8],d=e[9],f=e[10],h=e[11],p=e[12],m=e[13],g=e[14],v=e[15];return t[0]=r,t[1]=o,t[2]=l,t[3]=p,t[4]=n,t[5]=s,t[6]=d,t[7]=m,t[8]=i,t[9]=u,t[10]=f,t[11]=g,t[12]=a,t[13]=c,t[14]=h,t[15]=v,t},inverse:ue,determinant:function(e){const t=e[0],r=e[1],n=e[2],i=e[3],a=e[4],o=e[5],s=e[6],u=e[7],c=e[8],l=e[9],d=e[10],f=e[11],h=e[12],p=e[13],m=e[14],g=e[15],v=d*g,x=m*f,y=s*g,_=m*u,b=s*f,w=d*u,T=n*g,S=m*i,k=n*f,P=d*i,M=n*u,E=s*i;return t*(v*o+_*l+b*p-(x*o+y*l+w*p))+a*(x*r+T*l+P*p-(v*r+S*l+k*p))+c*(y*r+S*o+M*p-(_*r+T*o+E*p))+h*(w*r+k*o+E*l-(b*r+P*o+M*l))},invert:ce,multiply:le,mul:de,setTranslation:function(e,t,r){return e!==(r=r||se())&&(r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[8]=e[8],r[9]=e[9],r[10]=e[10],r[11]=e[11]),r[12]=t[0],r[13]=t[1],r[14]=t[2],r[15]=1,r},getTranslation:function(e,t){return(t=t||c())[0]=e[12],t[1]=e[13],t[2]=e[14],t},getAxis:function(e,t,r){const n=4*t;return(r=r||c())[0]=e[n+0],r[1]=e[n+1],r[2]=e[n+2],r},setAxis:function(e,t,r,n){n!==e&&(n=ae(e,n));const i=4*r;return n[i+0]=t[0],n[i+1]=t[1],n[i+2]=t[2],n},getScaling:function(e,t){t=t||c();const r=e[0],n=e[1],i=e[2],a=e[4],o=e[5],s=e[6],u=e[8],l=e[9],d=e[10];return t[0]=Math.sqrt(r*r+n*n+i*i),t[1]=Math.sqrt(a*a+o*o+s*s),t[2]=Math.sqrt(u*u+l*l+d*d),t},perspective:function(e,t,r,n,i){i=i||new ie(16);const a=Math.tan(.5*Math.PI-.5*e);if(i[0]=a/t,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=a,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,n===1/0)i[10]=-1,i[14]=-r;else{const e=1/(r-n);i[10]=n*e,i[14]=n*r*e}return i},ortho:function(e,t,r,n,i,a,o){return(o=o||new ie(16))[0]=2/(t-e),o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=2/(n-r),o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=1/(i-a),o[11]=0,o[12]=(t+e)/(e-t),o[13]=(n+r)/(r-n),o[14]=i/(i-a),o[15]=1,o},frustum:function(e,t,r,n,i,a,o){const s=t-e,u=n-r,c=i-a;return(o=o||new ie(16))[0]=2*i/s,o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=2*i/u,o[6]=0,o[7]=0,o[8]=(e+t)/s,o[9]=(n+r)/u,o[10]=a/c,o[11]=-1,o[12]=0,o[13]=0,o[14]=i*a/c,o[15]=0,o},aim:function(e,t,r,n){return n=n||new ie(16),fe=fe||c(),he=he||c(),pe=pe||c(),Z(D(t,e,pe),pe),Z(N(r,pe,fe),fe),Z(N(pe,fe,he),he),n[0]=fe[0],n[1]=fe[1],n[2]=fe[2],n[3]=0,n[4]=he[0],n[5]=he[1],n[6]=he[2],n[7]=0,n[8]=pe[0],n[9]=pe[1],n[10]=pe[2],n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n},cameraAim:function(e,t,r,n){return n=n||new ie(16),fe=fe||c(),he=he||c(),pe=pe||c(),Z(D(e,t,pe),pe),Z(N(r,pe,fe),fe),Z(N(pe,fe,he),he),n[0]=fe[0],n[1]=fe[1],n[2]=fe[2],n[3]=0,n[4]=he[0],n[5]=he[1],n[6]=he[2],n[7]=0,n[8]=pe[0],n[9]=pe[1],n[10]=pe[2],n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n},lookAt:function(e,t,r,n){return n=n||new ie(16),fe=fe||c(),he=he||c(),pe=pe||c(),Z(D(e,t,pe),pe),Z(N(r,pe,fe),fe),Z(N(pe,fe,he),he),n[0]=fe[0],n[1]=he[0],n[2]=pe[0],n[3]=0,n[4]=fe[1],n[5]=he[1],n[6]=pe[1],n[7]=0,n[8]=fe[2],n[9]=he[2],n[10]=pe[2],n[11]=0,n[12]=-(fe[0]*e[0]+fe[1]*e[1]+fe[2]*e[2]),n[13]=-(he[0]*e[0]+he[1]*e[1]+he[2]*e[2]),n[14]=-(pe[0]*e[0]+pe[1]*e[1]+pe[2]*e[2]),n[15]=1,n},translation:function(e,t){return(t=t||new ie(16))[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t},translate:function(e,t,r){r=r||new ie(16);const n=t[0],i=t[1],a=t[2],o=e[0],s=e[1],u=e[2],c=e[3],l=e[4],d=e[5],f=e[6],h=e[7],p=e[8],m=e[9],g=e[10],v=e[11],x=e[12],y=e[13],_=e[14],b=e[15];return e!==r&&(r[0]=o,r[1]=s,r[2]=u,r[3]=c,r[4]=l,r[5]=d,r[6]=f,r[7]=h,r[8]=p,r[9]=m,r[10]=g,r[11]=v),r[12]=o*n+l*i+p*a+x,r[13]=s*n+d*i+m*a+y,r[14]=u*n+f*i+g*a+_,r[15]=c*n+h*i+v*a+b,r},rotationX:function(e,t){t=t||new ie(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateX:function(e,t,r){r=r||new ie(16);const n=e[4],i=e[5],a=e[6],o=e[7],s=e[8],u=e[9],c=e[10],l=e[11],d=Math.cos(t),f=Math.sin(t);return r[4]=d*n+f*s,r[5]=d*i+f*u,r[6]=d*a+f*c,r[7]=d*o+f*l,r[8]=d*s-f*n,r[9]=d*u-f*i,r[10]=d*c-f*a,r[11]=d*l-f*o,e!==r&&(r[0]=e[0],r[1]=e[1],r[2]=e[2],r[3]=e[3],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},rotationY:function(e,t){t=t||new ie(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateY:function(e,t,r){r=r||new ie(16);const n=e[0],i=e[1],a=e[2],o=e[3],s=e[8],u=e[9],c=e[10],l=e[11],d=Math.cos(t),f=Math.sin(t);return r[0]=d*n-f*s,r[1]=d*i-f*u,r[2]=d*a-f*c,r[3]=d*o-f*l,r[8]=d*s+f*n,r[9]=d*u+f*i,r[10]=d*c+f*a,r[11]=d*l+f*o,e!==r&&(r[4]=e[4],r[5]=e[5],r[6]=e[6],r[7]=e[7],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},rotationZ:function(e,t){t=t||new ie(16);const r=Math.cos(e),n=Math.sin(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},rotateZ:function(e,t,r){r=r||new ie(16);const n=e[0],i=e[1],a=e[2],o=e[3],s=e[4],u=e[5],c=e[6],l=e[7],d=Math.cos(t),f=Math.sin(t);return r[0]=d*n+f*s,r[1]=d*i+f*u,r[2]=d*a+f*c,r[3]=d*o+f*l,r[4]=d*s-f*n,r[5]=d*u-f*i,r[6]=d*c-f*a,r[7]=d*l-f*o,e!==r&&(r[8]=e[8],r[9]=e[9],r[10]=e[10],r[11]=e[11],r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},axisRotation:me,rotation:ge,axisRotate:ve,rotate:xe,scaling:function(e,t){return(t=t||new ie(16))[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},scale:function(e,t,r){r=r||new ie(16);const n=t[0],i=t[1],a=t[2];return r[0]=n*e[0],r[1]=n*e[1],r[2]=n*e[2],r[3]=n*e[3],r[4]=i*e[4],r[5]=i*e[5],r[6]=i*e[6],r[7]=i*e[7],r[8]=a*e[8],r[9]=a*e[9],r[10]=a*e[10],r[11]=a*e[11],e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r},uniformScaling:function(e,t){return(t=t||new ie(16))[0]=e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t},uniformScale:function(e,t,r){return(r=r||new ie(16))[0]=t*e[0],r[1]=t*e[1],r[2]=t*e[2],r[3]=t*e[3],r[4]=t*e[4],r[5]=t*e[5],r[6]=t*e[6],r[7]=t*e[7],r[8]=t*e[8],r[9]=t*e[9],r[10]=t*e[10],r[11]=t*e[11],e!==r&&(r[12]=e[12],r[13]=e[13],r[14]=e[14],r[15]=e[15]),r}});let _e=Float32Array;function be(e,t,r,n){const i=new _e(4);return void 0!==e&&(i[0]=e,void 0!==t&&(i[1]=t,void 0!==r&&(i[2]=r,void 0!==n&&(i[3]=n)))),i}const we=be;function Te(e,t,r){r=r||new _e(4);const n=.5*t,i=Math.sin(n);return r[0]=i*e[0],r[1]=i*e[1],r[2]=i*e[2],r[3]=Math.cos(n),r}function Se(e,t,r){r=r||new _e(4);const n=e[0],i=e[1],a=e[2],o=e[3],s=t[0],u=t[1],c=t[2],l=t[3];return r[0]=n*l+o*s+i*c-a*u,r[1]=i*l+o*u+a*s-n*c,r[2]=a*l+o*c+n*u-i*s,r[3]=o*l-n*s-i*u-a*c,r}const ke=Se;function Pe(e,t,r,n){n=n||new _e(4);const i=e[0],o=e[1],s=e[2],u=e[3];let c,l,d=t[0],f=t[1],h=t[2],p=t[3],m=i*d+o*f+s*h+u*p;if(m<0&&(m=-m,d=-d,f=-f,h=-h,p=-p),1-m>a){const e=Math.acos(m),t=Math.sin(e);c=Math.sin((1-r)*e)/t,l=Math.sin(r*e)/t}else c=1-r,l=r;return n[0]=c*i+l*d,n[1]=c*o+l*f,n[2]=c*s+l*h,n[3]=c*u+l*p,n}function Me(e,t){return(t=t||new _e(4))[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}const Ee=Me;function Ae(e,t,r){return(r=r||new _e(4))[0]=e[0]-t[0],r[1]=e[1]-t[1],r[2]=e[2]-t[2],r[3]=e[3]-t[3],r}const Oe=Ae;function Ie(e,t,r){return(r=r||new _e(4))[0]=e[0]*t,r[1]=e[1]*t,r[2]=e[2]*t,r[3]=e[3]*t,r}const Ue=Ie;function Ce(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function De(e){const t=e[0],r=e[1],n=e[2],i=e[3];return Math.sqrt(t*t+r*r+n*n+i*i)}const ze=De;function Re(e){const t=e[0],r=e[1],n=e[2],i=e[3];return t*t+r*r+n*n+i*i}const Be=Re;function Ge(e,t){t=t||new _e(4);const r=e[0],n=e[1],i=e[2],a=e[3],o=Math.sqrt(r*r+n*n+i*i+a*a);return o>1e-5?(t[0]=r/o,t[1]=n/o,t[2]=i/o,t[3]=a/o):(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}let Le,Ne,Ve,je,Fe;var qe,We=Object.freeze({__proto__:null,create:be,setDefaultType:function(e){const t=_e;return _e=e,t},fromValues:we,set:function(e,t,r,n,i){return(i=i||new _e(4))[0]=e,i[1]=t,i[2]=r,i[3]=n,i},fromAxisAngle:Te,toAxisAngle:function(e,t){t=t||c(4);const r=2*Math.acos(e[3]),n=Math.sin(.5*r);return n>a?(t[0]=e[0]/n,t[1]=e[1]/n,t[2]=e[2]/n):(t[0]=1,t[1]=0,t[2]=0),{angle:r,axis:t}},angle:function(e,t){const r=Ce(e,t);return Math.acos(2*r*r-1)},multiply:Se,mul:ke,rotateX:function(e,t,r){r=r||new _e(4);const n=.5*t,i=e[0],a=e[1],o=e[2],s=e[3],u=Math.sin(n),c=Math.cos(n);return r[0]=i*c+s*u,r[1]=a*c+o*u,r[2]=o*c-a*u,r[3]=s*c-i*u,r},rotateY:function(e,t,r){r=r||new _e(4);const n=.5*t,i=e[0],a=e[1],o=e[2],s=e[3],u=Math.sin(n),c=Math.cos(n);return r[0]=i*c-o*u,r[1]=a*c+s*u,r[2]=o*c+i*u,r[3]=s*c-a*u,r},rotateZ:function(e,t,r){r=r||new _e(4);const n=.5*t,i=e[0],a=e[1],o=e[2],s=e[3],u=Math.sin(n),c=Math.cos(n);return r[0]=i*c+a*u,r[1]=a*c-i*u,r[2]=o*c+s*u,r[3]=s*c-o*u,r},slerp:Pe,inverse:function(e,t){t=t||new _e(4);const r=e[0],n=e[1],i=e[2],a=e[3],o=r*r+n*n+i*i+a*a,s=o?1/o:0;return t[0]=-r*s,t[1]=-n*s,t[2]=-i*s,t[3]=a*s,t},conjugate:function(e,t){return(t=t||new _e(4))[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t},fromMat:function(e,t){t=t||new _e(4);const r=e[0]+e[5]+e[10];if(r>0){const n=Math.sqrt(r+1);t[3]=.5*n;const i=.5/n;t[0]=(e[6]-e[9])*i,t[1]=(e[8]-e[2])*i,t[2]=(e[1]-e[4])*i}else{let r=0;e[5]>e[0]&&(r=1),e[10]>e[4*r+r]&&(r=2);const n=(r+1)%3,i=(r+2)%3,a=Math.sqrt(e[4*r+r]-e[4*n+n]-e[4*i+i]+1);t[r]=.5*a;const o=.5/a;t[3]=(e[4*n+i]-e[4*i+n])*o,t[n]=(e[4*n+r]+e[4*r+n])*o,t[i]=(e[4*i+r]+e[4*r+i])*o}return t},fromEuler:function(e,t,r,n,i){i=i||new _e(4);const a=.5*e,o=.5*t,s=.5*r,u=Math.sin(a),c=Math.cos(a),l=Math.sin(o),d=Math.cos(o),f=Math.sin(s),h=Math.cos(s);switch(n){case"xyz":i[0]=u*d*h+c*l*f,i[1]=c*l*h-u*d*f,i[2]=c*d*f+u*l*h,i[3]=c*d*h-u*l*f;break;case"xzy":i[0]=u*d*h-c*l*f,i[1]=c*l*h-u*d*f,i[2]=c*d*f+u*l*h,i[3]=c*d*h+u*l*f;break;case"yxz":i[0]=u*d*h+c*l*f,i[1]=c*l*h-u*d*f,i[2]=c*d*f-u*l*h,i[3]=c*d*h+u*l*f;break;case"yzx":i[0]=u*d*h+c*l*f,i[1]=c*l*h+u*d*f,i[2]=c*d*f-u*l*h,i[3]=c*d*h-u*l*f;break;case"zxy":i[0]=u*d*h-c*l*f,i[1]=c*l*h+u*d*f,i[2]=c*d*f+u*l*h,i[3]=c*d*h-u*l*f;break;case"zyx":i[0]=u*d*h-c*l*f,i[1]=c*l*h+u*d*f,i[2]=c*d*f-u*l*h,i[3]=c*d*h+u*l*f;break;default:throw new Error(`Unknown rotation order: ${n}`)}return i},copy:Me,clone:Ee,add:function(e,t,r){return(r=r||new _e(4))[0]=e[0]+t[0],r[1]=e[1]+t[1],r[2]=e[2]+t[2],r[3]=e[3]+t[3],r},subtract:Ae,sub:Oe,mulScalar:Ie,scale:Ue,divScalar:function(e,t,r){return(r=r||new _e(4))[0]=e[0]/t,r[1]=e[1]/t,r[2]=e[2]/t,r[3]=e[3]/t,r},dot:Ce,lerp:function(e,t,r,n){return(n=n||new _e(4))[0]=e[0]+r*(t[0]-e[0]),n[1]=e[1]+r*(t[1]-e[1]),n[2]=e[2]+r*(t[2]-e[2]),n[3]=e[3]+r*(t[3]-e[3]),n},length:De,len:ze,lengthSq:Re,lenSq:Be,normalize:Ge,equalsApproximately:function(e,t){return Math.abs(e[0]-t[0])<a&&Math.abs(e[1]-t[1])<a&&Math.abs(e[2]-t[2])<a&&Math.abs(e[3]-t[3])<a},equals:function(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]&&e[3]===t[3]},identity:function(e){return(e=e||new _e(4))[0]=0,e[1]=0,e[2]=0,e[3]=1,e},rotationTo:function(e,t,r){r=r||new _e(4),Le=Le||c(),Ne=Ne||c(1,0,0),Ve=Ve||c(0,1,0);const n=V(e,t);return n<-.999999?(N(Ne,e,Le),F(Le)<1e-6&&N(Ve,e,Le),Z(Le,Le),Te(Le,Math.PI,r),r):n>.999999?(r[0]=0,r[1]=0,r[2]=0,r[3]=1,r):(N(e,t,Le),r[0]=Le[0],r[1]=Le[1],r[2]=Le[2],r[3]=1+n,Ge(r,r))},sqlerp:function(e,t,r,n,i,a){return a=a||new _e(4),je=je||new _e(4),Fe=Fe||new _e(4),Pe(e,n,i,je),Pe(t,r,i,Fe),Pe(je,Fe,2*i*(1-i),a),a}});Float32Array,function(e){const t=[];e.updateAll=e=>{for(const r of t)r.update(e)},e.register=e=>class extends e{constructor(...e){super(...e),t.push(this)}}}(qe||(qe={}));const He={duration:.3,delay:0,endDelay:0,repeat:0,easing:"ease"},Ye=e=>1e3*e,$e=e=>e/1e3,Xe=()=>{},Ze=e=>e;function Qe(e,t=!0){if(e&&"finished"!==e.playState)try{e.stop?e.stop():(t&&e.commitStyles(),e.cancel())}catch(e){}}const Ke=e=>e(),Je=(e,t,r=He.duration)=>new Proxy({animations:e.map(Ke).filter(Boolean),duration:r,options:t},et),et={get:(e,t)=>{const r=e.animations[0];switch(t){case"duration":return e.duration;case"currentTime":return $e((null==r?void 0:r[t])||0);case"playbackRate":case"playState":return null==r?void 0:r[t];case"finished":return e.finished||(e.finished=Promise.all(e.animations.map(tt)).catch(Xe)),e.finished;case"stop":return()=>{e.animations.forEach((e=>Qe(e)))};case"forEachNative":return t=>{e.animations.forEach((r=>t(r,e)))};default:return void 0===(null==r?void 0:r[t])?void 0:()=>e.animations.forEach((e=>e[t]()))}},set:(e,t,r)=>{switch(t){case"currentTime":r=Ye(r);case"playbackRate":for(let n=0;n<e.animations.length;n++)e.animations[n][t]=r;return!0}return!1}},tt=e=>e.finished,rt=e=>"object"==typeof e&&Boolean(e.createAnimation),nt=e=>"number"==typeof e,it=e=>Array.isArray(e)&&!nt(e[0]),at=(e,t,r)=>-r*e+r*t+e,ot=(e,t,r)=>t-e==0?1:(r-e)/(t-e);function st(e,t){const r=e[e.length-1];for(let n=1;n<=t;n++){const i=ot(0,t,n);e.push(at(r,1,i))}}const ut=(e,t,r)=>Math.min(Math.max(r,e),t);const ct=(e,t,r)=>(((1-3*r+3*t)*e+(3*r-6*t))*e+3*t)*e,lt=1e-7,dt=12;function ft(e,t,r,n){if(e===t&&r===n)return Ze;return i=>0===i||1===i?i:ct(function(e,t,r,n,i){let a,o,s=0;do{o=t+(r-t)/2,a=ct(o,n,i)-e,a>0?r=o:t=o}while(Math.abs(a)>lt&&++s<dt);return o}(i,0,1,e,r),t,n)}const ht=e=>"function"==typeof e,pt=e=>Array.isArray(e)&&nt(e[0]),mt={ease:ft(.25,.1,.25,1),"ease-in":ft(.42,0,1,1),"ease-in-out":ft(.42,0,.58,1),"ease-out":ft(0,0,.58,1)},gt=/\((.*?)\)/;function vt(e){if(ht(e))return e;if(pt(e))return ft(...e);if(mt[e])return mt[e];if(e.startsWith("steps")){const t=gt.exec(e);if(t){const e=t[1].split(",");return((e,t="end")=>r=>{const n=(r="end"===t?Math.min(r,.999):Math.max(r,.001))*e,i="end"===t?Math.floor(n):Math.ceil(n);return ut(0,1,i/e)})(parseFloat(e[0]),e[1].trim())}}return Ze}class xt{constructor(e,t=[0,1],{easing:r,duration:n=He.duration,delay:i=He.delay,endDelay:a=He.endDelay,repeat:o=He.repeat,offset:s,direction:u="normal",autoplay:c=!0}={}){if(this.startTime=null,this.rate=1,this.t=0,this.cancelTimestamp=null,this.easing=Ze,this.duration=0,this.totalDuration=0,this.repeat=0,this.playState="idle",this.finished=new Promise(((e,t)=>{this.resolve=e,this.reject=t})),r=r||He.easing,rt(r)){const e=r.createAnimation(t);r=e.easing,t=e.keyframes||t,n=e.duration||n}this.repeat=o,this.easing=it(r)?Ze:vt(r),this.updateDuration(n);const l=function(e,t=function(e){const t=[0];return st(t,e-1),t}(e.length),r=Ze){const n=e.length,i=n-t.length;return i>0&&st(t,i),i=>{let a=0;for(;a<n-2&&!(i<t[a+1]);a++);let o=ut(0,1,ot(t[a],t[a+1],i));const s=function(e,t){return it(e)?e[((e,t,r)=>{const n=t-e;return((r-e)%n+n)%n+e})(0,e.length,t)]:e}(r,a);return o=s(o),at(e[a],e[a+1],o)}}(t,s,it(r)?r.map(vt):Ze);this.tick=t=>{var r;let n=0;n=void 0!==this.pauseTime?this.pauseTime:(t-this.startTime)*this.rate,this.t=n,n/=1e3,n=Math.max(n-i,0),"finished"===this.playState&&void 0===this.pauseTime&&(n=this.totalDuration);const o=n/this.duration;let s=Math.floor(o),c=o%1;!c&&o>=1&&(c=1),1===c&&s--;const d=s%2;("reverse"===u||"alternate"===u&&d||"alternate-reverse"===u&&!d)&&(c=1-c);const f=n>=this.totalDuration?1:Math.min(c,1),h=l(this.easing(f));e(h),void 0===this.pauseTime&&("finished"===this.playState||n>=this.totalDuration+a)?(this.playState="finished",null===(r=this.resolve)||void 0===r||r.call(this,h)):"idle"!==this.playState&&(this.frameRequestId=requestAnimationFrame(this.tick))},c&&this.play()}play(){const e=performance.now();this.playState="running",void 0!==this.pauseTime?this.startTime=e-this.pauseTime:this.startTime||(this.startTime=e),this.cancelTimestamp=this.startTime,this.pauseTime=void 0,this.frameRequestId=requestAnimationFrame(this.tick)}pause(){this.playState="paused",this.pauseTime=this.t}finish(){this.playState="finished",this.tick(0)}stop(){var e;this.playState="idle",void 0!==this.frameRequestId&&cancelAnimationFrame(this.frameRequestId),null===(e=this.reject)||void 0===e||e.call(this,!1)}cancel(){this.stop(),this.tick(this.cancelTimestamp)}reverse(){this.rate*=-1}commitStyles(){}updateDuration(e){this.duration=e,this.totalDuration=e*(this.repeat+1)}get currentTime(){return this.t}set currentTime(e){void 0!==this.pauseTime||0===this.rate?this.pauseTime=e:this.startTime=performance.now()-e/this.rate}get playbackRate(){return this.rate}set playbackRate(e){this.rate=e}}class yt{setAnimation(e){this.animation=e,null==e||e.finished.then((()=>this.clearAnimation())).catch((()=>{}))}clearAnimation(){this.animation=this.generator=void 0}}const _t=new WeakMap;function bt(e){return _t.has(e)||_t.set(e,{transforms:[],values:new Map}),_t.get(e)}const wt=["","X","Y","Z"],Tt={x:"translateX",y:"translateY",z:"translateZ"},St={syntax:"<angle>",initialValue:"0deg",toDefaultUnit:e=>e+"deg"},kt={translate:{syntax:"<length-percentage>",initialValue:"0px",toDefaultUnit:e=>e+"px"},rotate:St,scale:{syntax:"<number>",initialValue:1,toDefaultUnit:Ze},skew:St},Pt=new Map,Mt=e=>`--motion-${e}`,Et=["x","y","z"];["translate","scale","rotate","skew"].forEach((e=>{wt.forEach((t=>{Et.push(e+t),Pt.set(Mt(e+t),kt[e])}))}));const At=(e,t)=>Et.indexOf(e)-Et.indexOf(t),Ot=new Set(Et),It=e=>Ot.has(e),Ut=e=>e.sort(At).reduce(Ct,"").trim(),Ct=(e,t)=>`${e} ${t}(var(${Mt(t)}))`,Dt=e=>e.startsWith("--"),zt=new Set,Rt=(e,t)=>document.createElement("div").animate(e,t),Bt={cssRegisterProperty:()=>"undefined"!=typeof CSS&&Object.hasOwnProperty.call(CSS,"registerProperty"),waapi:()=>Object.hasOwnProperty.call(Element.prototype,"animate"),partialKeyframes:()=>{try{Rt({opacity:[1]})}catch(e){return!1}return!0},finished:()=>Boolean(Rt({opacity:[0,1]},{duration:.001}).finished),linearEasing:()=>{try{Rt({opacity:0},{easing:"linear(0, 1)"})}catch(e){return!1}return!0}},Gt={},Lt={};for(const e in Bt)Lt[e]=()=>(void 0===Gt[e]&&(Gt[e]=Bt[e]()),Gt[e]);const Nt=(e,t)=>ht(e)?Lt.linearEasing()?`linear(${((e,t)=>{let r="";const n=Math.round(t/.015);for(let t=0;t<n;t++)r+=e(ot(0,n-1,t))+", ";return r.substring(0,r.length-2)})(e,t)})`:He.easing:pt(e)?Vt(e):e,Vt=([e,t,r,n])=>`cubic-bezier(${e}, ${t}, ${r}, ${n})`;function jt(e){return Tt[e]&&(e=Tt[e]),It(e)?Mt(e):e}const Ft=(e,t)=>{t=jt(t);let r=Dt(t)?e.style.getPropertyValue(t):getComputedStyle(e)[t];if(!r&&0!==r){const e=Pt.get(t);e&&(r=e.initialValue)}return r},qt=(e,t,r)=>{t=jt(t),Dt(t)?e.style.setProperty(t,r):e.style[t]=r},Wt=e=>"string"==typeof e;function Ht(e,t){var r;let n=(null==t?void 0:t.toDefaultUnit)||Ze;const i=e[e.length-1];if(Wt(i)){const e=(null===(r=i.match(/(-?[\d.]+)([a-z%]*)/))||void 0===r?void 0:r[2])||"";e&&(n=t=>t+e)}return n}function Yt(e,t,r,n={},i){const a=window.__MOTION_DEV_TOOLS_RECORD,o=!1!==n.record&&a;let s,{duration:u=He.duration,delay:c=He.delay,endDelay:l=He.endDelay,repeat:d=He.repeat,easing:f=He.easing,persist:h=!1,direction:p,offset:m,allowWebkitAcceleration:g=!1,autoplay:v=!0}=n;const x=bt(e),y=It(t);let _=Lt.waapi();y&&((e,t)=>{Tt[t]&&(t=Tt[t]);const{transforms:r}=bt(e);var n,i;i=t,-1===(n=r).indexOf(i)&&n.push(i),e.style.transform=Ut(r)})(e,t);const b=jt(t),w=function(e,t){return e.has(t)||e.set(t,new yt),e.get(t)}(x.values,b),T=Pt.get(b);return Qe(w.animation,!(rt(f)&&w.generator)&&!1!==n.record),()=>{const x=()=>{var t,r;return null!==(r=null!==(t=Ft(e,b))&&void 0!==t?t:null==T?void 0:T.initialValue)&&void 0!==r?r:0};let S=function(e,t){for(let r=0;r<e.length;r++)null===e[r]&&(e[r]=r?e[r-1]:t());return e}((e=>Array.isArray(e)?e:[e])(r),x);const k=Ht(S,T);if(rt(f)){const e=f.createAnimation(S,"opacity"!==t,x,b,w);f=e.easing,S=e.keyframes||S,u=e.duration||u}if(Dt(b)&&(Lt.cssRegisterProperty()?function(e){if(!zt.has(e)){zt.add(e);try{const{syntax:t,initialValue:r}=Pt.has(e)?Pt.get(e):{};CSS.registerProperty({name:e,inherits:!1,syntax:t,initialValue:r})}catch(e){}}}(b):_=!1),y&&!Lt.linearEasing()&&(ht(f)||it(f)&&f.some(ht))&&(_=!1),_){T&&(S=S.map((e=>nt(e)?T.toDefaultUnit(e):e))),1!==S.length||Lt.partialKeyframes()&&!o||S.unshift(x());const t={delay:Ye(c),duration:Ye(u),endDelay:Ye(l),easing:it(f)?void 0:Nt(f,u),direction:p,iterations:d+1,fill:"both"};s=e.animate({[b]:S,offset:m,easing:it(f)?f.map((e=>Nt(e,u))):void 0},t),s.finished||(s.finished=new Promise(((e,t)=>{s.onfinish=e,s.oncancel=t})));const r=S[S.length-1];s.finished.then((()=>{h||(qt(e,b,r),s.cancel())})).catch(Xe),g||(s.playbackRate=1.000001)}else if(i&&y)S=S.map((e=>"string"==typeof e?parseFloat(e):e)),1===S.length&&S.unshift(parseFloat(x())),s=new i((t=>{qt(e,b,k?k(t):t)}),S,Object.assign(Object.assign({},n),{duration:u,easing:f}));else{const t=S[S.length-1];qt(e,b,T&&nt(t)?T.toDefaultUnit(t):t)}return o&&a(e,t,S,{duration:u,delay:c,easing:f,repeat:d,offset:m},"motion-one"),w.setAnimation(s),s&&!v&&s.pause(),s}}const $t=(e,t)=>e[t]?Object.assign(Object.assign({},e),e[t]):Object.assign({},e);function Xt(e,t,r){return ht(e)?e(t,r):e}const Zt=(Qt=xt,function(e,t,r={}){const n=(e=function(e,t){return"string"==typeof e?e=document.querySelectorAll(e):e instanceof Element&&(e=[e]),Array.from(e||[])}(e)).length;Boolean(n),Boolean(t);const i=[];for(let a=0;a<n;a++){const o=e[a];for(const e in t){const s=$t(r,e);s.delay=Xt(s.delay,a,n);const u=Yt(o,e,t[e],s,Qt);i.push(u)}}return Je(i,r,r.duration)});var Qt;function Kt(e,t={}){return Je([()=>{const r=new xt(e,[0,1],t);return r.finished.catch((()=>{})),r}],t,t.duration)}function Jt(e,t,r){return(ht(e)?Kt:Zt)(e,t,r)}function er(e,t,r){const n=Math.max(t-5,0);return i=r-e(n),(a=t-n)?i*(1e3/a):0;var i,a}function tr(e){return nt(e)&&!isNaN(e)}function rr(e){return Wt(e)?parseFloat(e):e}const nr=function(e){const t=new WeakMap;return(e={})=>{const r=new Map,n=(t=0,n=100,i=0,a=!1)=>{const o=`${t}-${n}-${i}-${a}`;return r.has(o)||r.set(o,(({from:e=0,velocity:t=0,power:r=.8,decay:n=.325,bounceDamping:i,bounceStiffness:a,changeTarget:o,min:s,max:u,restDistance:c=.5,restSpeed:l})=>{n=Ye(n);const d={hasReachedTarget:!1,done:!1,current:e,target:e},f=e=>void 0===s?u:void 0===u||Math.abs(s-e)<Math.abs(u-e)?s:u;let h=r*t;const p=e+h,m=void 0===o?p:o(p);d.target=m,m!==p&&(h=m-e);const g=e=>-h*Math.exp(-e/n),v=e=>m+g(e),x=e=>{const t=g(e),r=v(e);d.done=Math.abs(t)<=c,d.current=d.done?m:r};let y,_;const b=e=>{var t;t=d.current,(void 0!==s&&t<s||void 0!==u&&t>u)&&(y=e,_=(({stiffness:e=100,damping:t=10,mass:r=1,from:n=0,to:i=1,velocity:a=0,restSpeed:o,restDistance:s}={})=>{a=a?$e(a):0;const u={done:!1,hasReachedTarget:!1,current:n,target:i},c=i-n,l=Math.sqrt(e/r)/1e3,d=((e=100,t=10,r=1)=>t/(2*Math.sqrt(e*r)))(e,t,r),f=Math.abs(c)<5;let h;if(o||(o=f?.01:2),s||(s=f?.005:.5),d<1){const e=l*Math.sqrt(1-d*d);h=t=>i-Math.exp(-d*l*t)*((d*l*c-a)/e*Math.sin(e*t)+c*Math.cos(e*t))}else h=e=>i-Math.exp(-l*e)*(c+(l*c-a)*e);return e=>{u.current=h(e);const t=0===e?a:er(h,e,u.current),r=Math.abs(t)<=o,c=Math.abs(i-u.current)<=s;var l,d,f;return u.done=r&&c,u.hasReachedTarget=(l=n,d=i,f=u.current,l<d&&f>=d||l>d&&f<=d),u}})({from:d.current,to:f(d.current),velocity:er(v,e,d.current),damping:i,stiffness:a,restDistance:c,restSpeed:l}))};return b(0),e=>{let t=!1;return _||void 0!==y||(t=!0,x(e),b(e)),void 0!==y&&e>y?(d.hasReachedTarget=!0,_(e-y)):(d.hasReachedTarget=!1,!t&&x(e),d)}})(Object.assign({from:t,to:n,velocity:i},e))),r.get(o)},i=(e,r)=>(t.has(e)||t.set(e,function(e,t=Ze){let r,n=10,i=e(0);const a=[t(i.current)];for(;!i.done&&n<1e4;)i=e(n),a.push(t(i.done?i.target:i.current)),void 0===r&&i.hasReachedTarget&&(r=n),n+=10;const o=n-10;return 1===a.length&&a.push(i.current),{keyframes:a,duration:o/1e3,overshootDuration:(null!=r?r:o)/1e3}}(e,r)),t.get(e));return{createAnimation:(e,t=!0,r,a,o)=>{let s,u,c,l=0,d=Ze;const f=e.length;if(t)if(d=Ht(e,a?Pt.get(jt(a)):void 0),c=rr(e[f-1]),f>1&&null!==e[0])u=rr(e[0]);else{const e=null==o?void 0:o.generator;if(e){const{animation:t,generatorStartTime:r}=o,n=(null==t?void 0:t.startTime)||r||0,i=(null==t?void 0:t.currentTime)||performance.now()-n,a=e(i).current;u=a,l=er((t=>e(t).current),i,a)}else r&&(u=rr(r()))}if(tr(u)&&tr(c)){const e=n(u,c,l,null==a?void 0:a.includes("scale"));s=Object.assign(Object.assign({},i(e,d)),{easing:"linear"}),o&&(o.generator=e,o.generatorStartTime=performance.now())}return s||(s={easing:"ease",duration:i(n(0,100)).overshootDuration}),s}}}}();var ir=function(e,t,r,n){var i,a=arguments.length,o=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(o=(a<3?i(o):a>3?i(t,r,o):i(t,r))||o);return a>3&&o&&Object.defineProperty(t,r,o),o};let ar=class{value;target;constructor(e){this.value=e,this.target=e}update(){Jt((e=>{this.value=ne.lerp(this.value,this.target,e)}),{easing:nr({velocity:2e-4*La})})}};ar=ir([qe.register],ar);let or=class{value;target;constructor(e){this.value=e,this.target=e}update(){Jt((e=>{this.value=this.value+(this.target-this.value)*e}),{easing:nr({velocity:2e-4*La})})}};or=ir([qe.register],or);let sr=class{value;target;constructor(e){this.value=e,this.target=e}update(){Jt((e=>{this.value=We.slerp(this.value,this.target,e)}),{easing:nr({velocity:2e-4*La})})}};sr=ir([qe.register],sr);class ur{#e;#t;#r;#n;constructor(e){this.#e=new ar(e.position),this.#t=new sr(e.rotation),this.#r=new ar(e.scale??ne.create(1,1,1)),this.#n=this.transform}get transform(){let e=ye.identity();return ye.translate(e,this.#e.value,e),ye.scale(e,this.#r.value,e),ye.multiply(e,ye.fromQuat(this.#t.value),e),e}get previousTransform(){return this.#n}get inverseTransform(){return ye.invert(this.transform)}get previousInverseTransform(){return ye.invert(this.#n)}set targetPosition(e){this.#e.target=e}get targetPosition(){return this.#e.target}set targetRotation(e){this.#t.target=e}get targetRotation(){return this.#t.target}get direction(){return ne.transformQuat(ne.create(0,0,1),this.#t.value)}get right(){return ne.transformQuat(ne.create(1,0,0),this.#t.value)}get left(){return ne.transformQuat(ne.create(-1,0,0),this.#t.value)}get up(){return ne.transformQuat(ne.create(0,1,0),this.#t.value)}get down(){return ne.transformQuat(ne.create(0,-1,0),this.#t.value)}get viewMatrix(){const e=this.#e.value;return ye.lookAt(e,ne.add(e,this.direction),this.up)}get inverseViewMatrix(){return ye.invert(this.viewMatrix)}}function cr(e,t){let r=1,n=0;for(;e>0;)r/=t,n+=r*(e%t),e=Math.floor(e/t);return n}const lr=new class{pressed={w:!1,a:!1,s:!1,d:!1,q:!1,e:!1," ":!1,shift:!1};constructor(){window.addEventListener("keydown",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!0})),window.addEventListener("keyup",(e=>{const t=e.key.toLowerCase();this.pressed[t]=!1})),window.addEventListener("blur",(()=>{Object.keys(this.pressed).forEach((e=>{this.pressed[e]=!1}))}))}};let dr=class extends ur{fieldOfView;near=.5;far=1e4;constructor(e){super({position:e.position,rotation:We.fromMat(ye.lookAt(ne.create(),e.direction,ne.create(0,1,0)))}),this.fieldOfView=e.fieldOfView}get projectionMatrix(){return ye.perspective(this.fieldOfView,Ra[0]/Ra[1],this.near,this.far)}get inverseProjectionMatrix(){return ye.invert(this.projectionMatrix)}get viewProjectionMatrix(){const e=((e,t)=>{const r=e%8,n=2*cr(r+1,2)-1,i=2*cr(r+1,3)-1,a=n/Ra[0],o=i/Ra[1],s=ne.mulScalar(ne.create(a,o,0),1),u=ye.translate(ye.identity(),s);return ye.mul(t,u)})(Na,this.viewMatrix);return ye.mul(this.projectionMatrix,e)}get inverseViewProjectionMatrix(){return ye.invert(this.viewProjectionMatrix)}update(){const e=.005*La,t=.04*La;let r=ne.zero();lr.pressed.a&&(r=ne.add(r,Va.left)),lr.pressed.d&&(r=ne.add(r,Va.right)),lr.pressed.w&&(r=ne.add(r,Va.direction)),lr.pressed.s&&(r=ne.subtract(r,Va.direction)),lr.pressed.e&&(Va.targetRotation=We.rotateY(Va.targetRotation,e)),lr.pressed.q&&(Va.targetRotation=We.rotateY(Va.targetRotation,-e)),lr.pressed[" "]&&(r=ne.add(r,Va.up)),lr.pressed.shift&&(r=ne.add(r,Va.down)),r=ne.normalize(r),Va.targetPosition=ne.add(Va.targetPosition,ne.mulScalar(r,t))}};dr=function(e,t,r,n){var i,a=arguments.length,o=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(o=(a<3?i(o):a>3?i(t,r,o):i(t,r))||o);return a>3&&o&&Object.defineProperty(t,r,o),o}([qe.register],dr);const fr="@group(0) @binding(0) var mySampler : sampler;\r\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\r\n//@group(0) @binding(2) var debugTexture : texture_2d<f32>;\r\n\r\nstruct VertexOutput {\r\n  @builtin(position) Position : vec4<f32>,\r\n  @location(0) fragUV : vec2<f32>,\r\n}\r\n\r\n@vertex\r\nfn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\r\n  const pos = array(\r\n    vec2( 1.0,  1.0),\r\n    vec2( 1.0, -1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2( 1.0,  1.0),\r\n    vec2(-1.0, -1.0),\r\n    vec2(-1.0,  1.0),\r\n  );\r\n\r\n  const uv = array(\r\n    vec2(1.0, 0.0),\r\n    vec2(1.0, 1.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(1.0, 0.0),\r\n    vec2(0.0, 1.0),\r\n    vec2(0.0, 0.0),\r\n  );\r\n\r\n  var output : VertexOutput;\r\n  output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\r\n  output.fragUV = uv[VertexIndex];\r\n  return output;\r\n}\r\n\r\nfn get_debug_colour(index : i32) -> vec4<f32> {\r\n  let colours = array(\r\n    vec4<f32>(1.0, 0.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(1.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(0.0, 0.0, 0.0, 1.0),\r\n  );\r\n  return colours[index % 8];\r\n}\r\n\r\n@fragment\r\nfn fragment_main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\r\n    let pixel = fragUV * vec2<f32>(textureDimensions(myTexture));\r\n    var colour = textureLoad(myTexture, vec2<u32>(pixel),0);\r\n    return abs(colour);\r\n}\r\n",hr=async e=>{const t=e.createShaderModule({code:fr}),r=e.createRenderPipeline({layout:"auto",vertex:{module:t,entryPoint:"vertex_main"},fragment:{module:t,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]}});return{render:t=>{const n=t.commandEncoder.beginRenderPass({timestampWrites:t.timestampWrites,colorAttachments:[{view:Ca.getCurrentTexture().createView(),loadOp:"clear",clearValue:[.3,.3,.3,1],storeOp:"store"}]}),i=e.createBindGroup({layout:r.getBindGroupLayout(0),entries:[{binding:1,resource:t.outputTextures.finalTexture.view}]});return n.setPipeline(r),n.setBindGroup(0,i),n.draw(6),n.end(),[t.commandEncoder.finish()]},label:"fullscreen quad"}},pr=e=>e&&"number"==typeof e.length&&e.buffer instanceof ArrayBuffer&&"number"==typeof e.byteLength,mr={i32:{numElements:1,align:4,size:4,type:"i32",View:Int32Array},u32:{numElements:1,align:4,size:4,type:"u32",View:Uint32Array},f32:{numElements:1,align:4,size:4,type:"f32",View:Float32Array},f16:{numElements:1,align:2,size:2,type:"u16",View:Uint16Array},vec2f:{numElements:2,align:8,size:8,type:"f32",View:Float32Array},vec2i:{numElements:2,align:8,size:8,type:"i32",View:Int32Array},vec2u:{numElements:2,align:8,size:8,type:"u32",View:Uint32Array},vec2h:{numElements:2,align:4,size:4,type:"u16",View:Uint16Array},vec3i:{numElements:3,align:16,size:12,type:"i32",View:Int32Array},vec3u:{numElements:3,align:16,size:12,type:"u32",View:Uint32Array},vec3f:{numElements:3,align:16,size:12,type:"f32",View:Float32Array},vec3h:{numElements:3,align:8,size:6,type:"u16",View:Uint16Array},vec4i:{numElements:4,align:16,size:16,type:"i32",View:Int32Array},vec4u:{numElements:4,align:16,size:16,type:"u32",View:Uint32Array},vec4f:{numElements:4,align:16,size:16,type:"f32",View:Float32Array},vec4h:{numElements:4,align:8,size:8,type:"u16",View:Uint16Array},mat2x2f:{numElements:4,align:8,size:16,type:"f32",View:Float32Array},mat2x2h:{numElements:4,align:4,size:8,type:"u16",View:Uint16Array},mat3x2f:{numElements:6,align:8,size:24,type:"f32",View:Float32Array},mat3x2h:{numElements:6,align:4,size:12,type:"u16",View:Uint16Array},mat4x2f:{numElements:8,align:8,size:32,type:"f32",View:Float32Array},mat4x2h:{numElements:8,align:4,size:16,type:"u16",View:Uint16Array},mat2x3f:{numElements:8,align:16,size:32,pad:[3,1],type:"f32",View:Float32Array},mat2x3h:{numElements:8,align:8,size:16,pad:[3,1],type:"u16",View:Uint16Array},mat3x3f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x3h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x3f:{numElements:16,align:16,size:64,pad:[3,1],type:"f32",View:Float32Array},mat4x3h:{numElements:16,align:8,size:32,pad:[3,1],type:"u16",View:Uint16Array},mat2x4f:{numElements:8,align:16,size:32,type:"f32",View:Float32Array},mat2x4h:{numElements:8,align:8,size:16,type:"u16",View:Uint16Array},mat3x4f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x4h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x4f:{numElements:16,align:16,size:64,type:"f32",View:Float32Array},mat4x4h:{numElements:16,align:8,size:32,type:"u16",View:Uint16Array},bool:{numElements:0,align:1,size:0,type:"bool",View:Uint32Array}},gr={...mr,"atomic<i32>":mr.i32,"atomic<u32>":mr.u32,"vec2<i32>":mr.vec2i,"vec2<u32>":mr.vec2u,"vec2<f32>":mr.vec2f,"vec2<f16>":mr.vec2h,"vec3<i32>":mr.vec3i,"vec3<u32>":mr.vec3u,"vec3<f32>":mr.vec3f,"vec3<f16>":mr.vec3h,"vec4<i32>":mr.vec4i,"vec4<u32>":mr.vec4u,"vec4<f32>":mr.vec4f,"vec4<f16>":mr.vec4h,"mat2x2<f32>":mr.mat2x2f,"mat2x2<f16>":mr.mat2x2h,"mat3x2<f32>":mr.mat3x2f,"mat3x2<f16>":mr.mat3x2h,"mat4x2<f32>":mr.mat4x2f,"mat4x2<f16>":mr.mat4x2h,"mat2x3<f32>":mr.mat2x3f,"mat2x3<f16>":mr.mat2x3h,"mat3x3<f32>":mr.mat3x3f,"mat3x3<f16>":mr.mat3x3h,"mat4x3<f32>":mr.mat4x3f,"mat4x3<f16>":mr.mat4x3h,"mat2x4<f32>":mr.mat2x4f,"mat2x4<f16>":mr.mat2x4h,"mat3x4<f32>":mr.mat3x4f,"mat3x4<f16>":mr.mat3x4h,"mat4x4<f32>":mr.mat4x4f,"mat4x4<f16>":mr.mat4x4h},vr=(xr=gr,Object.keys(xr));var xr,yr,_r,br,wr,Tr;!function(e=[],t){const r=new Set;for(const n of vr){const i=gr[n];r.has(i)||(r.add(i),i.flatten=e.includes(n)?t:!t)}}(),new WeakMap;class Sr{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class kr{constructor(){}get isAstNode(){return!0}get astNodeType(){return""}evaluate(e){throw new Error("Cannot evaluate node")}evaluateString(e){return this.evaluate(e).toString()}search(e){}searchBlock(e,t){if(e){t(Pr.instance);for(const r of e)r instanceof Array?this.searchBlock(r,t):r.search(t);t(Mr.instance)}}}class Pr extends kr{}Pr.instance=new Pr;class Mr extends kr{}Mr.instance=new Mr;class Er extends kr{constructor(){super()}}class Ar extends Er{constructor(e,t,r,n){super(),this.name=e,this.args=t,this.returnType=r,this.body=n}get astNodeType(){return"function"}search(e){this.searchBlock(this.body,e)}}class Or extends Er{constructor(e){super(),this.expression=e}get astNodeType(){return"staticAssert"}search(e){this.expression.search(e)}}class Ir extends Er{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"while"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class Ur extends Er{constructor(e){super(),this.body=e}get astNodeType(){return"continuing"}search(e){this.searchBlock(this.body,e)}}class Cr extends Er{constructor(e,t,r,n){super(),this.init=e,this.condition=t,this.increment=r,this.body=n}get astNodeType(){return"for"}search(e){var t,r,n;null===(t=this.init)||void 0===t||t.search(e),null===(r=this.condition)||void 0===r||r.search(e),null===(n=this.increment)||void 0===n||n.search(e),this.searchBlock(this.body,e)}}class Dr extends Er{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"var"}search(e){var t;e(this),null===(t=this.value)||void 0===t||t.search(e)}}class zr extends Er{constructor(e,t,r){super(),this.name=e,this.type=t,this.value=r}get astNodeType(){return"override"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class Rr extends Er{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"let"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class Br extends Er{constructor(e,t,r,n,i){super(),this.name=e,this.type=t,this.storage=r,this.access=n,this.value=i}get astNodeType(){return"const"}evaluate(e){return this.value.evaluate(e)}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}!function(e){e.increment="++",e.decrement="--"}(yr||(yr={})),function(e){e.parse=function(t){const r=t;if("parse"==r)throw new Error("Invalid value for IncrementOperator");return e[r]}}(yr||(yr={}));class Gr extends Er{constructor(e,t){super(),this.operator=e,this.variable=t}get astNodeType(){return"increment"}search(e){this.variable.search(e)}}!function(e){e.assign="=",e.addAssign="+=",e.subtractAssin="-=",e.multiplyAssign="*=",e.divideAssign="/=",e.moduloAssign="%=",e.andAssign="&=",e.orAssign="|=",e.xorAssign="^=",e.shiftLeftAssign="<<=",e.shiftRightAssign=">>="}(_r||(_r={})),function(e){e.parse=function(e){const t=e;if("parse"==t)throw new Error("Invalid value for AssignOperator");return t}}(_r||(_r={}));class Lr extends Er{constructor(e,t,r){super(),this.operator=e,this.variable=t,this.value=r}get astNodeType(){return"assign"}search(e){this.value.search(e)}}class Nr extends Er{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"call"}}class Vr extends Er{constructor(e,t){super(),this.body=e,this.continuing=t}get astNodeType(){return"loop"}}class jr extends Er{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"body"}}class Fr extends Er{constructor(e,t,r,n){super(),this.condition=e,this.body=t,this.elseif=r,this.else=n}get astNodeType(){return"if"}search(e){this.condition.search(e),this.searchBlock(this.body,e),this.searchBlock(this.elseif,e),this.searchBlock(this.else,e)}}class qr extends Er{constructor(e){super(),this.value=e}get astNodeType(){return"return"}search(e){var t;null===(t=this.value)||void 0===t||t.search(e)}}class Wr extends Er{constructor(e){super(),this.name=e}get astNodeType(){return"enable"}}class Hr extends Er{constructor(e,t){super(),this.name=e,this.type=t}get astNodeType(){return"alias"}}class Yr extends Er{constructor(){super()}get astNodeType(){return"discard"}}class $r extends Er{constructor(){super()}get astNodeType(){return"break"}}class Xr extends Er{constructor(){super()}get astNodeType(){return"continue"}}class Zr extends Er{constructor(e){super(),this.name=e}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}}class Qr extends Zr{constructor(e,t){super(e),this.members=t}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(e){for(let t=0;t<this.members.length;t++)if(this.members[t].name==e)return t;return-1}}class Kr extends Zr{constructor(e,t,r){super(e),this.format=t,this.access=r}get astNodeType(){return"template"}}class Jr extends Zr{constructor(e,t,r,n){super(e),this.storage=t,this.type=r,this.access=n}get astNodeType(){return"pointer"}}class en extends Zr{constructor(e,t,r,n){super(e),this.attributes=t,this.format=r,this.count=n}get astNodeType(){return"array"}get isArray(){return!0}}class tn extends Zr{constructor(e,t,r){super(e),this.format=t,this.access=r}get astNodeType(){return"sampler"}}class rn extends kr{constructor(){super()}}class nn extends rn{constructor(e){super(),this.value=e}get astNodeType(){return"stringExpr"}toString(){return this.value}evaluateString(){return this.value}}class an extends rn{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"createExpr"}}class on extends rn{constructor(e,t){super(),this.name=e,this.args=t}get astNodeType(){return"callExpr"}evaluate(e){switch(this.name){case"abs":return Math.abs(this.args[0].evaluate(e));case"acos":return Math.acos(this.args[0].evaluate(e));case"acosh":return Math.acosh(this.args[0].evaluate(e));case"asin":return Math.asin(this.args[0].evaluate(e));case"asinh":return Math.asinh(this.args[0].evaluate(e));case"atan":return Math.atan(this.args[0].evaluate(e));case"atan2":return Math.atan2(this.args[0].evaluate(e),this.args[1].evaluate(e));case"atanh":return Math.atanh(this.args[0].evaluate(e));case"ceil":return Math.ceil(this.args[0].evaluate(e));case"clamp":return Math.min(Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e)),this.args[2].evaluate(e));case"cos":return Math.cos(this.args[0].evaluate(e));case"degrees":return 180*this.args[0].evaluate(e)/Math.PI;case"distance":return Math.sqrt(Math.pow(this.args[0].evaluate(e)-this.args[1].evaluate(e),2));case"dot":case"exp":return Math.exp(this.args[0].evaluate(e));case"exp2":return Math.pow(2,this.args[0].evaluate(e));case"floor":return Math.floor(this.args[0].evaluate(e));case"fma":return this.args[0].evaluate(e)*this.args[1].evaluate(e)+this.args[2].evaluate(e);case"fract":case"modf":return this.args[0].evaluate(e)-Math.floor(this.args[0].evaluate(e));case"inverseSqrt":return 1/Math.sqrt(this.args[0].evaluate(e));case"log":return Math.log(this.args[0].evaluate(e));case"log2":return Math.log2(this.args[0].evaluate(e));case"max":return Math.max(this.args[0].evaluate(e),this.args[1].evaluate(e));case"min":return Math.min(this.args[0].evaluate(e),this.args[1].evaluate(e));case"mix":return this.args[0].evaluate(e)*(1-this.args[2].evaluate(e))+this.args[1].evaluate(e)*this.args[2].evaluate(e);case"pow":return Math.pow(this.args[0].evaluate(e),this.args[1].evaluate(e));case"radians":return this.args[0].evaluate(e)*Math.PI/180;case"round":return Math.round(this.args[0].evaluate(e));case"sign":return Math.sign(this.args[0].evaluate(e));case"sin":return Math.sin(this.args[0].evaluate(e));case"sinh":return Math.sinh(this.args[0].evaluate(e));case"saturate":return Math.min(Math.max(this.args[0].evaluate(e),0),1);case"smoothstep":return this.args[0].evaluate(e)*this.args[0].evaluate(e)*(3-2*this.args[0].evaluate(e));case"sqrt":return Math.sqrt(this.args[0].evaluate(e));case"step":return this.args[0].evaluate(e)<this.args[1].evaluate(e)?0:1;case"tan":return Math.tan(this.args[0].evaluate(e));case"tanh":return Math.tanh(this.args[0].evaluate(e));case"trunc":return Math.trunc(this.args[0].evaluate(e));default:throw new Error("Non const function: "+this.name)}}search(e){for(const t of this.args)t.search(e);e(this)}}class sn extends rn{constructor(e){super(),this.name=e}get astNodeType(){return"varExpr"}search(e){e(this)}}class un extends rn{constructor(e,t){super(),this.name=e,this.initializer=t}get astNodeType(){return"constExpr"}evaluate(e){var t,r;if(this.initializer instanceof an){const n=null===(t=this.postfix)||void 0===t?void 0:t.evaluateString(e),i=null===(r=this.initializer.type)||void 0===r?void 0:r.name,a=e.structs.get(i),o=null==a?void 0:a.getMemberIndex(n);if(-1!=o)return this.initializer.args[o].evaluate(e);console.log(o)}return this.initializer.evaluate(e)}search(e){this.initializer.search(e)}}class cn extends rn{constructor(e){super(),this.value=e}get astNodeType(){return"literalExpr"}evaluate(){return this.value}}class ln extends rn{constructor(e,t){super(),this.type=e,this.value=t}get astNodeType(){return"bitcastExpr"}search(e){this.value.search(e)}}class dn extends rn{constructor(e,t){super(),this.type=e,this.args=t}get astNodeType(){return"typecastExpr"}evaluate(e){return this.args[0].evaluate(e)}search(e){this.searchBlock(this.args,e)}}class fn extends rn{constructor(e){super(),this.contents=e}get astNodeType(){return"groupExpr"}evaluate(e){return this.contents[0].evaluate(e)}search(e){this.searchBlock(this.contents,e)}}class hn extends rn{constructor(){super()}}class pn extends hn{constructor(e,t){super(),this.operator=e,this.right=t}get astNodeType(){return"unaryOp"}evaluate(e){switch(this.operator){case"+":return this.right.evaluate(e);case"-":return-this.right.evaluate(e);case"!":return this.right.evaluate(e)?0:1;case"~":return~this.right.evaluate(e);default:throw new Error("Unknown unary operator: "+this.operator)}}search(e){this.right.search(e)}}class mn extends hn{constructor(e,t,r){super(),this.operator=e,this.left=t,this.right=r}get astNodeType(){return"binaryOp"}evaluate(e){switch(this.operator){case"+":return this.left.evaluate(e)+this.right.evaluate(e);case"-":return this.left.evaluate(e)-this.right.evaluate(e);case"*":return this.left.evaluate(e)*this.right.evaluate(e);case"/":return this.left.evaluate(e)/this.right.evaluate(e);case"%":return this.left.evaluate(e)%this.right.evaluate(e);case"==":return this.left.evaluate(e)==this.right.evaluate(e)?1:0;case"!=":return this.left.evaluate(e)!=this.right.evaluate(e)?1:0;case"<":return this.left.evaluate(e)<this.right.evaluate(e)?1:0;case">":return this.left.evaluate(e)>this.right.evaluate(e)?1:0;case"<=":return this.left.evaluate(e)<=this.right.evaluate(e)?1:0;case">=":return this.left.evaluate(e)>=this.right.evaluate(e)?1:0;case"&&":return this.left.evaluate(e)&&this.right.evaluate(e)?1:0;case"||":return this.left.evaluate(e)||this.right.evaluate(e)?1:0;default:throw new Error(`Unknown operator ${this.operator}`)}}search(e){this.left.search(e),this.right.search(e)}}class gn extends kr{constructor(){super()}}class vn extends gn{constructor(e,t){super(),this.selector=e,this.body=t}get astNodeType(){return"case"}search(e){this.searchBlock(this.body,e)}}class xn extends gn{constructor(e){super(),this.body=e}get astNodeType(){return"default"}search(e){this.searchBlock(this.body,e)}}class yn extends kr{constructor(e,t,r){super(),this.name=e,this.type=t,this.attributes=r}get astNodeType(){return"argument"}}class _n extends kr{constructor(e,t){super(),this.condition=e,this.body=t}get astNodeType(){return"elseif"}search(e){this.condition.search(e),this.searchBlock(this.body,e)}}class bn extends kr{constructor(e,t,r){super(),this.name=e,this.type=t,this.attributes=r}get astNodeType(){return"member"}}class wn extends kr{constructor(e,t){super(),this.name=e,this.value=t}get astNodeType(){return"attribute"}}!function(e){e[e.token=0]="token",e[e.keyword=1]="keyword",e[e.reserved=2]="reserved"}(wr||(wr={}));class Tn{constructor(e,t,r){this.name=e,this.type=t,this.rule=r}toString(){return this.name}}class Sn{}br=Sn,Sn.none=new Tn("",wr.reserved,""),Sn.eof=new Tn("EOF",wr.token,""),Sn.reserved={asm:new Tn("asm",wr.reserved,"asm"),bf16:new Tn("bf16",wr.reserved,"bf16"),do:new Tn("do",wr.reserved,"do"),enum:new Tn("enum",wr.reserved,"enum"),f16:new Tn("f16",wr.reserved,"f16"),f64:new Tn("f64",wr.reserved,"f64"),handle:new Tn("handle",wr.reserved,"handle"),i8:new Tn("i8",wr.reserved,"i8"),i16:new Tn("i16",wr.reserved,"i16"),i64:new Tn("i64",wr.reserved,"i64"),mat:new Tn("mat",wr.reserved,"mat"),premerge:new Tn("premerge",wr.reserved,"premerge"),regardless:new Tn("regardless",wr.reserved,"regardless"),typedef:new Tn("typedef",wr.reserved,"typedef"),u8:new Tn("u8",wr.reserved,"u8"),u16:new Tn("u16",wr.reserved,"u16"),u64:new Tn("u64",wr.reserved,"u64"),unless:new Tn("unless",wr.reserved,"unless"),using:new Tn("using",wr.reserved,"using"),vec:new Tn("vec",wr.reserved,"vec"),void:new Tn("void",wr.reserved,"void")},Sn.keywords={array:new Tn("array",wr.keyword,"array"),atomic:new Tn("atomic",wr.keyword,"atomic"),bool:new Tn("bool",wr.keyword,"bool"),f32:new Tn("f32",wr.keyword,"f32"),i32:new Tn("i32",wr.keyword,"i32"),mat2x2:new Tn("mat2x2",wr.keyword,"mat2x2"),mat2x3:new Tn("mat2x3",wr.keyword,"mat2x3"),mat2x4:new Tn("mat2x4",wr.keyword,"mat2x4"),mat3x2:new Tn("mat3x2",wr.keyword,"mat3x2"),mat3x3:new Tn("mat3x3",wr.keyword,"mat3x3"),mat3x4:new Tn("mat3x4",wr.keyword,"mat3x4"),mat4x2:new Tn("mat4x2",wr.keyword,"mat4x2"),mat4x3:new Tn("mat4x3",wr.keyword,"mat4x3"),mat4x4:new Tn("mat4x4",wr.keyword,"mat4x4"),ptr:new Tn("ptr",wr.keyword,"ptr"),sampler:new Tn("sampler",wr.keyword,"sampler"),sampler_comparison:new Tn("sampler_comparison",wr.keyword,"sampler_comparison"),struct:new Tn("struct",wr.keyword,"struct"),texture_1d:new Tn("texture_1d",wr.keyword,"texture_1d"),texture_2d:new Tn("texture_2d",wr.keyword,"texture_2d"),texture_2d_array:new Tn("texture_2d_array",wr.keyword,"texture_2d_array"),texture_3d:new Tn("texture_3d",wr.keyword,"texture_3d"),texture_cube:new Tn("texture_cube",wr.keyword,"texture_cube"),texture_cube_array:new Tn("texture_cube_array",wr.keyword,"texture_cube_array"),texture_multisampled_2d:new Tn("texture_multisampled_2d",wr.keyword,"texture_multisampled_2d"),texture_storage_1d:new Tn("texture_storage_1d",wr.keyword,"texture_storage_1d"),texture_storage_2d:new Tn("texture_storage_2d",wr.keyword,"texture_storage_2d"),texture_storage_2d_array:new Tn("texture_storage_2d_array",wr.keyword,"texture_storage_2d_array"),texture_storage_3d:new Tn("texture_storage_3d",wr.keyword,"texture_storage_3d"),texture_depth_2d:new Tn("texture_depth_2d",wr.keyword,"texture_depth_2d"),texture_depth_2d_array:new Tn("texture_depth_2d_array",wr.keyword,"texture_depth_2d_array"),texture_depth_cube:new Tn("texture_depth_cube",wr.keyword,"texture_depth_cube"),texture_depth_cube_array:new Tn("texture_depth_cube_array",wr.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new Tn("texture_depth_multisampled_2d",wr.keyword,"texture_depth_multisampled_2d"),texture_external:new Tn("texture_external",wr.keyword,"texture_external"),u32:new Tn("u32",wr.keyword,"u32"),vec2:new Tn("vec2",wr.keyword,"vec2"),vec3:new Tn("vec3",wr.keyword,"vec3"),vec4:new Tn("vec4",wr.keyword,"vec4"),bitcast:new Tn("bitcast",wr.keyword,"bitcast"),block:new Tn("block",wr.keyword,"block"),break:new Tn("break",wr.keyword,"break"),case:new Tn("case",wr.keyword,"case"),continue:new Tn("continue",wr.keyword,"continue"),continuing:new Tn("continuing",wr.keyword,"continuing"),default:new Tn("default",wr.keyword,"default"),discard:new Tn("discard",wr.keyword,"discard"),else:new Tn("else",wr.keyword,"else"),enable:new Tn("enable",wr.keyword,"enable"),fallthrough:new Tn("fallthrough",wr.keyword,"fallthrough"),false:new Tn("false",wr.keyword,"false"),fn:new Tn("fn",wr.keyword,"fn"),for:new Tn("for",wr.keyword,"for"),function:new Tn("function",wr.keyword,"function"),if:new Tn("if",wr.keyword,"if"),let:new Tn("let",wr.keyword,"let"),const:new Tn("const",wr.keyword,"const"),loop:new Tn("loop",wr.keyword,"loop"),while:new Tn("while",wr.keyword,"while"),private:new Tn("private",wr.keyword,"private"),read:new Tn("read",wr.keyword,"read"),read_write:new Tn("read_write",wr.keyword,"read_write"),return:new Tn("return",wr.keyword,"return"),storage:new Tn("storage",wr.keyword,"storage"),switch:new Tn("switch",wr.keyword,"switch"),true:new Tn("true",wr.keyword,"true"),alias:new Tn("alias",wr.keyword,"alias"),type:new Tn("type",wr.keyword,"type"),uniform:new Tn("uniform",wr.keyword,"uniform"),var:new Tn("var",wr.keyword,"var"),override:new Tn("override",wr.keyword,"override"),workgroup:new Tn("workgroup",wr.keyword,"workgroup"),write:new Tn("write",wr.keyword,"write"),r8unorm:new Tn("r8unorm",wr.keyword,"r8unorm"),r8snorm:new Tn("r8snorm",wr.keyword,"r8snorm"),r8uint:new Tn("r8uint",wr.keyword,"r8uint"),r8sint:new Tn("r8sint",wr.keyword,"r8sint"),r16uint:new Tn("r16uint",wr.keyword,"r16uint"),r16sint:new Tn("r16sint",wr.keyword,"r16sint"),r16float:new Tn("r16float",wr.keyword,"r16float"),rg8unorm:new Tn("rg8unorm",wr.keyword,"rg8unorm"),rg8snorm:new Tn("rg8snorm",wr.keyword,"rg8snorm"),rg8uint:new Tn("rg8uint",wr.keyword,"rg8uint"),rg8sint:new Tn("rg8sint",wr.keyword,"rg8sint"),r32uint:new Tn("r32uint",wr.keyword,"r32uint"),r32sint:new Tn("r32sint",wr.keyword,"r32sint"),r32float:new Tn("r32float",wr.keyword,"r32float"),rg16uint:new Tn("rg16uint",wr.keyword,"rg16uint"),rg16sint:new Tn("rg16sint",wr.keyword,"rg16sint"),rg16float:new Tn("rg16float",wr.keyword,"rg16float"),rgba8unorm:new Tn("rgba8unorm",wr.keyword,"rgba8unorm"),rgba8unorm_srgb:new Tn("rgba8unorm_srgb",wr.keyword,"rgba8unorm_srgb"),rgba8snorm:new Tn("rgba8snorm",wr.keyword,"rgba8snorm"),rgba8uint:new Tn("rgba8uint",wr.keyword,"rgba8uint"),rgba8sint:new Tn("rgba8sint",wr.keyword,"rgba8sint"),bgra8unorm:new Tn("bgra8unorm",wr.keyword,"bgra8unorm"),bgra8unorm_srgb:new Tn("bgra8unorm_srgb",wr.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new Tn("rgb10a2unorm",wr.keyword,"rgb10a2unorm"),rg11b10float:new Tn("rg11b10float",wr.keyword,"rg11b10float"),rg32uint:new Tn("rg32uint",wr.keyword,"rg32uint"),rg32sint:new Tn("rg32sint",wr.keyword,"rg32sint"),rg32float:new Tn("rg32float",wr.keyword,"rg32float"),rgba16uint:new Tn("rgba16uint",wr.keyword,"rgba16uint"),rgba16sint:new Tn("rgba16sint",wr.keyword,"rgba16sint"),rgba16float:new Tn("rgba16float",wr.keyword,"rgba16float"),rgba32uint:new Tn("rgba32uint",wr.keyword,"rgba32uint"),rgba32sint:new Tn("rgba32sint",wr.keyword,"rgba32sint"),rgba32float:new Tn("rgba32float",wr.keyword,"rgba32float"),static_assert:new Tn("static_assert",wr.keyword,"static_assert")},Sn.tokens={decimal_float_literal:new Tn("decimal_float_literal",wr.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),hex_float_literal:new Tn("hex_float_literal",wr.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),int_literal:new Tn("int_literal",wr.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new Tn("uint_literal",wr.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),ident:new Tn("ident",wr.token,/[a-zA-Z][0-9a-zA-Z_]*/),and:new Tn("and",wr.token,"&"),and_and:new Tn("and_and",wr.token,"&&"),arrow:new Tn("arrow ",wr.token,"->"),attr:new Tn("attr",wr.token,"@"),attr_left:new Tn("attr_left",wr.token,"[["),attr_right:new Tn("attr_right",wr.token,"]]"),forward_slash:new Tn("forward_slash",wr.token,"/"),bang:new Tn("bang",wr.token,"!"),bracket_left:new Tn("bracket_left",wr.token,"["),bracket_right:new Tn("bracket_right",wr.token,"]"),brace_left:new Tn("brace_left",wr.token,"{"),brace_right:new Tn("brace_right",wr.token,"}"),colon:new Tn("colon",wr.token,":"),comma:new Tn("comma",wr.token,","),equal:new Tn("equal",wr.token,"="),equal_equal:new Tn("equal_equal",wr.token,"=="),not_equal:new Tn("not_equal",wr.token,"!="),greater_than:new Tn("greater_than",wr.token,">"),greater_than_equal:new Tn("greater_than_equal",wr.token,">="),shift_right:new Tn("shift_right",wr.token,">>"),less_than:new Tn("less_than",wr.token,"<"),less_than_equal:new Tn("less_than_equal",wr.token,"<="),shift_left:new Tn("shift_left",wr.token,"<<"),modulo:new Tn("modulo",wr.token,"%"),minus:new Tn("minus",wr.token,"-"),minus_minus:new Tn("minus_minus",wr.token,"--"),period:new Tn("period",wr.token,"."),plus:new Tn("plus",wr.token,"+"),plus_plus:new Tn("plus_plus",wr.token,"++"),or:new Tn("or",wr.token,"|"),or_or:new Tn("or_or",wr.token,"||"),paren_left:new Tn("paren_left",wr.token,"("),paren_right:new Tn("paren_right",wr.token,")"),semicolon:new Tn("semicolon",wr.token,";"),star:new Tn("star",wr.token,"*"),tilde:new Tn("tilde",wr.token,"~"),underscore:new Tn("underscore",wr.token,"_"),xor:new Tn("xor",wr.token,"^"),plus_equal:new Tn("plus_equal",wr.token,"+="),minus_equal:new Tn("minus_equal",wr.token,"-="),times_equal:new Tn("times_equal",wr.token,"*="),division_equal:new Tn("division_equal",wr.token,"/="),modulo_equal:new Tn("modulo_equal",wr.token,"%="),and_equal:new Tn("and_equal",wr.token,"&="),or_equal:new Tn("or_equal",wr.token,"|="),xor_equal:new Tn("xor_equal",wr.token,"^="),shift_right_equal:new Tn("shift_right_equal",wr.token,">>="),shift_left_equal:new Tn("shift_left_equal",wr.token,"<<=")},Sn.storage_class=[br.keywords.function,br.keywords.private,br.keywords.workgroup,br.keywords.uniform,br.keywords.storage],Sn.access_mode=[br.keywords.read,br.keywords.write,br.keywords.read_write],Sn.sampler_type=[br.keywords.sampler,br.keywords.sampler_comparison],Sn.sampled_texture_type=[br.keywords.texture_1d,br.keywords.texture_2d,br.keywords.texture_2d_array,br.keywords.texture_3d,br.keywords.texture_cube,br.keywords.texture_cube_array],Sn.multisampled_texture_type=[br.keywords.texture_multisampled_2d],Sn.storage_texture_type=[br.keywords.texture_storage_1d,br.keywords.texture_storage_2d,br.keywords.texture_storage_2d_array,br.keywords.texture_storage_3d],Sn.depth_texture_type=[br.keywords.texture_depth_2d,br.keywords.texture_depth_2d_array,br.keywords.texture_depth_cube,br.keywords.texture_depth_cube_array,br.keywords.texture_depth_multisampled_2d],Sn.texture_external_type=[br.keywords.texture_external],Sn.any_texture_type=[...br.sampled_texture_type,...br.multisampled_texture_type,...br.storage_texture_type,...br.depth_texture_type,...br.texture_external_type],Sn.texel_format=[br.keywords.r8unorm,br.keywords.r8snorm,br.keywords.r8uint,br.keywords.r8sint,br.keywords.r16uint,br.keywords.r16sint,br.keywords.r16float,br.keywords.rg8unorm,br.keywords.rg8snorm,br.keywords.rg8uint,br.keywords.rg8sint,br.keywords.r32uint,br.keywords.r32sint,br.keywords.r32float,br.keywords.rg16uint,br.keywords.rg16sint,br.keywords.rg16float,br.keywords.rgba8unorm,br.keywords.rgba8unorm_srgb,br.keywords.rgba8snorm,br.keywords.rgba8uint,br.keywords.rgba8sint,br.keywords.bgra8unorm,br.keywords.bgra8unorm_srgb,br.keywords.rgb10a2unorm,br.keywords.rg11b10float,br.keywords.rg32uint,br.keywords.rg32sint,br.keywords.rg32float,br.keywords.rgba16uint,br.keywords.rgba16sint,br.keywords.rgba16float,br.keywords.rgba32uint,br.keywords.rgba32sint,br.keywords.rgba32float],Sn.const_literal=[br.tokens.int_literal,br.tokens.uint_literal,br.tokens.decimal_float_literal,br.tokens.hex_float_literal,br.keywords.true,br.keywords.false],Sn.literal_or_ident=[br.tokens.ident,br.tokens.int_literal,br.tokens.uint_literal,br.tokens.decimal_float_literal,br.tokens.hex_float_literal],Sn.element_count_expression=[br.tokens.int_literal,br.tokens.uint_literal,br.tokens.ident],Sn.template_types=[br.keywords.vec2,br.keywords.vec3,br.keywords.vec4,br.keywords.mat2x2,br.keywords.mat2x3,br.keywords.mat2x4,br.keywords.mat3x2,br.keywords.mat3x3,br.keywords.mat3x4,br.keywords.mat4x2,br.keywords.mat4x3,br.keywords.mat4x4,br.keywords.atomic,br.keywords.bitcast,...br.any_texture_type],Sn.attribute_name=[br.tokens.ident,br.keywords.block],Sn.assignment_operators=[br.tokens.equal,br.tokens.plus_equal,br.tokens.minus_equal,br.tokens.times_equal,br.tokens.division_equal,br.tokens.modulo_equal,br.tokens.and_equal,br.tokens.or_equal,br.tokens.xor_equal,br.tokens.shift_right_equal,br.tokens.shift_left_equal],Sn.increment_operators=[br.tokens.plus_plus,br.tokens.minus_minus];class kn{constructor(e,t,r){this.type=e,this.lexeme=t,this.line=r}toString(){return this.lexeme}isTemplateType(){return-1!=Sn.template_types.indexOf(this.type)}isArrayType(){return this.type==Sn.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class Pn{constructor(e){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=e?e:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new kn(Sn.eof,"",this._line)),this._tokens}scanToken(){let e=this._advance();if("\n"==e)return this._line++,!0;if(this._isWhitespace(e))return!0;if("/"==e){if("/"==this._peekAhead()){for(;"\n"!=e;){if(this._isAtEnd())return!0;e=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let t=1;for(;t>0;){if(this._isAtEnd())return!0;if(e=this._advance(),"\n"==e)this._line++;else if("*"==e){if("/"==this._peekAhead()&&(this._advance(),t--,0==t))return!0}else"/"==e&&"*"==this._peekAhead()&&(this._advance(),t++)}return!0}}let t=Sn.none;for(;;){let r=this._findType(e);const n=this._peekAhead();if(">"==e&&(">"==n||"="==n)){let e=!1,t=this._tokens.length-1;for(let r=0;r<5&&t>=0;++r,--t)if(this._tokens[t].type===Sn.tokens.less_than){t>0&&this._tokens[t-1].isArrayOrTemplateType()&&(e=!0);break}if(e)return this._addToken(r),!0}if(r===Sn.none){let n=e,i=0;const a=2;for(let e=0;e<a;++e)if(n+=this._peekAhead(e),r=this._findType(n),r!==Sn.none){i=e;break}if(r===Sn.none)return t!==Sn.none&&(this._current--,this._addToken(t),!0);e=n,this._current+=i+1}if(t=r,this._isAtEnd())break;e+=this._advance()}return t!==Sn.none&&(this._addToken(t),!0)}_findType(e){for(const t in Sn.keywords){const r=Sn.keywords[t];if(this._match(e,r.rule))return r}for(const t in Sn.tokens){const r=Sn.tokens[t];if(this._match(e,r.rule))return r}return Sn.none}_match(e,t){if("string"==typeof t){if(t==e)return!0}else{const r=t.exec(e);if(r&&0==r.index&&r[0]==e)return!0}return!1}_isAtEnd(){return this._current>=this._source.length}_isWhitespace(e){return" "==e||"\t"==e||"\r"==e}_advance(e=0){let t=this._source[this._current];return e=e||0,e++,this._current+=e,t}_peekAhead(e=0){return e=e||0,this._current+e>=this._source.length?"\0":this._source[this._current+e]}_addToken(e){const t=this._source.substring(this._start,this._current);this._tokens.push(new kn(e,t,this._line))}}class Mn{constructor(){this._tokens=[],this._current=0,this._context=new Sr}parse(e){this._initialize(e);let t=[];for(;!this._isAtEnd();){const e=this._global_decl_or_directive();if(!e)break;t.push(e)}return t}_initialize(e){if(e)if("string"==typeof e){const t=new Pn(e);this._tokens=t.scanTokens()}else this._tokens=e;else this._tokens=[];this._current=0}_error(e,t){return console.error(e,t),{token:e,message:t,toString:function(){return`${t}`}}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==Sn.eof}_match(e){if(e instanceof Tn)return!!this._check(e)&&(this._advance(),!0);for(let t=0,r=e.length;t<r;++t){const r=e[t];if(this._check(r))return this._advance(),!0}return!1}_consume(e,t){if(this._check(e))return this._advance();throw this._error(this._peek(),t)}_check(e){if(this._isAtEnd())return!1;const t=this._peek();if(e instanceof Array){let r=t.type;return-1!=e.indexOf(r)}return t.type==e}_advance(){return this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(Sn.tokens.semicolon)&&!this._isAtEnd(););if(this._match(Sn.keywords.alias)){const e=this._type_alias();return this._consume(Sn.tokens.semicolon,"Expected ';'"),e}if(this._match(Sn.keywords.enable)){const e=this._enable_directive();return this._consume(Sn.tokens.semicolon,"Expected ';'"),e}const e=this._attribute();if(this._check(Sn.keywords.var)){const t=this._global_variable_decl();return null!=t&&(t.attributes=e),this._consume(Sn.tokens.semicolon,"Expected ';'."),t}if(this._check(Sn.keywords.override)){const t=this._override_variable_decl();return null!=t&&(t.attributes=e),this._consume(Sn.tokens.semicolon,"Expected ';'."),t}if(this._check(Sn.keywords.let)){const t=this._global_let_decl();return null!=t&&(t.attributes=e),this._consume(Sn.tokens.semicolon,"Expected ';'."),t}if(this._check(Sn.keywords.const)){const t=this._global_const_decl();return null!=t&&(t.attributes=e),this._consume(Sn.tokens.semicolon,"Expected ';'."),t}if(this._check(Sn.keywords.struct)){const t=this._struct_decl();return null!=t&&(t.attributes=e),t}if(this._check(Sn.keywords.fn)){const t=this._function_decl();return null!=t&&(t.attributes=e),t}return null}_function_decl(){if(!this._match(Sn.keywords.fn))return null;const e=this._consume(Sn.tokens.ident,"Expected function name.").toString();this._consume(Sn.tokens.paren_left,"Expected '(' for function arguments.");const t=[];if(!this._check(Sn.tokens.paren_right))do{if(this._check(Sn.tokens.paren_right))break;const e=this._attribute(),r=this._consume(Sn.tokens.ident,"Expected argument name.").toString();this._consume(Sn.tokens.colon,"Expected ':' for argument type.");const n=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=n,t.push(new yn(r,i,e)))}while(this._match(Sn.tokens.comma));this._consume(Sn.tokens.paren_right,"Expected ')' after function arguments.");let r=null;if(this._match(Sn.tokens.arrow)){const e=this._attribute();r=this._type_decl(),null!=r&&(r.attributes=e)}const n=this._compound_statement();return new Ar(e,t,r,n)}_compound_statement(){const e=[];for(this._consume(Sn.tokens.brace_left,"Expected '{' for block.");!this._check(Sn.tokens.brace_right);){const t=this._statement();null!==t&&e.push(t)}return this._consume(Sn.tokens.brace_right,"Expected '}' for block."),e}_statement(){for(;this._match(Sn.tokens.semicolon)&&!this._isAtEnd(););if(this._check(Sn.keywords.if))return this._if_statement();if(this._check(Sn.keywords.switch))return this._switch_statement();if(this._check(Sn.keywords.loop))return this._loop_statement();if(this._check(Sn.keywords.for))return this._for_statement();if(this._check(Sn.keywords.while))return this._while_statement();if(this._check(Sn.keywords.continuing))return this._continuing_statement();if(this._check(Sn.keywords.static_assert))return this._static_assert_statement();if(this._check(Sn.tokens.brace_left))return this._compound_statement();let e=null;return e=this._check(Sn.keywords.return)?this._return_statement():this._check([Sn.keywords.var,Sn.keywords.let,Sn.keywords.const])?this._variable_statement():this._match(Sn.keywords.discard)?new Yr:this._match(Sn.keywords.break)?new $r:this._match(Sn.keywords.continue)?new Xr:this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement(),null!=e&&this._consume(Sn.tokens.semicolon,"Expected ';' after statement."),e}_static_assert_statement(){if(!this._match(Sn.keywords.static_assert))return null;let e=this._optional_paren_expression();return new Or(e)}_while_statement(){if(!this._match(Sn.keywords.while))return null;let e=this._optional_paren_expression();const t=this._compound_statement();return new Ir(e,t)}_continuing_statement(){if(!this._match(Sn.keywords.continuing))return null;const e=this._compound_statement();return new Ur(e)}_for_statement(){if(!this._match(Sn.keywords.for))return null;this._consume(Sn.tokens.paren_left,"Expected '('.");const e=this._check(Sn.tokens.semicolon)?null:this._for_init();this._consume(Sn.tokens.semicolon,"Expected ';'.");const t=this._check(Sn.tokens.semicolon)?null:this._short_circuit_or_expression();this._consume(Sn.tokens.semicolon,"Expected ';'.");const r=this._check(Sn.tokens.paren_right)?null:this._for_increment();this._consume(Sn.tokens.paren_right,"Expected ')'.");const n=this._compound_statement();return new Cr(e,t,r,n)}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(Sn.keywords.var)){const e=this._variable_decl();if(null===e)throw this._error(this._peek(),"Variable declaration expected.");let t=null;return this._match(Sn.tokens.equal)&&(t=this._short_circuit_or_expression()),new Dr(e.name,e.type,e.storage,e.access,t)}if(this._match(Sn.keywords.let)){const e=this._consume(Sn.tokens.ident,"Expected name for let.").toString();let t=null;if(this._match(Sn.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(Sn.tokens.equal,"Expected '=' for let.");const r=this._short_circuit_or_expression();return new Rr(e,t,null,null,r)}if(this._match(Sn.keywords.const)){const e=this._consume(Sn.tokens.ident,"Expected name for const.").toString();let t=null;if(this._match(Sn.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}this._consume(Sn.tokens.equal,"Expected '=' for const.");const r=this._short_circuit_or_expression();return new Br(e,t,null,null,r)}return null}_increment_decrement_statement(){const e=this._current,t=this._unary_expression();if(null==t)return null;if(!this._check(Sn.increment_operators))return this._current=e,null;const r=this._consume(Sn.increment_operators,"Expected increment operator");return new Gr(r.type===Sn.tokens.plus_plus?yr.increment:yr.decrement,t)}_assignment_statement(){let e=null;if(this._check(Sn.tokens.brace_right))return null;let t=this._match(Sn.tokens.underscore);if(t||(e=this._unary_expression()),!t&&null==e)return null;const r=this._consume(Sn.assignment_operators,"Expected assignment operator."),n=this._short_circuit_or_expression();return new Lr(_r.parse(r.lexeme),e,n)}_func_call_statement(){if(!this._check(Sn.tokens.ident))return null;const e=this._current,t=this._consume(Sn.tokens.ident,"Expected function name."),r=this._argument_expression_list();return null===r?(this._current=e,null):new Nr(t.lexeme,r)}_loop_statement(){if(!this._match(Sn.keywords.loop))return null;this._consume(Sn.tokens.brace_left,"Expected '{' for loop.");const e=[];let t=this._statement();for(;null!==t;){if(Array.isArray(t))for(let r of t)e.push(r);else e.push(t);t=this._statement()}let r=null;return this._match(Sn.keywords.continuing)&&(r=this._compound_statement()),this._consume(Sn.tokens.brace_right,"Expected '}' for loop."),new Vr(e,r)}_switch_statement(){if(!this._match(Sn.keywords.switch))return null;const e=this._optional_paren_expression();this._consume(Sn.tokens.brace_left,"Expected '{' for switch.");const t=this._switch_body();if(null==t||0==t.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(Sn.tokens.brace_right,"Expected '}' for switch."),new jr(e,t)}_switch_body(){const e=[];if(this._match(Sn.keywords.case)){const t=this._case_selectors();this._match(Sn.tokens.colon),this._consume(Sn.tokens.brace_left,"Exected '{' for switch case.");const r=this._case_body();this._consume(Sn.tokens.brace_right,"Exected '}' for switch case."),e.push(new vn(t,r))}if(this._match(Sn.keywords.default)){this._match(Sn.tokens.colon),this._consume(Sn.tokens.brace_left,"Exected '{' for switch default.");const t=this._case_body();this._consume(Sn.tokens.brace_right,"Exected '}' for switch default."),e.push(new xn(t))}if(this._check([Sn.keywords.default,Sn.keywords.case])){const t=this._switch_body();e.push(t[0])}return e}_case_selectors(){var e,t,r,n;const i=[null!==(t=null===(e=this._shift_expression())||void 0===e?void 0:e.evaluate(this._context).toString())&&void 0!==t?t:""];for(;this._match(Sn.tokens.comma);)i.push(null!==(n=null===(r=this._shift_expression())||void 0===r?void 0:r.evaluate(this._context).toString())&&void 0!==n?n:"");return i}_case_body(){if(this._match(Sn.keywords.fallthrough))return this._consume(Sn.tokens.semicolon,"Expected ';'"),[];let e=this._statement();if(null==e)return[];e instanceof Array||(e=[e]);const t=this._case_body();return 0==t.length?e:[...e,t[0]]}_if_statement(){if(!this._match(Sn.keywords.if))return null;const e=this._optional_paren_expression(),t=this._compound_statement();let r=[];this._match_elseif()&&(r=this._elseif_statement(r));let n=null;return this._match(Sn.keywords.else)&&(n=this._compound_statement()),new Fr(e,t,r,n)}_match_elseif(){return this._tokens[this._current].type===Sn.keywords.else&&this._tokens[this._current+1].type===Sn.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(e=[]){const t=this._optional_paren_expression(),r=this._compound_statement();return e.push(new _n(t,r)),this._match_elseif()&&this._elseif_statement(e),e}_return_statement(){if(!this._match(Sn.keywords.return))return null;const e=this._short_circuit_or_expression();return new qr(e)}_short_circuit_or_expression(){let e=this._short_circuit_and_expr();for(;this._match(Sn.tokens.or_or);)e=new mn(this._previous().toString(),e,this._short_circuit_and_expr());return e}_short_circuit_and_expr(){let e=this._inclusive_or_expression();for(;this._match(Sn.tokens.and_and);)e=new mn(this._previous().toString(),e,this._inclusive_or_expression());return e}_inclusive_or_expression(){let e=this._exclusive_or_expression();for(;this._match(Sn.tokens.or);)e=new mn(this._previous().toString(),e,this._exclusive_or_expression());return e}_exclusive_or_expression(){let e=this._and_expression();for(;this._match(Sn.tokens.xor);)e=new mn(this._previous().toString(),e,this._and_expression());return e}_and_expression(){let e=this._equality_expression();for(;this._match(Sn.tokens.and);)e=new mn(this._previous().toString(),e,this._equality_expression());return e}_equality_expression(){const e=this._relational_expression();return this._match([Sn.tokens.equal_equal,Sn.tokens.not_equal])?new mn(this._previous().toString(),e,this._relational_expression()):e}_relational_expression(){let e=this._shift_expression();for(;this._match([Sn.tokens.less_than,Sn.tokens.greater_than,Sn.tokens.less_than_equal,Sn.tokens.greater_than_equal]);)e=new mn(this._previous().toString(),e,this._shift_expression());return e}_shift_expression(){let e=this._additive_expression();for(;this._match([Sn.tokens.shift_left,Sn.tokens.shift_right]);)e=new mn(this._previous().toString(),e,this._additive_expression());return e}_additive_expression(){let e=this._multiplicative_expression();for(;this._match([Sn.tokens.plus,Sn.tokens.minus]);)e=new mn(this._previous().toString(),e,this._multiplicative_expression());return e}_multiplicative_expression(){let e=this._unary_expression();for(;this._match([Sn.tokens.star,Sn.tokens.forward_slash,Sn.tokens.modulo]);)e=new mn(this._previous().toString(),e,this._unary_expression());return e}_unary_expression(){return this._match([Sn.tokens.minus,Sn.tokens.bang,Sn.tokens.tilde,Sn.tokens.star,Sn.tokens.and])?new pn(this._previous().toString(),this._unary_expression()):this._singular_expression()}_singular_expression(){const e=this._primary_expression(),t=this._postfix_expression();return t&&(e.postfix=t),e}_postfix_expression(){if(this._match(Sn.tokens.bracket_left)){const e=this._short_circuit_or_expression();this._consume(Sn.tokens.bracket_right,"Expected ']'.");const t=this._postfix_expression();return t&&(e.postfix=t),e}if(this._match(Sn.tokens.period)){const e=this._consume(Sn.tokens.ident,"Expected member name."),t=this._postfix_expression(),r=new nn(e.lexeme);return t&&(r.postfix=t),r}return null}_getStruct(e){return this._context.aliases.has(e)?this._context.aliases.get(e).type:this._context.structs.has(e)?this._context.structs.get(e):null}_primary_expression(){if(this._match(Sn.tokens.ident)){const e=this._previous().toString();if(this._check(Sn.tokens.paren_left)){const t=this._argument_expression_list(),r=this._getStruct(e);return null!=r?new an(r,t):new on(e,t)}if(this._context.constants.has(e)){const t=this._context.constants.get(e);return new un(e,t.value)}return new sn(e)}if(this._match(Sn.const_literal))return new cn(parseFloat(this._previous().toString()));if(this._check(Sn.tokens.paren_left))return this._paren_expression();if(this._match(Sn.keywords.bitcast)){this._consume(Sn.tokens.less_than,"Expected '<'.");const e=this._type_decl();this._consume(Sn.tokens.greater_than,"Expected '>'.");const t=this._paren_expression();return new ln(e,t)}const e=this._type_decl(),t=this._argument_expression_list();return new dn(e,t)}_argument_expression_list(){if(!this._match(Sn.tokens.paren_left))return null;const e=[];do{if(this._check(Sn.tokens.paren_right))break;const t=this._short_circuit_or_expression();e.push(t)}while(this._match(Sn.tokens.comma));return this._consume(Sn.tokens.paren_right,"Expected ')' for agument list"),e}_optional_paren_expression(){this._match(Sn.tokens.paren_left);const e=this._short_circuit_or_expression();return this._match(Sn.tokens.paren_right),new fn([e])}_paren_expression(){this._consume(Sn.tokens.paren_left,"Expected '('.");const e=this._short_circuit_or_expression();return this._consume(Sn.tokens.paren_right,"Expected ')'."),new fn([e])}_struct_decl(){if(!this._match(Sn.keywords.struct))return null;const e=this._consume(Sn.tokens.ident,"Expected name for struct.").toString();this._consume(Sn.tokens.brace_left,"Expected '{' for struct body.");const t=[];for(;!this._check(Sn.tokens.brace_right);){const e=this._attribute(),r=this._consume(Sn.tokens.ident,"Expected variable name.").toString();this._consume(Sn.tokens.colon,"Expected ':' for struct member type.");const n=this._attribute(),i=this._type_decl();null!=i&&(i.attributes=n),this._check(Sn.tokens.brace_right)?this._match(Sn.tokens.comma):this._consume(Sn.tokens.comma,"Expected ',' for struct member."),t.push(new bn(r,i,e))}this._consume(Sn.tokens.brace_right,"Expected '}' after struct body.");const r=new Qr(e,t);return this._context.structs.set(e,r),r}_global_variable_decl(){const e=this._variable_decl();return e&&this._match(Sn.tokens.equal)&&(e.value=this._const_expression()),e}_override_variable_decl(){const e=this._override_decl();return e&&this._match(Sn.tokens.equal)&&(e.value=this._const_expression()),e}_global_const_decl(){if(!this._match(Sn.keywords.const))return null;const e=this._consume(Sn.tokens.ident,"Expected variable name");let t=null;if(this._match(Sn.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let r=null;if(this._match(Sn.tokens.equal)){const e=this._short_circuit_or_expression();if(e instanceof an)r=e;else if(e instanceof un&&e.initializer instanceof an)r=e.initializer;else try{const t=e.evaluate(this._context);r=new cn(t)}catch(t){r=e}}const n=new Br(e.toString(),t,"","",r);return this._context.constants.set(n.name,n),n}_global_let_decl(){if(!this._match(Sn.keywords.let))return null;const e=this._consume(Sn.tokens.ident,"Expected variable name");let t=null;if(this._match(Sn.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}let r=null;return this._match(Sn.tokens.equal)&&(r=this._const_expression()),new Rr(e.toString(),t,"","",r)}_const_expression(){if(this._match(Sn.const_literal))return new nn(this._previous().toString());const e=this._type_decl();this._consume(Sn.tokens.paren_left,"Expected '('.");let t=[];for(;!this._check(Sn.tokens.paren_right)&&(t.push(this._const_expression()),this._check(Sn.tokens.comma));)this._advance();return this._consume(Sn.tokens.paren_right,"Expected ')'."),new an(e,t)}_variable_decl(){if(!this._match(Sn.keywords.var))return null;let e="",t="";this._match(Sn.tokens.less_than)&&(e=this._consume(Sn.storage_class,"Expected storage_class.").toString(),this._match(Sn.tokens.comma)&&(t=this._consume(Sn.access_mode,"Expected access_mode.").toString()),this._consume(Sn.tokens.greater_than,"Expected '>'."));const r=this._consume(Sn.tokens.ident,"Expected variable name");let n=null;if(this._match(Sn.tokens.colon)){const e=this._attribute();n=this._type_decl(),null!=n&&(n.attributes=e)}return new Dr(r.toString(),n,e,t,null)}_override_decl(){if(!this._match(Sn.keywords.override))return null;const e=this._consume(Sn.tokens.ident,"Expected variable name");let t=null;if(this._match(Sn.tokens.colon)){const e=this._attribute();t=this._type_decl(),null!=t&&(t.attributes=e)}return new zr(e.toString(),t,null)}_enable_directive(){const e=this._consume(Sn.tokens.ident,"identity expected.");return new Wr(e.toString())}_type_alias(){const e=this._consume(Sn.tokens.ident,"identity expected.");this._consume(Sn.tokens.equal,"Expected '=' for type alias.");let t=this._type_decl();if(null===t)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(t.name)&&(t=this._context.aliases.get(t.name).type);const r=new Hr(e.toString(),t);return this._context.aliases.set(r.name,r),r}_type_decl(){if(this._check([Sn.tokens.ident,...Sn.texel_format,Sn.keywords.bool,Sn.keywords.f32,Sn.keywords.i32,Sn.keywords.u32])){const e=this._advance(),t=e.toString();return this._context.structs.has(t)?this._context.structs.get(t):this._context.aliases.has(t)?this._context.aliases.get(t).type:new Zr(e.toString())}let e=this._texture_sampler_types();if(e)return e;if(this._check(Sn.template_types)){let e=this._advance().toString(),t=null,r=null;return this._match(Sn.tokens.less_than)&&(t=this._type_decl(),r=null,this._match(Sn.tokens.comma)&&(r=this._consume(Sn.access_mode,"Expected access_mode for pointer").toString()),this._consume(Sn.tokens.greater_than,"Expected '>' for type.")),new Kr(e,t,r)}if(this._match(Sn.keywords.ptr)){let e=this._previous().toString();this._consume(Sn.tokens.less_than,"Expected '<' for pointer.");const t=this._consume(Sn.storage_class,"Expected storage_class for pointer");this._consume(Sn.tokens.comma,"Expected ',' for pointer.");const r=this._type_decl();let n=null;return this._match(Sn.tokens.comma)&&(n=this._consume(Sn.access_mode,"Expected access_mode for pointer").toString()),this._consume(Sn.tokens.greater_than,"Expected '>' for pointer."),new Jr(e,t.toString(),r,n)}const t=this._attribute();if(this._match(Sn.keywords.array)){let e=null,r=-1;const n=this._previous();if(this._match(Sn.tokens.less_than)){e=this._type_decl(),this._context.aliases.has(e.name)&&(e=this._context.aliases.get(e.name).type);let t="";this._match(Sn.tokens.comma)&&(t=this._shift_expression().evaluate(this._context).toString()),this._consume(Sn.tokens.greater_than,"Expected '>' for array."),r=t?parseInt(t):0}return new en(n.toString(),t,e,r)}return null}_texture_sampler_types(){if(this._match(Sn.sampler_type))return new tn(this._previous().toString(),null,null);if(this._match(Sn.depth_texture_type))return new tn(this._previous().toString(),null,null);if(this._match(Sn.sampled_texture_type)||this._match(Sn.multisampled_texture_type)){const e=this._previous();this._consume(Sn.tokens.less_than,"Expected '<' for sampler type.");const t=this._type_decl();return this._consume(Sn.tokens.greater_than,"Expected '>' for sampler type."),new tn(e.toString(),t,null)}if(this._match(Sn.storage_texture_type)){const e=this._previous();this._consume(Sn.tokens.less_than,"Expected '<' for sampler type.");const t=this._consume(Sn.texel_format,"Invalid texel format.").toString();this._consume(Sn.tokens.comma,"Expected ',' after texel format.");const r=this._consume(Sn.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(Sn.tokens.greater_than,"Expected '>' for sampler type."),new tn(e.toString(),t,r)}return null}_attribute(){let e=[];for(;this._match(Sn.tokens.attr);){const t=this._consume(Sn.attribute_name,"Expected attribute name"),r=new wn(t.toString(),null);if(this._match(Sn.tokens.paren_left)){if(r.value=this._consume(Sn.literal_or_ident,"Expected attribute value").toString(),this._check(Sn.tokens.comma)){this._advance();do{const e=this._consume(Sn.literal_or_ident,"Expected attribute value").toString();r.value instanceof Array||(r.value=[r.value]),r.value.push(e)}while(this._match(Sn.tokens.comma))}this._consume(Sn.tokens.paren_right,"Expected ')'")}e.push(r)}for(;this._match(Sn.tokens.attr_left);){if(!this._check(Sn.tokens.attr_right))do{const t=this._consume(Sn.attribute_name,"Expected attribute name"),r=new wn(t.toString(),null);if(this._match(Sn.tokens.paren_left)){if(r.value=[this._consume(Sn.literal_or_ident,"Expected attribute value").toString()],this._check(Sn.tokens.comma)){this._advance();do{const e=this._consume(Sn.literal_or_ident,"Expected attribute value").toString();r.value.push(e)}while(this._match(Sn.tokens.comma))}this._consume(Sn.tokens.paren_right,"Expected ')'")}e.push(r)}while(this._match(Sn.tokens.comma));this._consume(Sn.tokens.attr_right,"Expected ']]' after attribute declarations")}return 0==e.length?null:e}}class En{constructor(e,t){this.name=e,this.attributes=t,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}}class An{constructor(e,t,r){this.name=e,this.type=t,this.attributes=r,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class On extends En{constructor(e,t){super(e,t),this.members=[],this.align=0}get isStruct(){return!0}}class In extends En{constructor(e,t){super(e,t),this.count=0,this.stride=0}get isArray(){return!0}}class Un extends En{constructor(e,t,r,n){super(e,r),this.format=t,this.access=n}get isTemplate(){return!0}}!function(e){e[e.Uniform=0]="Uniform",e[e.Storage=1]="Storage",e[e.Texture=2]="Texture",e[e.Sampler=3]="Sampler",e[e.StorageTexture=4]="StorageTexture"}(Tr||(Tr={}));class Cn{constructor(e,t,r,n,i,a,o){this.name=e,this.type=t,this.group=r,this.binding=n,this.attributes=i,this.resourceType=a,this.access=o}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class Dn{constructor(e,t){this.name=e,this.type=t}}class zn{constructor(e,t){this.align=e,this.size=t}}class Rn{constructor(e,t,r,n){this.name=e,this.type=t,this.locationType=r,this.location=n,this.interpolation=null}}class Bn{constructor(e,t,r,n){this.name=e,this.type=t,this.locationType=r,this.location=n}}class Gn{constructor(e,t=null){this.stage=null,this.inputs=[],this.outputs=[],this.resources=[],this.name=e,this.stage=t}}class Ln{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}class Nn{constructor(e,t,r,n){this.name=e,this.type=t,this.attributes=r,this.id=n}}class Vn{constructor(e){this.resources=null,this.node=e}}class jn{constructor(e){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new Ln,this._types=new Map,this._functions=new Map,e&&this.update(e)}_isStorageTexture(e){return"texture_storage_1d"==e.name||"texture_storage_2d"==e.name||"texture_storage_2d_array"==e.name||"texture_storage_3d"==e.name}update(e){const t=(new Mn).parse(e);for(const e of t)e instanceof Ar&&this._functions.set(e.name,new Vn(e));for(const e of t)if(e instanceof Qr){const t=this._getTypeInfo(e,null);t instanceof On&&this.structs.push(t)}else if(e instanceof Hr)this.aliases.push(this._getAliasInfo(e));else if(e instanceof zr){const t=e,r=this._getAttributeNum(t.attributes,"id",0),n=null!=t.type?this._getTypeInfo(t.type,t.attributes):null;this.overrides.push(new Nn(t.name,n,t.attributes,r))}else if(this._isUniformVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=new Cn(t.name,i,r,n,t.attributes,Tr.Uniform,t.access);this.uniforms.push(a)}else if(this._isStorageVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=this._isStorageTexture(i),o=new Cn(t.name,i,r,n,t.attributes,a?Tr.StorageTexture:Tr.Storage,t.access);this.storage.push(o)}else if(this._isTextureVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=this._isStorageTexture(i),o=new Cn(t.name,i,r,n,t.attributes,a?Tr.StorageTexture:Tr.Texture,t.access);a?this.storage.push(o):this.textures.push(o)}else if(this._isSamplerVar(e)){const t=e,r=this._getAttributeNum(t.attributes,"group",0),n=this._getAttributeNum(t.attributes,"binding",0),i=this._getTypeInfo(t.type,t.attributes),a=new Cn(t.name,i,r,n,t.attributes,Tr.Sampler,t.access);this.samplers.push(a)}else if(e instanceof Ar){const t=this._getAttribute(e,"vertex"),r=this._getAttribute(e,"fragment"),n=this._getAttribute(e,"compute"),i=t||r||n;if(i){const t=new Gn(e.name,null==i?void 0:i.name);t.inputs=this._getInputs(e.args),t.outputs=this._getOutputs(e.returnType),t.resources=this._findResources(e),this.entry[i.name].push(t)}}}_findResource(e){for(const t of this.uniforms)if(t.name==e)return t;for(const t of this.storage)if(t.name==e)return t;for(const t of this.textures)if(t.name==e)return t;for(const t of this.samplers)if(t.name==e)return t;return null}_findResources(e){const t=[],r=this,n=[];return e.search((e=>{if(e instanceof Pr)n.push({});else if(e instanceof Mr)n.pop();else if(e instanceof Dr){if(n.length>0){const t=e;n[n.length-1][t.name]=t}}else if(e instanceof Rr){if(n.length>0){const t=e;n[n.length-1][t.name]=t}}else if(e instanceof sn){const i=e;if(n.length>0&&n[n.length-1][i.name])return;const a=r._findResource(i.name);a&&t.push(a)}else if(e instanceof on){const n=e,i=r._functions.get(n.name);i&&(null===i.resources&&(i.resources=r._findResources(i.node)),t.push(...i.resources))}})),[...new Map(t.map((e=>[e.name,e]))).values()]}getBindGroups(){const e=[];function t(t,r){t>=e.length&&(e.length=t+1),void 0===e[t]&&(e[t]=[]),r>=e[t].length&&(e[t].length=r+1)}for(const r of this.uniforms)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.storage)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.textures)t(r.group,r.binding),e[r.group][r.binding]=r;for(const r of this.samplers)t(r.group,r.binding),e[r.group][r.binding]=r;return e}_getOutputs(e,t=void 0){if(void 0===t&&(t=[]),e instanceof Qr)this._getStructOutputs(e,t);else{const r=this._getOutputInfo(e);null!==r&&t.push(r)}return t}_getStructOutputs(e,t){for(const r of e.members)if(r.type instanceof Qr)this._getStructOutputs(r.type,t);else{const e=this._getAttribute(r,"location")||this._getAttribute(r,"builtin");if(null!==e){const n=this._getTypeInfo(r.type,r.type.attributes),i=this._parseInt(e.value),a=new Bn(r.name,n,e.name,i);t.push(a)}}}_getOutputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const r=this._getTypeInfo(e,e.attributes),n=this._parseInt(t.value);return new Bn("",r,t.name,n)}return null}_getInputs(e,t=void 0){void 0===t&&(t=[]);for(const r of e)if(r.type instanceof Qr)this._getStructInputs(r.type,t);else{const e=this._getInputInfo(r);null!==e&&t.push(e)}return t}_getStructInputs(e,t){for(const r of e.members)if(r.type instanceof Qr)this._getStructInputs(r.type,t);else{const e=this._getInputInfo(r);null!==e&&t.push(e)}}_getInputInfo(e){const t=this._getAttribute(e,"location")||this._getAttribute(e,"builtin");if(null!==t){const r=this._getAttribute(e,"interpolation"),n=this._getTypeInfo(e.type,e.attributes),i=this._parseInt(t.value),a=new Rn(e.name,n,t.name,i);return null!==r&&(a.interpolation=this._parseString(r.value)),a}return null}_parseString(e){return e instanceof Array&&(e=e[0]),e}_parseInt(e){e instanceof Array&&(e=e[0]);const t=parseInt(e);return isNaN(t)?e:t}_getAlias(e){for(const t of this.aliases)if(t.name==e)return t.type;return null}_getAliasInfo(e){return new Dn(e.name,this._getTypeInfo(e.type,null))}_getTypeInfo(e,t){if(this._types.has(e))return this._types.get(e);if(e instanceof en){const r=e,n=this._getTypeInfo(r.format,r.attributes),i=new In(r.name,t);return i.format=n,i.count=r.count,this._types.set(e,i),this._updateTypeInfo(i),i}if(e instanceof Qr){const r=e,n=new On(r.name,t);for(const e of r.members){const t=this._getTypeInfo(e.type,e.attributes);n.members.push(new An(e.name,t,e.attributes))}return this._types.set(e,n),this._updateTypeInfo(n),n}if(e instanceof tn){const r=e,n=r.format instanceof Zr,i=r.format?n?this._getTypeInfo(r.format,null):new En(r.format,null):null,a=new Un(r.name,i,t,r.access);return this._types.set(e,a),this._updateTypeInfo(a),a}if(e instanceof Kr){const r=e,n=r.format?this._getTypeInfo(r.format,null):null,i=new Un(r.name,n,t,r.access);return this._types.set(e,i),this._updateTypeInfo(i),i}const r=new En(e.name,t);return this._types.set(e,r),this._updateTypeInfo(r),r}_updateTypeInfo(e){var t,r;const n=this._getTypeSize(e);if(e.size=null!==(t=null==n?void 0:n.size)&&void 0!==t?t:0,e instanceof In){const t=this._getTypeSize(e.format);e.stride=null!==(r=null==t?void 0:t.size)&&void 0!==r?r:0,this._updateTypeInfo(e.format)}e instanceof On&&this._updateStructInfo(e)}_updateStructInfo(e){var t;let r=0,n=0,i=0,a=0;for(let o=0,s=e.members.length;o<s;++o){const s=e.members[o],u=this._getTypeSize(s);if(!u)continue;null!==(t=this._getAlias(s.type.name))&&void 0!==t||s.type;const c=u.align,l=u.size;r=this._roundUp(c,r+n),n=l,i=r,a=Math.max(a,c),s.offset=r,s.size=l,this._updateTypeInfo(s.type)}e.size=this._roundUp(a,i+n),e.align=a}_getTypeSize(e){var t;if(null==e)return null;const r=this._getAttributeNum(e.attributes,"size",0),n=this._getAttributeNum(e.attributes,"align",0);if(e instanceof An&&(e=e.type),e instanceof En){const t=this._getAlias(e.name);null!==t&&(e=t)}{const t=jn._typeInfo[e.name];if(void 0!==t){const i="f16"===e.format?2:1;return new zn(Math.max(n,t.align/i),Math.max(r,t.size/i))}}{const t=jn._typeInfo[e.name.substring(0,e.name.length-1)];if(t){const i="h"===e.name[e.name.length-1]?2:1;return new zn(Math.max(n,t.align/i),Math.max(r,t.size/i))}}if(e instanceof In){let i=e,a=8,o=8;const s=this._getTypeSize(i.format);return null!==s&&(o=s.size,a=s.align),o=i.count*this._getAttributeNum(null!==(t=null==e?void 0:e.attributes)&&void 0!==t?t:null,"stride",this._roundUp(a,o)),r&&(o=r),new zn(Math.max(n,a),Math.max(r,o))}if(e instanceof On){let t=0,i=0,a=0,o=0,s=0;for(const r of e.members){const e=this._getTypeSize(r.type);null!==e&&(t=Math.max(e.align,t),a=this._roundUp(e.align,a+o),o=e.size,s=a)}return i=this._roundUp(t,s+o),new zn(Math.max(n,t),Math.max(r,i))}return null}_isUniformVar(e){return e instanceof Dr&&"uniform"==e.storage}_isStorageVar(e){return e instanceof Dr&&"storage"==e.storage}_isTextureVar(e){return e instanceof Dr&&null!==e.type&&-1!=jn._textureTypes.indexOf(e.type.name)}_isSamplerVar(e){return e instanceof Dr&&null!==e.type&&-1!=jn._samplerTypes.indexOf(e.type.name)}_getAttribute(e,t){const r=e;if(!r||!r.attributes)return null;const n=r.attributes;for(let e of n)if(e.name==t)return e;return null}_getAttributeNum(e,t,r){if(null===e)return r;for(let n of e)if(n.name==t){let e=null!==n&&null!==n.value?n.value:r;return e instanceof Array&&(e=e[0]),"number"==typeof e?e:"string"==typeof e?parseInt(e):r}return r}_roundUp(e,t){return Math.ceil(t/e)*e}}function Fn(e,t){const r=function(e){return Array.isArray(e)||pr(e)?[...e,1,1].slice(0,3):function(e){return[e.width,e.height||1,e.depthOrArrayLayers||1]}(e)}(e),n=Math.max(...r.slice(0,"3d"===t?3:2));return 1+Math.log2(n)|0}jn._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},jn._textureTypes=Sn.any_texture_type.map((e=>e.name)),jn._samplerTypes=Sn.sampler_type.map((e=>e.name));const qn=new WeakMap;const Wn=new Map([[Int8Array,{formats:["sint8","snorm8"],defaultForType:1}],[Uint8Array,{formats:["uint8","unorm8"],defaultForType:1}],[Int16Array,{formats:["sint16","snorm16"],defaultForType:1}],[Uint16Array,{formats:["uint16","unorm16"],defaultForType:1}],[Int32Array,{formats:["sint32","snorm32"],defaultForType:0}],[Uint32Array,{formats:["uint32","unorm32"],defaultForType:0}],[Float32Array,{formats:["float32","float32"],defaultForType:0}]]);function Hn(e){return pr(e)||Array.isArray(e)||function(e){const t=e;return pr(t.data)||Array.isArray(t.data)}(e)}function Yn(e){switch(e){case"1d":return"1d";case"3d":return"3d";default:return"2d"}}new Map([...Wn.entries()].map((([e,{formats:[t,r]}])=>[[t,e],[r,e]])).flat());const $n={"8snorm":Int8Array,"8unorm":Uint8Array,"8sint":Int8Array,"8uint":Uint8Array,"16snorm":Int16Array,"16unorm":Uint16Array,"16sint":Int16Array,"16uint":Uint16Array,"32snorm":Int32Array,"32unorm":Uint32Array,"32sint":Int32Array,"32uint":Uint32Array,"16float":Uint16Array,"32float":Float32Array},Xn=/([a-z]+)(\d+)([a-z]+)/;function Zn(e){const[,t,r,n]=Xn.exec(e),i=t.length,a=parseInt(r)/8;return{channels:t,numChannels:i,bytesPerChannel:a,bytesPerElement:i*a,Type:$n[`${r}${n}`]}}function Qn(e,t,r,n={}){r.forEach(((r,i)=>{const a=[0,0,i+(n.baseArrayLayer||0)];if(Hn(r))!function(e,t,r,n){const i=function(e,t){if(pr(e))return e;const{Type:r}=Zn(t);return new r(e)}(r.data||r,t.format),a=function(e,t){return[e.width,e.height,e.depthOrArrayLayers].map((e=>Math.max(1,Math.floor(e/1))))}(t),{bytesPerElement:o}=Zn(t.format),s=n.origin||[0,0,0];e.queue.writeTexture({texture:t,origin:s},i,{bytesPerRow:o*a[0],rowsPerImage:a[1]},a)}(e,t,r,{origin:a});else{const i=r,{flipY:o,premultipliedAlpha:s,colorSpace:u}=n;e.queue.copyExternalImageToTexture({source:i,flipY:o},{texture:t,premultipliedAlpha:s,colorSpace:u,origin:a},Kn(i,n))}})),t.mipLevelCount>1&&function(e,t,r){let n=qn.get(e);n||(n={pipelineByFormatAndView:{},moduleByViewType:{}},qn.set(e,n));let{sampler:i,uniformBuffer:a,uniformValues:o}=n;const{pipelineByFormatAndView:s,moduleByViewType:u}=n;r=r||function(e){switch(e.dimension){case"1d":return"1d";case"3d":return"3d";default:return e.depthOrArrayLayers>1?"2d-array":"2d"}}(t);let c=u[r];if(!c){const t=function(e){let t,r;switch(e){case"2d":t="texture_2d<f32>",r="textureSample(ourTexture, ourSampler, fsInput.texcoord)";break;case"2d-array":t="texture_2d_array<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              fsInput.texcoord,\n              uni.layer)";break;case"cube":t="texture_cube<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1))";break;case"cube-array":t="texture_cube_array<f32>",r="\n          textureSample(\n              ourTexture,\n              ourSampler,\n              faceMat[uni.layer] * vec3f(fract(fsInput.texcoord), 1), uni.layer)";break;default:throw new Error(`unsupported view: ${e}`)}return`\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        struct VSOutput {\n          @builtin(position) position: vec4f,\n          @location(0) texcoord: vec2f,\n        };\n\n        @vertex fn vs(\n          @builtin(vertex_index) vertexIndex : u32\n        ) -> VSOutput {\n          var pos = array<vec2f, 3>(\n            vec2f(-1.0, -1.0),\n            vec2f(-1.0,  3.0),\n            vec2f( 3.0, -1.0),\n          );\n\n          var vsOutput: VSOutput;\n          let xy = pos[vertexIndex];\n          vsOutput.position = vec4f(xy, 0.0, 1.0);\n          vsOutput.texcoord = xy * vec2f(0.5, -0.5) + vec2f(0.5);\n          return vsOutput;\n        }\n\n        struct Uniforms {\n          layer: u32,\n        };\n\n        @group(0) @binding(0) var ourSampler: sampler;\n        @group(0) @binding(1) var ourTexture: ${t};\n        @group(0) @binding(2) var<uniform> uni: Uniforms;\n\n        @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n          _ = uni.layer; // make sure this is used so all pipelines have the same bindings\n          return ${r};\n        }\n      `}(r);c=e.createShaderModule({label:`mip level generation for ${r}`,code:t}),u[r]=c}i||(i=e.createSampler({minFilter:"linear",magFilter:"linear"}),a=e.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),o=new Uint32Array(1),Object.assign(n,{sampler:i,uniformBuffer:a,uniformValues:o}));const l=`${t.format}.${r}`;s[l]||(s[l]=e.createRenderPipeline({label:`mip level generator pipeline for ${r}`,layout:"auto",vertex:{module:c,entryPoint:"vs"},fragment:{module:c,entryPoint:"fs",targets:[{format:t.format}]}}));const d=s[l];for(let n=1;n<t.mipLevelCount;++n)for(let s=0;s<t.depthOrArrayLayers;++s){o[0]=s,e.queue.writeBuffer(a,0,o);const u=e.createBindGroup({layout:d.getBindGroupLayout(0),entries:[{binding:0,resource:i},{binding:1,resource:t.createView({dimension:r,baseMipLevel:n-1,mipLevelCount:1})},{binding:2,resource:{buffer:a}}]}),c={label:"mip gen renderPass",colorAttachments:[{view:t.createView({dimension:"2d",baseMipLevel:n,mipLevelCount:1,baseArrayLayer:s,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},l=e.createCommandEncoder({label:"mip gen encoder"}),f=l.beginRenderPass(c);f.setPipeline(d),f.setBindGroup(0,u),f.draw(3),f.end();const h=l.finish();e.queue.submit([h])}}(e,t)}function Kn(e,t){if(e instanceof HTMLVideoElement)return[e.videoWidth,e.videoHeight,1];{const r=e,{width:n,height:i}=r;if(n>0&&i>0&&!Hn(e))return[n,i,1];const a=t.format||"rgba8unorm",{bytesPerElement:o,bytesPerChannel:s}=Zn(a),u=pr(e)||Array.isArray(e)?e:e.data;return function(e,t,r,n="2d"){if(r%1!=0)throw new Error("can't guess dimensions");if(e||t){if(t){if(!e&&(e=r/t)%1)throw new Error("can't guess dimensions")}else if((t=r/e)%1)throw new Error("can't guess dimensions")}else{const i=Math.sqrt(r/("cube"===n?6:1));i%1==0?(e=i,t=i):(e=r,t=1)}const i=r/e/t;if(i%1)throw new Error("can't guess dimensions");return[e,t,i]}(n,i,(pr(u)?u.byteLength:u.length*s)/o)}}async function Jn(e,t,r={}){const n=await Promise.all(t.map((e=>async function(e,t={}){const r=await fetch(e),n=await r.blob(),i={...t,...void 0!==t.colorSpaceConversion&&{colorSpaceConversion:"none"}};return await createImageBitmap(n,i)}(e))));return function(e,t,r={}){const n=Kn(t[0],r);n[2]=n[2]>1?n[2]:t.length;const i=e.createTexture({dimension:Yn(r.dimension),format:r.format||"rgba8unorm",mipLevelCount:r.mipLevelCount?r.mipLevelCount:r.mips?Fn(n):1,size:n,usage:(r.usage??0)|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});return Qn(e,i,t,r),i}(e,n,r)}async function ei(e,t,r={}){return Jn(e,[t],r)}const ti="r8unorm",ri="rgba16float",ni="rgba16float",ii=async(e,t,r)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");const n=await(async(e,t)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");const r=e.createTexture({size:{width:t.width,height:t.height,depthOrArrayLayers:t.depthOrArrayLayers},format:t.format,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:t.mipLevelCount}),n=e.createCommandEncoder();for(let e=0;e<t.mipLevelCount;e++)for(let i=0;i<t.depthOrArrayLayers>>e;i++)n.copyTextureToTexture({texture:t,mipLevel:e,origin:{x:0,y:0,z:i}},{texture:r,mipLevel:e,origin:{x:0,y:0,z:i}},{width:t.width>>e,height:t.height>>e,depthOrArrayLayers:1});return e.queue.submit([n.finish()]),await e.queue.onSubmittedWorkDone(),r})(e,t),i=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"3d"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]}),a=e.createBuffer({size:256*t.depthOrArrayLayers,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.UNIFORM,label:"z indices buffer"}),o=Array.from({length:t.depthOrArrayLayers},((e,t)=>t));for(let t=0;t<o.length;t++)e.queue.writeBuffer(a,256*t,new Uint32Array([o[t]]).buffer);const s=e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[i]}),vertex:{module:e.createShaderModule({code:"\n          struct VertexOutput {\n            @builtin(position) Position : vec4<f32>,\n          }\n          const pos = array(\n              vec2( 1.0,  1.0),\n              vec2( 1.0, -1.0),\n              vec2(-1.0, -1.0),\n              vec2( 1.0,  1.0),\n              vec2(-1.0, -1.0),\n              vec2(-1.0,  1.0),\n            );\n          @vertex\n          fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n            var output : VertexOutput;\n            output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n            return output;\n          }"}),entryPoint:"vertex_main"},fragment:{module:e.createShaderModule({code:"\n          @group(0) @binding(0) var voxels : texture_3d<f32>;\n          @group(0) @binding(1) var<uniform> zIndex: u32;\n          @fragment\r\nfn fragment_main(@builtin(position) position : vec4<f32>) -> @location(0) vec4<f32> {\r\n  let srcTexel = vec3(vec2<u32>(position.xy),zIndex);\r\n  var colours = array<f32, 8>();\r\n  var isOctantEmpty = true;\r\n  for(var x = u32(0); x < 2; x++){\r\n    for(var y = u32(0); y < 2; y++){\r\n      for(var z = u32(0); z < 2; z++){\r\n        let voxelX = srcTexel.x * 2 + x;\r\n        let voxelY = srcTexel.y * 2 + y;\r\n        let voxelZ = srcTexel.z * 2 + z;\r\n        var voxelId = vec3<u32>(voxelX,voxelY,voxelZ);\r\n        var voxel = textureLoad(voxels,voxelId,0).r;\r\n        if(voxel > 0){\r\n          var index = x + y * 2 + z * 4;\r\n          colours[index] = voxel;\r\n          isOctantEmpty = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // If all voxels in the octant are empty, keep it blank\r\n  if(isOctantEmpty){\r\n    discard;\r\n  }\r\n\r\n  // Get the most common colour in the octant\r\n  var mostCommonColour = f32(0);\r\n  var mostCommonColourCount = u32(0);\r\n  for(var i = u32(0); i < 8; i = i + 1u){\r\n    var colour = colours[i];\r\n    var count = u32(0);\r\n    for(var j = u32(0); j < 8; j = j + 1u){\r\n      if(colour > 0 && colour == colours[j]){\r\n        count++;\r\n      }\r\n    }\r\n    if(count > mostCommonColourCount){\r\n      mostCommonColour = colour;\r\n      mostCommonColourCount = count;\r\n    }\r\n  }\r\n\r\n  return vec4(mostCommonColour, 0,0,0);\r\n}\r\n\r\n\n        "}),entryPoint:"fragment_main",targets:[{format:t.format}]}}),u=e.createCommandEncoder(),c=Math.max(1,t.depthOrArrayLayers>>r);for(let o=0;o<c;o++){const c=e.createBindGroup({layout:i,entries:[{binding:0,resource:t.createView({label:`${r} mip level of volume texture`,dimension:"3d",baseMipLevel:r-1,mipLevelCount:1})},{binding:1,resource:{buffer:a,offset:256*o,size:4}}]}),l=u.beginRenderPass({colorAttachments:[{view:n.createView({label:"volume slice for rendering mips",baseArrayLayer:o,arrayLayerCount:1,baseMipLevel:r,mipLevelCount:1,dimension:"2d-array"}),loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});l.setPipeline(s),l.setBindGroup(0,c),l.draw(6),l.end()}return e.queue.submit([u.finish()]),await e.queue.onSubmittedWorkDone(),await(async(e,t)=>{if("2d"!==t.dimension)throw new Error("Input texture should be a 2D texture");const r=e.createTexture({size:{width:t.width,height:t.height,depthOrArrayLayers:t.depthOrArrayLayers},format:t.format,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d",mipLevelCount:t.mipLevelCount}),n=e.createCommandEncoder();for(let e=0;e<t.mipLevelCount;e++)for(let i=0;i<t.depthOrArrayLayers>>e;i++)n.copyTextureToTexture({texture:t,mipLevel:e,origin:{x:0,y:0,z:i}},{texture:r,mipLevel:e,origin:{x:0,y:0,z:i}},{width:t.width>>e,height:t.height>>e,depthOrArrayLayers:1});return e.queue.submit([n.finish()]),await e.queue.onSubmittedWorkDone(),r})(e,n)},ai={format:ti,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,dimension:"3d"},oi=(e,t)=>Math.ceil(e/t)*t,si=Math.pow(2,3),ui=si,ci=256;class li{#i={};#a;#o;#s;#u;#c;constructor(e){this.#s=e,this.#a=e.createTexture({size:{width:ui,height:ui,depthOrArrayLayers:ui},...ai,label:"Volume atlas containing ",mipLevelCount:4}),this.#o=e.createTexture({size:{width:ci,height:1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,label:"Palette texture",mipLevelCount:1}),this.#u=this.#a.createView(),this.#c=this.#o.createView()}get dictionary(){return this.#i}addVolume=async(e,t,r)=>{if(this.#i[r])throw new Error(`Error adding volume to atlas: volume with label ${r} already exists`);const n=this.#s.createCommandEncoder(),{width:i,height:a,depthOrArrayLayers:o}=e,s=oi(i,si),u=oi(a,si),c=oi(o,si),l=this.#a.width+s;if(l>this.#s.limits.maxTextureDimension3D)throw new Error(`Error adding volume to atlas: adding volume would exceed device max texture dimension of ${this.#s.limits.maxTextureDimension3D}`);const d=Math.max(this.#a.height,u),f=Math.max(this.#a.depthOrArrayLayers,c),h=this.#s.createTexture({size:{width:l,height:d,depthOrArrayLayers:f},mipLevelCount:this.#a.mipLevelCount,...ai,label:`${this.#a.label}, ${e.label||"unnamed volume"}`}),p=this.#a.width;n.copyTextureToTexture({texture:this.#a},{texture:h},{width:this.#a.width,height:this.#a.height,depthOrArrayLayers:this.#a.depthOrArrayLayers}),n.copyTextureToTexture({texture:e,mipLevel:0,origin:{x:0,y:0,z:0}},{texture:h,mipLevel:0,origin:{x:p,y:0,z:0}},{width:e.width,height:e.height,depthOrArrayLayers:e.depthOrArrayLayers}),this.#a=h;const m=this.#o.height;this.#i[r]={location:[p,0,0],size:[i,a,o],paletteIndex:m};const g=this.#s.createTexture({size:{width:ci,height:this.#o.height+1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING,label:"Palette texture",mipLevelCount:1});n.copyTextureToTexture({texture:this.#o},{texture:g},{width:ci,height:this.#o.height,depthOrArrayLayers:1}),n.copyTextureToTexture({texture:t},{texture:g,origin:{x:0,y:m,z:0}},{width:ci,height:1,depthOrArrayLayers:1}),this.#o=g,this.#s.queue.submit([n.finish()]),await this.#s.queue.onSubmittedWorkDone(),this.#a=await(async(e,t)=>{if("3d"!==t.dimension)throw new Error("Input texture should be a 3D texture");let r=t;for(let n=1;n<t.mipLevelCount;n++)r=await ii(e,r,n);return r})(this.#s,this.#a),(async(e,t,r)=>{const n=document.getElementById("debug-canvas");n.style.imageRendering="pixelated",n.width=r.width,n.height=r.height;const i=n.getContext("webgpu");i.configure({device:e,format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT});const a=e.createCommandEncoder(),o=e.createShaderModule({code:fr}),s=e.createRenderPipeline({label:"write texture to canvas",layout:"auto",vertex:{module:o,entryPoint:"vertex_main"},fragment:{module:o,entryPoint:"fragment_main",targets:[{format:"rgba8unorm"}]}}),u=a.beginRenderPass({label:"write texture to canvas",colorAttachments:[{view:i.getCurrentTexture().createView(),loadOp:"clear",clearValue:[.3,.3,.3,.3],storeOp:"store"}]}),c=e.createBindGroup({layout:s.getBindGroupLayout(0),entries:[{binding:1,resource:r.createView({label:"texture being written to canvas"})}]});u.setPipeline(s),u.setBindGroup(0,c),u.draw(6),u.end(),e.queue.submit([a.finish()])})(this.#s,0,this.#o),this.#u=this.#a.createView(),this.#c=this.#o.createView()};get atlasTextureView(){return this.#u}get paletteTextureView(){return this.#c}}const di="struct BoxIntersectionResult {\r\n    tNear: f32,\r\n    tFar: f32,\r\n    normal: vec3<f32>,\r\n    isHit: bool,\r\n}\r\n\r\nfn simpleBoxIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n) -> f32 {\r\n  let m = 1.0/rd; // can precompute if traversing a set of aligned boxes\r\n  let n = m*ro;   // can precompute if traversing a set of aligned boxes\r\n  let k = abs(m)*boxSize;\r\n  let t1 = -n - k;\r\n  let t2 = -n + k;\r\n  let tN = max( max( t1.x, t1.y ), t1.z );\r\n  let tF = min( min( t2.x, t2.y ), t2.z );\r\n  if( tN>tF || tF<0.0) {\r\n    return -1.0; // no intersection\r\n  }\r\n  return tN;\r\n}\r\n\r\nfn boxIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    result.isHit = false;\r\n    result.tNear = -1.0;\r\n    result.tFar = -1.0;\r\n\r\n    let offsetRayOrigin = ro - boxSize;\r\n    let m: vec3<f32> = 1.0 / rd;\r\n    let n: vec3<f32> = m * offsetRayOrigin;\r\n    let k: vec3<f32> = abs(m) * boxSize;\r\n    let t1: vec3<f32> = -n - k;\r\n    let t2: vec3<f32> = -n + k;\r\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\r\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\r\n    if (tN > tF || tF < 0.0) {\r\n        return result;\r\n    }\r\n    // Check if the ray starts inside the volume\r\n    let insideVolume = tN < 0.0;\r\n    var normal = select(\r\n        step(vec3<f32>(tN), t1),\r\n        step(t2, vec3<f32>(tF)),\r\n        tN < 0.0,\r\n    );\r\n    normal *= -sign(rd);\r\n    // Check if the intersection is in the correct direction, only if inside the volume\r\n    if (insideVolume && dot(normal, rd) < 0.0) {\r\n        return result;\r\n    }\r\n    result.tNear = tN;\r\n    result.tFar = tF;\r\n    result.normal = normal;\r\n    result.isHit = true;\r\n    return result;\r\n}\r\n\r\nfn planeIntersection(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    planeNormal: vec3<f32>,\r\n    planeDistance: f32,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    let denom = dot(planeNormal, rd);\r\n    if (abs(denom) > 0.0001) {\r\n        let t = -(dot(planeNormal, ro) + planeDistance) / denom;\r\n        if (t > 0.0) {\r\n            result.isHit = true;\r\n            result.tNear = t;\r\n            result.tFar = t;\r\n            result.normal = planeNormal;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfn get3x3From4x4(m: mat4x4<f32>) -> mat3x3<f32> {\r\n    return mat3x3<f32>(\r\n        m[0].xyz,\r\n        m[1].xyz,\r\n        m[2].xyz,\r\n    );\r\n}\r\n\r\n\r\nfn intersectOBB(\r\n    ro: vec3<f32>,\r\n    rd: vec3<f32>,\r\n    boxSize: vec3<f32>,\r\n    boxOrientation: mat3x3<f32>,\r\n) -> BoxIntersectionResult {\r\n    var result = BoxIntersectionResult();\r\n    result.isHit = false;\r\n    result.tNear = -1.0;\r\n    result.tFar = -1.0;\r\n\r\n    let offsetRayOrigin = ro - boxSize;\r\n    let m: vec3<f32> = 1.0 / rd;\r\n    let n: vec3<f32> = m * offsetRayOrigin;\r\n    let k: vec3<f32> = abs(m) * boxSize;\r\n    let t1: vec3<f32> = -n - k;\r\n    let t2: vec3<f32> = -n + k;\r\n    let tN: f32 = max(max(t1.x, t1.y), t1.z);\r\n    let tF: f32 = min(min(t2.x, t2.y), t2.z);\r\n    if (tN > tF || tF < 0.0) {\r\n        return result;\r\n    }\r\n    // Check if the ray starts inside the volume\r\n    let insideVolume = tN < 0.0;\r\n    var normal = select(\r\n        step(vec3<f32>(tN), t1),\r\n        step(t2, vec3<f32>(tF)),\r\n        tN < 0.0,\r\n    );\r\n    normal *= -sign(rd);\r\n    // Check if the intersection is in the correct direction, only if inside the volume\r\n    if (insideVolume && dot(normal, rd) < 0.0) {\r\n        return result;\r\n    }\r\n    result.tNear = tN;\r\n    result.tFar = tF;\r\n    result.normal = normal;\r\n    result.isHit = true;\r\n    return result;\r\n}",fi="const EPSILON = 0.0001;\r\nconst MAX_RAY_STEPS = 256;\r\nconst FAR_PLANE = 10000.0;\r\nconst NEAR_PLANE = 0.5;\r\nconst STACK_LEN: u32 = 32u;\r\n\r\n// Function to transform a normal vector from object to world space\r\nfn transformNormal(inverseTransform: mat4x4<f32>, normal: vec3<f32>) -> vec3<f32> {\r\n    let worldNormal = normalize((vec4<f32>(normal, 0.0) * inverseTransform).xyz);\r\n    return worldNormal;\r\n}\r\n\r\n// Function to transform an object space position to world space\r\nfn transformPosition(transform: mat4x4<f32>, position: vec3<f32>) -> vec3<f32> {\r\n    let worldPosition = (transform * vec4<f32>(position, 1.0)).xyz;\r\n    return worldPosition;\r\n}\r\n\r\nfn getMaxMipLevel(size: vec3<f32>) -> u32 {\r\n  return u32(log2(max(size.x, max(size.y, size.z))));\r\n}\r\n\r\nstruct Brick {\r\n  voxels: array<u32, 16>\r\n}\r\nstruct VoxelObject {\r\n  transform: mat4x4<f32>,\r\n  inverseTransform: mat4x4<f32>,\r\n  previousTransform: mat4x4<f32>,\r\n  previousInverseTransform: mat4x4<f32>,\r\n  size : vec3<f32>,\r\n  atlasLocation : vec3<f32>,\r\n  paletteIndex : f32,\r\n}\r\n\r\nstruct RayMarchResult {\r\n  palettePosition: f32,\r\n  worldPos: vec3<f32>,\r\n  objectPos: vec3<f32>,\r\n  normal: vec3<f32>,\r\n  stepsTaken: i32,\r\n  hit: bool,\r\n  t: f32,\r\n}\r\n\r\nfn isInBounds(position: vec3<i32>, size: vec3<i32>) -> bool {\r\n  return all(position >= vec3(0)) && all(position <= size - vec3(1));\r\n}\r\n\r\nfn getMipLevelFromVoxelSize(voxelSize: vec3<f32>) -> u32 {\r\n  return u32(log2(max(voxelSize.x, max(voxelSize.y, voxelSize.z))));\r\n}\r\n\r\nfn convert1DTo3D(size: vec3<u32>, index: u32) -> vec3<u32> {\r\n  return vec3(\r\n    index % size.x,\r\n    index / size.y,\r\n    index / (size.x * size.y)\r\n  );\r\n}\r\n\r\nfn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\r\n  return position.x + position.y * size.x + position.z * (size.x * size.y);\r\n}\r\n\r\n\r\nfn doesBrickContainVoxels(brick: Brick) -> bool {\r\n  for(var i = 0; i < 16; i++){\r\n    if(brick.voxels[i] > 0){\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfn getBit(value: u32, bitIndex: u32) -> bool {\r\n  return (value & (1u << bitIndex)) != 0;\r\n}\r\n\r\n// gets bit in 512bit bitmask in a brick\r\n// bitIndex is the index of the bit in the bitmask, 0-511\r\nfn getBitInBrick(brick: Brick, bitIndex: u32) -> bool {\r\n  let maskIndex = bitIndex / 32;\r\n  let bitIndexInMask = bitIndex % 32;\r\n  return getBit(brick.voxels[maskIndex], bitIndexInMask);\r\n}\r\n\r\nfn rayMarchAtMip(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\r\n  var output = RayMarchResult();\r\n  let rayDirSign = sign(objectRayDirection);\r\n  let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\r\n  var voxelSize = vec3(f32(1 << mipLevel));\r\n  var shiftedRayOrigin = objectRayOrigin - objectRayDirection * EPSILON;\r\n  var objectPos = shiftedRayOrigin;\r\n  var currentIndex = vec3<i32>(floor(objectPos));\r\n  var scaledRayOrigin =  objectRayOrigin / voxelSize;\r\n  var scaledObjectPos = floor(objectPos / voxelSize);\r\n  var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\r\n  var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\r\n  let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\r\n  var objectNormal = mask * -rayDirSign;\r\n  var tCurrent = min(tMax.x, min(tMax.y, tMax.z));\r\n\r\n  // RAYMARCH\r\n  for(var i = 0; i < MAX_RAY_STEPS; i++)\r\n  {\r\n    output.stepsTaken = i;\r\n\r\n    let samplePosition = vec3<u32>(currentIndex) + atlasLocation;\r\n    let mipSample0 = textureLoad(voxels, samplePosition / vec3((1u << mipLevel)), mipLevel);\r\n\r\n    if(mipSample0.r > 0.0 && isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n        output.objectPos = objectPos;\r\n        output.worldPos = (voxelObject.transform *  vec4(objectPos, 1.0)).xyz;\r\n        output.normal = transformNormal(voxelObject.inverseTransform,vec3<f32>(objectNormal));\r\n        output.hit = true;\r\n        output.t = tCurrent;\r\n        output.palettePosition = mipSample0.r;\r\n        return output;\r\n    }\r\n\r\n    var scaledRayOrigin = shiftedRayOrigin / voxelSize;\r\n    var scaledObjectPos = floor(objectPos / voxelSize);\r\n    var scaledOriginDifference = scaledObjectPos - scaledRayOrigin;\r\n    var tMax = voxelSize * (rayDirSign * scaledOriginDifference + (rayDirSign * 0.5) + 0.5) / abs(objectRayDirection);\r\n    let mask = vec3<f32>(tMax.xyz <= min(tMax.yzx, tMax.zxy));\r\n\r\n    tCurrent = min(tMax.x, min(tMax.y, tMax.z));\r\n    objectPos = objectRayOrigin + objectRayDirection * tCurrent;\r\n    currentIndex = vec3<i32>(floor(objectPos / voxelSize) * voxelSize);\r\n    objectNormal = mask * -rayDirSign;\r\n\r\n\r\n    if(!isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n        break;\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\nfn rayMarchTransformed(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, mipLevel: u32) -> RayMarchResult {\r\n      var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n      let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n      return  rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\r\n}\r\n\r\nfn rayMarchOctree(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, startingMipLevel: u32) -> RayMarchResult {\r\n   var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n   let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n   var output = RayMarchResult();\r\n   for(var mipLevel = startingMipLevel; mipLevel > 0; mipLevel--){\r\n     output = rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\r\n     if(output.hit){\r\n       objectRayOrigin += (output.t - EPSILON) * objectRayDirection;\r\n     }\r\n     else{\r\n      return output;\r\n     }\r\n   }\r\n   return rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, 0);\r\n}\r\n\r\nconst SHADOW_MIN_MIP_LEVEL =1u;\r\n\r\nfn rayMarchOctreeShadows(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>, startingMipLevel: u32) -> RayMarchResult {\r\n   var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n   let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n   var output = RayMarchResult();\r\n   for(var mipLevel = startingMipLevel; mipLevel > SHADOW_MIN_MIP_LEVEL; mipLevel--){\r\n     output = rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, mipLevel);\r\n     if(output.hit){\r\n       objectRayOrigin += (output.t - EPSILON) * objectRayDirection;\r\n     }\r\n     else{\r\n      return output;\r\n     }\r\n   }\r\n   return rayMarchAtMip(voxelObject, objectRayDirection, objectRayOrigin, SHADOW_MIN_MIP_LEVEL);\r\n}\r\n\r\n\r\nstruct Stack {\r\n  arr: array<i32, STACK_LEN>,\r\n\thead: u32,\r\n}\r\n\r\nfn stack_new() -> Stack {\r\n    var arr: array<i32, STACK_LEN>;\r\n    return Stack(arr, 0u);\r\n}\r\n\r\nfn stack_push(stack: ptr<function, Stack>, val: i32) {\r\n    (*stack).arr[(*stack).head] = val;\r\n    (*stack).head += 1u;\r\n}\r\n\r\nfn stack_pop(stack: ptr<function, Stack>) -> i32 {\r\n    (*stack).head -= 1u;\r\n    return (*stack).arr[(*stack).head];\r\n}\r\n\r\nconst colours = array<vec3<f32>, 6>(\r\n  vec3<f32>(1.0, 0.0, 0.0),\r\n  vec3<f32>(0.0, 1.0, 0.0),\r\n  vec3<f32>(0.0, 0.0, 1.0),\r\n  vec3<f32>(1.0, 1.0, 0.0),\r\n  vec3<f32>(1.0, 0.0, 1.0),\r\n  vec3<f32>(0.0, 1.0, 1.0)\r\n);\r\n\r\nfn debugColourFromIndex(index: i32) -> vec3<f32> {\r\n  return colours[index % 6];\r\n}\r\n\r\n\r\nconst OCTREE_CHILD_OFFSETS = array<vec3<i32>, 8>(\r\n  vec3<i32>(0, 0, 0),\r\n  vec3<i32>(1, 0, 0),\r\n  vec3<i32>(0, 1, 0),\r\n  vec3<i32>(1, 1, 0),\r\n  vec3<i32>(0, 0, 1),\r\n  vec3<i32>(1, 0, 1),\r\n  vec3<i32>(0, 1, 1),\r\n  vec3<i32>(1, 1, 1)\r\n);",hi="const BRICK_SIZE = 8;\r\nconst MAX_STEPS = 256;\r\n\r\n\r\nstruct BVHNode {\r\n  leftIndex: i32,\r\n  rightIndex: i32,\r\n  objectCount: u32,\r\n  AABBMin: vec3<f32>,\r\n  AABBMax: vec3<f32>\r\n}\r\n\r\nfn getDistanceToNode(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, node: BVHNode) -> f32 {\r\n  if(all(rayOrigin >= node.AABBMin) && all(rayOrigin <= node.AABBMax)){\r\n    return 0.0;\r\n  }\r\n  let boxSize = (node.AABBMax - node.AABBMin) / 2;\r\n  let intersection = boxIntersection(rayOrigin - node.AABBMin, rayDirection, boxSize);\r\n  if(intersection.isHit){\r\n    return intersection.tNear;\r\n  }\r\n  return -1.0;\r\n\r\n}\r\n\r\n// Stack-based BVH traversal\r\nfn rayMarchBVH(rayOrigin: vec3<f32>, rayDirection: vec3<f32>) -> RayMarchResult {\r\n  var closestIntersection = RayMarchResult();\r\n  closestIntersection.worldPos = rayOrigin + rayDirection * FAR_PLANE;\r\n\r\n  // Create a stack to store the nodes to visit\r\n  var stack = stack_new();\r\n  stack_push(&stack, 0);\r\n\r\n  var iterations = 0;\r\n  var nodeIndex = 0;\r\n\r\n  while (stack.head > 0u && iterations < MAX_STEPS) {\r\n    let node = bvhNodes[nodeIndex];\r\n    if(node.objectCount > 1){\r\n      let leftNode = bvhNodes[node.leftIndex];\r\n      let rightNode = bvhNodes[node.rightIndex];\r\n      let leftDist = getDistanceToNode(rayOrigin, rayDirection, leftNode);\r\n      let rightDist = getDistanceToNode(rayOrigin, rayDirection, rightNode);\r\n      let hitLeft = leftDist >= 0.0;\r\n      let hitRight = rightDist >= 0.0;\r\n      if(hitLeft){\r\n        var nearIndex = node.leftIndex;\r\n        // We hit both left and right, choose the closest one\r\n        if(hitRight){\r\n          if(leftDist < rightDist){\r\n            // left is closer, push right to stack\r\n            stack_push(&stack, node.rightIndex);\r\n          } else {\r\n            // right is closer, push left to stack\r\n            stack_push(&stack, node.leftIndex);\r\n            nearIndex = node.rightIndex;\r\n          }\r\n        }\r\n        nodeIndex = nearIndex;\r\n      }\r\n      // We only hit the right Node\r\n      else if(hitRight){\r\n        nodeIndex = node.rightIndex;\r\n      }\r\n      // We didn't hit any node, pop the stack\r\n      else{\r\n        nodeIndex = stack_pop(&stack);\r\n      }\r\n    }\r\n    // valid leaf, raymarch it\r\n    else if(node.objectCount == 1){\r\n        let distanceToLeaf = getDistanceToNode(rayOrigin, rayDirection, node);\r\n        if(distanceToLeaf < 0.0){\r\n          nodeIndex = stack_pop(&stack);\r\n          continue;\r\n        }\r\n        let worldPos = rayOrigin + rayDirection * distanceToLeaf;\r\n        let voxelObject = voxelObjects[node.leftIndex];\r\n//          let rayMarchResult = rayMarchTransformed(voxelObject, rayDirection, worldPos, 0);\r\n        let rayMarchResult = rayMarchOctree(voxelObject, rayDirection, worldPos, 3);\r\n        if(rayMarchResult.hit){\r\n          return rayMarchResult;\r\n        }\r\n\r\n        nodeIndex = stack_pop(&stack);\r\n    }\r\n\r\n    iterations += 1;\r\n//    closestIntersection.colour += vec3<f32>(0.0075);\r\n  }\r\n\r\n  return closestIntersection;\r\n}\r\n\r\nconst MAX_SHADOW_BVH_VISITS = 8;\r\n\r\nfn rayMarchBVHShadows(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, mipLevel: u32) -> RayMarchResult {\r\n   var closestIntersection = RayMarchResult();\r\n   closestIntersection.worldPos = rayOrigin + rayDirection * FAR_PLANE;\r\n\r\n   // Create a stack to store the nodes to visit\r\n   var stack = stack_new();\r\n   stack_push(&stack, 0);\r\n\r\n   var iterations = 0;\r\n   var nodeIndex = 0;\r\n\r\n   while (stack.head > 0u && iterations < MAX_SHADOW_BVH_VISITS) {\r\n     let node = bvhNodes[nodeIndex];\r\n     if(node.objectCount > 1){\r\n       let leftNode = bvhNodes[node.leftIndex];\r\n       let rightNode = bvhNodes[node.rightIndex];\r\n       let leftDist = getDistanceToNode(rayOrigin, rayDirection, leftNode);\r\n       let rightDist = getDistanceToNode(rayOrigin, rayDirection, rightNode);\r\n       let hitLeft = leftDist >= 0.0;\r\n       let hitRight = rightDist >= 0.0;\r\n       if(hitLeft){\r\n         var nearIndex = node.leftIndex;\r\n         // We hit both left and right, choose the closest one\r\n         if(hitRight){\r\n           if(leftDist < rightDist){\r\n             // left is closer, push right to stack\r\n             stack_push(&stack, node.rightIndex);\r\n           } else {\r\n             // right is closer, push left to stack\r\n             stack_push(&stack, node.leftIndex);\r\n             nearIndex = node.rightIndex;\r\n           }\r\n         }\r\n         nodeIndex = nearIndex;\r\n       }\r\n       // We only hit the right Node\r\n       else if(hitRight){\r\n         nodeIndex = node.rightIndex;\r\n       }\r\n       // We didn't hit any node, pop the stack\r\n       else{\r\n         nodeIndex = stack_pop(&stack);\r\n       }\r\n     }\r\n     // valid leaf, raymarch it\r\n     else if(node.objectCount == 1){\r\n         let distanceToLeaf = getDistanceToNode(rayOrigin, rayDirection, node);\r\n         if(distanceToLeaf < 0.0){\r\n           nodeIndex = stack_pop(&stack);\r\n           continue;\r\n         }\r\n         let worldPos = rayOrigin + rayDirection * distanceToLeaf;\r\n         let voxelObject = voxelObjects[node.leftIndex];\r\n           let rayMarchResult = rayMarchTransformed(voxelObject, rayDirection, worldPos, mipLevel);\r\n//         let rayMarchResult = rayMarchOctree(voxelObject, rayDirection, worldPos, 3);\r\n         if(rayMarchResult.hit){\r\n           return rayMarchResult;\r\n         }\r\n\r\n         nodeIndex = stack_pop(&stack);\r\n     }\r\n\r\n     iterations += 1;\r\n //    closestIntersection.colour += vec3<f32>(0.0075);\r\n   }\r\n\r\n   return closestIntersection;\r\n }",pi="const MAX_COARSE_RAY_STEPS = 64;\r\n\r\nfn rayMarchCoarse(voxelObject: VoxelObject, objectRayDirection: vec3<f32>, objectRayOrigin: vec3<f32>) -> bool {\r\n    let atlasLocation = vec3<u32>(voxelObject.atlasLocation);\r\n    var voxelSize = vec3<f32>(1.0);\r\n    var objectPos = objectRayOrigin;\r\n    var currentIndex = vec3<i32>(round(objectPos));\r\n    var tDelta = voxelSize / abs(objectRayDirection);\r\n    var tIncrement = min(tDelta.x, min(tDelta.y, tDelta.z));\r\n\r\n    for(var i = 0; i < MAX_COARSE_RAY_STEPS; i++)\r\n    {\r\n      let samplePosition = objectPos + voxelObject.atlasLocation;\r\n      let uv = samplePosition / vec3<f32>(textureDimensions(voxels));\r\n      let mipSample0 = textureSampleLevel(voxels, nearestSampler, uv, 0.0);\r\n\r\n      if(mipSample0.a > 0.0){\r\n          return true;\r\n      }\r\n\r\n      objectPos += objectRayDirection * tIncrement;\r\n      currentIndex = vec3<i32>(round(objectPos));\r\n//      if(!isInBounds(currentIndex, vec3<i32>(voxelObject.size))){\r\n//          break;\r\n//      }\r\n    }\r\n    return false;\r\n}\r\n\r\nfn rayMarchTransformedCoarse(voxelObject: VoxelObject, rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> bool {\r\n    var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(rayOrigin, 1.0)).xyz;\r\n    let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n    return rayMarchCoarse(voxelObject, objectRayDirection, objectRayOrigin);\r\n}\r\n\r\n// Used for shadows, return first hit\r\nfn rayMarchBVHCoarse(rayOrigin: vec3<f32>, rayDirection: vec3<f32>, maxDistance: f32) -> bool {\r\n  // Create a stack to store the nodes to visit\r\n      var stack = stack_new();\r\n      stack_push(&stack, 0);\r\n\r\n      var iterations = 0;\r\n      var nodeIndex = 0;\r\n\r\n      while (stack.head > 0u && iterations < 32) {\r\n        let node = bvhNodes[nodeIndex];\r\n        if(node.objectCount == 0){\r\n          nodeIndex = stack_pop(&stack);\r\n        }\r\n        // valid leaf, raymarch it\r\n        else if(node.objectCount == 1){\r\n            // Raymarch the voxel object if it's a leaf node\r\n            let voxelObject = voxelObjects[node.leftIndex]; // left index represents the voxel object index for leaf nodes\r\n            let AABBDist = getDistanceToNode(rayOrigin, rayDirection, node);\r\n            if(rayMarchTransformedCoarse(voxelObject, rayDirection, rayOrigin + rayDirection * AABBDist)){\r\n              return true;\r\n            }\r\n            // Pop the stack and continue\r\n            nodeIndex = stack_pop(&stack);\r\n        }\r\n        else{\r\n          let leftDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.leftIndex]);\r\n          let rightDist = getDistanceToNode(rayOrigin, rayDirection, bvhNodes[node.rightIndex]);\r\n          let hitLeft = leftDist >= 0.0 && leftDist < maxDistance;\r\n          let hitRight = rightDist >= 0.0 && rightDist < maxDistance;\r\n          if(hitLeft){\r\n            var nearIndex = node.leftIndex;\r\n            // We hit both left and right, choose the closest one\r\n            if(hitRight){\r\n              if(leftDist < rightDist){\r\n                // left is closer, push right to stack\r\n                stack_push(&stack, node.rightIndex);\r\n              } else {\r\n                // right is closer, push left to stack\r\n                stack_push(&stack, node.leftIndex);\r\n                nearIndex = node.rightIndex;\r\n              }\r\n            }\r\n            nodeIndex = nearIndex;\r\n          }\r\n          // We only hit the right Node\r\n          else if(hitRight){\r\n            nodeIndex = node.rightIndex;\r\n          }\r\n          // We didn't hit any node, pop the stack\r\n          else{\r\n            nodeIndex = stack_pop(&stack);\r\n          }\r\n        }\r\n\r\n        iterations += 1;\r\n      }\r\n\r\n      return false;\r\n}",mi="fn calculateRayDirection(uv: vec2<f32>, inverseProjection: mat4x4<f32>) -> vec3<f32> {\r\n  let clipSpace = vec2(1.0 - uv.x, 1.0 - uv.y) * 2.0 - 1.0;\r\n  let viewRay = vec3<f32>(clipSpace, 1.0);\r\n  let viewRayView = inverseProjection * vec4(viewRay, 1.0);\r\n  return normalize(viewRayView.xyz);\r\n}\r\n\r\nfn normaliseValue(min: f32, max: f32, value: f32) -> f32 {\r\n  return (value - min) / (max - min);\r\n}\r\n\r\nfn reconstructWorldPosition(uv: vec2<f32>, cameraPos:vec3<f32>, linearDepth: f32, inverseProjection: mat4x4<f32>) -> vec3<f32> {\r\n  let rayDirection = calculateRayDirection(uv, inverseProjection);\r\n  let distanceToCamera = normaliseValue(0.5, 10000.0, linearDepth);\r\n  return cameraPos + rayDirection * distanceToCamera;\r\n}",gi="// Constants\r\nconst infinity : f32 = 99999999.0;\r\n\r\n// Utility functions\r\nfn degreesToRadians(degrees : f32) -> f32 {\r\n    return degrees * (3.1415926535897932385 / 180.0);\r\n}\r\n\r\nfn unitVector(v : vec3<f32>) -> vec3<f32> {\r\n    return v / length(v);\r\n}\r\n\r\nfn lengthSquared(v : vec3<f32>) -> f32 {\r\n    return v.x * v.x + v.y * v.y + v.z * v.z;\r\n}\r\n\r\nfn random(co : vec2<f32>) -> f32 {\r\n    return fract(sin(dot(co, vec2<f32>(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nfn randomMinMax(co : vec2<f32>, min : f32, max : f32) -> f32 {\r\n    return min + (max - min) * random(co);\r\n}\r\n\r\nfn randomFloat3(co : vec2<f32>) -> vec3<f32> {\r\n    return vec3<f32>(random(co), random(co * 2.0), random(co * 3.0));\r\n}\r\n\r\nfn randomFloat3MinMax(co : vec2<f32>, min : f32, max : f32) -> vec3<f32> {\r\n    return vec3<f32>(randomMinMax(co, min, max), randomMinMax(co * 2.0, min, max), randomMinMax(co * 3.0, min, max));\r\n}\r\n\r\nfn randomInUnitSphere(co : vec2<f32>) -> vec3<f32> {\r\n    var p : vec3<f32> = randomFloat3MinMax(co, -1.0, 1.0);\r\n    while (lengthSquared(p) < 1.0) {\r\n        p = randomFloat3MinMax(co, -1.0, 1.0);\r\n    }\r\n    return p;\r\n}\r\n\r\nfn randomInUnitDisk(seed : vec2<f32>) -> vec2<f32> {\r\n    let r = sqrt(random(seed));\r\n    let theta = 2.0 * 3.14159265359 * random(vec2<f32>(seed.y, seed.x));\r\n    return vec2<f32>(cos(theta), sin(theta)) * r;\r\n}\r\n\r\nfn randomInPlanarUnitDisk(seed : vec2<f32>, normal: vec3<f32>) -> vec3<f32> {\r\n    let disk = randomInUnitDisk(seed);\r\n    var diskNormal = cross(normal, vec3<f32>(0.0, 1.0, 0.0));\r\n    if (length(diskNormal) < 0.01) {\r\n        diskNormal = cross(normal, vec3<f32>(1.0, 0.0, 0.0));\r\n    }\r\n    diskNormal = normalize(diskNormal);\r\n    let diskTangent = cross(diskNormal, normal);\r\n    return disk.x * diskTangent + disk.y * diskNormal;\r\n}\r\n\r\nfn reflect(v : vec3<f32>, n : vec3<f32>) -> vec3<f32> {\r\n    return v - 2.0 * dot(v, n) * n;\r\n}\r\n\r\nfn randomUnitVector(co : vec2<f32>) -> vec3<f32> {\r\n    return unitVector(randomInUnitSphere(co));\r\n}\r\n\r\nfn nearZero(e : vec3<f32>) -> bool {\r\n    const s : f32 = 1e-8;\r\n    return (abs(e.x) < s) && (abs(e.y) < s) && (abs(e.z) < s);\r\n}\r\n\r\nfn randomInHemisphere(co : vec2<f32>, normal : vec3<f32>) -> vec3<f32> {\r\n    let inUnitSphere = randomUnitVector(co);\r\n    if (dot(inUnitSphere, normal) > 0.0) {\r\n        return inUnitSphere;\r\n    }\r\n    return -inUnitSphere;\r\n}\r\n\r\nfn randomAlongVector(co : vec2<f32>, direction : vec3<f32>) -> vec3<f32> {\r\n    return normalize(direction) * random(co);\r\n}\r\n\r\n// Function to perturb the normal vector within the hemisphere\r\nfn perturbDirection(normal: vec3<f32>, scatterAmount: f32, co: vec2<f32>) -> vec3<f32> {\r\n    // Generate a random vector in a hemisphere\r\n    let hemisphereVector : vec3<f32> = randomInHemisphere(co, normal);\r\n\r\n    // Combine the perturbation with the original normal\r\n    let perturbedDir : vec3<f32> = normalize(normal + scatterAmount * hemisphereVector);\r\n\r\n    return perturbedDir;\r\n}\r\n\r\nfn permute4(x: vec4<f32>) -> vec4<f32> { return ((x * 34. + 1.) * x) % vec4<f32>(289.); }\r\nfn taylorInvSqrt4(r: vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r; }\r\nfn fade3(t: vec3<f32>) -> vec3<f32> { return t * t * t * (t * (t * 6. - 15.) + 10.); }\r\n\r\nfn perlinNoise3(P: vec3<f32>) -> f32 {\r\n    var Pi0 : vec3<f32> = floor(P); // Integer part for indexing\r\n    var Pi1 : vec3<f32> = Pi0 + vec3<f32>(1.); // Integer part + 1\r\n    Pi0 = Pi0 % vec3<f32>(289.);\r\n    Pi1 = Pi1 % vec3<f32>(289.);\r\n    let Pf0 = fract(P); // Fractional part for interpolation\r\n    let Pf1 = Pf0 - vec3<f32>(1.); // Fractional part - 1.\r\n    let ix = vec4<f32>(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n    let iy = vec4<f32>(Pi0.yy, Pi1.yy);\r\n    let iz0 = Pi0.zzzz;\r\n    let iz1 = Pi1.zzzz;\r\n\r\n    let ixy = permute4(permute4(ix) + iy);\r\n    let ixy0 = permute4(ixy + iz0);\r\n    let ixy1 = permute4(ixy + iz1);\r\n\r\n    var gx0: vec4<f32> = ixy0 / 7.;\r\n    var gy0: vec4<f32> = fract(floor(gx0) / 7.) - 0.5;\r\n    gx0 = fract(gx0);\r\n    var gz0: vec4<f32> = vec4<f32>(0.5) - abs(gx0) - abs(gy0);\r\n    var sz0: vec4<f32> = step(gz0, vec4<f32>(0.));\r\n    gx0 = gx0 + sz0 * (step(vec4<f32>(0.), gx0) - 0.5);\r\n    gy0 = gy0 + sz0 * (step(vec4<f32>(0.), gy0) - 0.5);\r\n\r\n    var gx1: vec4<f32> = ixy1 / 7.;\r\n    var gy1: vec4<f32> = fract(floor(gx1) / 7.) - 0.5;\r\n    gx1 = fract(gx1);\r\n    var gz1: vec4<f32> = vec4<f32>(0.5) - abs(gx1) - abs(gy1);\r\n    var sz1: vec4<f32> = step(gz1, vec4<f32>(0.));\r\n    gx1 = gx1 - sz1 * (step(vec4<f32>(0.), gx1) - 0.5);\r\n    gy1 = gy1 - sz1 * (step(vec4<f32>(0.), gy1) - 0.5);\r\n\r\n    var g000: vec3<f32> = vec3<f32>(gx0.x, gy0.x, gz0.x);\r\n    var g100: vec3<f32> = vec3<f32>(gx0.y, gy0.y, gz0.y);\r\n    var g010: vec3<f32> = vec3<f32>(gx0.z, gy0.z, gz0.z);\r\n    var g110: vec3<f32> = vec3<f32>(gx0.w, gy0.w, gz0.w);\r\n    var g001: vec3<f32> = vec3<f32>(gx1.x, gy1.x, gz1.x);\r\n    var g101: vec3<f32> = vec3<f32>(gx1.y, gy1.y, gz1.y);\r\n    var g011: vec3<f32> = vec3<f32>(gx1.z, gy1.z, gz1.z);\r\n    var g111: vec3<f32> = vec3<f32>(gx1.w, gy1.w, gz1.w);\r\n\r\n    let norm0 = taylorInvSqrt4(\r\n        vec4<f32>(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n    g000 = g000 * norm0.x;\r\n    g010 = g010 * norm0.y;\r\n    g100 = g100 * norm0.z;\r\n    g110 = g110 * norm0.w;\r\n    let norm1 = taylorInvSqrt4(\r\n        vec4<f32>(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n    g001 = g001 * norm1.x;\r\n    g011 = g011 * norm1.y;\r\n    g101 = g101 * norm1.z;\r\n    g111 = g111 * norm1.w;\r\n\r\n    let n000 = dot(g000, Pf0);\r\n    let n100 = dot(g100, vec3<f32>(Pf1.x, Pf0.yz));\r\n    let n010 = dot(g010, vec3<f32>(Pf0.x, Pf1.y, Pf0.z));\r\n    let n110 = dot(g110, vec3<f32>(Pf1.xy, Pf0.z));\r\n    let n001 = dot(g001, vec3<f32>(Pf0.xy, Pf1.z));\r\n    let n101 = dot(g101, vec3<f32>(Pf1.x, Pf0.y, Pf1.z));\r\n    let n011 = dot(g011, vec3<f32>(Pf0.x, Pf1.yz));\r\n    let n111 = dot(g111, Pf1);\r\n\r\n    var fade_xyz: vec3<f32> = fade3(Pf0);\r\n    let temp = vec4<f32>(f32(fade_xyz.z)); // simplify after chrome bug fix\r\n    let n_z = mix(vec4<f32>(n000, n100, n010, n110), vec4<f32>(n001, n101, n011, n111), temp);\r\n    let n_yz = mix(n_z.xy, n_z.zw, vec2f(f32(fade_xyz.y))); // simplify after chrome bug fix\r\n    let n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\r\n    return 2.2 * n_xyz;\r\n}",vi="struct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  previousInverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};",xi={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},yi={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},_i={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:ri}},bi={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},wi={binding:4,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},Ti={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},Si={binding:6,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},ki={binding:7,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},Pi={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},Mi={binding:9,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},Ei={binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},Ai={binding:11,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},Oi={binding:12,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},Ii={binding:13,visibility:GPUShaderStage.COMPUTE,sampler:{}},Ui={binding:14,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},Ci={binding:15,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},Di={binding:16,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},zi={binding:17,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},Ri={binding:18,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}},Bi={binding:19,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},Gi="diffuse",Li=[xi,yi,_i,bi,wi,Ti,Si,ki,Pi,Ei,Ai,Oi,Ii,Ui,Ci,Di,zi,Ri,Bi],Ni=[1,2,1],Vi=async()=>{const e=Ua.createBindGroupLayout({entries:Li}),t=Ua.createBindGroupLayout({entries:[...Li,Mi]}),r=`\nstruct Time {\n  frame: u32,\n  deltaTime: f32,\n  elapsed: f32\n};\n\n@group(0) @binding(0) var depthTex : texture_2d<f32>;\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\n@group(0) @binding(2) var outputTex : texture_storage_2d<${ri}, write>;\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(4) var voxels : texture_3d<f32>;\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(6) var<storage> voxelObjects : array<VoxelObject>;\n@group(0) @binding(7) var<uniform> sunDirection : vec3<f32>;\n@group(0) @binding(8) var linearSampler : sampler;\n@group(0) @binding(9) var intermediaryTexture : texture_2d<f32>;\n@group(0) @binding(10) var normalTex : texture_2d<f32>;\n@group(0) @binding(11) var blueNoiseTex : texture_2d<f32>;\n@group(0) @binding(12) var<uniform> time : Time;\n@group(0) @binding(13) var nearestSampler : sampler;\n@group(0) @binding(14) var velocityAndWaterTex : texture_2d<f32>;\n@group(0) @binding(15) var<storage> bvhNodes: array<BVHNode>;\n@group(0) @binding(16) var worldPosTex : texture_2d<f32>;\n@group(0) @binding(17) var albedoTex : texture_2d<f32>;\n@group(0) @binding(18) var skyCube : texture_cube<f32>;\n@group(0) @binding(19) var previousTex : texture_2d<f32>;\n\nconst DOWNSCALE = 1;\n${vi}\n${gi}\n${mi}\n${di}\n${fi}\n${hi}\n${pi}\n\r\n\r\nfn diffuseRay(worldPos: vec3<f32>, shadowRayDirection: vec3<f32>, normal: vec3<f32>) -> bool {\r\n  let rayOrigin = worldPos + shadowRayDirection * 0.33; // To adccount for self occlusion of higher mip\r\n  return rayMarchBVHShadows(rayOrigin, shadowRayDirection, 1).hit;\r\n}\r\n\r\nfn shadowRay(worldPos: vec3<f32>, shadowRayDirection: vec3<f32>, normal: vec3<f32>) -> bool {\r\n  let rayOrigin = worldPos + normal * 0.33; // To adccount for self occlusion of higher mip\r\n  return rayMarchBVHShadows(rayOrigin, shadowRayDirection, 1).hit;\r\n}\r\n\r\n\r\nconst SUN_COLOR = vec3(0.6,0.5,0.4) * 100.0;\r\nconst MOON_COLOR = vec3<f32>(0.5, 0.5, 1.0);\r\nconst SUBPIXEL_SAMPLE_POSITIONS: array<vec2<f32>, 8> = array<vec2<f32>, 8>(\r\n  vec2<f32>(0.25, 0.25),\r\n  vec2<f32>(0.75, 0.25),\r\n  vec2<f32>(0.25, 0.75),\r\n  vec2<f32>(0.75, 0.75),\r\n  vec2<f32>(0.125, 0.125),\r\n  vec2<f32>(0.375, 0.125),\r\n  vec2<f32>(0.625, 0.125),\r\n  vec2<f32>(0.875, 0.125)\r\n);\r\nconst BLUE_NOISE_SIZE = 511;\r\nconst SUN_DIRECTION: vec3<f32> = vec3<f32>(1.0,-1.0,-1.0);\r\nconst SKY_COLOUR: vec3<f32> = vec3<f32>(0.6, 0.8, 0.9);\r\nconst SHADOW_ACNE_OFFSET: f32 = 0.005;\r\nconst SCATTER_AMOUNT: f32 = 0.05;\r\nconst POSITION_SCATTER_AMOUNT: f32 = 0.25;\r\n\r\nfn blinnPhong(normal: vec3<f32>, lightDirection: vec3<f32>, viewDirection: vec3<f32>, specularStrength: f32, shininess: f32, lightColour: vec3<f32>) -> vec3<f32> {\r\n  let halfDirection = normalize(lightDirection + viewDirection);\r\n  let diffuse = max(dot(normal, lightDirection), 0.0);\r\n  let specular = pow(max(dot(normal, halfDirection), 0.0), shininess);\r\n  return (diffuse + specular * specularStrength) * lightColour;\r\n}\r\n\r\nstruct Light {\r\n  direction: vec3<f32>,\r\n  colour: vec3<f32>,\r\n};\r\n\r\n// Function to remap the blue noise value to a sample index\r\nfn remapToSampleIndex(blueNoiseValue: f32, numSamples: u32) -> u32 {\r\n    // Map blue noise value to the index range [0, numSamples)\r\n    return u32(blueNoiseValue * f32(numSamples));\r\n}\r\n\r\nfn randomInCosineWeightedHemisphere(r: vec2<f32>, normal: vec3<f32>) -> vec3<f32> {\r\n  let r1 = 2.0 * PI * r.x;\r\n  let r2 = r.y;\r\n  let r2s = sqrt(r2);\r\n  let w = normal;\r\n  let u = normalize(cross((select(vec3<f32>(1.0, 0.0, 0.0), vec3<f32>(0.0, 1.0, 0.0),abs(w.x) > 0.1)), w));\r\n  let v = cross(w, u);\r\n  return normalize(u * cos(r1) * r2s + v * sin(r1) * r2s + w * sqrt(1.0 - r2));\r\n}\r\n\r\nconst SAMPLES_PER_PIXEL = 1u;\r\nconst SAMPLE_OFFSETS: array<vec2<i32>, 4> = array<vec2<i32>, 4>(\r\n  vec2<i32>(0, 0),\r\n  vec2<i32>(1, 1),\r\n  vec2<i32>(0, 1),\r\n  vec2<i32>(1, 0),\r\n);\r\n\r\n/** alternate frame checkerboard pattern\r\n  0,1\r\n  1,0\r\n\r\n  then\r\n  1,0\r\n  0,1\r\n*/\r\n@compute @workgroup_size(8, 8, 1)\r\nfn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let checkerboardIndex = i32(GlobalInvocationID.x % 2);\r\n  let frameIndex = i32(time.frame % 2);\r\n  let offset = vec2<i32>(checkerboardIndex);\r\n  var pixel = vec2<i32>(i32(GlobalInvocationID.x), i32(GlobalInvocationID.y) * 2);\r\n  pixel.y += checkerboardIndex;\r\n  pixel.x += frameIndex;\r\n  let outputPixel = pixel;\r\n  var normalSample = textureLoad(normalTex, pixel, 0).rgb;\r\n  var worldPos = textureLoad(worldPosTex, pixel, 0).rgb + normalSample * SHADOW_ACNE_OFFSET;\r\n  var samplePixel = outputPixel;\r\n  samplePixel.x += i32(time.frame) * 32;\r\n  samplePixel.y += i32(time.frame) * 16;\r\n  var blueNoisePixel = samplePixel % BLUE_NOISE_SIZE;\r\n  if(time.frame % 2 == 0){\r\n    blueNoisePixel.y = BLUE_NOISE_SIZE - blueNoisePixel.y;\r\n  }\r\n  if(time.frame % 3 == 0){\r\n    blueNoisePixel.x = BLUE_NOISE_SIZE - blueNoisePixel.x;\r\n  }\r\n  var r = textureLoad(blueNoiseTex, blueNoisePixel, 0).rg;\r\n  let sampleWorldPos = worldPos + randomInPlanarUnitDisk(r, normalSample) * POSITION_SCATTER_AMOUNT;\r\n  var diffuseDirection = randomInCosineWeightedHemisphere(r, normalSample);\r\n\r\n  var radiance = vec3(0.01);\r\n  let shadowRayDirection = sunDirection + randomInCosineWeightedHemisphere(r, sunDirection) * SCATTER_AMOUNT;\r\n  if(!shadowRay(sampleWorldPos, shadowRayDirection, normalSample)){\r\n    let viewDirection = normalize(cameraPosition - worldPos);\r\n    let diffuse = max(dot(normalSample, sunDirection), 0.0);\r\n    let specular = pow(max(dot(normalSample, normalize(sunDirection + viewDirection)), 0.0), 32.0);\r\n    let lightIntensity = SUN_COLOR * (diffuse + specular);\r\n    radiance += lightIntensity;\r\n  }\r\n  if(!diffuseRay(sampleWorldPos, diffuseDirection, normalSample)){\r\n      let sky = textureSampleLevel(skyCube, linearSampler, diffuseDirection, 0.0);\r\n      radiance += clamp(vec3(sky.rgb), vec3(0.0), vec3(32.0));\r\n  }\r\n\r\n  textureStore(outputTex, outputPixel, vec4(radiance, 1.0));\r\n}\r\n\r\nconst PI = 3.1415926535897932384626433832795;\r\n\r\nfn polarToCartesian(angle: f32, radius: f32) -> vec2<f32> {\r\n  let radians = angle * PI / 180.0;\r\n  let x = radius * cos(radians);\r\n  let y = radius * sin(radians);\r\n  return vec2<f32>(x, y);\r\n}\r\n\r\nconst TEMPORAL_DEPTH_THRESHOLD = 0.0001;\r\nconst DEPTH_SENSITIVITY = 100.0;\r\nconst BLUR_RADIUS = 2.0;\r\nconst GOLDEN_RATIO = 1.61803398875;\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn denoise(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let texSize = textureDimensions(outputTex);\r\n  let texelSize = 1.0 / vec2<f32>(texSize);\r\n  let pixel = vec2<i32>(GlobalInvocationID.xy);\r\n  let shadowSampleUV = (vec2<f32>(pixel)) / vec2<f32>(texSize);\r\n  let albedoSample = textureLoad(albedoTex, pixel, 0);\r\n  let normalRef = textureLoad(normalTex, pixel, 0).rgb;\r\n  let depthRef = textureLoad(depthTex, pixel, 0).r;\r\n  let shadowRef = textureLoad(intermediaryTexture, pixel, 0);\r\n\r\n  // Temporal sampling\r\n  let uv = (vec2<f32>(pixel) + vec2(0.5)) / vec2<f32>(texSize);\r\n  let uvVelocity: vec2<f32> = textureLoad(velocityAndWaterTex, pixel, 0).xy * vec2(0.5, -0.5);\r\n  let previousUv = uv - uvVelocity;\r\n  let previousPixel = vec2<i32>(previousUv * vec2<f32>(texSize));\r\n  var previousShadow = textureSampleLevel(previousTex, nearestSampler, previousUv, 0);\r\n\r\n  var previousWeight = clamp(1.0 - length(previousUv), 0.0,0.5);\r\n\r\n  // Sample depth from the Depth texture\r\n  let depthAtPreviousPixel: f32 = textureLoad(depthTex, previousPixel, 0).r;\r\n\r\n  // Calculate depth difference between source and history samples\r\n  let depthDifference: f32 = abs(depthRef - depthAtPreviousPixel);\r\n\r\n  // Apply depth clamping\r\n  if (depthDifference > TEMPORAL_DEPTH_THRESHOLD) {\r\n      previousWeight = 0.0;\r\n  }\r\n\r\n  // Clamp the history sample to the min and max of the 3x3 neighborhood\r\n  var minCol = shadowRef;\r\n  var maxCol = shadowRef;\r\n  for (var x: i32 = -1; x <= 1; x = x + 1) {\r\n      for (var y: i32 = -1; y <= 1; y = y + 1) {\r\n          let neighbourPixel = clamp(vec2(i32(pixel.x) + x, i32(pixel.y) + y), vec2(0), vec2(i32(texSize.x - 1), i32(texSize.y - 1)));\r\n          let s = textureLoad(intermediaryTexture, neighbourPixel, 0);\r\n          minCol = min(minCol, s);\r\n          maxCol = max(maxCol, s);\r\n      }\r\n  }\r\n  previousShadow = clamp(previousShadow, minCol, maxCol);\r\n\r\n  // Bilateral blur\r\n  var outputColour = vec4<f32>(0.0);\r\n  var totalWeight = 0.0;\r\n  for(var i = 0u; i < 9; i++){\r\n    let offset =  SUBPIXEL_SAMPLE_POSITIONS[i] * texelSize;\r\n    let sampleUV = shadowSampleUV + offset * BLUR_RADIUS;\r\n    let samplePixel = vec2<i32>(sampleUV * vec2<f32>(texSize));\r\n    let normalSample = textureSampleLevel(normalTex, nearestSampler, sampleUV, 0.0).rgb;\r\n    let depthSample = textureLoad(depthTex, samplePixel, 0).r;\r\n    let shadowSample = textureSampleLevel(intermediaryTexture, nearestSampler, sampleUV, 0.0);\r\n\r\n    let relativeDepthDifference = abs(depthSample - depthRef) / depthRef;\r\n    let depthWeight = clamp(1.0 - relativeDepthDifference * DEPTH_SENSITIVITY, 0,1);\r\n    let normalWeight = dot(normalSample, normalRef);\r\n\r\n    let weight =  depthWeight * normalWeight;\r\n    totalWeight += weight;\r\n    outputColour += shadowSample * weight;\r\n  }\r\n\r\n  outputColour /= totalWeight;\r\n\r\n\r\n  textureStore(outputTex, pixel, mix(outputColour, previousShadow, previousWeight));\r\n\r\n//  textureStore(outputTex, pixel,outputColour);\r\n}\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn composite(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let pixel = vec2<i32>(GlobalInvocationID.xy);\r\n  let shadowRef = textureLoad(intermediaryTexture, pixel, 0);\r\n  let albedoRef = textureLoad(albedoTex, pixel, 0);\r\n  textureStore(outputTex, pixel,shadowRef * albedoRef);\r\n}\r\n`,n=Ua.createComputePipeline({label:Gi,layout:Ua.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:Ua.createShaderModule({code:r}),entryPoint:"main"}}),i=Ua.createComputePipeline({label:`${Gi} - composite`,layout:Ua.createPipelineLayout({bindGroupLayouts:[t]}),compute:{module:Ua.createShaderModule({code:r}),entryPoint:"composite"}}),a=Ua.createComputePipeline({label:`${Gi} - denoise`,layout:Ua.createPipelineLayout({bindGroupLayouts:[t]}),compute:{module:Ua.createShaderModule({code:r}),entryPoint:"denoise"}});let o,s,u,c,l,d,f,h,p=Ua.createSampler({magFilter:"nearest",minFilter:"nearest"}),m=Ua.createSampler({magFilter:"linear",minFilter:"linear"});return{render:({outputTextures:r,timestampWrites:g,viewProjectionMatricesBuffer:v,volumeAtlas:x,cameraPositionBuffer:y,transformationMatrixBuffer:_,sunDirectionBuffer:b,blueNoiseTexture:w,timeBuffer:T,bvhBuffer:S,commandEncoder:k})=>{if(o||(o=Ua.createTexture({size:[r.finalTexture.width,r.finalTexture.height,1],format:r.finalTexture.format,usage:r.finalTexture.usage}),s=o.createView()),!u){const e={size:[r.finalTexture.width,r.finalTexture.height,1],format:r.finalTexture.format,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST};u=Ua.createTexture(e),l=Ua.createTexture(e),f=Ua.createTexture(e),d=l.createView(),c=u.createView(),h=f.createView()}k.copyTextureToTexture({texture:r.finalTexture.texture},{texture:o},{width:r.finalTexture.width,height:r.finalTexture.height,depthOrArrayLayers:1});const P=[{binding:0,resource:r.depthTexture.view},{binding:1,resource:s},{binding:3,resource:{buffer:v}},{binding:4,resource:x.atlasTextureView},{binding:5,resource:{buffer:y}},{binding:6,resource:{buffer:_}},{binding:7,resource:{buffer:b}},{binding:8,resource:m},{binding:10,resource:r.normalTexture.view},{binding:11,resource:w.createView()},{binding:12,resource:{buffer:T}},{binding:13,resource:p},{binding:14,resource:r.velocityTexture.view},{binding:15,resource:{buffer:S}},{binding:16,resource:r.worldPositionTexture.view},{binding:17,resource:r.albedoTexture.view},{binding:18,resource:r.skyTexture.createView({dimension:"cube"})},{binding:19,resource:h}],M={layout:e,entries:[...P,{binding:2,resource:c}]},E={layout:t,entries:[...P,{binding:2,resource:d},{binding:9,resource:c}]},A={layout:t,entries:[...P,{binding:2,resource:r.finalTexture.view},{binding:9,resource:d}]},O=Ua.createBindGroup(M),I=Ua.createBindGroup(A),U=Ua.createBindGroup(E),C=k.beginComputePass({timestampWrites:g});return C.setPipeline(n),C.setBindGroup(0,O),C.dispatchWorkgroups(Math.ceil(u.width/8/Ni[0]),Math.ceil(u.height/8/Ni[1])),C.setPipeline(a),C.setBindGroup(0,U),C.dispatchWorkgroups(Math.ceil(u.width/8),Math.ceil(u.height/8)),C.setPipeline(i),C.setBindGroup(0,I),C.dispatchWorkgroups(Math.ceil(r.finalTexture.width/8),Math.ceil(r.finalTexture.height/8)),C.end(),k.copyTextureToTexture({texture:l},{texture:f},{width:u.width,height:u.height,depthOrArrayLayers:1}),[k.finish()]},label:Gi}},ji="const PI\t \t= 3.141592;\r\nconst EPSILON_NRM = 0.0001; // TODO: use resolution to normalize\r\n\r\nstruct Time {\r\n  frame: u32,\r\n  deltaTime: f32,\r\n  elapsed: f32\r\n};\r\n\r\n// Cloud parameters\r\nconst EARTH_RADIUS = 6300e3;\r\nconst CLOUD_START = 600.0;\r\nconst CLOUD_HEIGHT = 600.0;\r\nconst SUN_POWER = vec3(0.6,0.5,0.4) * 200.0;\r\nconst LOW_SCATTER = vec3(0.6,0.4,0.3)  * 20.0;\r\nconst MAX_DISTANCE = 10000.0;\r\n\r\n@group(0) @binding(0) var depth : texture_2d<f32>;\r\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\r\n@group(0) @binding(2) var outputTex : texture_storage_2d<rgba16float, write>;\r\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\r\n@group(0) @binding(4) var<uniform> sunDirection : vec3<f32>;\r\n@group(0) @binding(5) var<uniform> time : Time;\r\n@group(0) @binding(6) var blueNoiseTex : texture_2d<f32>;\r\n@group(0) @binding(7) var pebbleTex : texture_2d<f32>;\r\n@group(0) @binding(8) var linearSampler : sampler;\r\n@group(0) @binding(9) var<uniform> cameraPosition : vec3<f32>;\r\n@group(0) @binding(10) var worldPosTex : texture_2d<f32>;\r\n@group(1) @binding(1) var skyCube : texture_cube<f32>;\r\n@group(1) @binding(2) var skyCubeWrite : texture_storage_2d_array<rgba16float, write>;\r\n@group(1) @binding(3) var lastSkyCube : texture_2d_array<f32>;\r\n\r\n\r\n\r\n// Noise generation functions (by iq)\r\nfn hash( n: f32 ) -> f32\r\n{\r\n    return fract(sin(n)*43758.5453);\r\n}\r\n\r\nfn hash2( p: vec2<f32> ) -> f32 {\r\n    return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123);\r\n}\r\n\r\nfn sampleBlueNoise( uv: vec2<f32> ) -> vec2<f32>\r\n{\r\n    return textureSampleLevel(blueNoiseTex, linearSampler, uv, 0.0).rg;\r\n}\r\n\r\nfn samplePebbles( uv: vec2<f32> ) -> f32\r\n{\r\n  return textureSampleLevel(pebbleTex, linearSampler, uv, 0.0).r;\r\n}\r\n\r\nfn noise3( x:vec3<f32> ) -> f32\r\n{\r\n  var p = floor(x);\r\n  var f = fract(x);\r\n  f = f*f*(3.0 - 2.0 *f);\r\n\tlet uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\r\n\tlet rg = sampleBlueNoise((uv+0.5)/256.0).yx;\r\n\treturn mix( rg.x, rg.y, f.z );\r\n}\r\n\r\nfn noise2( p:vec2<f32> ) -> f32\r\n{\r\n  let i = floor( p );\r\n  var f = fract( p );\r\n\tf = f*f*(3.0 - 2.0*f);\r\n  return -1.0+2.0*mix( mix( hash2( i + vec2(0.0,0.0) ),\r\n                     hash2( i + vec2(1.0,0.0) ), f.x),\r\n                mix( hash2( i + vec2(0.0,1.0) ),\r\n                     hash2( i + vec2(1.0,1.0) ), f.x), f.y);\r\n}\r\n\r\nfn fbm( p: vec3<f32> ) -> f32\r\n{\r\n    var pCopy = p;\r\n    let m = mat3x3<f32>( 0.00,  0.80,  0.60,\r\n              -0.80,  0.36, -0.48,\r\n              -0.60, -0.48,  0.64 );\r\n    var f = 0.5000*noise3( pCopy );\r\n    pCopy = m*pCopy*2.02;\r\n    f += 0.2500*noise3( pCopy );\r\n    pCopy = m*pCopy*2.03;\r\n    f += 0.1250*noise3( pCopy );\r\n    return f;\r\n}\r\n\r\nfn intersectSphere(origin: vec3<f32>, dir: vec3<f32>, spherePos: vec3<f32>, sphereRad: f32) -> f32\r\n{\r\n\tlet oc = origin - spherePos;\r\n\tlet b = 2.0 * dot(dir, oc);\r\n\tlet c = dot(oc, oc) - sphereRad*sphereRad;\r\n\tlet disc = b * b - 4.0 * c;\r\n\tif (disc < 0.0)\r\n\t{\r\n\t  return -1.0;\r\n\t}\r\n\r\n//    float q = (-b + ((b < 0.0) ? -sqrt(disc) : sqrt(disc))) / 2.0;\r\n  let q = (-b + select(sqrt(disc), -sqrt(disc), b < 0.0)) / 2.0;\r\n\tvar t0 = q;\r\n\tvar t1 = c / q;\r\n\tif (t0 > t1) {\r\n\t\tvar temp = t0;\r\n\t\tt0 = t1;\r\n\t\tt1 = temp;\r\n\t}\r\n\tif (t1 < 0.0){\r\n\t  return -1.0;\r\n\t}\r\n\r\n  return select(t0, t1, t0 < 0.0);\r\n}\r\n\r\n// TODO: pass time buffer\r\n\r\n// return the density of clouds at a given point, and height\r\nfn clouds(p: vec3<f32>, t: f32) -> vec2<f32>\r\n{\r\n    var pCopy = p;\r\n    let atmoHeight = length(p - vec3(0.0, -EARTH_RADIUS, 0.0)) - EARTH_RADIUS;\r\n    let cloudHeight = clamp((atmoHeight-CLOUD_START)/(CLOUD_HEIGHT), 0.0, 1.0);\r\n    pCopy.z += t*40;\r\n    let largeWeather = clamp((samplePebbles(-0.00005*pCopy.zx) - 0.18)*5.0, 0.0, 2.0);\r\n    //let largeWeather = 1.0;\r\n    pCopy.x += t*32;\r\n    var weather = largeWeather*max(0.0,samplePebbles(0.0002*pCopy.zx) - 0.28)/0.72;\r\n    weather *= smoothstep(0.0, 0.5, cloudHeight) * smoothstep(1.0, 0.5, cloudHeight);\r\n    let cloudShape = pow(weather, 0.3+1.5*smoothstep(0.2, 0.5, cloudHeight));\r\n    if(cloudShape <= 0.0){\r\n        return vec2(0.0, cloudHeight);\r\n    }\r\n    pCopy.x += t*48;\r\n\t  var den= max(0.0, cloudShape - 0.7*fbm(p*.01));\r\n    if(den <= 0.0){\r\n        return vec2(0.0, cloudHeight);\r\n    }\r\n    pCopy.y += t*60;\r\n    den= max(0.0, den - 0.2*fbm(p*0.05));\r\n    return vec2(largeWeather*0.2*min(1.0, 5.0*den), cloudHeight);\r\n}\r\n\r\n// From https://www.shadertoy.com/view/4sjBDG\r\nfn numericalMieFit( costh: f32) -> f32\r\n{\r\n    // This function was optimized to minimize (delta*delta)/reference in order to capture\r\n    // the low intensity behavior.\r\n    var bestParams = array<f32, 10>();\r\n    bestParams[0]=9.805233e-06;\r\n    bestParams[1]=-6.500000e+01;\r\n    bestParams[2]=-5.500000e+01;\r\n    bestParams[3]=8.194068e-01;\r\n    bestParams[4]=1.388198e-01;\r\n    bestParams[5]=-8.370334e+01;\r\n    bestParams[6]=7.810083e+00;\r\n    bestParams[7]=2.054747e-03;\r\n    bestParams[8]=2.600563e-02;\r\n    bestParams[9]=-4.552125e-12;\r\n\r\n    var p1 = costh + bestParams[3];\r\n    let expValues = exp(vec4(bestParams[1] *costh+bestParams[2], bestParams[5] *p1*p1, bestParams[6] *costh, bestParams[9] *costh));\r\n    let expValWeight= vec4(bestParams[0], bestParams[4], bestParams[7], bestParams[8]);\r\n    return dot(expValues, expValWeight);\r\n}\r\n\r\nfn lightRay(p: vec3<f32>, phaseFunction: f32, dC: f32, mu: f32, sun_direction: vec3<f32>, cloudHeight: f32, t: f32) -> f32\r\n{\r\n    let nbSampleLight = 6;\r\n\t  let zMaxl         = 200.;\r\n    let stepL         = zMaxl/f32(nbSampleLight);\r\n    var pCopy = p;\r\n    var cloudHeightCopy = 0.0;\r\n\r\n    var lighRayDen = 0.0;\r\n    pCopy += sun_direction*stepL*hash(dot(pCopy, vec3(12.256, 2.646, 6.356)) + t * 4);\r\n    for(var j=0; j<nbSampleLight; j++)\r\n    {\r\n        let cloudsResult = clouds( pCopy + sun_direction*f32(j)*stepL, time.elapsed);\r\n        lighRayDen += cloudsResult.x;\r\n        cloudHeightCopy = cloudsResult.y;\r\n    }\r\n    let scatterAmount = mix(0.008, 1.0, smoothstep(0.96, 0.0, mu));\r\n    let beersLaw = exp(-stepL*lighRayDen)+0.5*scatterAmount*exp(-0.1*stepL*lighRayDen)+scatterAmount*0.4*exp(-0.02*stepL*lighRayDen);\r\n    return beersLaw * phaseFunction * mix(0.05 + 1.5*pow(min(1.0, dC*8.5), 0.3+5.5*cloudHeightCopy), 1.0, clamp(lighRayDen*0.4, 0.0, 1.0));\r\n}\r\n\r\n\r\nfn Schlick (f0: f32, VoH: f32 ) -> f32\r\n{\r\n\treturn f0+(1.-f0)*pow(1.0-VoH,5.0);\r\n}\r\n\r\nfn skyRay(org: vec3<f32>, dir: vec3<f32>,sun_direction: vec3<f32>) -> vec3<f32>\r\n{\r\n\r\n  let ATM_START = EARTH_RADIUS+CLOUD_START;\r\n\tlet ATM_END = ATM_START+CLOUD_HEIGHT;\r\n\r\n  let nbSample = 8;\r\n  var color = vec3(0.0);\r\n  let distToAtmStart = intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_START);\r\n  let distToAtmEnd = intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_END);\r\n  var p = org + distToAtmStart * dir;\r\n\r\n  let stepS = (distToAtmEnd-distToAtmStart) / f32(nbSample);\r\n  var T = 1.;\r\n  let mu = dot(sun_direction, dir);\r\n  let phaseFunction = numericalMieFit(mu);\r\n  p += dir*stepS*hash(dot(dir, vec3(12.256, 2.646, 6.356)) + time.elapsed * 4);\r\n  if(dir.y > 0.01){\r\n    for(var i=0; i<nbSample; i++)\r\n    {\r\n      if(distance(p, org) > MAX_DISTANCE){\r\n        break;\r\n      }\r\n      let cloudResult = clouds(p, time.elapsed);\r\n      let cloudHeight = cloudResult.y;\r\n      let density = cloudResult.x;\r\n      if(density>0.)\r\n      {\r\n        let intensity = lightRay(p, phaseFunction, density, mu, sun_direction, cloudHeight, time.elapsed);\r\n        let ambient = (0.5 + 0.6*cloudHeight)*vec3(0.2, 0.5, 1.0)*6.5 + vec3(0.8) * max(0.0, 1.0 - 2.0*cloudHeight);\r\n        var radiance = ambient + SUN_POWER*intensity;\r\n        radiance*=density;\r\n        color += T*(radiance - radiance * exp(-density * stepS)) / density;   // By Seb Hillaire\r\n        T *= exp(-density*stepS);\r\n        if( T <= 0.05){\r\n          break;\r\n        }\r\n      }\r\n      p += dir*stepS;\r\n    }\r\n  }\r\n\r\n  let pC = org + intersectSphere(org, dir, vec3(0.0, -EARTH_RADIUS, 0.0), ATM_END+1000.0)*dir;\r\n  // high clouds\r\n  color += T*vec3(3.0)*max(0.0, fbm(vec3(1.0, 1.0, 1.8)*pC*0.002) - 0.4);\r\n\r\n\tvar background = 6.0*mix(vec3(0.2, 0.52, 1.0), vec3(0.8, 0.95, 1.0), pow(0.5+0.5*mu, 15.0))+mix(vec3(3.5), vec3(0.0), min(1.0, 2.3*dir.y));\r\n  background += T*vec3(1e4*smoothstep(0.9998, 1.0, mu));\r\n  color += background * T;\r\n\r\n  return color;\r\n}\r\n\r\nfn D_GGX(r: f32,  NoH: f32, h: vec3<f32>) -> f32\r\n{\r\n    let a = NoH * r;\r\n    let k = r / ((1.0 - NoH * NoH) + a * a);\r\n    return k * k * (1.0 / PI);\r\n}\r\n\r\nfn HenyeyGreenstein(mu: f32, inG: f32) -> f32\r\n{\r\n\treturn (1.-inG * inG)/(pow(1.+inG*inG - 2.0 * inG*mu, 1.5)*4.0* PI);\r\n}\r\n\r\nfn tonemapACES( x: vec3<f32> ) -> vec3<f32>\r\n{\r\n    let a = 2.51;\r\n    let b = 0.03;\r\n    let c = 2.43;\r\n    let d = 0.59;\r\n    let e = 0.14;\r\n    return (x*(a*x+b))/(x*(c*x+d)+e);\r\n}\r\n\r\n\r\nfn sample_sky(rayDirection: vec3<f32>, rayOrigin: vec3<f32>) -> vec3<f32> {\r\n    return skyRay(rayOrigin, rayDirection,sunDirection);\r\n}\r\n\r\nstruct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  previousInverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\r\n\r\n// Function to mimic the ease_out_expo function\r\nfn ease_out_expo(x: f32) -> f32 {\r\n    let t: f32 = x;\r\n    let b: f32 = 0.0;\r\n    let c: f32 = 1.0;\r\n    let d: f32 = 1.0; // Set the duration within the function\r\n    let intermediate_result: f32 = c * (-pow(2.0, -10.0 * t / d) + 1.0) + b;\r\n    return select(intermediate_result, b + c, t == d);\r\n}\r\n\r\nconst SKY_COLOUR: vec3<f32> = vec3<f32>(0.6, 0.8, 0.9);\r\nconst START_DISTANCE: f32 = 0.0;\r\nconst FOG_DENSITY: f32 = 0.01;\r\nconst NEAR: f32 = 0.5;\r\nconst FAR: f32 = 10000.0;\r\n\r\nfn rotateY(v: vec3<f32>, angle: f32) -> vec3<f32> {\r\n    let s = sin(angle);\r\n    let c = cos(angle);\r\n    return vec3<f32>(\r\n        v.x * c - v.z * s,\r\n        v.y,\r\n        v.x * s + v.z * c\r\n    );\r\n}\r\n\r\nfn rotateX(v: vec3<f32>, angle: f32) -> vec3<f32> {\r\n    let s = sin(angle);\r\n    let c = cos(angle);\r\n    return vec3<f32>(\r\n        v.x,\r\n        v.y * c - v.z * s,\r\n        v.y * s + v.z * c\r\n    );\r\n}\r\n\r\n// Rotate ray around the y axis, incrementally increasing the x rotation to form a spiral patttern\r\nfn spiralBlurCubeSample(rayDirection: vec3<f32>) -> vec4<f32>\r\n{\r\n  var weights = 0.0;\r\n  var output = vec4(0.0);\r\n  for(var i = 0; i < 6; i++){\r\n    var r = rayDirection.xy + vec2(f32(i) * 0.0001);\r\n    var sampleRayDirection = mix(rayDirection,randomInHemisphere(r, rayDirection),0.003);\r\n    output += textureSampleLevel(skyCube, linearSampler, sampleRayDirection, 0.0);\r\n    weights += 1.0;\r\n  }\r\n  return output / weights;\r\n}\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n    let resolution = textureDimensions(depth);\r\n    let pixel = GlobalInvocationID.xy;\r\n    var uv = vec2<f32>(pixel) / vec2<f32>(resolution);\r\n    let rayDirection = calculateRayDirection(uv,viewProjections.inverseViewProjection);\r\n    let rayOrigin = cameraPosition;\r\n//    let sky = textureSampleLevel(skyCube, linearSampler, rayDirection, 0.0).rgb;\r\n    let sky = spiralBlurCubeSample(rayDirection).rgb;\r\n\r\n    var color = sky;\r\n    let depthSample = textureLoad(depth, pixel, 0).r;\r\n    let distanceToCamera = depthSample * (FAR - NEAR) + NEAR;\r\n\r\n    if(distanceToCamera > 9999.0){\r\n      let output = vec4(color, 1);\r\n      textureStore(outputTex, pixel, output);\r\n      return;\r\n    }\r\n\r\n}\r\n\r\nfn getDebugColor(index: u32) -> vec4<f32> {\r\n  let colors = array<vec4<f32>, 8>(\r\n    vec4<f32>(1.0, 0.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(0.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 0.0, 1.0),\r\n    vec4<f32>(1.0, 0.0, 1.0, 1.0),\r\n    vec4<f32>(0.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(1.0, 1.0, 1.0, 1.0),\r\n    vec4<f32>(0.5, 0.5, 0.5, 1.0)\r\n  );\r\n  return colors[index % 8];\r\n}\r\n\r\nfn getCubeRayDirection(uv: vec2<f32>, faceIndex: u32) -> vec3<f32>\r\n{\r\n  let uMapped = uv.x * 2.0 - 1.0;\r\n  let vMapped = uv.y * 2.0 - 1.0;\r\n\r\n  switch(faceIndex)\r\n  {\r\n    case 0{return vec3<f32>(1.0, -vMapped, -uMapped);}\r\n    case 1{return vec3<f32>(-1.0, -vMapped, uMapped);}\r\n    case 2{return vec3<f32>(uMapped, 1.0, vMapped);}\r\n    case 3{return vec3<f32>(uMapped, -1.0, -vMapped);}\r\n    case 4{return vec3<f32>(uMapped, -vMapped, 1.0);}\r\n    case 5{return vec3<f32>(-uMapped, -vMapped, -1.0);}\r\n    default{return vec3<f32>(0.0);}\r\n  }\r\n}\r\n\r\nfn getFramePixelOffset() -> vec2<u32>\r\n{\r\n  let frameIndex = time.frame % 4;\r\n  let x = frameIndex % 2;\r\n  let y = frameIndex / 2;\r\n  return vec2<u32>(x, y);\r\n}\r\n\r\nconst offsets = array<vec2<i32>,8>(\r\n  vec2(-1,-1), vec2(-1, 1),\r\n\tvec2(1, -1), vec2(1, 1),\r\n\tvec2(1, 0), vec2(0, -1),\r\n\tvec2(0, 1), vec2(-1, 0)\r\n);\r\n\r\nfn RGBToYCoCg( RGB: vec3<f32> ) -> vec3<f32>\r\n{\r\n\tlet Y = dot(RGB, vec3(  1, 2,  1 )) * 0.25;\r\n\tlet Co= dot(RGB, vec3(  2, 0, -2 )) * 0.25 + ( 0.5 * 256.0/255.0 );\r\n\tlet Cg= dot(RGB, vec3( -1, 2, -1 )) * 0.25 + ( 0.5 * 256.0/255.0 );\r\n\treturn vec3(Y, Co, Cg);\r\n}\r\n\r\nfn YCoCgToRGB( YCoCg: vec3<f32> ) -> vec3<f32>\r\n{\r\n\tlet Y= YCoCg.x;\r\n\tlet Co= YCoCg.y - ( 0.5 * 256.0 / 255.0 );\r\n\tlet Cg= YCoCg.z - ( 0.5 * 256.0 / 255.0 );\r\n\tlet R= Y + Co-Cg;\r\n\tlet G= Y + Cg;\r\n\tlet B= Y - Co-Cg;\r\n\treturn vec3(R,G,B);\r\n}\r\n\r\nconst gaussianWeights = array<f32, 25>(\r\n  0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\r\n  0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\r\n  0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\r\n  0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\r\n  0.003765, 0.015019, 0.023792, 0.015019, 0.003765\r\n);\r\n\r\n\r\nconst gaussianOffsets = array<vec2<i32>, 25>(\r\n  vec2(-2, -2), vec2(-1, -2), vec2(0, -2), vec2(1, -2), vec2(2, -2),\r\n  vec2(-2, -1), vec2(-1, -1), vec2(0, -1), vec2(1, -1), vec2(2, -1),\r\n  vec2(-2, 0), vec2(-1, 0), vec2(0, 0), vec2(1, 0), vec2(2, 0),\r\n  vec2(-2, 1), vec2(-1, 1), vec2(0, 1), vec2(1, 1), vec2(2, 1),\r\n  vec2(-2, 2), vec2(-1, 2), vec2(0, 2), vec2(1, 2), vec2(2, 2)\r\n);\r\n\r\nfn gaussianBlurHistorySample( pixel: vec2<u32>, cubeFaceIndex: u32 ) -> vec3<f32>\r\n{\r\n  let textureSize = textureDimensions(lastSkyCube).xy;\r\n  var color = vec3<f32>(0.0);\r\n  var weights = 0.0;\r\n  for(var i = 0; i < 25; i++)\r\n  {\r\n    let samplePixel = vec2<i32>(pixel) + gaussianOffsets[i];\r\n    if(any(samplePixel < vec2(0)) || any(samplePixel >= vec2<i32>(textureSize))){\r\n      continue;\r\n    }\r\n    color += RGBToYCoCg(textureLoad(lastSkyCube, samplePixel, cubeFaceIndex, 0).rgb) * gaussianWeights[i];\r\n    weights += gaussianWeights[i];\r\n  }\r\n\r\n  return color / weights;\r\n}\r\n\r\nfn polarToCartesian(angle: f32, radius: f32) -> vec2<f32> {\r\n  let radians = angle * PI / 180.0;\r\n  let x = radius * cos(radians);\r\n  let y = radius * sin(radians);\r\n  return vec2<f32>(x, y);\r\n}\r\n\r\nfn spiralBlurHistorySample( pixel: vec2<u32>, cubeFaceIndex: u32 ) -> vec3<f32>\r\n{\r\n  var weights = 0.0;\r\n  var output = vec3<f32>(0.0);\r\n   let textureSize = textureDimensions(lastSkyCube).xy;\r\n  for(var i = 0; i <= 6; i++){\r\n      let angle = (i % 6) * 60; // 0, 90, 180, 270\r\n      let radius = (i + 1) / 2;\r\n      let samplePixel = vec2<i32>(pixel) + vec2<i32>(polarToCartesian(f32(angle), f32(radius)));\r\n      if(any(samplePixel < vec2(0)) || any(samplePixel >= vec2<i32>(textureSize))){\r\n        continue;\r\n      }\r\n      output += RGBToYCoCg(textureLoad(lastSkyCube, samplePixel, cubeFaceIndex, 0).rgb);\r\n      weights += 1.0;\r\n    }\r\n\r\n    return output / weights;\r\n}\r\n\r\nconst HISTORY_BLEND = 0.8;\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn writeToCube(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let cubeFaceIndex = GlobalInvocationID.z;\r\n  var pixel = GlobalInvocationID.xy;\r\n  pixel *= 2;\r\n  pixel += getFramePixelOffset();\r\n  var rayDirection = getCubeRayDirection(vec2<f32>(pixel) / vec2<f32>(textureDimensions(skyCubeWrite).xy), cubeFaceIndex);\r\n  rayDirection = normalize(rayDirection);\r\n  let sky = sample_sky(rayDirection, cameraPosition);\r\n  let mu = dot(sunDirection, rayDirection);\r\n  let fogDistance = intersectSphere(cameraPosition, rayDirection, vec3(0.0, -EARTH_RADIUS, 0.0), EARTH_RADIUS+160.0);\r\n  let fogPhase = 0.5*HenyeyGreenstein(mu, 0.7)+0.5*HenyeyGreenstein(mu, -0.6);\r\n  var colour = sky;\r\n  colour = mix(fogPhase*0.1*LOW_SCATTER*SUN_POWER+10.0*vec3(0.55, 0.8, 1.0), colour, exp(-0.0003*fogDistance));\r\n  let newSample = colour;\r\n  var history = textureLoad(lastSkyCube, pixel, cubeFaceIndex, 0).rgb;\r\n  colour = mix(newSample, history, HISTORY_BLEND);\r\n  textureStore(skyCubeWrite, pixel, cubeFaceIndex, vec4(colour,1));\r\n}",Fi=Symbol(),qi=e=>new Proxy(e,{construct:(e,t,r)=>e.prototype!==r.prototype?Reflect.construct(e,t,r):(e[Fi]||(e[Fi]=Reflect.construct(e,t,r)),e[Fi])});const Wi=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,Hi=(e,t,r=Wi)=>{let n=class{#l;#d;#f;#h;#p=t;#m=r;constructor(n,i,a){this.#l=n.createTexture({label:e,size:[i,a,1],format:t,usage:r}),this.#d=this.#l.createView({label:e}),this.#f=i,this.#h=a}get texture(){return this.#l}get view(){return this.#d}get width(){return this.#f}get height(){return this.#h}get format(){return this.#p}get usage(){return this.#m}};return n=function(e,t,r,n){var i,a=arguments.length,o=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,r,n);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(o=(a<3?i(o):a>3?i(t,r,o):i(t,r))||o);return a>3&&o&&Object.defineProperty(t,r,o),o}([qi],n),n},Yi=Hi("albedo","rgba8unorm"),$i=Hi("normal","rgba16float"),Xi=Hi("depth","depth32float",GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC),Zi=Hi("velocity","rgba16float"),Qi=Hi("world position","rgba32float"),Ki=Hi("output",ri),Ji=async()=>{const e={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},t={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},r={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:ri}},n={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},i={binding:4,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},a={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},o={binding:6,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},s={binding:7,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},u={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},c={binding:9,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},l={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}},d={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:ni,viewDimension:"2d-array"}},f={binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"2d-array"}},h={binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},p=Ua.createBindGroupLayout({entries:[e,t,r,n,i,a,o,s,u,c,h]}),m=Ua.createBindGroupLayout({entries:[l]}),g=Ua.createBindGroupLayout({entries:[d,f]}),v=Ua.createComputePipeline({layout:Ua.createPipelineLayout({bindGroupLayouts:[p,m]}),compute:{module:Ua.createShaderModule({code:`${gi}${mi}${ji}`}),entryPoint:"main"}}),x=Ua.createComputePipeline({layout:Ua.createPipelineLayout({bindGroupLayouts:[p,g]}),compute:{module:Ua.createShaderModule({code:`${gi}${mi}${ji}`}),entryPoint:"writeToCube"}});let y;const _=Ua.createSampler({minFilter:"linear",magFilter:"linear",addressModeU:"repeat",addressModeV:"repeat"}),b=await ei(Ua,"pebbles.png",{usage:GPUTextureUsage.COPY_SRC}),w=await ei(Ua,"rgba-noise.png",{usage:GPUTextureUsage.COPY_SRC}),T=Ua.createTexture({size:[512,512,6],format:ni,usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING});return{render:({outputTextures:e,timestampWrites:t,viewProjectionMatricesBuffer:r,sunDirectionBuffer:n,timeBuffer:i,cameraPositionBuffer:a})=>{y||(y=Ua.createTexture({size:[e.finalTexture.width,e.finalTexture.height,1],format:ri,usage:Wi}));const o=Ua.createCommandEncoder();o.copyTextureToTexture({texture:e.finalTexture.texture},{texture:y},{width:e.finalTexture.width,height:e.finalTexture.height,depthOrArrayLayers:1});const s=Ua.createBindGroup({layout:p,entries:[{binding:0,resource:e.depthTexture.view},{binding:1,resource:y.createView()},{binding:2,resource:e.finalTexture.view},{binding:3,resource:{buffer:r}},{binding:4,resource:{buffer:n}},{binding:5,resource:{buffer:i}},{binding:6,resource:w.createView()},{binding:7,resource:b.createView()},{binding:8,resource:_},{binding:9,resource:{buffer:a}},{binding:10,resource:e.worldPositionTexture.view}]}),u=o.beginComputePass({timestampWrites:t});u.setPipeline(x),u.setBindGroup(0,s),u.setBindGroup(1,Ua.createBindGroup({layout:g,entries:[{binding:2,resource:e.skyTexture.createView({dimension:"2d-array"})},{binding:3,resource:T.createView({dimension:"2d-array"})}]})),u.dispatchWorkgroups(e.skyTexture.width/16,e.skyTexture.height/16,6),u.setPipeline(v),u.setBindGroup(0,s),u.setBindGroup(1,Ua.createBindGroup({layout:m,entries:[{binding:1,resource:e.skyTexture.createView({dimension:"cube"})}]}));const c=e.depthTexture.width,l=e.depthTexture.height,d=Math.ceil(c/8),f=Math.ceil(l/8);return u.dispatchWorkgroups(d,f),u.end(),o.copyTextureToTexture({texture:e.skyTexture},{texture:T},{width:e.skyTexture.width,height:e.skyTexture.height,depthOrArrayLayers:e.skyTexture.depthOrArrayLayers}),[o.finish()]},label:"sky"}};class ea extends ur{#g;#v;#x;#y;#_;constructor({position:e,rotation:t,scale:r,size:n,atlasLocation:i,name:a="unnamed",paletteIndex:o}){super({position:e,rotation:t,scale:r}),this.#g=Symbol(),this.#v=a,this.#x=n,this.#y=i,this.#_=o}get objectSpaceCorners(){return[ne.create(0,0,0),ne.create(0,0,this.#x[2]),ne.create(0,this.#x[1],0),ne.create(0,this.#x[1],this.#x[2]),ne.create(this.#x[0],0,0),ne.create(this.#x[0],0,this.#x[2]),ne.create(this.#x[0],this.#x[1],0),ne.create(this.#x[0],this.#x[1],this.#x[2])]}get worldSpaceCorners(){return this.objectSpaceCorners.map((e=>ne.transformMat4(e,this.transform)))}get AABB(){return(e=>{let t=ne.create(1/0,1/0,1/0),r=ne.create(-1/0,-1/0,-1/0);for(const n of e)t=ne.min(t,n),r=ne.max(r,n);return{min:t,max:r}})(this.worldSpaceCorners)}get size(){return this.#x}toArray(){return[...this.transform,...this.inverseTransform,...this.previousTransform,...this.previousInverseTransform,...this.#x,0,...this.#y,this.#_]}}class ta{index;dataView;constructor(e){this.dataView=new DataView(e),this.index=0}readUint8(){const e=this.dataView.getUint8(this.index);return this.index++,e}readUint32(){const e=this.dataView.getUint32(this.index,!0);return this.index+=4,e}readFloat32(){const e=this.dataView.getFloat32(this.index,!0);return this.index+=4,e}skip(e){this.index+=e}}const ra=e=>0===e;let na=[];const ia=["street-scene","debug-plane","Dragon","monu10","teapot"],aa=e=>{let t=ne.create(1/0,1/0,1/0),r=ne.create(-1/0,-1/0,-1/0);for(const{AABB:n}of e)t=ne.min(n.min,t),r=ne.max(n.max,r);return{min:t,max:r}},oa=e=>{const t=aa(e),r=(t.max[0]-t.min[0])*(t.max[1]-t.min[1])*(t.max[2]-t.min[2]);return e.length*r},sa=(44,16,16*Math.ceil(2.75));class ua{#s;#b;#w;#T;#S;constructor(e,t){this.#s=e,this.#w=t.map(((e,t)=>({AABB:e.AABB,objectIndex:t}))),this.#T=0,this.#b=new Array(2*t.length-1),this.#k(this.#w,0),this.#S=e.createBuffer({size:this.#b.length*sa,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1,label:"bvh buffer"}),this.#P()}get gpuBuffer(){return this.#S}update(e){this.#w=e.map(((e,t)=>({AABB:e.AABB,objectIndex:t}))),this.#T=0,this.#k(this.#w,0),this.#P()}#k(e,t){if(0===this.#w.length)return;if(1===e.length)return void(this.#b[t]={leftChildIndex:this.#w.indexOf(e[0]),rightChildIndex:-1,objectCount:1,AABBMax:e[0].AABB.max,AABBMin:e[0].AABB.min});const r=aa(e);let n=-1,i=-1;const{left:a,right:o}=(e=>{let t=1/0,r=-1;const n=Math.floor(e.length/2);for(let i=1;i<e.length;i++){const a=e.slice(0,i),o=e.slice(i),s=oa(a)+oa(o),u=1e3*Math.abs(i-n)+1*s;u<t&&(t=u,r=i)}return{left:e.slice(0,r),right:e.slice(r)}})(e);a.length>0&&(n=++this.#T,this.#k(a,n)),o.length>0&&(i=++this.#T,this.#k(o,i)),this.#b[t]={leftChildIndex:n,rightChildIndex:i,objectCount:e.length,AABBMax:r.max,AABBMin:r.min}}#P(){return this.#b.forEach(((e,t)=>{const r=t*sa,n=new ArrayBuffer(sa),i=new DataView(n);i.setInt32(0,e.leftChildIndex,!0),i.setInt32(4,e.rightChildIndex,!0),i.setUint32(8,e.objectCount,!0),i.setFloat32(16,e.AABBMin[0],!0),i.setFloat32(20,e.AABBMin[1],!0),i.setFloat32(24,e.AABBMin[2],!0),i.setFloat32(32,e.AABBMax[0],!0),i.setFloat32(36,e.AABBMax[1],!0),i.setFloat32(40,e.AABBMax[2],!0),this.#s.queue.writeBuffer(this.#S,r,n,0,sa)})),this.#S}}const ca={binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},la={binding:1,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},da={binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:ri}},fa={binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},ha={binding:4,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"3d"}},pa={binding:5,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},ma={binding:6,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},ga={binding:7,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},va={binding:8,visibility:GPUShaderStage.COMPUTE,sampler:{}},xa={binding:9,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},ya=[ca,la,da,fa,ha,pa,ma,ga,va,{binding:10,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:11,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:12,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:13,visibility:GPUShaderStage.COMPUTE,sampler:{}},{binding:14,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},{binding:15,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:16,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}},{binding:17,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:18,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float",viewDimension:"cube"}}],_a=async()=>(async({shaderCode:e,effectEntryPoint:t,compositeEntryPoint:r,downscale:n,label:i,workgroupSizeFactor:a=[1,1,1]})=>{if(!Number.isInteger(n))throw new Error("Downscale must be an integer");const o=Ua.createBindGroupLayout({entries:ya}),s=Ua.createBindGroupLayout({entries:[...ya,xa]}),u=`\nstruct Time {\n  frame: u32,\n  deltaTime: f32,\n  elapsed: f32\n};\n\n@group(0) @binding(0) var depthTex : texture_2d<f32>;\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\n@group(0) @binding(2) var outputTex : texture_storage_2d<${ri}, write>;\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(4) var voxels : texture_3d<f32>;\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(6) var<storage> voxelObjects : array<VoxelObject>;\n@group(0) @binding(7) var<uniform> sunDirection : vec3<f32>;\n@group(0) @binding(8) var linearSampler : sampler;\n@group(0) @binding(9) var intermediaryTexture : texture_2d<f32>;\n@group(0) @binding(10) var normalTex : texture_2d<f32>;\n@group(0) @binding(11) var blueNoiseTex : texture_2d<f32>;\n@group(0) @binding(12) var<uniform> time : Time;\n@group(0) @binding(13) var nearestSampler : sampler;\n@group(0) @binding(14) var velocityAndWaterTex : texture_2d<f32>;\n@group(0) @binding(15) var<storage> bvhNodes: array<BVHNode>;\n@group(0) @binding(16) var worldPosTex : texture_2d<f32>;\n@group(0) @binding(17) var albedoTex : texture_2d<f32>;\n@group(0) @binding(18) var skyCube : texture_cube<f32>;\n\nconst DOWNSCALE = ${n};\n${vi}\n${gi}\n${mi}\n${di}\n${fi}\n${hi}\n${pi}\n${e}`,c=Ua.createComputePipeline({label:i,layout:Ua.createPipelineLayout({bindGroupLayouts:[o]}),compute:{module:Ua.createShaderModule({code:u}),entryPoint:t}}),l=Ua.createComputePipeline({label:`${i} - composite`,layout:Ua.createPipelineLayout({bindGroupLayouts:[s]}),compute:{module:Ua.createShaderModule({code:u}),entryPoint:r}});let d,f,h=Ua.createSampler({magFilter:"nearest",minFilter:"nearest"}),p=Ua.createSampler({magFilter:"linear",minFilter:"linear"});return{render:({outputTextures:e,timestampWrites:t,viewProjectionMatricesBuffer:r,volumeAtlas:i,cameraPositionBuffer:u,transformationMatrixBuffer:m,sunDirectionBuffer:g,blueNoiseTexture:v,timeBuffer:x,bvhBuffer:y,commandEncoder:_})=>{d||(d=Ua.createTexture({size:[e.finalTexture.width,e.finalTexture.height,1],format:e.finalTexture.format,usage:e.finalTexture.usage})),f||(f=Ua.createTexture({size:[e.finalTexture.width/n,e.finalTexture.height/n,1],format:e.finalTexture.format,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING})),_.copyTextureToTexture({texture:e.finalTexture.texture},{texture:d},{width:e.finalTexture.width,height:e.finalTexture.height,depthOrArrayLayers:1});const b=[{binding:0,resource:e.depthTexture.view},{binding:1,resource:d.createView()},{binding:3,resource:{buffer:r}},{binding:4,resource:i.atlasTextureView},{binding:5,resource:{buffer:u}},{binding:6,resource:{buffer:m}},{binding:7,resource:{buffer:g}},{binding:8,resource:p},{binding:10,resource:e.normalTexture.view},{binding:11,resource:v.createView()},{binding:12,resource:{buffer:x}},{binding:13,resource:h},{binding:14,resource:e.velocityTexture.view},{binding:15,resource:{buffer:y}},{binding:16,resource:e.worldPositionTexture.view},{binding:17,resource:e.albedoTexture.view},{binding:18,resource:e.skyTexture.createView({dimension:"cube"})}],w={layout:o,entries:[...b,{binding:2,resource:f.createView()}]},T={layout:s,entries:[...b,{binding:2,resource:e.finalTexture.view},{binding:9,resource:f.createView()}]},S=Ua.createBindGroup(w),k=Ua.createBindGroup(T),P=_.beginComputePass({timestampWrites:t});return P.setPipeline(c),P.setBindGroup(0,S),P.dispatchWorkgroups(Math.ceil(f.width/8/a[0]),Math.ceil(f.height/8/a[1])),P.setPipeline(l),P.setBindGroup(0,k),P.dispatchWorkgroups(Math.ceil(e.finalTexture.width/8),Math.ceil(e.finalTexture.height/8)),P.end(),[_.finish()]},label:i}})({shaderCode:"\r\nconst BLUE_NOISE_SIZE = 511;\r\nconst MAX_DISTANCE = 40.0;\r\nconst START_DISTANCE = 0.0;\r\nconst EXTINCTION = vec3(.06, .04, .03);\r\nconst FORWARD_SCATTER = 0.15;\r\nconst STEPS = 8.0;\r\nconst NEAR  = 0.5;\r\nconst FAR = 10000.0;\r\nconst LIGHT_INTENSITY = 24.0;\r\n\r\nfn henyeyGreenstein(cosTheta: f32, g: f32) -> f32 {\r\n  let g2 = g * g;\r\n  return (1.0 - g2) / pow(1.0 + g2 - 2.0 * g * cosTheta, 1.5) / 4.0;\r\n}\r\n\r\nfn beerLambertLaw(distance: f32, extinction: f32) -> f32 {\r\n  return exp(-distance * extinction);\r\n}\r\n\r\nfn screenBlend(base: vec4<f32>, blend: vec4<f32>) -> vec4<f32> {\r\n  return vec4<f32>(1.0) - (vec4<f32>(1.0) - blend) * (vec4<f32>(1.0) - base);\r\n}\r\n\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  var pixel = GlobalInvocationID.xy;\r\n  let uv = vec2<f32>(pixel) / vec2<f32>(textureDimensions(outputTex));\r\n  let gBufferPixel = pixel * DOWNSCALE;\r\n  let depthSample = textureLoad(depthTex, gBufferPixel, 0).r;\r\n  let normalSample = textureLoad(normalTex, gBufferPixel, 0).xyz;\r\n  let distanceFromCamera = min(depthSample * (FAR - NEAR) + NEAR, MAX_DISTANCE);\r\n  var stepLength = distanceFromCamera / STEPS;\r\n  let rayDir = calculateRayDirection(uv,viewProjections.inverseViewProjection);\r\n  var blueNoisePixel = (vec2<i32>(pixel)) % BLUE_NOISE_SIZE;\r\n  let blueNoiseSample = textureLoad(blueNoiseTex, blueNoisePixel, 0).rg;\r\n  let startDistance = START_DISTANCE + random(blueNoiseSample) * stepLength;\r\n  let rayOrigin = cameraPosition + rayDir * startDistance;\r\n  var inScattering = vec3<f32>(0.0);\r\n  var volColour = vec3(0.0);\r\n  var absorption = vec3(1.0);\r\n  var stepAbsorption = exp(-EXTINCTION * stepLength);\r\n  var stepColour = vec3(1.0 - stepAbsorption) * henyeyGreenstein(dot(rayDir, sunDirection), FORWARD_SCATTER);\r\n  var positionAlongRay = rayOrigin;\r\n  for(var i = 0; i < i32(STEPS); i++){\r\n   positionAlongRay += rayDir * stepLength;\r\n   absorption *= stepAbsorption;\r\n   var directLight = LIGHT_INTENSITY;\r\n   if(rayMarchBVHShadows(positionAlongRay, sunDirection,1).hit){\r\n      directLight = 0.0;\r\n    }\r\n    volColour += stepColour * absorption * directLight;\r\n  }\r\n  textureStore(outputTex, pixel, vec4<f32>(volColour, 1.0));\r\n}\r\n\r\nconst BLUR_SAMPLE_POSITIONS_AND_GAUSSIAN_WEIGHTS: array<vec3<f32>, 9> = array<vec3<f32>, 9>(\r\n  vec3<f32>(0.0, 0.0, 4.0 / 16.0),\r\n  vec3<f32>(1.0, 0.0, 2.0 / 16.0),\r\n  vec3<f32>(-1.0, 0.0, 2.0 / 16.0),\r\n  vec3<f32>(0.0, 1.0, 2.0 / 16.0),\r\n  vec3<f32>(0.0, -1.0, 2.0 / 16.0),\r\n  vec3<f32>(1.0, 1.0, 1.0 / 16.0),\r\n  vec3<f32>(-1.0, 1.0, 1.0 / 16.0),\r\n  vec3<f32>(1.0, -1.0, 1.0 / 16.0),\r\n  vec3<f32>(-1.0, -1.0, 1.0 / 16.0),\r\n);\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn composite(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let texSize = textureDimensions(outputTex);\r\n  let fogTexelSize = 1.0 / vec2<f32>(textureDimensions(intermediaryTexture));\r\n  let fogSampleUV = vec2<f32>(GlobalInvocationID.xy) / vec2<f32>(texSize);\r\n  let colourSample = textureLoad(inputTex, GlobalInvocationID.xy, 0).rgb;\r\n  var totalFog = vec3(0.0);\r\n  for(var i = 0; i < 9; i++){\r\n    let fogAmount = textureSampleLevel(intermediaryTexture, linearSampler, fogSampleUV + BLUR_SAMPLE_POSITIONS_AND_GAUSSIAN_WEIGHTS[i].xy * fogTexelSize, 0.0);\r\n    totalFog += fogAmount.rgb * BLUR_SAMPLE_POSITIONS_AND_GAUSSIAN_WEIGHTS[i].z;\r\n  }\r\n  let output = (totalFog + colourSample).rgb;\r\n  textureStore(outputTex, GlobalInvocationID.xy, vec4(output, 1));\r\n}",effectEntryPoint:"main",compositeEntryPoint:"composite",downscale:4,label:"fog"}),ba=e=>{const[t,r,n]=e,i=[0,0,0,1],a=[t,0,0,1],o=[0,r,0,1],s=[t,r,0,1],u=[0,0,n,1],c=[t,0,n,1],l=[0,r,n,1],d=[t,r,n,1];let f=[i,a,o,o,a,s].flat(),h=[u,l,c,c,l,d].flat(),p=[o,s,l,l,s,d].flat(),m=[i,u,a,a,u,c].flat(),g=[a,c,s,s,c,d].flat(),v=[i,o,u,u,o,l].flat();return new Float32Array([...f,...h,...p,...m,...g,...v])},wa=async()=>{const e=Ua.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:2,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float",viewDimension:"3d"}},{binding:4,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:5,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:6,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"float",viewDimension:"2d"}}]}),t=Ua.createPipelineLayout({bindGroupLayouts:[e]}),r=Ua.createRenderPipeline({layout:t,vertex:{module:Ua.createShaderModule({code:`\n        ${mi}\n        struct VoxelObject {\r\n  transform: mat4x4<f32>,\r\n  inverseTransform: mat4x4<f32>,\r\n  previousTransform: mat4x4<f32>,\r\n  previousInverseTransform: mat4x4<f32>,\r\n  size : vec3<f32>,\r\n  atlasLocation : vec3<f32>,\r\n  paletteIndex : f32,\r\n}\r\n\r\n@binding(0) @group(0) var<uniform> modelViewProjectionMatrix : mat4x4f;\r\n@group(0) @binding(4) var<storage> voxelObject : VoxelObject;\r\n\r\nstruct VertexOutput {\r\n  @builtin(position) position : vec4f,\r\n  @location(0) objectPos : vec3f,\r\n  @location(1) worldPos : vec3f,\r\n  @location(2) @interpolate(linear) ndc : vec3f,\r\n}\r\n\r\n@vertex\r\nfn main(\r\n  @location(0) objectPos : vec4f,\r\n) -> VertexOutput {\r\n  var output : VertexOutput;\r\n  var clipPosition = modelViewProjectionMatrix * objectPos;\r\n//  clipPosition.z = -clipPosition.z;\r\n  output.position = clipPosition;\r\n  output.worldPos = (voxelObject.transform * objectPos).xyz;\r\n  output.objectPos = objectPos.xyz;\r\n  output.ndc = clipPosition.xyz / clipPosition.w;\r\n  output.ndc.y = -output.ndc.y;\r\n  return output;\r\n}\r\n`}),entryPoint:"main",buffers:[{arrayStride:16,attributes:[{shaderLocation:0,offset:0,format:"float32x4"}]}]},fragment:{module:Ua.createShaderModule({code:`\n        ${mi}\n        ${di}\n        ${fi}\n        struct ViewProjectionMatrices {\r\n  viewProjection : mat4x4<f32>,\r\n  previousViewProjection : mat4x4<f32>,\r\n  inverseViewProjection : mat4x4<f32>,\r\n  projection : mat4x4<f32>,\r\n  inverseProjection: mat4x4<f32>\r\n};\r\n\r\n@group(0) @binding(2) var<uniform> viewProjections : ViewProjectionMatrices;\r\n@group(0) @binding(3) var voxels : texture_3d<f32>;\r\n@group(0) @binding(4) var<storage> voxelObject : VoxelObject;\r\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\r\n@group(0) @binding(6) var palette : texture_2d<f32>;\r\n\r\n\r\nconst IDENTITY_MATRIX = mat4x4<f32>(\r\n  vec4<f32>(1.0, 0.0, 0.0, 0.0),\r\n  vec4<f32>(0.0, 1.0, 0.0, 0.0),\r\n  vec4<f32>(0.0, 0.0, 1.0, 0.0),\r\n  vec4<f32>(0.0, 0.0, 0.0, 1.0)\r\n);\r\n\r\nstruct GBufferOutput {\r\n  @location(0) albedo : vec4f,\r\n  @location(1) normal : vec4f,\r\n  @location(2) worldPosition : vec4f,\r\n  @location(3) velocity : vec4f,\r\n  @builtin(frag_depth) depth : f32,\r\n}\r\n\r\nfn getVelocity(objectPos: vec3<f32>, modelMatrix: mat4x4<f32>, previousModelMatrix: mat4x4<f32>, viewProjections: ViewProjectionMatrices) -> vec3<f32> {\r\n  let vp = viewProjections.viewProjection;\r\n  let previousVp = viewProjections.previousViewProjection;\r\n\r\n  // Get current object space position of the current pixel\r\n  let objectClipSpace = vp * modelMatrix * vec4(objectPos.xyz, 1.0);\r\n  let objectNDC = objectClipSpace.xyz / objectClipSpace.w;\r\n\r\n  // Get previous position of the current object space position\r\n  let previousObjectClipSpace = previousVp * previousModelMatrix * vec4(objectPos.xyz, 1.0);\r\n  let previousObjectNDC = previousObjectClipSpace.xyz / previousObjectClipSpace.w;\r\n\r\n  // Get velocity based on the difference between the current and previous positions\r\n  var velocity = previousObjectNDC - objectNDC;\r\n  velocity.y = -velocity.y;\r\n  return velocity;\r\n}\r\n\r\n@fragment\r\nfn main(\r\n\r\n//  @location(0) objectPos : vec3f,\r\n//   @location(1) worldPos : vec3f,\r\n    @location(2) @interpolate(linear) ndc : vec3f\r\n) -> GBufferOutput\r\n {\r\n    var output : GBufferOutput;\r\n    var screenUV = ndc.xy * 0.5 + 0.5;\r\n    var inverseViewProjection = viewProjections.inverseViewProjection;\r\n    let rayDirection = calculateRayDirection(screenUV,inverseViewProjection);\r\n\r\n    var objectRayOrigin = (voxelObject.inverseTransform * vec4<f32>(cameraPosition, 1.0)).xyz;\r\n\r\n    let isInBounds = all(objectRayOrigin >= vec3(0.0)) && all(objectRayOrigin <= voxelObject.size - vec3(1));\r\n\r\n    let objectRayDirection = (voxelObject.inverseTransform * vec4<f32>(rayDirection, 0.0)).xyz;\r\n    var tNear = 0.0;\r\n    if(!isInBounds){\r\n      tNear = boxIntersection(objectRayOrigin, objectRayDirection, voxelObject.size * 0.5).tNear - 0.00001;\r\n    }\r\n    var worldPos = transformPosition(voxelObject.transform, objectRayOrigin + objectRayDirection * tNear);\r\n    var result = rayMarchOctree(voxelObject, rayDirection, worldPos, 2);\r\n//    var result = rayMarchTransformed(voxelObject, rayDirection, worldPos, 0);\r\n    if(!result.hit){\r\n      discard;\r\n      return output;\r\n    }\r\n\r\n\r\n    let objectPos = objectRayOrigin + objectRayDirection * result.t;\r\n    let paletteX = i32(result.palettePosition * 255.0);\r\n    let paletteY = i32(voxelObject.paletteIndex);\r\n    let albedo = textureLoad(palette, vec2(paletteX, paletteY), 0).rgb;\r\n    output.albedo =  vec4(albedo, 1.0);\r\n    output.normal = vec4(result.normal, 1);\r\n    output.worldPosition = vec4(result.worldPos, 1);\r\n    output.velocity = vec4(getVelocity(result.objectPos, voxelObject.transform, voxelObject.previousTransform, viewProjections), 1);\r\n\r\n    let raymarchedDistance = length(result.worldPos - cameraPosition);\r\n\r\n    let near = 0.5;\r\n    let far = 10000.0;\r\n    let linearDepth = normaliseValue(near, far, raymarchedDistance);\r\n    output.depth = linearDepth;\r\n    return output;\r\n}\n        `}),entryPoint:"main",targets:[{format:"rgba8unorm"},{format:"rgba16float"},{format:"rgba32float"},{format:"rgba16float"}]},primitive:{topology:"triangle-list",cullMode:"front"},depthStencil:{depthWriteEnabled:!0,depthCompare:"less",format:"depth32float"}});return{render:({commandEncoder:t,outputTextures:n,transformationMatrixBuffer:i,volumeAtlas:a,viewProjectionMatricesBuffer:o,timestampWrites:s,cameraPositionBuffer:u})=>{const c=na,l=[{view:n.albedoTexture.view,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:n.normalTexture.view,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:n.worldPositionTexture.view,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"},{view:n.velocityTexture.view,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],d={view:n.depthTexture.view,depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"},f=Ua.createBuffer({size:576*c.length,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,label:"vertices buffer"}),h=Ua.createBuffer({size:256*c.length,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"mvp buffer"}),p=Ua.createBuffer({size:512*c.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"voxel objects in raster"});let m=[];for(let t=0;t<c.length;t++){const r=Ua.createBindGroup({layout:e,entries:[{binding:0,resource:{buffer:h,offset:256*t}},{binding:2,resource:{buffer:o}},{binding:3,resource:a.atlasTextureView},{binding:4,resource:{buffer:p,offset:512*t}},{binding:5,resource:{buffer:u}},{binding:6,resource:a.paletteTextureView}]});m.push(r);const n=c[t],i=ye.mul(ye.scale(Va.projectionMatrix,[-1,1,1]),Va.viewMatrix),s=new Float32Array(ye.mul(i,n.transform));Ua.queue.writeBuffer(h,256*t,s.buffer,s.byteOffset,s.byteLength);const l=new Float32Array(n.toArray());Ua.queue.writeBuffer(p,512*t,l.buffer,l.byteOffset,l.byteLength);const d=new Float32Array(ba(n.size));Ua.queue.writeBuffer(f,576*t,d.buffer,d.byteOffset,d.byteLength)}const g=t.beginRenderPass({colorAttachments:l,depthStencilAttachment:d,timestampWrites:s});g.setPipeline(r);for(let e=0;e<c.length;e++){const t=m[e];g.setVertexBuffer(0,f,576*e,576),g.setBindGroup(0,t),g.draw(36)}return g.end(),[t.finish()]},label:"hello triangle"}},Ta=async()=>{let e,t,r;const n=Ua.createComputePipeline({layout:"auto",compute:{module:Ua.createShaderModule({code:"// Helper function to compute luminance\r\nfn Luminance(color: vec3<f32>) -> f32 {\r\n    return dot(color, vec3<f32>(0.299, 0.587, 0.114));\r\n}\r\n\r\nfn rcp(x: f32) -> f32 {\r\n    return 1.0 / x;\r\n}\r\n\r\n@group(0) @binding(0) var CurrentColor : texture_2d<f32>;\r\n@group(0) @binding(1) var Velocity : texture_2d<f32>;\r\n@group(0) @binding(2) var HistoryWrite : texture_storage_2d<rgba16float, write>;\r\n@group(0) @binding(3) var HistoryRead : texture_2d<f32>;\r\n@group(0) @binding(5) var Depth : texture_2d<f32>;\r\n@group(0) @binding(6) var linearSampler : sampler;\r\n\r\nconst DEPTH_THRESHOLD : f32 = 0.0005;\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn main(\r\n    @builtin(global_invocation_id) id : vec3<u32>\r\n) {\r\n    let texSize = vec2<f32>(textureDimensions(CurrentColor));\r\n    let uv = (vec2<f32>(id.xy) + vec2(0.5)) / texSize;\r\n    let uvVelocity: vec2<f32> = textureLoad(Velocity, id.xy, 0).xy * vec2(0.5, -0.5);\r\n    let pixelVelocity: vec2<f32> = uvVelocity * texSize;\r\n    let previousPixel: vec2<i32> = vec2<i32>(id.xy) -  vec2<i32>(pixelVelocity);\r\n    let previousUv = uv - uvVelocity;\r\n\r\n    var sourceSample: vec3<f32> = textureSampleLevel(CurrentColor, linearSampler, uv, 0).rgb;\r\n    var historySample: vec3<f32> = textureSampleLevel(HistoryRead, linearSampler, previousUv, 0).rgb;\r\n\r\n    // Sample depth from the Depth texture\r\n    let depthSample: f32 = textureLoad(Depth, id.xy, 0).r;\r\n    let depthAtPreviousPixel: f32 = textureLoad(Depth, previousPixel, 0).r;\r\n\r\n    // Calculate depth difference between source and history samples\r\n    let depthDifference: f32 = abs(depthSample - depthAtPreviousPixel);\r\n\r\n    // Apply depth clamping\r\n    if (depthDifference > DEPTH_THRESHOLD) {\r\n        return;\r\n    }\r\n\r\n    // Clamp the history sample to the min and max of the 3x3 neighborhood\r\n    var minCol: vec3<f32> = sourceSample;\r\n    var maxCol: vec3<f32> = sourceSample;\r\n    for (var x: i32 = -1; x <= 1; x = x + 1) {\r\n        for (var y: i32 = -1; y <= 1; y = y + 1) {\r\n            let neighbourPixel = clamp(vec2(i32(id.x) + x, i32(id.y) + y), vec2(0), vec2(i32(texSize.x - 1), i32(texSize.y - 1)));\r\n            let s: vec3<f32> = textureLoad(CurrentColor, neighbourPixel, 0).rgb;\r\n            minCol = min(minCol, s);\r\n            maxCol = max(maxCol, s);\r\n        }\r\n    }\r\n\r\n    historySample = clamp(historySample, minCol, maxCol);\r\n    var sourceWeight: f32 = clamp(length(uvVelocity), 0.025, 1.0);\r\n    var historyWeight: f32 = 1.0 - sourceWeight;\r\n    let compressedSource: vec3<f32> = sourceSample * rcp(max(max(sourceSample.r, sourceSample.g), sourceSample.b) + 1.0);\r\n    let compressedHistory: vec3<f32> = historySample * rcp(max(max(historySample.r, historySample.g), historySample.b) + 1.0);\r\n    let luminanceSource: f32 = Luminance(compressedSource);\r\n    let luminanceHistory: f32 = Luminance(compressedHistory);\r\n    sourceWeight *= 1.0 / (1.0 + luminanceSource);\r\n    historyWeight *= 1.0 / (1.0 + luminanceHistory);\r\n    let result: vec3<f32> = (sourceSample * sourceWeight + historySample * historyWeight) / max(sourceWeight + historyWeight, 0.0001);\r\n\r\ntextureStore(HistoryWrite, id.xy, vec4<f32>(result, 1.0));\r\n\r\n}\r\n"}),entryPoint:"main"}});let i;return{render:({commandEncoder:a,timestampWrites:o,outputTextures:s})=>{e||(e=Ua.createTexture({label:"TAA History Texture",size:[Ra[0],Ra[1],1],format:ri,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST}),i=e.createView()),t||(t=Ua.createTexture({size:[Ra[0],Ra[1],1],format:ri,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST}),r=t.createView()),a.copyTextureToTexture({texture:s.finalTexture.texture},{texture:t},{width:t.width,height:t.height,depthOrArrayLayers:1});const u=a.beginComputePass({timestampWrites:o});u.setPipeline(n);const c=Ua.createBindGroup({layout:n.getBindGroupLayout(0),entries:[{binding:0,resource:r},{binding:1,resource:s.velocityTexture.view},{binding:2,resource:s.finalTexture.view},{binding:3,resource:i},{binding:5,resource:s.depthTexture.view},{binding:6,resource:Ua.createSampler({magFilter:"linear",minFilter:"linear",mipmapFilter:"linear"})}]});return u.setBindGroup(0,c),u.dispatchWorkgroups(Ra[0]/8,Ra[1]/8),u.end(),a.copyTextureToTexture({texture:s.finalTexture.texture},{texture:e},{width:e.width,height:e.height,depthOrArrayLayers:1}),[a.finish()]},label:"taa"}},Sa="clear",ka=async()=>{const e=Ua.createShaderModule({code:"\n    struct VertexOutput {\n      @builtin(position) position : vec4f,\n    }\n    @vertex\n    fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n      var output : VertexOutput;\n      return output;\n    }\n    @fragment\n    fn fragment_main(@builtin(position) position : vec4f) -> @location(0) vec4<f32> {\n        return vec4(0.0);\n    }"}),t=Ua.createRenderPipeline({label:Sa,layout:"auto",vertex:{module:e,entryPoint:"vertex_main"},fragment:{module:e,entryPoint:"fragment_main",targets:[{format:ri}]}});return{render:e=>{const r=e.commandEncoder.beginRenderPass({label:Sa,timestampWrites:e.timestampWrites,colorAttachments:[{view:e.outputTextures.finalTexture.view,loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});return r.setPipeline(t),r.draw(6),r.end(),[e.commandEncoder.finish()]},label:Sa}},Pa=async()=>(async({shaderCode:e,entryPoint:t,label:r})=>{const n=Ua.createBindGroupLayout({entries:ya}),i=`\nstruct Time {\n  frame: u32,\n  deltaTime: f32\n};\n\n@group(0) @binding(0) var depthTex : texture_2d<f32>;\n@group(0) @binding(1) var inputTex : texture_2d<f32>;\n@group(0) @binding(2) var outputTex : texture_storage_2d<${ri}, write>;\n@group(0) @binding(3) var<uniform> viewProjections : ViewProjectionMatrices;\n@group(0) @binding(4) var voxels : texture_3d<f32>;\n@group(0) @binding(5) var<uniform> cameraPosition : vec3<f32>;\n@group(0) @binding(6) var<storage> voxelObjects : array<VoxelObject>;\n@group(0) @binding(7) var<uniform> sunDirection : vec3<f32>;\n@group(0) @binding(8) var linearSampler : sampler;\n@group(0) @binding(10) var normalTex : texture_2d<f32>;\n@group(0) @binding(11) var blueNoiseTex : texture_2d<f32>;\n@group(0) @binding(12) var<uniform> time : Time;\n@group(0) @binding(13) var nearestSampler : sampler;\n@group(0) @binding(14) var velocityAndWaterTex : texture_2d<f32>;\n@group(0) @binding(15) var<storage> bvhNodes: array<BVHNode>;\n@group(0) @binding(16) var worldPosTex : texture_2d<f32>;\n@group(0) @binding(17) var albedoTex : texture_2d<f32>;\n@group(0) @binding(18) var skyCube : texture_cube<f32>;\n\n${vi}\n${gi}\n${mi}\n${di}\n${fi}\n${hi}\n${pi}\n${e}`,a=Ua.createComputePipeline({layout:Ua.createPipelineLayout({bindGroupLayouts:[n]}),compute:{module:Ua.createShaderModule({code:i}),entryPoint:t}});let o,s=Ua.createSampler({magFilter:"nearest",minFilter:"nearest"}),u=Ua.createSampler({magFilter:"linear",minFilter:"linear"});return{render:({outputTextures:e,timestampWrites:t,viewProjectionMatricesBuffer:r,volumeAtlas:i,cameraPositionBuffer:c,transformationMatrixBuffer:l,sunDirectionBuffer:d,blueNoiseTexture:f,timeBuffer:h,bvhBuffer:p})=>{o||(o=Ua.createTexture({size:[e.finalTexture.width,e.finalTexture.height,1],format:e.finalTexture.format,usage:e.finalTexture.usage}));const m=Ua.createCommandEncoder();m.copyTextureToTexture({texture:e.finalTexture.texture},{texture:o},{width:e.finalTexture.width,height:e.finalTexture.height,depthOrArrayLayers:1});const g=[{binding:0,resource:e.depthTexture.view},{binding:1,resource:o.createView()},{binding:2,resource:e.finalTexture.view},{binding:3,resource:{buffer:r}},{binding:4,resource:i.atlasTextureView},{binding:5,resource:{buffer:c}},{binding:6,resource:{buffer:l}},{binding:7,resource:{buffer:d}},{binding:8,resource:u},{binding:10,resource:e.normalTexture.view},{binding:11,resource:f.createView()},{binding:12,resource:{buffer:h}},{binding:13,resource:s},{binding:14,resource:e.velocityTexture.view},{binding:15,resource:{buffer:p}},{binding:16,resource:e.worldPositionTexture.view},{binding:17,resource:e.albedoTexture.view},{binding:18,resource:e.skyTexture.createView({dimension:"cube"})}],v={layout:n,entries:g},x=Ua.createBindGroup(v),y=m.beginComputePass({timestampWrites:t});return y.setPipeline(a),y.setBindGroup(0,x),y.dispatchWorkgroups(Math.ceil(e.finalTexture.width/8),Math.ceil(e.finalTexture.height/8)),y.end(),[m.finish()]},label:r}})({shaderCode:"fn uncharted2_tonemap_partial(x: vec3<f32>) -> vec3<f32>\r\n{\r\n    let A = 0.15f;\r\n    let B = 0.50f;\r\n    let C = 0.10f;\r\n    let D = 0.20f;\r\n    let E = 0.02f;\r\n    let F = 0.30f;\r\n    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\r\n}\r\n\r\nfn luminance(v: vec3<f32>) -> f32\r\n{\r\n    return dot(v, vec3(0.2126f, 0.7152f, 0.0722f));\r\n}\r\n\r\nfn aces(v: vec3<f32>) -> vec3<f32>\r\n{\r\n    let a = 2.51f;\r\n    let b = 0.03f;\r\n    let c = 2.43f;\r\n    let d = 0.59f;\r\n    let e = 0.14f;\r\n    return clamp((v*(a*v+b))/(v*(c*v+d)+e), vec3(0.0), vec3(1.0f));\r\n}\r\n\r\nfn uncharted2_filmic(v: vec3<f32>) -> vec3<f32>\r\n{\r\n    let exposure_bias = 0.15f;\r\n    let curr = uncharted2_tonemap_partial(v * exposure_bias);\r\n\r\n    let W = vec3(11.2f);\r\n    let white_scale = vec3(1.0f) / uncharted2_tonemap_partial(W);\r\n    return curr * white_scale;\r\n}\r\n\r\nfn reinhard_jodie(v: vec3<f32>) -> vec3<f32>\r\n{\r\n    let l = luminance(v);\r\n    let tv = v / (1.0f + v);\r\n    return mix(v / (1.0f + l), tv, tv);\r\n}\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\r\n) {\r\n  let pixel = GlobalInvocationID.xy;\r\n  let inputSample = textureLoad(inputTex, pixel, 0);\r\n  let toneMapped = uncharted2_filmic(inputSample.rgb);\r\n  textureStore(outputTex,pixel,vec4(toneMapped,1));\r\n}",entryPoint:"main",label:"tonemap"}),Ma=async()=>{const e=Ua.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:ri}},{binding:2,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"unfilterable-float"}}]}),t=Ua.createComputePipeline({label:"bloom threshold",layout:Ua.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:Ua.createShaderModule({code:`\n        @group(0) @binding(0) var inputTex : texture_2d<f32>;\n        @group(0) @binding(1) var outputTex : texture_storage_2d<${ri}, write>;\n        @group(0) @binding(2) var depthTex : texture_2d<f32>;\n        \n        const DOWNSCALE_FACTOR = 2;\n        \n        @compute @workgroup_size(8, 8, 1)\n        fn main(\n          @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n        ) {\n            let gBufferPixel = vec2<i32>(GlobalInvocationID.xy) * DOWNSCALE_FACTOR;\n            let bloomPixel = vec2<i32>(GlobalInvocationID.xy);\n            let color = textureLoad(inputTex, gBufferPixel, 0);\n            let depth = textureLoad(depthTex, gBufferPixel, 0).r;\n\n            let luminance = dot(color.rgb, vec3<f32>(0.2126, 0.7152, 0.0722));\n           \n            let threshold = 16.0;\n            let smoothedLuminance = smoothstep(threshold - 1.0, threshold, luminance);\n            let thresholded = mix(vec4<f32>(0.0), color, smoothedLuminance);\n            textureStore(outputTex,bloomPixel, thresholded);\n        }\n        `}),entryPoint:"main"}});let r,n,i,a,o,s,u;const c=(e=>{const t=Ua.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:ri}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{}}]}),r=Ua.createComputePipeline({label:"horizontal blur",layout:Ua.createPipelineLayout({bindGroupLayouts:[t]}),compute:{module:Ua.createShaderModule({code:`\n        @group(0) @binding(0) var inputTex : texture_2d<f32>;\n        @group(0) @binding(1) var outputTex : texture_storage_2d<${ri}, write>;\n        @group(0) @binding(2) var linearSampler : sampler;\n        @compute @workgroup_size(8, 8, 1)\n        fn main(\n          @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n        ) {\n            var sum = vec4<f32>(0.0);\n            let uv = vec2<f32>(GlobalInvocationID.xy) / vec2<f32>(textureDimensions(inputTex));\n            for(var i = -5; i <= 5; i++) {\n                let offset = vec2<f32>(f32(i) / f32(textureDimensions(inputTex).x), 0.0);\n                sum += textureSampleLevel(inputTex, linearSampler, uv + offset, 0.0);\n            }\n            textureStore(outputTex, GlobalInvocationID.xy, sum / f32(11));\n        }\n        `}),entryPoint:"main"}});return e=>{const n=Ua.createCommandEncoder(),i=n.beginComputePass(),a=Ua.createBindGroup({layout:t,entries:[{binding:0,resource:e.inputTextureView},{binding:1,resource:e.outputTextureView},{binding:2,resource:Ua.createSampler({magFilter:"linear",minFilter:"linear"})}]});return i.setPipeline(r),i.setBindGroup(0,a),i.dispatchWorkgroups(Math.ceil(e.inputTexture.width/8),Math.ceil(e.inputTexture.height/8),1),i.end(),n.finish()}})(),l=(e=>{const t=Ua.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:ri}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{}}]}),r=Ua.createComputePipeline({label:"vertical blur",layout:Ua.createPipelineLayout({bindGroupLayouts:[t]}),compute:{module:Ua.createShaderModule({code:`\n        @group(0) @binding(0) var inputTex : texture_2d<f32>;\n        @group(0) @binding(1) var outputTex : texture_storage_2d<${ri}, write>;\n        @group(0) @binding(2) var linearSampler : sampler;\n        @compute @workgroup_size(8, 8, 1)\n        fn main(\n          @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n        ) {\n           var sum = vec4<f32>(0.0);\n            let uv = vec2<f32>(GlobalInvocationID.xy) / vec2<f32>(textureDimensions(inputTex));\n            for(var i = -5; i <= 5; i++) {\n                let offset = vec2<f32>(0.0, f32(i) / f32(textureDimensions(inputTex).x) );\n                sum += textureSampleLevel(inputTex, linearSampler, uv + offset, 0.0);\n            }\n            textureStore(outputTex, GlobalInvocationID.xy, sum / f32(11));\n        }\n        `}),entryPoint:"main"}});return e=>{const n=Ua.createCommandEncoder(),i=n.beginComputePass(),a=Ua.createBindGroup({layout:t,entries:[{binding:0,resource:e.inputTextureView},{binding:1,resource:e.outputTextureView},{binding:2,resource:Ua.createSampler({magFilter:"linear",minFilter:"linear"})}]});return i.setPipeline(r),i.setBindGroup(0,a),i.dispatchWorkgroups(Math.ceil(e.inputTexture.width/8),Math.ceil(e.inputTexture.height/8),1),i.end(),n.finish()}})(),d=(()=>{const e=Ua.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:ri}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{}}]}),t=Ua.createComputePipeline({label:"downscale",layout:Ua.createPipelineLayout({bindGroupLayouts:[e]}),compute:{module:Ua.createShaderModule({code:`\n        @group(0) @binding(0) var inputTex : texture_2d<f32>;\n        @group(0) @binding(1) var outputTex : texture_storage_2d<${ri}, write>;\n        @group(0) @binding(2) var linearSampler : sampler;\n        @compute @workgroup_size(8, 8, 1)\n        fn main(\n          @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n        ) {\n            var sum = vec4<f32>(0.0);\n            let pixel = vec2<i32>(GlobalInvocationID.xy) * 2;\n            for(var i = 0; i < 2; i++) {\n                for(var j = 0; j < 2; j++) {\n                    sum += textureLoad(inputTex, vec2<i32>(pixel + vec2(i, j)), 0);\n                }\n            }\n            textureStore(outputTex, GlobalInvocationID.xy, sum / 4.0);\n        }\n        `}),entryPoint:"main"}});return r=>{const n=Ua.createCommandEncoder(),i=n.beginComputePass(),a=Ua.createBindGroup({layout:e,entries:[{binding:0,resource:r.inputTextureView},{binding:1,resource:r.outputTextureView},{binding:2,resource:Ua.createSampler({magFilter:"linear",minFilter:"linear"})}]});return i.setPipeline(t),i.setBindGroup(0,a),i.dispatchWorkgroups(Math.ceil(r.outputTexture.width/8),Math.ceil(r.outputTexture.height/8),1),i.end(),n.finish()}})(),f=((e=1)=>{const t=Ua.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:ri}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{}},{binding:3,visibility:GPUShaderStage.COMPUTE,texture:{sampleType:"float"}}]}),r=Ua.createComputePipeline({label:"blend",layout:Ua.createPipelineLayout({bindGroupLayouts:[t]}),compute:{module:Ua.createShaderModule({code:`\n        @group(0) @binding(0) var inputTex : texture_2d<f32>;\n        @group(0) @binding(1) var outputTex : texture_storage_2d<${ri}, write>;\n        @group(0) @binding(2) var linearSampler : sampler;\n        @group(0) @binding(3) var outputTexCopy : texture_2d<f32>;\n        @compute @workgroup_size(8, 8, 1)\n        fn main(\n          @builtin(global_invocation_id) GlobalInvocationID : vec3<u32>\n        ) {\n            var uv = vec2<f32>(GlobalInvocationID.xy) / vec2<f32>(textureDimensions(outputTex));\n            var total = vec4<f32>(0.0);\n            for(var mip = 6; mip >= 0; mip--) {\n                let mipTexelSize = 1.0 / vec2<f32>(textureDimensions(inputTex, mip));\n                // TODO: understand why i need two texels offset?\n                total += textureSampleLevel(inputTex, linearSampler, uv + mipTexelSize * 2, f32(mip));\n            }\n            total /= 7.0;\n            total *= ${e};\n            let current = textureLoad(outputTexCopy, GlobalInvocationID.xy, 0);\n            textureStore(outputTex, GlobalInvocationID.xy, total + current);\n        }\n        `}),entryPoint:"main"}});return e=>{const n=Ua.createCommandEncoder(),i=n.beginComputePass(),a=Ua.createBindGroup({layout:t,entries:[{binding:0,resource:e.inputTextureView},{binding:1,resource:e.outputTextureView},{binding:2,resource:Ua.createSampler({magFilter:"linear",minFilter:"linear"})},{binding:3,resource:e.outputTextureCopyView}]});return i.setPipeline(r),i.setBindGroup(0,a),i.dispatchWorkgroups(Math.ceil(e.outputTexture.width/8),Math.ceil(e.outputTexture.height/8),1),i.end(),n.finish()}})(.25);return{render:h=>{if(!i){const e={size:{width:h.outputTextures.finalTexture.width/2,height:h.outputTextures.finalTexture.height/2},format:ri,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING,mipLevelCount:8};i=Ua.createTexture(e),a=Ua.createTexture(e),o=Array.from({length:8},((e,t)=>i.createView({baseMipLevel:t,mipLevelCount:1}))),s=Array.from({length:7},((e,t)=>a.createView({baseMipLevel:t,mipLevelCount:1}))),u=i.createView(),r=Ua.createTexture({size:{width:h.outputTextures.finalTexture.width,height:h.outputTextures.finalTexture.height},format:ri,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.TEXTURE_BINDING}),n=r.createView()}const p=Ua.createCommandEncoder(),m=p.beginComputePass({timestampWrites:h.timestampWrites}),g=Ua.createBindGroup({layout:e,entries:[{binding:0,resource:h.outputTextures.finalTexture.view},{binding:1,resource:o[0]},{binding:2,resource:h.outputTextures.depthTexture.view}]});m.setPipeline(t),m.setBindGroup(0,g),m.dispatchWorkgroups(Math.ceil(h.outputTextures.finalTexture.width/8),Math.ceil(h.outputTextures.finalTexture.height/8),1),m.end(),p.copyTextureToTexture({texture:h.outputTextures.finalTexture.texture,mipLevel:0,origin:{x:0,y:0,z:0}},{texture:r,mipLevel:0,origin:{x:0,y:0,z:0}},{width:h.outputTextures.finalTexture.width,height:h.outputTextures.finalTexture.height,depthOrArrayLayers:1});const v=Array.from({length:6},((e,t)=>[c({inputTexture:i,inputTextureView:o[t],outputTexture:a,outputTextureView:s[t]}),l({inputTexture:a,inputTextureView:s[t],outputTexture:i,outputTextureView:o[t]}),d({inputTexture:i,inputTextureView:o[t],outputTexture:i,outputTextureView:o[t+1]})])).flat();return[p.finish(),...v,f({inputTexture:i,inputTextureView:u,outputTexture:h.outputTextures.finalTexture.texture,outputTextureView:h.outputTextures.finalTexture.view,outputTextureCopyView:n})]},label:"bloom"}},Ea=e=>{const[t,r,n]=e.split(" ").map(parseFloat);return[t,r,n,0]},Aa=async()=>(await(async(e,t)=>{const r=await fetch("luts/Fusion 88.CUBE"),n=(await r.text()).split("#LUT data points")[1].split("\n").slice(1,-1).map(Ea);e.createBuffer({label:"LUT buffer",size:4*n.length*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC}),console.log(n)})(Ua),{render:e=>[Ua.createCommandEncoder().finish()],label:"LUT"}),Oa=new class{#r;#M;#E;#A;constructor(){this.#r=new or(1),this.#M=new or(0),this.#E=new or(0),this.#A=new or(-3)}set targetScale(e){this.#r.target=e}set targetTranslateX(e){this.#M.target=e}set targetRotateY(e){this.#E.target=e}set targetSunRotateY(e){this.#A.target=e}get targetScale(){return this.#r.target}get targetTranslateX(){return this.#M.target}get targetRotateY(){return this.#E.target}get targetSunRotateY(){return this.#A.target}get sunRotateY(){return this.#A.value}get scale(){return this.#r.value}get translateX(){return this.#M.value}};let Ia,Ua,Ca,Da,za,Ra=U.create(4,4),Ba=0,Ga=Ba,La=0,Na=0,Va=new dr({fieldOfView:Math.PI/180*90,position:ne.create(-31,6,-50),direction:ne.create(0,0,-.5)});const ja=new class{logElement;isMouseDown=!1;constructor(){document.getElementById("reset").addEventListener("click",(e=>{window.dispatchEvent(new CustomEvent("resetcamera")),document.getElementById("captures").innerHTML=""})),document.getElementById("capture").addEventListener("click",(e=>{const t=new Image;t.id=performance.now().toString(),t.src=Da.toDataURL(),document.getElementById("captures").appendChild(t).addEventListener("click",(e=>{e.target,console.log(e.target)}))})),document.addEventListener("wheel",(e=>{Va.fieldOfView+=.001*e.deltaY,Va.fieldOfView=Math.max(Math.min(Va.fieldOfView,2),.1)})),["fov","scale","translate","sun"].forEach((e=>{document.getElementById(e).addEventListener("input",(t=>{const r=t.target;window.dispatchEvent(new CustomEvent(`change${e}`,{detail:r.value}))}))})),this.logElement=document.getElementById("log"),window.addEventListener("changefov",(e=>{Va.fieldOfView=parseFloat(e.detail)})),window.addEventListener("changetranslate",(e=>{Oa.targetTranslateX=.01*parseFloat(e.detail)})),window.addEventListener("changesun",(e=>{Oa.targetSunRotateY=parseFloat(e.detail)})),window.addEventListener("changescale",(e=>{Oa.targetScale=parseFloat(e.detail)})),window.addEventListener("resetcamera",(()=>{Oa.targetTranslateX=0,Oa.targetScale=1,Oa.targetRotateY=0})),document.getElementById("webgpu-canvas").addEventListener("mousedown",(()=>{this.isMouseDown=!0})),document.getElementById("webgpu-canvas").addEventListener("mouseup",(()=>{this.isMouseDown=!1})),document.getElementById("webgpu-canvas").addEventListener("mouseleave",(()=>{this.isMouseDown=!1})),window.addEventListener("mousemove",(e=>{this.isMouseDown&&(Oa.targetRotateY-=.005*e.movementX)}))}log(e){this.logElement.innerHTML=e}},Fa=(()=>{let e={};const t=t=>{const r=e[t];return r?r.reduce(((e,t)=>e+t))/r.length:0};return{addSample:(t,r)=>{e[t]||(e[t]=[]),e[t].push(r)>50&&e[t].shift()},clearEntry:t=>{e[t]&&(e[t]=[0])},toString:()=>Object.keys(e).map((e=>`${e}: ${t(e).toFixed(2)}ms`)).join("\n"),toHTML:()=>Object.keys(e).map((e=>`<div class="debug-row">\n                    <div>\n                        ${e}\n                    </div>\n                   <div>${t(e).toFixed(2)}ms</div>\n                </div>`)).join("\n")}})();let qa,Wa;Fa.addSample("frame time",0);const Ha=(e,t,r,n)=>{const i=Ua.createCommandEncoder();i.resolveQuerySet(t,0,t.count,r,0),n.push(i.finish());const a=r.size,o=Ua.createBuffer({size:a,label:"gpu read buffer",usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),s=Ua.createCommandEncoder();s.copyBufferToBuffer(r,0,o,0,a);const u=s.finish();Ua.queue.submit([u]),o.mapAsync(GPUMapMode.READ).then((()=>o.getMappedRange())).then((t=>{const r=new BigInt64Array(t),n=[];r.forEach((e=>{n.push(Number(e)/1e6)})),n.reduce(((e,t,r)=>(r%2==0&&e.push(n[r+1]-t),e)),[]).forEach(((t,r)=>{const n=e[r].label,i=`flag-${n}`,a=document.getElementById(i)?.checked;n&&a?Fa.addSample(n,t):Fa.clearEntry(n)}))}))};let Ya=Array.from({length:200}).map((()=>({position:[-80*Math.random(),50*Math.random(),-200*Math.random()],size:4,color:ne.normalize(ne.create(Math.random(),Math.random(),Math.random()))})));Ya=[{position:[-43.8,5.5,-36],size:2.2,color:ne.create(400,20,20)},{position:[-36,5.5,-36],size:2.2,color:ne.create(20,400,20)},{position:[-25,5.5,-36],size:2.2,color:ne.create(20,20,400)}];(async()=>{if(!navigator.gpu)return void console.error("WebGPU not supported");const e=await navigator.gpu.requestAdapter();if(!Ua)try{Ua=await e.requestDevice({requiredFeatures:["timestamp-query"],requiredLimits:{maxColorAttachmentBytesPerSample:64}})}catch(t){console.warn("Timestamp query or 64 byte colour attachment not supported, falling back"),Ua=await e.requestDevice()}Wa=Ua.createTexture({label:"sky texture",dimension:"2d",size:[512,512,6],format:ni,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING}),za=new li(Ua),await(async(e,t)=>{const r=await fetch("./Tavern.json"),n=(await r.json()).children.filter((e=>ia.includes(e.name))),i=new Set(n.map((e=>e.name))),a=Array.from(i);let o=e.createCommandEncoder();console.time("Load all volumes");{let r=await Promise.all(a.map((t=>(async(e,t,r)=>{console.time(`Fetch ${t}`);const n=await fetch(`./Tavern/${t}.vxm`);console.timeEnd(`Fetch ${t}`);const i=(e=>{console.time("convert vxm");const t=new ta(e);let r,n=[],i="",a=[];if(i=String.fromCodePoint(t.readUint8(),t.readUint8(),t.readUint8(),t.readUint8()),"VXMC"!==i&&"VXMA"!==i)throw new Error(`Incorrect magic: ${i}`);if(i[3].charCodeAt(0)>="0".charCodeAt(0)&&i[3].charCodeAt(0)<="9".charCodeAt(0))r=i[3].charCodeAt(0)-"0".charCodeAt(0);else{if(!(i[3].charCodeAt(0)>="A".charCodeAt(0)&&i[3].charCodeAt(0)<="C".charCodeAt(0)))throw new Error("Unsupported version found");r=10+i[3].charCodeAt(0)-"A".charCodeAt(0)}if(r<11||r>12)throw new Error(`Could not load vxm file: Unsupported version found (${r})`);let o=[0,0,0];o[0]=t.readUint32(),o[1]=t.readUint32(),o[2]=t.readUint32();let s=[.5,0,.5];if(s[0]=t.readFloat32(),s[1]=t.readFloat32(),s[2]=t.readFloat32(),t.readUint8()>0){let e=0,r=0;t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),t.readUint32(),e=t.readUint32(),r=t.readUint32();let n=e*r;t.skip(4*n)}r>=8&&t.skip(16);let u=t.readUint32();for(let e=0;e<u;++e){let e=t.readUint32(),r=t.readUint32();if(e>2048||r>2048)throw new Error("Size of texture exceeds the max allowed value");let n=t.readUint32();t.skip(n);for(let e=0;e<6;++e){let e=t.readUint32();e>262144&&console.warn(`Size of quads exceeds the max allowed value: ${e}`);let r=4*e*20;t.skip(r)}}t.skip(1024),t.skip(1024);let c=t.readUint8();for(let e=0;e<c;++e)t.skip(1024),t.readUint8(),t.readUint8();let l=t.readUint8();for(let e=0;e<l;++e){let r=t.readUint8(),i=t.readUint8(),a=t.readUint8(),o=t.readUint8();o=1===t.readUint8()?2:255,n[e]={r:a,g:i,b:r,a:o}}let d=1;r>=12&&(d=t.readUint8());let f={min:ne.create(9999,9999,9999),max:ne.create(0,0,0)};for(let e=0;e<d;++e){let n=0,i=!0,s="";if(r>=12){for(;;){const e=t.readUint8();if(ra(e))break;s=`${s}${String.fromCharCode(e)}`}i=t.readUint8()>0}else s=`Layer ${e}`;for(;;){let e=t.readUint8();if(0===e)break;let r=t.readUint8();if(255!==r)if(r>=l)n+=e;else{for(let t=n;t<n+e;t++){let e=Math.floor(t/(o[1]*o[2])),n=Math.floor(t/o[2]%o[1]),i=Math.floor(t%o[2]);f.min=ne.min(f.min,[e,n,i]),f.max=ne.max(f.max,[e,n,i]),a.push({x:e,y:n,z:i,c:r})}n+=e}else n+=e}}a=a.map((({x:e,y:t,z:r,c:n})=>({x:e-f.min[0],y:t-f.min[1],z:r-f.min[2],c:n})));const h=ne.sub(f.max,f.min);return console.log({bounds:f,trimmedSize:h}),console.timeEnd("convert vxm"),{VOX:a.length,SIZE:[h[0]+1,h[1]+1,h[2]+1],XYZI:a,RGBA:n}})(await n.arrayBuffer());console.time(`Create texture from voxels for ${t}`);let a=await(async(e,t)=>{const r=e.createTexture({size:{width:t.SIZE[0],height:t.SIZE[1],depthOrArrayLayers:t.SIZE[2]},format:ti,usage:GPUTextureUsage.COPY_SRC|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:4}),n=r.width*r.height*r.depthOrArrayLayers,i=e.createBuffer({size:4*n*4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.STORAGE}),a=e.createBuffer({size:256*t.SIZE[2],usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.UNIFORM,label:"voxels buffer"}),o=Array.from({length:t.SIZE[2]},((e,t)=>t));for(let t=0;t<o.length;t++)e.queue.writeBuffer(a,256*t,new Uint32Array([o[t]]).buffer);for(let r=0;r<t.XYZI.length;r++){const{x:n,y:a,z:o,c}=t.XYZI[r],l=(s=t.SIZE,(u=[n,a,o])[0]+u[1]*s[0]+u[2]*(s[0]*s[1]));e.queue.writeBuffer(i,16*l,new Uint32Array([n,a,o,c]).buffer)}var s,u;const c=e.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"storage"}}]}),l=e.createRenderPipeline({layout:e.createPipelineLayout({bindGroupLayouts:[c]}),vertex:{module:e.createShaderModule({code:"\n          struct VertexOutput {\n            @builtin(position) Position : vec4<f32>,\n          }\n          \n          @vertex\n          fn vertex_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n            const pos = array(\n              vec2( 1.0,  1.0),\n              vec2( 1.0, -1.0),\n              vec2(-1.0, -1.0),\n              vec2( 1.0,  1.0),\n              vec2(-1.0, -1.0),\n              vec2(-1.0,  1.0),\n            );\n            var output : VertexOutput;\n            output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n            return output;\n          }"}),entryPoint:"vertex_main"},fragment:{module:e.createShaderModule({code:"\n          @group(0) @binding(0) var<uniform> zIndex: u32;\n          @group(0) @binding(1) var<storage, read_write> voxelBuffer: array<vec4<u32>>;\n          \n          override sizeX: u32;\n          override sizeY: u32;\n          override sizeZ: u32;\n           \n          fn convert3DTo1D(size: vec3<u32>, position: vec3<u32>) -> u32 {\n            return position.x + position.y * size.x + position.z * (size.x * size.y);\n          }\n          \n          @fragment\n          fn fragment_main(@builtin(position) position : vec4<f32>) -> @location(0) vec4<f32> { \n            let voxelPosition = vec3(position.xy, f32(zIndex));\n            let voxelIndex = convert3DTo1D(vec3<u32>(sizeX, sizeY, sizeZ), vec3<u32>(voxelPosition));\n            let voxel = voxelBuffer[voxelIndex];\n            let normalisedPaletteIndex = f32(voxel.a) / 255.0;\n            return vec4(normalisedPaletteIndex,0,0,0);\n          }\n        "}),entryPoint:"fragment_main",targets:[{format:ti}],constants:{sizeX:t.SIZE[0],sizeY:t.SIZE[1],sizeZ:t.SIZE[2]}}}),d=e.createCommandEncoder();for(let t=0;t<r.depthOrArrayLayers;t++){const n=e.createBindGroup({label:"create-texture-from-voxels",layout:c,entries:[{binding:0,resource:{buffer:a,offset:256*t,size:4}},{binding:1,resource:{buffer:i}}]}),o=d.beginRenderPass({colorAttachments:[{view:r.createView({baseArrayLayer:t,arrayLayerCount:1,mipLevelCount:1,dimension:"2d"}),loadOp:"clear",clearValue:[0,0,0,0],storeOp:"store"}]});o.setPipeline(l),o.setBindGroup(0,n),o.draw(6),o.end()}return e.queue.submit([d.finish()]),await e.queue.onSubmittedWorkDone(),r})(r,i);console.timeEnd(`Create texture from voxels for ${t}`),console.time(`Create palette texture for ${t}`);const o=await(async(e,t)=>{const r=e.createTexture({size:{width:256,height:1},format:"rgba8unorm",usage:GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC,dimension:"2d",mipLevelCount:1}),n=e.createBuffer({label:"palette buffer",size:1024,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC});t.RGBA.forEach((({r:t,g:r,b:i,a},o)=>{const s=new Uint8Array([t,r,i,a]);e.queue.writeBuffer(n,4*o,s)}));const i=e.createCommandEncoder();return i.copyBufferToTexture({buffer:n},{texture:r},[255,1,1]),e.queue.submit([i.finish()]),r})(r,i);return console.timeEnd(`Create palette texture for ${t}`),{name:t,texture:a,palette:o}})(0,t,e))));for(const{name:n,texture:i,palette:a}of r)console.time(`Add volume for ${n}`),await t.addVolume(i,a,n),o=e.createCommandEncoder(),console.timeEnd(`Add volume for ${n}`)}console.timeEnd("Load all volumes");const s=t.dictionary;let u=[];for(const e of n){const t=s[e.name];if(!t)return void console.warn(`Volume not found for child ${e.name}, skipping...`);"Candle"===e.name&&u.push(e.position);const{position:r,rotation:n,scale:i,name:a}=e,{size:o,location:c,paletteIndex:l}=t;na.push(new ea({position:r,rotation:n,scale:i,size:o,atlasLocation:c,name:a,paletteIndex:l}))}console.log({volumes:s}),console.debug(`Tavern created with ${na.length} items`)})(Ua,za);const a=[ka(),wa(),Vi(),Ji(),Ta(),_a(),Ma(),Pa(),Aa(),hr(Ua)],o=await Promise.all(a);((e,a)=>{let o,s,u,c,l,d,f,h,p,m,g,v,x;Da=document.getElementById("webgpu-canvas"),Da.style.imageRendering="pixelated",Ca=Da.getContext("webgpu"),Ca.configure({device:e,format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT});let y,_,b=ye.create(),w=ye.create();e.features.has("timestamp-query")&&(y=e.createQuerySet({type:"timestamp",count:2*a.length}),_=e.createBuffer({label:"timestamp query",size:8*y.count,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}));const T=()=>{const{clientWidth:e,clientHeight:t}=Da.parentElement,r=U.create(1*e,1*t);Ra=U.mulScalar(r,1),Da.width=r[0],Da.height=r[1],Da.style.transform="scale(1)"};(async()=>{f||(f=await ei(e,"blue-noise-rg.png",{usage:GPUTextureUsage.COPY_SRC}))})(),x=new ua(e,na);const S=i(e,[0,0,0,0],"camera position");setInterval((()=>{ja.log(Fa.toHTML())}),500);const k=T=>{0===Ba&&(Ba=T);const P=T-Ba;if(La=P-Ga,Fa.addSample("frame time",La),Ga=P,Na++,(()=>{const t=[...Va.viewProjectionMatrix,...w,...Va.inverseViewProjectionMatrix,...b,...Va.projectionMatrix,...Va.inverseProjectionMatrix];g?n(g,t):g=i(e,t,"view matrices buffer")})(),(()=>{const t=na;document.getElementById("objectcount").innerHTML=`Objects: ${t.length} / ${na.length} in view`;const r=t.flatMap((e=>e.toArray()));m?n(m,r):(m=i(e,r,"voxel object"),m=e.createBuffer({size:new Float32Array(r).byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,mappedAtCreation:!1,label:"voxel objects transforms buffer"}))})(),!m||!f)return void(Ia=requestAnimationFrame(k));qe.updateAll(Na),x.update(na);const M=ye.getTranslation(Va.inverseViewMatrix);document.getElementById("resolution").innerHTML=Ra.join(" x "),h||(h=r([Na,0,0],"time buffer")),e.queue.writeBuffer(h,4,new Float32Array([La])),e.queue.writeBuffer(h,0,new Uint32Array([Na])),e.queue.writeBuffer(h,8,new Float32Array([Ga/1e3])),p?t(p,[Ra[0],Ra[1]]):p=r([Ra[0],Ra[1]]),(()=>{const e=ye.identity();ye.rotateY(e,Oa.sunRotateY,e);const t=ne.normalize(ne.transformMat4(ne.create(0,.4,-.8),e));v?n(v,[t[0],t[1],t[2]]):v=r([t[0],t[1],t[2]],"sun buffer")})(),n(S,M),s=new Yi(e,Ra[0],Ra[1]),o=new $i(e,Ra[0],Ra[1]),c=new Xi(e,Ra[0],Ra[1]),l=new Zi(e,Ra[0],Ra[1]),u=new Ki(e,Ra[0],Ra[1]),d=new Qi(e,Ra[0],Ra[1]);let E=[];qa=za.atlasTextureView,qa?(a.forEach(((t,r)=>{const{render:n,label:i}=t;if(!1===document.getElementById(`flag-${i}`)?.checked)return;const a=e.createCommandEncoder();let b;e.features.has("timestamp-query")&&a.clearBuffer(_),e.features.has("timestamp-query")&&(b={querySet:y,beginningOfPassWriteIndex:2*r,endOfPassWriteIndex:2*r+1}),x.update(na),n({commandEncoder:a,resolutionBuffer:p,timeBuffer:h,outputTextures:{finalTexture:u,albedoTexture:s,normalTexture:o,depthTexture:c,skyTexture:Wa,velocityTexture:l,worldPositionTexture:d},cameraPositionBuffer:S,volumeAtlas:za,transformationMatrixBuffer:m,viewProjectionMatricesBuffer:g,timestampWrites:b,sunDirectionBuffer:v,blueNoiseTexture:f,bvhBuffer:x.gpuBuffer,lights:Ya}).forEach((e=>{E.push(e)}))})),e.features.has("timestamp-query")&&Ha(a,y,_,E),e.queue.submit(E),Ia=requestAnimationFrame(k),b=Va.inverseViewProjectionMatrix,w=Va.viewProjectionMatrix):Ia=requestAnimationFrame(k)};T(),window.onresize=T,Ia=requestAnimationFrame(k)})(Ua,await Promise.all(o)),document.getElementById("flags").innerHTML=o.reduce(((e,t)=>{if(!t.label)return e;const r=`flag-${t.label}`;return`${e}<div class="debug-row">\n                    <label for="${r}">\n                        ${t.label}\n                    </label>\n                    <div>\n                        <input id="${r}" type="checkbox" checked>\n                   </div>\n                </div>`}),"")})()})();